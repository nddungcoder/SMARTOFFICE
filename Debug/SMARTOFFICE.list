
SMARTOFFICE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066e0  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08006810  08006810  00007810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba8  08006ba8  000081c8  2**0
                  CONTENTS
  4 .ARM          00000008  08006ba8  08006ba8  00007ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb0  08006bb0  000081c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb0  08006bb0  00007bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bb4  08006bb4  00007bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c8  20000000  08006bb8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001c8  08006d80  000081c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08006d80  00008520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000077d0  00000000  00000000  000081f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002632  00000000  00000000  0000f9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  00011ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000480  00000000  00000000  00012650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014031  00000000  00000000  00012ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c142  00000000  00000000  00026b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bc28  00000000  00000000  00032c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008e86b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000252c  00000000  00000000  0008e8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00090ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001c8 	.word	0x200001c8
 800014c:	00000000 	.word	0x00000000
 8000150:	080067f8 	.word	0x080067f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001cc 	.word	0x200001cc
 800016c:	080067f8 	.word	0x080067f8

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_frsub>:
 8000aa8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aac:	e002      	b.n	8000ab4 <__addsf3>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_fsub>:
 8000ab0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ab4 <__addsf3>:
 8000ab4:	0042      	lsls	r2, r0, #1
 8000ab6:	bf1f      	itttt	ne
 8000ab8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000abc:	ea92 0f03 	teqne	r2, r3
 8000ac0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac8:	d06a      	beq.n	8000ba0 <__addsf3+0xec>
 8000aca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ace:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad2:	bfc1      	itttt	gt
 8000ad4:	18d2      	addgt	r2, r2, r3
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	4048      	eorgt	r0, r1
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	2b19      	cmp	r3, #25
 8000ae2:	bf88      	it	hi
 8000ae4:	4770      	bxhi	lr
 8000ae6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000afe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4249      	negne	r1, r1
 8000b06:	ea92 0f03 	teq	r2, r3
 8000b0a:	d03f      	beq.n	8000b8c <__addsf3+0xd8>
 8000b0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b10:	fa41 fc03 	asr.w	ip, r1, r3
 8000b14:	eb10 000c 	adds.w	r0, r0, ip
 8000b18:	f1c3 0320 	rsb	r3, r3, #32
 8000b1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b24:	d502      	bpl.n	8000b2c <__addsf3+0x78>
 8000b26:	4249      	negs	r1, r1
 8000b28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b30:	d313      	bcc.n	8000b5a <__addsf3+0xa6>
 8000b32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b36:	d306      	bcc.n	8000b46 <__addsf3+0x92>
 8000b38:	0840      	lsrs	r0, r0, #1
 8000b3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3e:	f102 0201 	add.w	r2, r2, #1
 8000b42:	2afe      	cmp	r2, #254	@ 0xfe
 8000b44:	d251      	bcs.n	8000bea <__addsf3+0x136>
 8000b46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4e:	bf08      	it	eq
 8000b50:	f020 0001 	biceq.w	r0, r0, #1
 8000b54:	ea40 0003 	orr.w	r0, r0, r3
 8000b58:	4770      	bx	lr
 8000b5a:	0049      	lsls	r1, r1, #1
 8000b5c:	eb40 0000 	adc.w	r0, r0, r0
 8000b60:	3a01      	subs	r2, #1
 8000b62:	bf28      	it	cs
 8000b64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b68:	d2ed      	bcs.n	8000b46 <__addsf3+0x92>
 8000b6a:	fab0 fc80 	clz	ip, r0
 8000b6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b72:	ebb2 020c 	subs.w	r2, r2, ip
 8000b76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7a:	bfaa      	itet	ge
 8000b7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b80:	4252      	neglt	r2, r2
 8000b82:	4318      	orrge	r0, r3
 8000b84:	bfbc      	itt	lt
 8000b86:	40d0      	lsrlt	r0, r2
 8000b88:	4318      	orrlt	r0, r3
 8000b8a:	4770      	bx	lr
 8000b8c:	f092 0f00 	teq	r2, #0
 8000b90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b94:	bf06      	itte	eq
 8000b96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b9a:	3201      	addeq	r2, #1
 8000b9c:	3b01      	subne	r3, #1
 8000b9e:	e7b5      	b.n	8000b0c <__addsf3+0x58>
 8000ba0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba8:	bf18      	it	ne
 8000baa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bae:	d021      	beq.n	8000bf4 <__addsf3+0x140>
 8000bb0:	ea92 0f03 	teq	r2, r3
 8000bb4:	d004      	beq.n	8000bc0 <__addsf3+0x10c>
 8000bb6:	f092 0f00 	teq	r2, #0
 8000bba:	bf08      	it	eq
 8000bbc:	4608      	moveq	r0, r1
 8000bbe:	4770      	bx	lr
 8000bc0:	ea90 0f01 	teq	r0, r1
 8000bc4:	bf1c      	itt	ne
 8000bc6:	2000      	movne	r0, #0
 8000bc8:	4770      	bxne	lr
 8000bca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bce:	d104      	bne.n	8000bda <__addsf3+0x126>
 8000bd0:	0040      	lsls	r0, r0, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bd8:	4770      	bx	lr
 8000bda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bde:	bf3c      	itt	cc
 8000be0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000be4:	4770      	bxcc	lr
 8000be6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf2:	4770      	bx	lr
 8000bf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf8:	bf16      	itet	ne
 8000bfa:	4608      	movne	r0, r1
 8000bfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c00:	4601      	movne	r1, r0
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	bf06      	itte	eq
 8000c06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0a:	ea90 0f01 	teqeq	r0, r1
 8000c0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_ui2f>:
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e004      	b.n	8000c24 <__aeabi_i2f+0x8>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_i2f>:
 8000c1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	bf48      	it	mi
 8000c22:	4240      	negmi	r0, r0
 8000c24:	ea5f 0c00 	movs.w	ip, r0
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c30:	4601      	mov	r1, r0
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	e01c      	b.n	8000c72 <__aeabi_l2f+0x2a>

08000c38 <__aeabi_ul2f>:
 8000c38:	ea50 0201 	orrs.w	r2, r0, r1
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e00a      	b.n	8000c5c <__aeabi_l2f+0x14>
 8000c46:	bf00      	nop

08000c48 <__aeabi_l2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__aeabi_l2f+0x14>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	ea5f 0c01 	movs.w	ip, r1
 8000c60:	bf02      	ittt	eq
 8000c62:	4684      	moveq	ip, r0
 8000c64:	4601      	moveq	r1, r0
 8000c66:	2000      	moveq	r0, #0
 8000c68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c6c:	bf08      	it	eq
 8000c6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c76:	fabc f28c 	clz	r2, ip
 8000c7a:	3a08      	subs	r2, #8
 8000c7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c80:	db10      	blt.n	8000ca4 <__aeabi_l2f+0x5c>
 8000c82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c86:	4463      	add	r3, ip
 8000c88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c94:	fa20 f202 	lsr.w	r2, r0, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ca2:	4770      	bx	lr
 8000ca4:	f102 0220 	add.w	r2, r2, #32
 8000ca8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_fmul>:
 8000cc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ccc:	bf1e      	ittt	ne
 8000cce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd2:	ea92 0f0c 	teqne	r2, ip
 8000cd6:	ea93 0f0c 	teqne	r3, ip
 8000cda:	d06f      	beq.n	8000dbc <__aeabi_fmul+0xf8>
 8000cdc:	441a      	add	r2, r3
 8000cde:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce2:	0240      	lsls	r0, r0, #9
 8000ce4:	bf18      	it	ne
 8000ce6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cea:	d01e      	beq.n	8000d2a <__aeabi_fmul+0x66>
 8000cec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cf0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cf8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d00:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d04:	bf3e      	ittt	cc
 8000d06:	0049      	lslcc	r1, r1, #1
 8000d08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	ea40 0001 	orr.w	r0, r0, r1
 8000d12:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d16:	2afd      	cmp	r2, #253	@ 0xfd
 8000d18:	d81d      	bhi.n	8000d56 <__aeabi_fmul+0x92>
 8000d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d22:	bf08      	it	eq
 8000d24:	f020 0001 	biceq.w	r0, r0, #1
 8000d28:	4770      	bx	lr
 8000d2a:	f090 0f00 	teq	r0, #0
 8000d2e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d32:	bf08      	it	eq
 8000d34:	0249      	lsleq	r1, r1, #9
 8000d36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d3e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d40:	bfc2      	ittt	gt
 8000d42:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4a:	4770      	bxgt	lr
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	3a01      	subs	r2, #1
 8000d56:	dc5d      	bgt.n	8000e14 <__aeabi_fmul+0x150>
 8000d58:	f112 0f19 	cmn.w	r2, #25
 8000d5c:	bfdc      	itt	le
 8000d5e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d62:	4770      	bxle	lr
 8000d64:	f1c2 0200 	rsb	r2, r2, #0
 8000d68:	0041      	lsls	r1, r0, #1
 8000d6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d6e:	f1c2 0220 	rsb	r2, r2, #32
 8000d72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7a:	f140 0000 	adc.w	r0, r0, #0
 8000d7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d82:	bf08      	it	eq
 8000d84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d88:	4770      	bx	lr
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fmul+0xce>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fmul+0xe6>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e78f      	b.n	8000cdc <__aeabi_fmul+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	bf18      	it	ne
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d00a      	beq.n	8000de2 <__aeabi_fmul+0x11e>
 8000dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dd0:	bf18      	it	ne
 8000dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dd6:	d1d8      	bne.n	8000d8a <__aeabi_fmul+0xc6>
 8000dd8:	ea80 0001 	eor.w	r0, r0, r1
 8000ddc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	bf17      	itett	ne
 8000de8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dec:	4608      	moveq	r0, r1
 8000dee:	f091 0f00 	teqne	r1, #0
 8000df2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000df6:	d014      	beq.n	8000e22 <__aeabi_fmul+0x15e>
 8000df8:	ea92 0f0c 	teq	r2, ip
 8000dfc:	d101      	bne.n	8000e02 <__aeabi_fmul+0x13e>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	d10f      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e02:	ea93 0f0c 	teq	r3, ip
 8000e06:	d103      	bne.n	8000e10 <__aeabi_fmul+0x14c>
 8000e08:	024b      	lsls	r3, r1, #9
 8000e0a:	bf18      	it	ne
 8000e0c:	4608      	movne	r0, r1
 8000e0e:	d108      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e10:	ea80 0001 	eor.w	r0, r0, r1
 8000e14:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e20:	4770      	bx	lr
 8000e22:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e26:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_fdiv>:
 8000e2c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e34:	bf1e      	ittt	ne
 8000e36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3a:	ea92 0f0c 	teqne	r2, ip
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d069      	beq.n	8000f18 <__aeabi_fdiv+0xec>
 8000e44:	eba2 0203 	sub.w	r2, r2, r3
 8000e48:	ea80 0c01 	eor.w	ip, r0, r1
 8000e4c:	0249      	lsls	r1, r1, #9
 8000e4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e52:	d037      	beq.n	8000ec4 <__aeabi_fdiv+0x98>
 8000e54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e64:	428b      	cmp	r3, r1
 8000e66:	bf38      	it	cc
 8000e68:	005b      	lslcc	r3, r3, #1
 8000e6a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e6e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e72:	428b      	cmp	r3, r1
 8000e74:	bf24      	itt	cs
 8000e76:	1a5b      	subcs	r3, r3, r1
 8000e78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e80:	bf24      	itt	cs
 8000e82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e8e:	bf24      	itt	cs
 8000e90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	bf18      	it	ne
 8000eaa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eae:	d1e0      	bne.n	8000e72 <__aeabi_fdiv+0x46>
 8000eb0:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb2:	f63f af50 	bhi.w	8000d56 <__aeabi_fmul+0x92>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ec8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ecc:	327f      	adds	r2, #127	@ 0x7f
 8000ece:	bfc2      	ittt	gt
 8000ed0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ed4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ed8:	4770      	bxgt	lr
 8000eda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	3a01      	subs	r2, #1
 8000ee4:	e737      	b.n	8000d56 <__aeabi_fmul+0x92>
 8000ee6:	f092 0f00 	teq	r2, #0
 8000eea:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000eee:	bf02      	ittt	eq
 8000ef0:	0040      	lsleq	r0, r0, #1
 8000ef2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ef6:	3a01      	subeq	r2, #1
 8000ef8:	d0f9      	beq.n	8000eee <__aeabi_fdiv+0xc2>
 8000efa:	ea40 000c 	orr.w	r0, r0, ip
 8000efe:	f093 0f00 	teq	r3, #0
 8000f02:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0049      	lsleq	r1, r1, #1
 8000f0a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f0e:	3b01      	subeq	r3, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fdiv+0xda>
 8000f12:	ea41 010c 	orr.w	r1, r1, ip
 8000f16:	e795      	b.n	8000e44 <__aeabi_fdiv+0x18>
 8000f18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d108      	bne.n	8000f34 <__aeabi_fdiv+0x108>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	f47f af7d 	bne.w	8000e22 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	f47f af70 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e776      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f34:	ea93 0f0c 	teq	r3, ip
 8000f38:	d104      	bne.n	8000f44 <__aeabi_fdiv+0x118>
 8000f3a:	024b      	lsls	r3, r1, #9
 8000f3c:	f43f af4c 	beq.w	8000dd8 <__aeabi_fmul+0x114>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e76e      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f44:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f48:	bf18      	it	ne
 8000f4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f4e:	d1ca      	bne.n	8000ee6 <__aeabi_fdiv+0xba>
 8000f50:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f54:	f47f af5c 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f58:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f5c:	f47f af3c 	bne.w	8000dd8 <__aeabi_fmul+0x114>
 8000f60:	e75f      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f62:	bf00      	nop

08000f64 <__gesf2>:
 8000f64:	f04f 3cff 	mov.w	ip, #4294967295
 8000f68:	e006      	b.n	8000f78 <__cmpsf2+0x4>
 8000f6a:	bf00      	nop

08000f6c <__lesf2>:
 8000f6c:	f04f 0c01 	mov.w	ip, #1
 8000f70:	e002      	b.n	8000f78 <__cmpsf2+0x4>
 8000f72:	bf00      	nop

08000f74 <__cmpsf2>:
 8000f74:	f04f 0c01 	mov.w	ip, #1
 8000f78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f88:	bf18      	it	ne
 8000f8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f8e:	d011      	beq.n	8000fb4 <__cmpsf2+0x40>
 8000f90:	b001      	add	sp, #4
 8000f92:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f96:	bf18      	it	ne
 8000f98:	ea90 0f01 	teqne	r0, r1
 8000f9c:	bf58      	it	pl
 8000f9e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fa2:	bf88      	it	hi
 8000fa4:	17c8      	asrhi	r0, r1, #31
 8000fa6:	bf38      	it	cc
 8000fa8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fac:	bf18      	it	ne
 8000fae:	f040 0001 	orrne.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	d102      	bne.n	8000fc0 <__cmpsf2+0x4c>
 8000fba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fbe:	d105      	bne.n	8000fcc <__cmpsf2+0x58>
 8000fc0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fc4:	d1e4      	bne.n	8000f90 <__cmpsf2+0x1c>
 8000fc6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fca:	d0e1      	beq.n	8000f90 <__cmpsf2+0x1c>
 8000fcc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_cfrcmple>:
 8000fd4:	4684      	mov	ip, r0
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	4661      	mov	r1, ip
 8000fda:	e7ff      	b.n	8000fdc <__aeabi_cfcmpeq>

08000fdc <__aeabi_cfcmpeq>:
 8000fdc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fde:	f7ff ffc9 	bl	8000f74 <__cmpsf2>
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	bf48      	it	mi
 8000fe6:	f110 0f00 	cmnmi.w	r0, #0
 8000fea:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fec <__aeabi_fcmpeq>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff fff4 	bl	8000fdc <__aeabi_cfcmpeq>
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2001      	moveq	r0, #1
 8000ff8:	2000      	movne	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmplt>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffea 	bl	8000fdc <__aeabi_cfcmpeq>
 8001008:	bf34      	ite	cc
 800100a:	2001      	movcc	r0, #1
 800100c:	2000      	movcs	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmple>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffe0 	bl	8000fdc <__aeabi_cfcmpeq>
 800101c:	bf94      	ite	ls
 800101e:	2001      	movls	r0, #1
 8001020:	2000      	movhi	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmpge>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffd2 	bl	8000fd4 <__aeabi_cfrcmple>
 8001030:	bf94      	ite	ls
 8001032:	2001      	movls	r0, #1
 8001034:	2000      	movhi	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmpgt>:
 800103c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001040:	f7ff ffc8 	bl	8000fd4 <__aeabi_cfrcmple>
 8001044:	bf34      	ite	cc
 8001046:	2001      	movcc	r0, #1
 8001048:	2000      	movcs	r0, #0
 800104a:	f85d fb08 	ldr.w	pc, [sp], #8
 800104e:	bf00      	nop

08001050 <__aeabi_f2uiz>:
 8001050:	0042      	lsls	r2, r0, #1
 8001052:	d20e      	bcs.n	8001072 <__aeabi_f2uiz+0x22>
 8001054:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001058:	d30b      	bcc.n	8001072 <__aeabi_f2uiz+0x22>
 800105a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800105e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001062:	d409      	bmi.n	8001078 <__aeabi_f2uiz+0x28>
 8001064:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001068:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800106c:	fa23 f002 	lsr.w	r0, r3, r2
 8001070:	4770      	bx	lr
 8001072:	f04f 0000 	mov.w	r0, #0
 8001076:	4770      	bx	lr
 8001078:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800107c:	d101      	bne.n	8001082 <__aeabi_f2uiz+0x32>
 800107e:	0242      	lsls	r2, r0, #9
 8001080:	d102      	bne.n	8001088 <__aeabi_f2uiz+0x38>
 8001082:	f04f 30ff 	mov.w	r0, #4294967295
 8001086:	4770      	bx	lr
 8001088:	f04f 0000 	mov.w	r0, #0
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <SystemClock_Config>:

/**
 * @brief Cấu hình hệ thống clock STM32F1 sử dụng HSE + PLL để chạy ở 72 MHz.
 */
void SystemClock_Config(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
    // 1. Bật HSE
    RCC->CR |= RCC_CR_HSEON;
 8001094:	4b34      	ldr	r3, [pc, #208]	@ (8001168 <SystemClock_Config+0xd8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a33      	ldr	r2, [pc, #204]	@ (8001168 <SystemClock_Config+0xd8>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800109e:	6013      	str	r3, [r2, #0]

    // 2. Chờ HSE ổn định
    while (!(RCC->CR & RCC_CR_HSERDY))
 80010a0:	bf00      	nop
 80010a2:	4b31      	ldr	r3, [pc, #196]	@ (8001168 <SystemClock_Config+0xd8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f9      	beq.n	80010a2 <SystemClock_Config+0x12>
        ;

    // 3. Cấu hình Flash: 2 wait states (để hoạt động 72MHz)
    FLASH->ACR |= FLASH_ACR_PRFTBE; // Enable prefetch buffer
 80010ae:	4b2f      	ldr	r3, [pc, #188]	@ (800116c <SystemClock_Config+0xdc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a2e      	ldr	r2, [pc, #184]	@ (800116c <SystemClock_Config+0xdc>)
 80010b4:	f043 0310 	orr.w	r3, r3, #16
 80010b8:	6013      	str	r3, [r2, #0]
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80010ba:	4b2c      	ldr	r3, [pc, #176]	@ (800116c <SystemClock_Config+0xdc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a2b      	ldr	r2, [pc, #172]	@ (800116c <SystemClock_Config+0xdc>)
 80010c0:	f023 0307 	bic.w	r3, r3, #7
 80010c4:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_LATENCY_2; // 2 wait states
 80010c6:	4b29      	ldr	r3, [pc, #164]	@ (800116c <SystemClock_Config+0xdc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a28      	ldr	r2, [pc, #160]	@ (800116c <SystemClock_Config+0xdc>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6013      	str	r3, [r2, #0]

    // 4. Cấu hình PLL: nguồn HSE, nhân 9 => 8MHz x 9 = 72MHz
    RCC->CFGR &= ~RCC_CFGR_PLLSRC; // Clear PLL source
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <SystemClock_Config+0xd8>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a24      	ldr	r2, [pc, #144]	@ (8001168 <SystemClock_Config+0xd8>)
 80010d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010dc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLSRC;  // PLL source = HSE
 80010de:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <SystemClock_Config+0xd8>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4a21      	ldr	r2, [pc, #132]	@ (8001168 <SystemClock_Config+0xd8>)
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e8:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= ~RCC_CFGR_PLLMULL;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <SystemClock_Config+0xd8>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001168 <SystemClock_Config+0xd8>)
 80010f0:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80010f4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLMULL9; // PLL x9
 80010f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <SystemClock_Config+0xd8>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001168 <SystemClock_Config+0xd8>)
 80010fc:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8001100:	6053      	str	r3, [r2, #4]

    // 5. Cấu hình bus
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;  // AHB = SYSCLK
 8001102:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <SystemClock_Config+0xd8>)
 8001104:	4a18      	ldr	r2, [pc, #96]	@ (8001168 <SystemClock_Config+0xd8>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; // APB1 = HCLK/2 (max 36MHz)
 800110a:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <SystemClock_Config+0xd8>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a16      	ldr	r2, [pc, #88]	@ (8001168 <SystemClock_Config+0xd8>)
 8001110:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001114:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; // APB2 = HCLK
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <SystemClock_Config+0xd8>)
 8001118:	4a13      	ldr	r2, [pc, #76]	@ (8001168 <SystemClock_Config+0xd8>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	6053      	str	r3, [r2, #4]

    // 6. Bật PLL
    RCC->CR |= RCC_CR_PLLON;
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <SystemClock_Config+0xd8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a11      	ldr	r2, [pc, #68]	@ (8001168 <SystemClock_Config+0xd8>)
 8001124:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001128:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY))
 800112a:	bf00      	nop
 800112c:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <SystemClock_Config+0xd8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f9      	beq.n	800112c <SystemClock_Config+0x9c>
        ;

    // 7. Chọn PLL làm hệ thống clock
    RCC->CFGR &= ~RCC_CFGR_SW;
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <SystemClock_Config+0xd8>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <SystemClock_Config+0xd8>)
 800113e:	f023 0303 	bic.w	r3, r3, #3
 8001142:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <SystemClock_Config+0xd8>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4a07      	ldr	r2, [pc, #28]	@ (8001168 <SystemClock_Config+0xd8>)
 800114a:	f043 0302 	orr.w	r3, r3, #2
 800114e:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 8001150:	bf00      	nop
 8001152:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <SystemClock_Config+0xd8>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b08      	cmp	r3, #8
 800115c:	d1f9      	bne.n	8001152 <SystemClock_Config+0xc2>
        ;
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000
 800116c:	40022000 	.word	0x40022000

08001170 <App_Init>:

void App_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    SystemClock_Config();
 8001174:	f7ff ff8c 	bl	8001090 <SystemClock_Config>
    USART1_Init(115200);
 8001178:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 800117c:	f001 fda8 	bl	8002cd0 <USART1_Init>
    Timer_Init();
 8001180:	f002 fdf8 	bl	8003d74 <Timer_Init>
    Queue_init(&g_uartQueue);
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <App_Init+0x2c>)
 8001186:	f002 fcf2 	bl	8003b6e <Queue_init>
    device_init();
 800118a:	f000 fa0f 	bl	80015ac <device_init>
    DUNGX_UART_Receive_IT(&huart1, uart_rx_buffer, 2);
 800118e:	2202      	movs	r2, #2
 8001190:	4903      	ldr	r1, [pc, #12]	@ (80011a0 <App_Init+0x30>)
 8001192:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <App_Init+0x34>)
 8001194:	f001 fde6 	bl	8002d64 <DUNGX_UART_Receive_IT>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000220 	.word	0x20000220
 80011a0:	200002f4 	.word	0x200002f4
 80011a4:	200001e4 	.word	0x200001e4

080011a8 <App_Loop>:

void App_Loop(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
	static uint32_t lastDeviceUpdateTick = 0; // Cho 200ms
	    static uint32_t lastProcessTick = 0;      // Cho 50ms

	    uint32_t currentTick = GetTick(); // tick_ms hiện tại
 80011ae:	f002 fe29 	bl	8003e04 <GetTick>
 80011b2:	6078      	str	r0, [r7, #4]

	    // Task 1: Update device mỗi 200ms
	    if ((currentTick - lastDeviceUpdateTick) >= 200)
 80011b4:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <App_Loop+0x5c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80011be:	d904      	bls.n	80011ca <App_Loop+0x22>
	    {
	        DeviceManager_UpdateData();
 80011c0:	f000 fa46 	bl	8001650 <DeviceManager_UpdateData>
	        lastDeviceUpdateTick = currentTick;
 80011c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001204 <App_Loop+0x5c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
	    }

	    // Task 2: Xử lý chế độ mỗi 50ms
	    if ((currentTick - lastProcessTick) >= 50)
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <App_Loop+0x60>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b31      	cmp	r3, #49	@ 0x31
 80011d4:	d911      	bls.n	80011fa <App_Loop+0x52>
	    {
	        if (sys.mode == AUTO_MODE)
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <App_Loop+0x64>)
 80011d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <App_Loop+0x3e>
	        {
	            Auto_Process();
 80011e0:	f000 f816 	bl	8001210 <Auto_Process>
 80011e4:	e006      	b.n	80011f4 <App_Loop+0x4c>
	        }
	        else if (sys.mode == MANUAL_MODE)
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <App_Loop+0x64>)
 80011e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <App_Loop+0x4c>
	        {
	            Manual_Process();
 80011f0:	f000 f910 	bl	8001414 <Manual_Process>
	        }

	        lastProcessTick = currentTick;
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <App_Loop+0x60>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
	    }
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000324 	.word	0x20000324
 8001208:	20000328 	.word	0x20000328
 800120c:	20000300 	.word	0x20000300

08001210 <Auto_Process>:

#include "uart.h"
#include "message.h"

void Auto_Process(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
    if (sys.mode == AUTO_MODE)
 8001216:	4b75      	ldr	r3, [pc, #468]	@ (80013ec <Auto_Process+0x1dc>)
 8001218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121c:	2b00      	cmp	r3, #0
 800121e:	f040 80e1 	bne.w	80013e4 <Auto_Process+0x1d4>
    {
        if (sys.temperature > 35.0f || sys.humidity < 35.0f || sys.gas_level > 500.0f)
 8001222:	4b72      	ldr	r3, [pc, #456]	@ (80013ec <Auto_Process+0x1dc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4972      	ldr	r1, [pc, #456]	@ (80013f0 <Auto_Process+0x1e0>)
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff07 	bl	800103c <__aeabi_fcmpgt>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d111      	bne.n	8001258 <Auto_Process+0x48>
 8001234:	4b6d      	ldr	r3, [pc, #436]	@ (80013ec <Auto_Process+0x1dc>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	496d      	ldr	r1, [pc, #436]	@ (80013f0 <Auto_Process+0x1e0>)
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fee0 	bl	8001000 <__aeabi_fcmplt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d108      	bne.n	8001258 <Auto_Process+0x48>
 8001246:	4b69      	ldr	r3, [pc, #420]	@ (80013ec <Auto_Process+0x1dc>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	496a      	ldr	r1, [pc, #424]	@ (80013f4 <Auto_Process+0x1e4>)
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fef5 	bl	800103c <__aeabi_fcmpgt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <Auto_Process+0x5a>
        {
            Siren_On();
 8001258:	f002 fa5a 	bl	8003710 <Siren_On>

            LED_RGB_SetState(LED_RED);
 800125c:	2004      	movs	r0, #4
 800125e:	f002 f8b1 	bl	80033c4 <LED_RGB_SetState>

            Motor_SetLevel(3);
 8001262:	2003      	movs	r0, #3
 8001264:	f002 f9d2 	bl	800360c <Motor_SetLevel>
 8001268:	e06f      	b.n	800134a <Auto_Process+0x13a>
        }
        else
        {
        	Siren_Off();
 800126a:	f002 fa5d 	bl	8003728 <Siren_Off>
            if (sys.lux < 300.0f)
 800126e:	4b5f      	ldr	r3, [pc, #380]	@ (80013ec <Auto_Process+0x1dc>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	4961      	ldr	r1, [pc, #388]	@ (80013f8 <Auto_Process+0x1e8>)
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fec3 	bl	8001000 <__aeabi_fcmplt>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <Auto_Process+0x78>
            {
                LED_RGB_SetState(LED_WHITE_100);
 8001280:	2002      	movs	r0, #2
 8001282:	f002 f89f 	bl	80033c4 <LED_RGB_SetState>
 8001286:	e024      	b.n	80012d2 <Auto_Process+0xc2>
            }
            else if (sys.lux >= 300.0f && sys.lux < 600.0f)
 8001288:	4b58      	ldr	r3, [pc, #352]	@ (80013ec <Auto_Process+0x1dc>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	495a      	ldr	r1, [pc, #360]	@ (80013f8 <Auto_Process+0x1e8>)
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff feca 	bl	8001028 <__aeabi_fcmpge>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00c      	beq.n	80012b4 <Auto_Process+0xa4>
 800129a:	4b54      	ldr	r3, [pc, #336]	@ (80013ec <Auto_Process+0x1dc>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	4957      	ldr	r1, [pc, #348]	@ (80013fc <Auto_Process+0x1ec>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fead 	bl	8001000 <__aeabi_fcmplt>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <Auto_Process+0xa4>
            {
                LED_RGB_SetState(LED_WHITE_50);
 80012ac:	2001      	movs	r0, #1
 80012ae:	f002 f889 	bl	80033c4 <LED_RGB_SetState>
 80012b2:	e00e      	b.n	80012d2 <Auto_Process+0xc2>
            }
            else if (sys.lux >= 1200.0f)
 80012b4:	4b4d      	ldr	r3, [pc, #308]	@ (80013ec <Auto_Process+0x1dc>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4951      	ldr	r1, [pc, #324]	@ (8001400 <Auto_Process+0x1f0>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff feb4 	bl	8001028 <__aeabi_fcmpge>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <Auto_Process+0xbe>
            {
                LED_RGB_SetState(LED_OFF);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f002 f87c 	bl	80033c4 <LED_RGB_SetState>
 80012cc:	e001      	b.n	80012d2 <Auto_Process+0xc2>
            }
            else
            {

                LED_RGB_Off();
 80012ce:	f002 f82d 	bl	800332c <LED_RGB_Off>
            }

            if (sys.temperature > 30.0f)
 80012d2:	4b46      	ldr	r3, [pc, #280]	@ (80013ec <Auto_Process+0x1dc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	494b      	ldr	r1, [pc, #300]	@ (8001404 <Auto_Process+0x1f4>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff feaf 	bl	800103c <__aeabi_fcmpgt>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <Auto_Process+0xdc>
            {
                Motor_SetLevel(3);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f002 f991 	bl	800360c <Motor_SetLevel>
 80012ea:	e070      	b.n	80013ce <Auto_Process+0x1be>
            }
            else if (sys.temperature <= 30.0f && sys.temperature > 25.0f)
 80012ec:	4b3f      	ldr	r3, [pc, #252]	@ (80013ec <Auto_Process+0x1dc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4944      	ldr	r1, [pc, #272]	@ (8001404 <Auto_Process+0x1f4>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fe8e 	bl	8001014 <__aeabi_fcmple>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00c      	beq.n	8001318 <Auto_Process+0x108>
 80012fe:	4b3b      	ldr	r3, [pc, #236]	@ (80013ec <Auto_Process+0x1dc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4941      	ldr	r1, [pc, #260]	@ (8001408 <Auto_Process+0x1f8>)
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe99 	bl	800103c <__aeabi_fcmpgt>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <Auto_Process+0x108>
            {
                Motor_SetLevel(2);
 8001310:	2002      	movs	r0, #2
 8001312:	f002 f97b 	bl	800360c <Motor_SetLevel>
 8001316:	e018      	b.n	800134a <Auto_Process+0x13a>
            }
            else if (sys.temperature <= 25.0f && sys.temperature > 20.0f)
 8001318:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <Auto_Process+0x1dc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	493a      	ldr	r1, [pc, #232]	@ (8001408 <Auto_Process+0x1f8>)
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fe78 	bl	8001014 <__aeabi_fcmple>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00c      	beq.n	8001344 <Auto_Process+0x134>
 800132a:	4b30      	ldr	r3, [pc, #192]	@ (80013ec <Auto_Process+0x1dc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4937      	ldr	r1, [pc, #220]	@ (800140c <Auto_Process+0x1fc>)
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe83 	bl	800103c <__aeabi_fcmpgt>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <Auto_Process+0x134>
            {
                Motor_SetLevel(1);
 800133c:	2001      	movs	r0, #1
 800133e:	f002 f965 	bl	800360c <Motor_SetLevel>
 8001342:	e002      	b.n	800134a <Auto_Process+0x13a>
            }
            else
            {
                Motor_SetLevel(0);
 8001344:	2000      	movs	r0, #0
 8001346:	f002 f961 	bl	800360c <Motor_SetLevel>
            }
        }

        while (!empty(&g_uartQueue))
 800134a:	e040      	b.n	80013ce <Auto_Process+0x1be>
        {

            message_t *message = front(&g_uartQueue);
 800134c:	4830      	ldr	r0, [pc, #192]	@ (8001410 <Auto_Process+0x200>)
 800134e:	f002 fcb1 	bl	8003cb4 <front>
 8001352:	61f8      	str	r0, [r7, #28]

            if (message == NULL)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d043      	beq.n	80013e2 <Auto_Process+0x1d2>
            {
                return;
            }

            if (message->header[0] == COMMAND && message->header[2] == 4 && message->header[1] == AUTO)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d132      	bne.n	80013c8 <Auto_Process+0x1b8>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	78db      	ldrb	r3, [r3, #3]
 8001366:	2b04      	cmp	r3, #4
 8001368:	d12e      	bne.n	80013c8 <Auto_Process+0x1b8>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	789b      	ldrb	r3, [r3, #2]
 800136e:	2b20      	cmp	r3, #32
 8001370:	d12a      	bne.n	80013c8 <Auto_Process+0x1b8>
            {

                float mode = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	7918      	ldrb	r0, [r3, #4]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	7959      	ldrb	r1, [r3, #5]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	799a      	ldrb	r2, [r3, #6]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	79db      	ldrb	r3, [r3, #7]
 8001382:	f002 fa97 	bl	80038b4 <Convert_Bytes_To_Float>
 8001386:	61b8      	str	r0, [r7, #24]
                if (mode == 1.0f)
 8001388:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800138c:	69b8      	ldr	r0, [r7, #24]
 800138e:	f7ff fe2d 	bl	8000fec <__aeabi_fcmpeq>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d017      	beq.n	80013c8 <Auto_Process+0x1b8>
                {
                    sys.mode = MANUAL_MODE;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <Auto_Process+0x1dc>)
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2020 	strb.w	r2, [r3, #32]
                    uint8_t data[20];
                    uint8_t length = Create_Message_Notify(AUTO, sys.mode, data);
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <Auto_Process+0x1dc>)
 80013a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fc34 	bl	8000c14 <__aeabi_ui2f>
 80013ac:	4601      	mov	r1, r0
 80013ae:	463b      	mov	r3, r7
 80013b0:	461a      	mov	r2, r3
 80013b2:	2020      	movs	r0, #32
 80013b4:	f002 faba 	bl	800392c <Create_Message_Notify>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75fb      	strb	r3, [r7, #23]
                    USART1_Send_Data(data, length);
 80013bc:	7dfa      	ldrb	r2, [r7, #23]
 80013be:	463b      	mov	r3, r7
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fca8 	bl	8002d18 <USART1_Send_Data>
                }
            }

            pop(&g_uartQueue);
 80013c8:	4811      	ldr	r0, [pc, #68]	@ (8001410 <Auto_Process+0x200>)
 80013ca:	f002 fc47 	bl	8003c5c <pop>
        while (!empty(&g_uartQueue))
 80013ce:	4810      	ldr	r0, [pc, #64]	@ (8001410 <Auto_Process+0x200>)
 80013d0:	f002 fbe3 	bl	8003b9a <empty>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f083 0301 	eor.w	r3, r3, #1
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1b5      	bne.n	800134c <Auto_Process+0x13c>
 80013e0:	e000      	b.n	80013e4 <Auto_Process+0x1d4>
                return;
 80013e2:	bf00      	nop
        }
    }
}
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000300 	.word	0x20000300
 80013f0:	420c0000 	.word	0x420c0000
 80013f4:	43fa0000 	.word	0x43fa0000
 80013f8:	43960000 	.word	0x43960000
 80013fc:	44160000 	.word	0x44160000
 8001400:	44960000 	.word	0x44960000
 8001404:	41f00000 	.word	0x41f00000
 8001408:	41c80000 	.word	0x41c80000
 800140c:	41a00000 	.word	0x41a00000
 8001410:	20000220 	.word	0x20000220

08001414 <Manual_Process>:
#include "led_rgb.h"
#include "motor.h"
#include "siren.h"

void Manual_Process(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	@ 0x30
 8001418:	af00      	add	r7, sp, #0
    while (!empty(&g_uartQueue) && (sys.mode == MANUAL_MODE))
 800141a:	e0ae      	b.n	800157a <Manual_Process+0x166>
    {
        message_t *message = front(&g_uartQueue);
 800141c:	4861      	ldr	r0, [pc, #388]	@ (80015a4 <Manual_Process+0x190>)
 800141e:	f002 fc49 	bl	8003cb4 <front>
 8001422:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (message == NULL)
 8001424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80b7 	beq.w	800159a <Manual_Process+0x186>
        {
            return;
        }
        // Xử lý gói tin trong chế độ Manual
        if (message->header[0] == COMMAND && message->header[2] == 4)
 800142c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800142e:	785b      	ldrb	r3, [r3, #1]
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 809f 	bne.w	8001574 <Manual_Process+0x160>
 8001436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001438:	78db      	ldrb	r3, [r3, #3]
 800143a:	2b04      	cmp	r3, #4
 800143c:	f040 809a 	bne.w	8001574 <Manual_Process+0x160>
        {
            switch (message->header[1])
 8001440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001442:	789b      	ldrb	r3, [r3, #2]
 8001444:	3b11      	subs	r3, #17
 8001446:	2b0f      	cmp	r3, #15
 8001448:	f200 8094 	bhi.w	8001574 <Manual_Process+0x160>
 800144c:	a201      	add	r2, pc, #4	@ (adr r2, 8001454 <Manual_Process+0x40>)
 800144e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001452:	bf00      	nop
 8001454:	08001495 	.word	0x08001495
 8001458:	080014bd 	.word	0x080014bd
 800145c:	080014e5 	.word	0x080014e5
 8001460:	08001575 	.word	0x08001575
 8001464:	08001575 	.word	0x08001575
 8001468:	08001575 	.word	0x08001575
 800146c:	08001575 	.word	0x08001575
 8001470:	08001575 	.word	0x08001575
 8001474:	08001575 	.word	0x08001575
 8001478:	08001575 	.word	0x08001575
 800147c:	08001575 	.word	0x08001575
 8001480:	08001575 	.word	0x08001575
 8001484:	08001575 	.word	0x08001575
 8001488:	08001575 	.word	0x08001575
 800148c:	08001575 	.word	0x08001575
 8001490:	08001517 	.word	0x08001517
            {
            case LED:
                float led_state = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 8001494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001496:	7918      	ldrb	r0, [r3, #4]
 8001498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149a:	7959      	ldrb	r1, [r3, #5]
 800149c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149e:	799a      	ldrb	r2, [r3, #6]
 80014a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a2:	79db      	ldrb	r3, [r3, #7]
 80014a4:	f002 fa06 	bl	80038b4 <Convert_Bytes_To_Float>
 80014a8:	61b8      	str	r0, [r7, #24]
                LED_RGB_SetState(led_state);
 80014aa:	69b8      	ldr	r0, [r7, #24]
 80014ac:	f7ff fdd0 	bl	8001050 <__aeabi_f2uiz>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 ff85 	bl	80033c4 <LED_RGB_SetState>
                break;
 80014ba:	e05b      	b.n	8001574 <Manual_Process+0x160>
            case MOTOR:
                float motor_level = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 80014bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014be:	7918      	ldrb	r0, [r3, #4]
 80014c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c2:	7959      	ldrb	r1, [r3, #5]
 80014c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c6:	799a      	ldrb	r2, [r3, #6]
 80014c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ca:	79db      	ldrb	r3, [r3, #7]
 80014cc:	f002 f9f2 	bl	80038b4 <Convert_Bytes_To_Float>
 80014d0:	61f8      	str	r0, [r7, #28]
                Motor_SetLevel(motor_level);
 80014d2:	69f8      	ldr	r0, [r7, #28]
 80014d4:	f7ff fdbc 	bl	8001050 <__aeabi_f2uiz>
 80014d8:	4603      	mov	r3, r0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 f895 	bl	800360c <Motor_SetLevel>

                break;
 80014e2:	e047      	b.n	8001574 <Manual_Process+0x160>
            case SIREN:
                float siren_on = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 80014e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e6:	7918      	ldrb	r0, [r3, #4]
 80014e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ea:	7959      	ldrb	r1, [r3, #5]
 80014ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ee:	799a      	ldrb	r2, [r3, #6]
 80014f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f2:	79db      	ldrb	r3, [r3, #7]
 80014f4:	f002 f9de 	bl	80038b4 <Convert_Bytes_To_Float>
 80014f8:	6238      	str	r0, [r7, #32]
                if (siren_on > 0)
 80014fa:	f04f 0100 	mov.w	r1, #0
 80014fe:	6a38      	ldr	r0, [r7, #32]
 8001500:	f7ff fd9c 	bl	800103c <__aeabi_fcmpgt>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <Manual_Process+0xfc>
                {
                    Siren_On();
 800150a:	f002 f901 	bl	8003710 <Siren_On>
                }
                else
                {
                    Siren_Off();
                }
                break;
 800150e:	e031      	b.n	8001574 <Manual_Process+0x160>
                    Siren_Off();
 8001510:	f002 f90a 	bl	8003728 <Siren_Off>
                break;
 8001514:	e02e      	b.n	8001574 <Manual_Process+0x160>
            case AUTO:
                float mode = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 8001516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001518:	7918      	ldrb	r0, [r3, #4]
 800151a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151c:	7959      	ldrb	r1, [r3, #5]
 800151e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001520:	799a      	ldrb	r2, [r3, #6]
 8001522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001524:	79db      	ldrb	r3, [r3, #7]
 8001526:	f002 f9c5 	bl	80038b4 <Convert_Bytes_To_Float>
 800152a:	62b8      	str	r0, [r7, #40]	@ 0x28
                if (mode == 0.0f)
 800152c:	f04f 0100 	mov.w	r1, #0
 8001530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001532:	f7ff fd5b 	bl	8000fec <__aeabi_fcmpeq>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <Manual_Process+0x12a>
                    sys.mode = AUTO_MODE;
                    uint8_t data[20];
                    uint8_t length = Create_Message_Notify(AUTO, sys.mode, data);
                    USART1_Send_Data(data, length);
                }
                break;
 800153c:	e019      	b.n	8001572 <Manual_Process+0x15e>
                    sys.mode = AUTO_MODE;
 800153e:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <Manual_Process+0x194>)
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2020 	strb.w	r2, [r3, #32]
                    uint8_t length = Create_Message_Notify(AUTO, sys.mode, data);
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <Manual_Process+0x194>)
 8001548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fb61 	bl	8000c14 <__aeabi_ui2f>
 8001552:	4601      	mov	r1, r0
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	461a      	mov	r2, r3
 8001558:	2020      	movs	r0, #32
 800155a:	f002 f9e7 	bl	800392c <Create_Message_Notify>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    USART1_Send_Data(data, length);
 8001564:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f001 fbd3 	bl	8002d18 <USART1_Send_Data>
                break;
 8001572:	bf00      	nop
            }
        }
        pop(&g_uartQueue);
 8001574:	480b      	ldr	r0, [pc, #44]	@ (80015a4 <Manual_Process+0x190>)
 8001576:	f002 fb71 	bl	8003c5c <pop>
    while (!empty(&g_uartQueue) && (sys.mode == MANUAL_MODE))
 800157a:	480a      	ldr	r0, [pc, #40]	@ (80015a4 <Manual_Process+0x190>)
 800157c:	f002 fb0d 	bl	8003b9a <empty>
 8001580:	4603      	mov	r3, r0
 8001582:	f083 0301 	eor.w	r3, r3, #1
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <Manual_Process+0x188>
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <Manual_Process+0x194>)
 800158e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001592:	2b01      	cmp	r3, #1
 8001594:	f43f af42 	beq.w	800141c <Manual_Process+0x8>
 8001598:	e000      	b.n	800159c <Manual_Process+0x188>
            return;
 800159a:	bf00      	nop
    }
}
 800159c:	3730      	adds	r7, #48	@ 0x30
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000220 	.word	0x20000220
 80015a8:	20000300 	.word	0x20000300

080015ac <device_init>:
#include "led_rgb.h"
#include "motor.h"
#include "siren.h"

void device_init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0

    DHT11_Init();
 80015b2:	f001 fccb 	bl	8002f4c <DHT11_Init>
    CDS_Init();
 80015b6:	f001 fc11 	bl	8002ddc <CDS_Init>
    MQ2_Init();
 80015ba:	f001 fdad 	bl	8003118 <MQ2_Init>
    LED_RGB_Init();
 80015be:	f001 fe15 	bl	80031ec <LED_RGB_Init>
    Siren_Init();
 80015c2:	f002 f885 	bl	80036d0 <Siren_Init>
    Motor_Init();
 80015c6:	f001 ff51 	bl	800346c <Motor_Init>

    sys.temperature = 25.0f;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <device_init+0x90>)
 80015cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001640 <device_init+0x94>)
 80015ce:	601a      	str	r2, [r3, #0]
    sys.humidity = 50.0f;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <device_init+0x90>)
 80015d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001644 <device_init+0x98>)
 80015d4:	605a      	str	r2, [r3, #4]
    sys.gas_level = 200.0f;
 80015d6:	4b19      	ldr	r3, [pc, #100]	@ (800163c <device_init+0x90>)
 80015d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001648 <device_init+0x9c>)
 80015da:	609a      	str	r2, [r3, #8]
    sys.lux = 500.0f;
 80015dc:	4b17      	ldr	r3, [pc, #92]	@ (800163c <device_init+0x90>)
 80015de:	4a1b      	ldr	r2, [pc, #108]	@ (800164c <device_init+0xa0>)
 80015e0:	60da      	str	r2, [r3, #12]
    sys.led_state = 0.0f;   // 0: off, 1: WHITE, 2: SOFT WHITE, 3: GREEN, 4: RED
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <device_init+0x90>)
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
    sys.motor_level = 0.0f; // 0: off, 1: low, 2: medium, 3: high
 80015ea:	4b14      	ldr	r3, [pc, #80]	@ (800163c <device_init+0x90>)
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
    sys.motor_dir = 0.0f;   // 0: forward, 1: backward
 80015f2:	4b12      	ldr	r3, [pc, #72]	@ (800163c <device_init+0x90>)
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
    sys.siren_on = 0.0f;    // 0: off, 1: on
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <device_init+0x90>)
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
    sys.mode = 0.0f;        // 0: auto, 1: manual
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <device_init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2020 	strb.w	r2, [r3, #32]

    uint8_t data[20];
    uint8_t length = Create_Message_Notify(AUTO, sys.mode, data);
 800160a:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <device_init+0x90>)
 800160c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff faff 	bl	8000c14 <__aeabi_ui2f>
 8001616:	4601      	mov	r1, r0
 8001618:	463b      	mov	r3, r7
 800161a:	461a      	mov	r2, r3
 800161c:	2020      	movs	r0, #32
 800161e:	f002 f985 	bl	800392c <Create_Message_Notify>
 8001622:	4603      	mov	r3, r0
 8001624:	75fb      	strb	r3, [r7, #23]
    USART1_Send_Data(data, length);
 8001626:	7dfa      	ldrb	r2, [r7, #23]
 8001628:	463b      	mov	r3, r7
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f001 fb73 	bl	8002d18 <USART1_Send_Data>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000300 	.word	0x20000300
 8001640:	41c80000 	.word	0x41c80000
 8001644:	42480000 	.word	0x42480000
 8001648:	43480000 	.word	0x43480000
 800164c:	43fa0000 	.word	0x43fa0000

08001650 <DeviceManager_UpdateData>:

void DeviceManager_UpdateData(void)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b08f      	sub	sp, #60	@ 0x3c
 8001654:	af00      	add	r7, sp, #0
    uint8_t data[20];
    uint8_t length;

    // ======= DHT11 =======
    uint8_t h, h_d, t, t_d;
    if (DHT11_Read(&h, &h_d, &t, &t_d))
 8001656:	463b      	mov	r3, r7
 8001658:	1c7a      	adds	r2, r7, #1
 800165a:	1cb9      	adds	r1, r7, #2
 800165c:	1cf8      	adds	r0, r7, #3
 800165e:	f001 fcd8 	bl	8003012 <DHT11_Read>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d063      	beq.n	8001730 <DeviceManager_UpdateData+0xe0>
    {
        float humidity = h + h_d / 10.0f;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fad6 	bl	8000c1c <__aeabi_i2f>
 8001670:	4604      	mov	r4, r0
 8001672:	78bb      	ldrb	r3, [r7, #2]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fad1 	bl	8000c1c <__aeabi_i2f>
 800167a:	4603      	mov	r3, r0
 800167c:	4986      	ldr	r1, [pc, #536]	@ (8001898 <DeviceManager_UpdateData+0x248>)
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fbd4 	bl	8000e2c <__aeabi_fdiv>
 8001684:	4603      	mov	r3, r0
 8001686:	4619      	mov	r1, r3
 8001688:	4620      	mov	r0, r4
 800168a:	f7ff fa13 	bl	8000ab4 <__addsf3>
 800168e:	4603      	mov	r3, r0
 8001690:	637b      	str	r3, [r7, #52]	@ 0x34
        float temperature = t + t_d / 10.0f;
 8001692:	787b      	ldrb	r3, [r7, #1]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fac1 	bl	8000c1c <__aeabi_i2f>
 800169a:	4604      	mov	r4, r0
 800169c:	783b      	ldrb	r3, [r7, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fabc 	bl	8000c1c <__aeabi_i2f>
 80016a4:	4603      	mov	r3, r0
 80016a6:	497c      	ldr	r1, [pc, #496]	@ (8001898 <DeviceManager_UpdateData+0x248>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fbbf 	bl	8000e2c <__aeabi_fdiv>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4619      	mov	r1, r3
 80016b2:	4620      	mov	r0, r4
 80016b4:	f7ff f9fe 	bl	8000ab4 <__addsf3>
 80016b8:	4603      	mov	r3, r0
 80016ba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (humidity != sys.humidity)
 80016bc:	4b77      	ldr	r3, [pc, #476]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4619      	mov	r1, r3
 80016c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80016c4:	f7ff fc92 	bl	8000fec <__aeabi_fcmpeq>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d113      	bne.n	80016f6 <DeviceManager_UpdateData+0xa6>
        {
            sys.humidity = humidity;
 80016ce:	4a73      	ldr	r2, [pc, #460]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 80016d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016d2:	6053      	str	r3, [r2, #4]

            length = Create_Message_Notify(DHT11_HUMI, sys.humidity, data);
 80016d4:	4b71      	ldr	r3, [pc, #452]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	1d3a      	adds	r2, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	2004      	movs	r0, #4
 80016de:	f002 f925 	bl	800392c <Create_Message_Notify>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            USART1_Send_Data(data, length);
 80016e8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 fb11 	bl	8002d18 <USART1_Send_Data>
        }

        if (temperature != sys.temperature)
 80016f6:	4b69      	ldr	r3, [pc, #420]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80016fe:	f7ff fc75 	bl	8000fec <__aeabi_fcmpeq>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d113      	bne.n	8001730 <DeviceManager_UpdateData+0xe0>
        {
            sys.temperature = temperature;
 8001708:	4a64      	ldr	r2, [pc, #400]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 800170a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800170c:	6013      	str	r3, [r2, #0]

            length = Create_Message_Notify(DHT11_TEMP, sys.temperature, data);
 800170e:	4b63      	ldr	r3, [pc, #396]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	1d3a      	adds	r2, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	2005      	movs	r0, #5
 8001718:	f002 f908 	bl	800392c <Create_Message_Notify>
 800171c:	4603      	mov	r3, r0
 800171e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            USART1_Send_Data(data, length);
 8001722:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f001 faf4 	bl	8002d18 <USART1_Send_Data>
        }
    }

    // ======= CDS =======
    float lux = CDS_ReadLux();
 8001730:	f001 fba8 	bl	8002e84 <CDS_ReadLux>
 8001734:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (lux != sys.lux)
 8001736:	4b59      	ldr	r3, [pc, #356]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	4619      	mov	r1, r3
 800173c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800173e:	f7ff fc55 	bl	8000fec <__aeabi_fcmpeq>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d113      	bne.n	8001770 <DeviceManager_UpdateData+0x120>
    {
        sys.lux = lux;
 8001748:	4a54      	ldr	r2, [pc, #336]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 800174a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174c:	60d3      	str	r3, [r2, #12]

        length = Create_Message_Notify(CDS, sys.lux, data);
 800174e:	4b53      	ldr	r3, [pc, #332]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	1d3a      	adds	r2, r7, #4
 8001754:	4619      	mov	r1, r3
 8001756:	2001      	movs	r0, #1
 8001758:	f002 f8e8 	bl	800392c <Create_Message_Notify>
 800175c:	4603      	mov	r3, r0
 800175e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        USART1_Send_Data(data, length);
 8001762:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fad4 	bl	8002d18 <USART1_Send_Data>
    }

    // ======= MQ2 =======
    float gas = MQ2_ReadLevel();
 8001770:	f001 fd0e 	bl	8003190 <MQ2_ReadLevel>
 8001774:	6278      	str	r0, [r7, #36]	@ 0x24
    if (gas != sys.gas_level)
 8001776:	4b49      	ldr	r3, [pc, #292]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	4619      	mov	r1, r3
 800177c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800177e:	f7ff fc35 	bl	8000fec <__aeabi_fcmpeq>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d113      	bne.n	80017b0 <DeviceManager_UpdateData+0x160>
    {
        sys.gas_level = gas;
 8001788:	4a44      	ldr	r2, [pc, #272]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 800178a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178c:	6093      	str	r3, [r2, #8]

        length = Create_Message_Notify(MQ2, sys.gas_level, data);
 800178e:	4b43      	ldr	r3, [pc, #268]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	1d3a      	adds	r2, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	2003      	movs	r0, #3
 8001798:	f002 f8c8 	bl	800392c <Create_Message_Notify>
 800179c:	4603      	mov	r3, r0
 800179e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        USART1_Send_Data(data, length);
 80017a2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f001 fab4 	bl	8002d18 <USART1_Send_Data>
    }

    // ======= actuator =======
    float led_state = LED_RGB_GetState();
 80017b0:	f001 fe2a 	bl	8003408 <LED_RGB_GetState>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fa30 	bl	8000c1c <__aeabi_i2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	623b      	str	r3, [r7, #32]
    if (led_state != sys.led_state)
 80017c0:	4b36      	ldr	r3, [pc, #216]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	4619      	mov	r1, r3
 80017c6:	6a38      	ldr	r0, [r7, #32]
 80017c8:	f7ff fc10 	bl	8000fec <__aeabi_fcmpeq>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d113      	bne.n	80017fa <DeviceManager_UpdateData+0x1aa>
    {
        sys.led_state = led_state;
 80017d2:	4a32      	ldr	r2, [pc, #200]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	6113      	str	r3, [r2, #16]

        length = Create_Message_Notify(LED, sys.led_state, data);
 80017d8:	4b30      	ldr	r3, [pc, #192]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	1d3a      	adds	r2, r7, #4
 80017de:	4619      	mov	r1, r3
 80017e0:	2011      	movs	r0, #17
 80017e2:	f002 f8a3 	bl	800392c <Create_Message_Notify>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        USART1_Send_Data(data, length);
 80017ec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f001 fa8f 	bl	8002d18 <USART1_Send_Data>
    }

    float motor_level = Motor_GetLevel();
 80017fa:	f001 ff39 	bl	8003670 <Motor_GetLevel>
 80017fe:	4603      	mov	r3, r0
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fa0b 	bl	8000c1c <__aeabi_i2f>
 8001806:	4603      	mov	r3, r0
 8001808:	61fb      	str	r3, [r7, #28]
    if (motor_level != sys.motor_level)
 800180a:	4b24      	ldr	r3, [pc, #144]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	4619      	mov	r1, r3
 8001810:	69f8      	ldr	r0, [r7, #28]
 8001812:	f7ff fbeb 	bl	8000fec <__aeabi_fcmpeq>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d113      	bne.n	8001844 <DeviceManager_UpdateData+0x1f4>
    {
        sys.motor_level = motor_level;
 800181c:	4a1f      	ldr	r2, [pc, #124]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	6153      	str	r3, [r2, #20]
        length = Create_Message_Notify(MOTOR, sys.motor_level, data);
 8001822:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	1d3a      	adds	r2, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	2012      	movs	r0, #18
 800182c:	f002 f87e 	bl	800392c <Create_Message_Notify>
 8001830:	4603      	mov	r3, r0
 8001832:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        USART1_Send_Data(data, length);
 8001836:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f001 fa6a 	bl	8002d18 <USART1_Send_Data>
    }

    float siren_state = Siren_GetState();
 8001844:	f001 ff7c 	bl	8003740 <Siren_GetState>
 8001848:	4603      	mov	r3, r0
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f9e6 	bl	8000c1c <__aeabi_i2f>
 8001850:	4603      	mov	r3, r0
 8001852:	61bb      	str	r3, [r7, #24]
    if (siren_state != sys.siren_on)
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	4619      	mov	r1, r3
 800185a:	69b8      	ldr	r0, [r7, #24]
 800185c:	f7ff fbc6 	bl	8000fec <__aeabi_fcmpeq>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d000      	beq.n	8001868 <DeviceManager_UpdateData+0x218>
        length = Create_Message_Notify(SIREN, sys.siren_on, data);
        USART1_Send_Data(data, length);
    }


}
 8001866:	e013      	b.n	8001890 <DeviceManager_UpdateData+0x240>
        sys.siren_on = siren_state;
 8001868:	4a0c      	ldr	r2, [pc, #48]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	61d3      	str	r3, [r2, #28]
        length = Create_Message_Notify(SIREN, sys.siren_on, data);
 800186e:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <DeviceManager_UpdateData+0x24c>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	1d3a      	adds	r2, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	2013      	movs	r0, #19
 8001878:	f002 f858 	bl	800392c <Create_Message_Notify>
 800187c:	4603      	mov	r3, r0
 800187e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        USART1_Send_Data(data, length);
 8001882:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fa44 	bl	8002d18 <USART1_Send_Data>
}
 8001890:	bf00      	nop
 8001892:	373c      	adds	r7, #60	@ 0x3c
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	41200000 	.word	0x41200000
 800189c:	20000300 	.word	0x20000300

080018a0 <main>:
 */

#include "app_main.h"

int main(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
    App_Init();
 80018a4:	f7ff fc64 	bl	8001170 <App_Init>
    while (1)
    {
        App_Loop();
 80018a8:	f7ff fc7e 	bl	80011a8 <App_Loop>
 80018ac:	e7fc      	b.n	80018a8 <main+0x8>

080018ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  return 1;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <_kill>:

int _kill(int pid, int sig)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018c6:	f003 f8c1 	bl	8004a4c <__errno>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2216      	movs	r2, #22
 80018ce:	601a      	str	r2, [r3, #0]
  return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_exit>:

void _exit (int status)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ffe7 	bl	80018bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ee:	bf00      	nop
 80018f0:	e7fd      	b.n	80018ee <_exit+0x12>

080018f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e00a      	b.n	800191a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001904:	f3af 8000 	nop.w
 8001908:	4601      	mov	r1, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	60ba      	str	r2, [r7, #8]
 8001910:	b2ca      	uxtb	r2, r1
 8001912:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	dbf0      	blt.n	8001904 <_read+0x12>
  }

  return len;
 8001922:	687b      	ldr	r3, [r7, #4]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e009      	b.n	8001952 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	60ba      	str	r2, [r7, #8]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	429a      	cmp	r2, r3
 8001958:	dbf1      	blt.n	800193e <_write+0x12>
  }
  return len;
 800195a:	687b      	ldr	r3, [r7, #4]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_close>:

int _close(int file)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800198a:	605a      	str	r2, [r3, #4]
  return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <_isatty>:

int _isatty(int file)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019a0:	2301      	movs	r3, #1
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019cc:	4a14      	ldr	r2, [pc, #80]	@ (8001a20 <_sbrk+0x5c>)
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <_sbrk+0x60>)
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <_sbrk+0x64>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <_sbrk+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d207      	bcs.n	8001a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f4:	f003 f82a 	bl	8004a4c <__errno>
 80019f8:	4603      	mov	r3, r0
 80019fa:	220c      	movs	r2, #12
 80019fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	e009      	b.n	8001a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	4a05      	ldr	r2, [pc, #20]	@ (8001a28 <_sbrk+0x64>)
 8001a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20002800 	.word	0x20002800
 8001a24:	00000400 	.word	0x00000400
 8001a28:	2000032c 	.word	0x2000032c
 8001a2c:	20000520 	.word	0x20000520

08001a30 <ADC_Init>:
/* stm32_adc.c - Minimal ADC Driver for STM32F103C6T6 */

#include "stm32_adc.h"

StatusTypeDef ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    if (hadc == NULL || hadc->Instance == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <ADC_Init+0x16>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <ADC_Init+0x1a>
    {
        return DUNGX_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e089      	b.n	8001b5e <ADC_Init+0x12e>
    }

    // 0. Đảm bảo tần số ADC < 14 MHz bằng cách chia prescaler
    RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 8001a4a:	4b47      	ldr	r3, [pc, #284]	@ (8001b68 <ADC_Init+0x138>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4a46      	ldr	r2, [pc, #280]	@ (8001b68 <ADC_Init+0x138>)
 8001a50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a54:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;  // PCLK2 / 6 = 12 MHz
 8001a56:	4b44      	ldr	r3, [pc, #272]	@ (8001b68 <ADC_Init+0x138>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4a43      	ldr	r2, [pc, #268]	@ (8001b68 <ADC_Init+0x138>)
 8001a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a60:	6053      	str	r3, [r2, #4]

    // 1. Enable ADCx Clock (tùy theo Instance)
    if (hadc->Instance == ADC1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a41      	ldr	r2, [pc, #260]	@ (8001b6c <ADC_Init+0x13c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d106      	bne.n	8001a7a <ADC_Init+0x4a>
    {
        RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b68 <ADC_Init+0x138>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a3d      	ldr	r2, [pc, #244]	@ (8001b68 <ADC_Init+0x138>)
 8001a72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	e00d      	b.n	8001a96 <ADC_Init+0x66>
    }
    else if (hadc->Instance == ADC2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a3c      	ldr	r2, [pc, #240]	@ (8001b70 <ADC_Init+0x140>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d106      	bne.n	8001a92 <ADC_Init+0x62>
    {
        RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8001a84:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <ADC_Init+0x138>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a37      	ldr	r2, [pc, #220]	@ (8001b68 <ADC_Init+0x138>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	e001      	b.n	8001a96 <ADC_Init+0x66>
        RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;
    }
#endif
    else
    {
        return DUNGX_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e063      	b.n	8001b5e <ADC_Init+0x12e>
    }

    // Reset CR1 and CR2
    hadc->Instance->CR1 = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR2 = 0;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]

    // Set scan mode
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aae:	d107      	bne.n	8001ac0 <ADC_Init+0x90>
    {
        hadc->Instance->CR1 |= ADC_SCAN_ENABLE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001abe:	605a      	str	r2, [r3, #4]
    }

    // Set data alignment
    if (hadc->Init.DataAlign == ADC_DATAALIGN_LEFT)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ac8:	d107      	bne.n	8001ada <ADC_Init+0xaa>
    {
        hadc->Instance->CR2 |= ADC_DATAALIGN_LEFT;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ad8:	609a      	str	r2, [r3, #8]
    }

    // Set continuous conversion
    if (hadc->Init.ContinuousConvMode == ENABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7b1b      	ldrb	r3, [r3, #12]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d107      	bne.n	8001af2 <ADC_Init+0xc2>
    {
        hadc->Instance->CR2 |= ADC_CR2_CONT;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0202 	orr.w	r2, r2, #2
 8001af0:	609a      	str	r2, [r3, #8]
    }

    // Set number of conversions
    hadc->Instance->SQR1 &= ~ADC_SQR1_L;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= (hadc->Init.NbrOfConversion - 1) << 20;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	051a      	lsls	r2, r3, #20
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable ADC
    ADC_ENABLE(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	609a      	str	r2, [r3, #8]

    // Short delay before calibration
    for (volatile int i = 0; i < 1000; ++i)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e002      	b.n	8001b34 <ADC_Init+0x104>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3301      	adds	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b3a:	dbf8      	blt.n	8001b2e <ADC_Init+0xfe>
        ;

    // Calibration
    hadc->Instance->CR2 |= ADC_CR2_CAL;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0204 	orr.w	r2, r2, #4
 8001b4a:	609a      	str	r2, [r3, #8]
    while (hadc->Instance->CR2 & ADC_CR2_CAL)
 8001b4c:	bf00      	nop
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f8      	bne.n	8001b4e <ADC_Init+0x11e>
        ;

    return DUNGX_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40012400 	.word	0x40012400
 8001b70:	40012800 	.word	0x40012800

08001b74 <ADC_ConfigChannel>:

StatusTypeDef ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    if (hadc == NULL || sConfig == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <ADC_ConfigChannel+0x16>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <ADC_ConfigChannel+0x1a>
    {
        return DUNGX_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0cc      	b.n	8001d28 <ADC_ConfigChannel+0x1b4>
    }

    uint8_t channel = sConfig->Channel;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	73fb      	strb	r3, [r7, #15]
    uint8_t rank = sConfig->Rank;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	73bb      	strb	r3, [r7, #14]

    if (rank < 1 || rank > 16)
 8001b9a:	7bbb      	ldrb	r3, [r7, #14]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <ADC_ConfigChannel+0x32>
 8001ba0:	7bbb      	ldrb	r3, [r7, #14]
 8001ba2:	2b10      	cmp	r3, #16
 8001ba4:	d901      	bls.n	8001baa <ADC_ConfigChannel+0x36>
        return DUNGX_ERROR; // Rank chỉ cho phép từ 1–16
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e0be      	b.n	8001d28 <ADC_ConfigChannel+0x1b4>

    // 1. Gán kênh vào đúng vị trí trong dãy SQRx
    if (rank <= 6)
 8001baa:	7bbb      	ldrb	r3, [r7, #14]
 8001bac:	2b06      	cmp	r3, #6
 8001bae:	d823      	bhi.n	8001bf8 <ADC_ConfigChannel+0x84>
    {
        // SQR3 chứa rank 1–6
        hadc->Instance->SQR3 &= ~(0x1F << ((rank - 1) * 5));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	1e5a      	subs	r2, r3, #1
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	221f      	movs	r2, #31
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	400a      	ands	r2, r1
 8001bd0:	635a      	str	r2, [r3, #52]	@ 0x34
        hadc->Instance->SQR3 |=  (channel & 0x1F) << ((rank - 1) * 5);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	f003 001f 	and.w	r0, r3, #31
 8001bde:	7bbb      	ldrb	r3, [r7, #14]
 8001be0:	1e5a      	subs	r2, r3, #1
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	fa00 f303 	lsl.w	r3, r0, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bf6:	e04b      	b.n	8001c90 <ADC_ConfigChannel+0x11c>
    }
    else if (rank <= 12)
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d823      	bhi.n	8001c46 <ADC_ConfigChannel+0xd2>
    {
        // SQR2 chứa rank 7–12
        hadc->Instance->SQR2 &= ~(0x1F << ((rank - 7) * 5));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c04:	7bbb      	ldrb	r3, [r7, #14]
 8001c06:	1fda      	subs	r2, r3, #7
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	221f      	movs	r2, #31
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hadc->Instance->SQR2 |=  (channel & 0x1F) << ((rank - 7) * 5);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	f003 001f 	and.w	r0, r3, #31
 8001c2c:	7bbb      	ldrb	r3, [r7, #14]
 8001c2e:	1fda      	subs	r2, r3, #7
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	fa00 f303 	lsl.w	r3, r0, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c44:	e024      	b.n	8001c90 <ADC_ConfigChannel+0x11c>
    }
    else
    {
        // SQR1 chứa rank 13–16
        hadc->Instance->SQR1 &= ~(0x1F << ((rank - 13) * 5));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c4c:	7bbb      	ldrb	r3, [r7, #14]
 8001c4e:	f1a3 020d 	sub.w	r2, r3, #13
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	221f      	movs	r2, #31
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	400a      	ands	r2, r1
 8001c68:	62da      	str	r2, [r3, #44]	@ 0x2c
        hadc->Instance->SQR1 |=  (channel & 0x1F) << ((rank - 13) * 5);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	f003 001f 	and.w	r0, r3, #31
 8001c76:	7bbb      	ldrb	r3, [r7, #14]
 8001c78:	f1a3 020d 	sub.w	r2, r3, #13
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	fa00 f303 	lsl.w	r3, r0, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    // --- 2. Cấu hình thời gian lấy mẫu ---
    if (channel <= 9)
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	2b09      	cmp	r3, #9
 8001c94:	d81f      	bhi.n	8001cd6 <ADC_ConfigChannel+0x162>
    {
        // SMPR2 dùng cho kênh 0–9
        hadc->Instance->SMPR2 &= ~(0x7 << (3 * channel));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6919      	ldr	r1, [r3, #16]
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	611a      	str	r2, [r3, #16]
        hadc->Instance->SMPR2 |= (sConfig->SamplingTime << (3 * channel));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6919      	ldr	r1, [r3, #16]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6898      	ldr	r0, [r3, #8]
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	611a      	str	r2, [r3, #16]
 8001cd4:	e027      	b.n	8001d26 <ADC_ConfigChannel+0x1b2>
    }
    else if (channel <= 17)
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	2b11      	cmp	r3, #17
 8001cda:	d822      	bhi.n	8001d22 <ADC_ConfigChannel+0x1ae>
    {
        // SMPR1 dùng cho kênh 10–17
        uint8_t ch_index = channel - 10;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	3b0a      	subs	r3, #10
 8001ce0:	737b      	strb	r3, [r7, #13]
        hadc->Instance->SMPR1 &= ~(0x7 << (3 * ch_index));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68d9      	ldr	r1, [r3, #12]
 8001ce8:	7b7a      	ldrb	r2, [r7, #13]
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	400a      	ands	r2, r1
 8001d00:	60da      	str	r2, [r3, #12]
        hadc->Instance->SMPR1 |= (sConfig->SamplingTime << (3 * ch_index));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68d9      	ldr	r1, [r3, #12]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6898      	ldr	r0, [r3, #8]
 8001d0c:	7b7a      	ldrb	r2, [r7, #13]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	fa00 f203 	lsl.w	r2, r0, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	e001      	b.n	8001d26 <ADC_ConfigChannel+0x1b2>
    }
    else
    {
        return DUNGX_ERROR; 
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <ADC_ConfigChannel+0x1b4>
    }

    return DUNGX_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <ADC_Start>:


StatusTypeDef ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
    if (hadc == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <ADC_Start+0x12>
        return DUNGX_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e039      	b.n	8001db8 <ADC_Start+0x86>

    uint8_t conversions = hadc->Init.NbrOfConversion;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	73fb      	strb	r3, [r7, #15]
    if (conversions < 1 || conversions > 16)
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <ADC_Start+0x24>
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	2b10      	cmp	r3, #16
 8001d54:	d901      	bls.n	8001d5a <ADC_Start+0x28>
        return DUNGX_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e02e      	b.n	8001db8 <ADC_Start+0x86>

    // Enable ADC (1st time)
    hadc->Instance->CR2 |= ADC_CR2_ADON;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	609a      	str	r2, [r3, #8]
    for (volatile int i = 0; i < 1000; ++i); // delay nhỏ
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	e002      	b.n	8001d76 <ADC_Start+0x44>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	3301      	adds	r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d7c:	dbf8      	blt.n	8001d70 <ADC_Start+0x3e>

    // Enable ADC (2nd time) – start conversion ready
    hadc->Instance->CR2 |= ADC_CR2_ADON;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0201 	orr.w	r2, r2, #1
 8001d8c:	609a      	str	r2, [r3, #8]

    // If using software trigger (default), need SWSTART
    if ((hadc->Init.ContinuousConvMode == DISABLE) &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7b1b      	ldrb	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10f      	bne.n	8001db6 <ADC_Start+0x84>
        (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE || conversions > 1))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
    if ((hadc->Init.ContinuousConvMode == DISABLE) &&
 8001d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d9e:	d002      	beq.n	8001da6 <ADC_Start+0x74>
        (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE || conversions > 1))
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d907      	bls.n	8001db6 <ADC_Start+0x84>
    {
        hadc->Instance->CR2 |= ADC_CR2_SWSTART;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001db4:	609a      	str	r2, [r3, #8]
    }

    return DUNGX_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <ADC_PollForConversion>:


StatusTypeDef ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
    if (hadc == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d108      	bne.n	8001de4 <ADC_PollForConversion+0x22>
    {
        return DUNGX_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00e      	b.n	8001df4 <ADC_PollForConversion+0x32>
    }

    while (!(hadc->Instance->SR & ADC_SR_EOC))
    {
        if (Timeout-- == 0)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	1e5a      	subs	r2, r3, #1
 8001dda:	603a      	str	r2, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <ADC_PollForConversion+0x22>
            return DUNGX_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e007      	b.n	8001df4 <ADC_PollForConversion+0x32>
    while (!(hadc->Instance->SR & ADC_SR_EOC))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f1      	beq.n	8001dd6 <ADC_PollForConversion+0x14>
    }

    return DUNGX_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <ADC_GetValue>:

uint32_t ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
    if (hadc == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <ADC_GetValue+0x12>
        return 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e002      	b.n	8001e16 <ADC_GetValue+0x18>
    return hadc->Instance->DR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <GPIO_Init>:
/* stm32_gpio.c - Minimal GPIO Implementation for STM32F103C6T6 with EXTI */

#include "stm32_gpio.h"

void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
    uint32_t pos = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]

    if (GPIOx == GPIOA) {
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a96      	ldr	r2, [pc, #600]	@ (800208c <GPIO_Init+0x26c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d106      	bne.n	8001e44 <GPIO_Init+0x24>
    	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001e36:	4b96      	ldr	r3, [pc, #600]	@ (8002090 <GPIO_Init+0x270>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	4a95      	ldr	r2, [pc, #596]	@ (8002090 <GPIO_Init+0x270>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6193      	str	r3, [r2, #24]
 8001e42:	e114      	b.n	800206e <GPIO_Init+0x24e>
        } else if (GPIOx == GPIOB) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a93      	ldr	r2, [pc, #588]	@ (8002094 <GPIO_Init+0x274>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	f040 8110 	bne.w	800206e <GPIO_Init+0x24e>
        	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001e4e:	4b90      	ldr	r3, [pc, #576]	@ (8002090 <GPIO_Init+0x270>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	4a8f      	ldr	r2, [pc, #572]	@ (8002090 <GPIO_Init+0x270>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6193      	str	r3, [r2, #24]
        }

    while ((GPIO_Init->Pin >> pos) != 0x00u)
 8001e5a:	e108      	b.n	800206e <GPIO_Init+0x24e>
    {
        if ((GPIO_Init->Pin & (1u << pos)) != 0)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2101      	movs	r1, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80fc 	beq.w	8002068 <GPIO_Init+0x248>
        {
            uint32_t shift = (pos % 8) * 4;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	613b      	str	r3, [r7, #16]
            __IO uint32_t *reg = (pos < 8) ? &GPIOx->CRL : &GPIOx->CRH;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	2b07      	cmp	r3, #7
 8001e7e:	d801      	bhi.n	8001e84 <GPIO_Init+0x64>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	e001      	b.n	8001e88 <GPIO_Init+0x68>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3304      	adds	r3, #4
 8001e88:	60fb      	str	r3, [r7, #12]

            *reg &= ~(0xFu << shift);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	210f      	movs	r1, #15
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	401a      	ands	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	601a      	str	r2, [r3, #0]

            if (GPIO_Init->Mode == GPIO_MODE_INPUT)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d12f      	bne.n	8001f06 <GPIO_Init+0xe6>
            {
                if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10e      	bne.n	8001ecc <GPIO_Init+0xac>
                {
                    *reg |= (0x08u << shift); // CNF = 10 input PU/PD
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2108      	movs	r1, #8
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	601a      	str	r2, [r3, #0]
                    GPIOx->BSRR = (1u << pos);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	611a      	str	r2, [r3, #16]
 8001eca:	e05f      	b.n	8001f8c <GPIO_Init+0x16c>
                }
                else if (GPIO_Init->Pull == GPIO_PULLDOWN)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d10e      	bne.n	8001ef2 <GPIO_Init+0xd2>
                {
                    *reg |= (0x08u << shift); // CNF = 10 input PU/PD
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2108      	movs	r1, #8
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	601a      	str	r2, [r3, #0]
                    GPIOx->BRR = (1u << pos);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	409a      	lsls	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	615a      	str	r2, [r3, #20]
 8001ef0:	e04c      	b.n	8001f8c <GPIO_Init+0x16c>
                }
                else
                {
                    *reg |= (0x04u << shift); // CNF = 01 floating
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	431a      	orrs	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e042      	b.n	8001f8c <GPIO_Init+0x16c>
                }
            }
            else if (GPIO_Init->Mode == GPIO_MODE_ANALOG)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d104      	bne.n	8001f18 <GPIO_Init+0xf8>
            {
                *reg |= (0x00u << shift); // CNF = 00 analog
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e039      	b.n	8001f8c <GPIO_Init+0x16c>
            }
            else // Output or AF
            {
                uint32_t mode = 0x00u;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
                if (GPIO_Init->Speed == GPIO_SPEED_LOW) mode = 0x02;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <GPIO_Init+0x10a>
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	e008      	b.n	8001f3c <GPIO_Init+0x11c>
                else if (GPIO_Init->Speed == GPIO_SPEED_MEDIUM) mode = 0x01;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <GPIO_Init+0x118>
 8001f32:	2301      	movs	r3, #1
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	e001      	b.n	8001f3c <GPIO_Init+0x11c>
                else mode = 0x03;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	61bb      	str	r3, [r7, #24]

                uint32_t cnf = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
                if (GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) cnf = 0x00;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d102      	bne.n	8001f4e <GPIO_Init+0x12e>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	e013      	b.n	8001f76 <GPIO_Init+0x156>
                else if (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) cnf = 0x04;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b11      	cmp	r3, #17
 8001f54:	d102      	bne.n	8001f5c <GPIO_Init+0x13c>
 8001f56:	2304      	movs	r3, #4
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e00c      	b.n	8001f76 <GPIO_Init+0x156>
                else if (GPIO_Init->Mode == GPIO_MODE_AF_PP) cnf = 0x08;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d102      	bne.n	8001f6a <GPIO_Init+0x14a>
 8001f64:	2308      	movs	r3, #8
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	e005      	b.n	8001f76 <GPIO_Init+0x156>
                else if (GPIO_Init->Mode == GPIO_MODE_AF_OD) cnf = 0x0C;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b12      	cmp	r3, #18
 8001f70:	d101      	bne.n	8001f76 <GPIO_Init+0x156>
 8001f72:	230c      	movs	r3, #12
 8001f74:	617b      	str	r3, [r7, #20]

                *reg |= ((mode | cnf) << shift);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	69b9      	ldr	r1, [r7, #24]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	4319      	orrs	r1, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	431a      	orrs	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	601a      	str	r2, [r3, #0]
            }

            // EXTI configuration if needed
            if ((GPIO_Init->Mode & 0x10000000u) != 0)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d067      	beq.n	8002068 <GPIO_Init+0x248>
            {
                uint32_t exti_line = 1u << pos;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	60bb      	str	r3, [r7, #8]
                AFIO->EXTICR[pos >> 2] &= ~(0xFu << (4 * (pos & 0x03)));
 8001fa2:	4a3d      	ldr	r2, [pc, #244]	@ (8002098 <GPIO_Init+0x278>)
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	4836      	ldr	r0, [pc, #216]	@ (8002098 <GPIO_Init+0x278>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                AFIO->EXTICR[pos >> 2] |= ((GPIOx == GPIOA ? 0 : (GPIOx == GPIOB ? 1 : 2)) << (4 * (pos & 0x03)));
 8001fcc:	4a32      	ldr	r2, [pc, #200]	@ (8002098 <GPIO_Init+0x278>)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	492c      	ldr	r1, [pc, #176]	@ (800208c <GPIO_Init+0x26c>)
 8001fdc:	428b      	cmp	r3, r1
 8001fde:	d007      	beq.n	8001ff0 <GPIO_Init+0x1d0>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	492c      	ldr	r1, [pc, #176]	@ (8002094 <GPIO_Init+0x274>)
 8001fe4:	428b      	cmp	r3, r1
 8001fe6:	d101      	bne.n	8001fec <GPIO_Init+0x1cc>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e002      	b.n	8001ff2 <GPIO_Init+0x1d2>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e000      	b.n	8001ff2 <GPIO_Init+0x1d2>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	69f9      	ldr	r1, [r7, #28]
 8001ff4:	f001 0103 	and.w	r1, r1, #3
 8001ff8:	0089      	lsls	r1, r1, #2
 8001ffa:	408b      	lsls	r3, r1
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4926      	ldr	r1, [pc, #152]	@ (8002098 <GPIO_Init+0x278>)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	4302      	orrs	r2, r0
 8002006:	3302      	adds	r3, #2
 8002008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (GPIO_Init->Mode & 0x00100000u) EXTI->RTSR |= exti_line; else EXTI->RTSR &= ~exti_line;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <GPIO_Init+0x206>
 8002018:	4b20      	ldr	r3, [pc, #128]	@ (800209c <GPIO_Init+0x27c>)
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	491f      	ldr	r1, [pc, #124]	@ (800209c <GPIO_Init+0x27c>)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
 8002024:	e006      	b.n	8002034 <GPIO_Init+0x214>
 8002026:	4b1d      	ldr	r3, [pc, #116]	@ (800209c <GPIO_Init+0x27c>)
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	43db      	mvns	r3, r3
 800202e:	491b      	ldr	r1, [pc, #108]	@ (800209c <GPIO_Init+0x27c>)
 8002030:	4013      	ands	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
                if (GPIO_Init->Mode & 0x00200000u) EXTI->FTSR |= exti_line; else EXTI->FTSR &= ~exti_line;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <GPIO_Init+0x22e>
 8002040:	4b16      	ldr	r3, [pc, #88]	@ (800209c <GPIO_Init+0x27c>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4915      	ldr	r1, [pc, #84]	@ (800209c <GPIO_Init+0x27c>)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
 800204c:	e006      	b.n	800205c <GPIO_Init+0x23c>
 800204e:	4b13      	ldr	r3, [pc, #76]	@ (800209c <GPIO_Init+0x27c>)
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	43db      	mvns	r3, r3
 8002056:	4911      	ldr	r1, [pc, #68]	@ (800209c <GPIO_Init+0x27c>)
 8002058:	4013      	ands	r3, r2
 800205a:	60cb      	str	r3, [r1, #12]

                EXTI->IMR |= exti_line;
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <GPIO_Init+0x27c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	490e      	ldr	r1, [pc, #56]	@ (800209c <GPIO_Init+0x27c>)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
            }
        }
        pos++;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3301      	adds	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
    while ((GPIO_Init->Pin >> pos) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f aeef 	bne.w	8001e5c <GPIO_Init+0x3c>
    }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	3724      	adds	r7, #36	@ 0x24
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40010800 	.word	0x40010800
 8002090:	40021000 	.word	0x40021000
 8002094:	40010c00 	.word	0x40010c00
 8002098:	40010000 	.word	0x40010000
 800209c:	40010400 	.word	0x40010400

080020a0 <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	707b      	strb	r3, [r7, #1]
    if (PinState != GPIO_PIN_RESET)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <GPIO_WritePin+0x1e>
        GPIOx->BSRR = GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	611a      	str	r2, [r3, #16]
    else
        GPIOx->BRR = GPIO_Pin;
}
 80020bc:	e002      	b.n	80020c4 <GPIO_WritePin+0x24>
        GPIOx->BRR = GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	615a      	str	r2, [r3, #20]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <GPIO_ReadPin>:

GPIO_PinState GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	807b      	strh	r3, [r7, #2]
    return (GPIOx->IDR & GPIO_Pin) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
	...

080020f8 <TIM_Base_Init>:
/* stm32_tim.c - Minimal Timer Implementation for STM32F103C6T6 */

#include "stm32_tim.h"

StatusTypeDef TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
    if (htim == NULL || htim->Instance == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <TIM_Base_Init+0x16>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <TIM_Base_Init+0x1a>
        return DUNGX_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e041      	b.n	8002196 <TIM_Base_Init+0x9e>

    // Enable timer clock
    if (htim->Instance == TIM1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a22      	ldr	r2, [pc, #136]	@ (80021a0 <TIM_Base_Init+0xa8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d106      	bne.n	800212a <TIM_Base_Init+0x32>
        RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800211c:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <TIM_Base_Init+0xac>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a20      	ldr	r2, [pc, #128]	@ (80021a4 <TIM_Base_Init+0xac>)
 8002122:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	e016      	b.n	8002158 <TIM_Base_Init+0x60>
    else if (htim->Instance == TIM2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002132:	d106      	bne.n	8002142 <TIM_Base_Init+0x4a>
        RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002134:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <TIM_Base_Init+0xac>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	4a1a      	ldr	r2, [pc, #104]	@ (80021a4 <TIM_Base_Init+0xac>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	61d3      	str	r3, [r2, #28]
 8002140:	e00a      	b.n	8002158 <TIM_Base_Init+0x60>
    else if (htim->Instance == TIM3)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a18      	ldr	r2, [pc, #96]	@ (80021a8 <TIM_Base_Init+0xb0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d105      	bne.n	8002158 <TIM_Base_Init+0x60>
        RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800214c:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <TIM_Base_Init+0xac>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <TIM_Base_Init+0xac>)
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	61d3      	str	r3, [r2, #28]

    // Cấu hình prescaler và ARR
    htim->Instance->PSC = htim->Init.Prescaler;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6852      	ldr	r2, [r2, #4]
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = htim->Init.Period;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68d2      	ldr	r2, [r2, #12]
 800216a:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Giữ lại các bit khác, chỉ thay thế mode và division
    htim->Instance->CR1 &= ~(TIM_CR1_CMS | TIM_CR1_DIR | TIM_CR1_CKD);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 725c 	bic.w	r2, r2, #880	@ 0x370
 800217a:	601a      	str	r2, [r3, #0]
    htim->Instance->CR1 |= htim->Init.CounterMode | htim->Init.ClockDivision;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

    return DUNGX_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	40012c00 	.word	0x40012c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40000400 	.word	0x40000400

080021ac <TIM_PWM_Init>:

StatusTypeDef TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    return TIM_Base_Init(htim); // For simplicity, PWM init is same as base init
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff9f 	bl	80020f8 <TIM_Base_Init>
 80021ba:	4603      	mov	r3, r0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <TIM_PWM_ConfigChannel>:

StatusTypeDef TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
    if (htim == NULL || sConfig == NULL)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <TIM_PWM_ConfigChannel+0x18>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <TIM_PWM_ConfigChannel+0x1c>
        return DUNGX_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0ea      	b.n	80023b6 <TIM_PWM_ConfigChannel+0x1f2>

    // Set mode and polarity
    switch (Channel)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	f200 80e4 	bhi.w	80023b0 <TIM_PWM_ConfigChannel+0x1ec>
 80021e8:	a201      	add	r2, pc, #4	@ (adr r2, 80021f0 <TIM_PWM_ConfigChannel+0x2c>)
 80021ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ee:	bf00      	nop
 80021f0:	08002225 	.word	0x08002225
 80021f4:	080023b1 	.word	0x080023b1
 80021f8:	080023b1 	.word	0x080023b1
 80021fc:	080023b1 	.word	0x080023b1
 8002200:	080022a5 	.word	0x080022a5
 8002204:	080023b1 	.word	0x080023b1
 8002208:	080023b1 	.word	0x080023b1
 800220c:	080023b1 	.word	0x080023b1
 8002210:	080022ff 	.word	0x080022ff
 8002214:	080023b1 	.word	0x080023b1
 8002218:	080023b1 	.word	0x080023b1
 800221c:	080023b1 	.word	0x080023b1
 8002220:	08002357 	.word	0x08002357
    {
    case TIM_CHANNEL_1:
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1M;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002232:	619a      	str	r2, [r3, #24]
        htim->Instance->CCMR1 |= sConfig->OCMode;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6999      	ldr	r1, [r3, #24]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	619a      	str	r2, [r3, #24]
        htim->Instance->CCR1 = sConfig->Pulse;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	6852      	ldr	r2, [r2, #4]
 800224e:	635a      	str	r2, [r3, #52]	@ 0x34

        htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0208 	orr.w	r2, r2, #8
 800225e:	619a      	str	r2, [r3, #24]
        if (sConfig->OCFastMode == TIM_OCFAST_DISABLE)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d107      	bne.n	8002278 <TIM_PWM_ConfigChannel+0xb4>
            htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0204 	bic.w	r2, r2, #4
 8002276:	619a      	str	r2, [r3, #24]
        if (sConfig->OCPolarity == TIM_OCPOLARITY_LOW)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d108      	bne.n	8002292 <TIM_PWM_ConfigChannel+0xce>
            htim->Instance->CCER |= TIM_CCER_CC1P;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a1a      	ldr	r2, [r3, #32]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0202 	orr.w	r2, r2, #2
 800228e:	621a      	str	r2, [r3, #32]
        else
            htim->Instance->CCER &= ~TIM_CCER_CC1P;
        break;
 8002290:	e090      	b.n	80023b4 <TIM_PWM_ConfigChannel+0x1f0>
            htim->Instance->CCER &= ~TIM_CCER_CC1P;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a1a      	ldr	r2, [r3, #32]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0202 	bic.w	r2, r2, #2
 80022a0:	621a      	str	r2, [r3, #32]
        break;
 80022a2:	e087      	b.n	80023b4 <TIM_PWM_ConfigChannel+0x1f0>
    case TIM_CHANNEL_2:
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2M;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80022b2:	619a      	str	r2, [r3, #24]
        htim->Instance->CCMR1 |= (sConfig->OCMode << 8);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6999      	ldr	r1, [r3, #24]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	021a      	lsls	r2, r3, #8
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	619a      	str	r2, [r3, #24]
        htim->Instance->CCR2 = sConfig->Pulse;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	6852      	ldr	r2, [r2, #4]
 80022d0:	639a      	str	r2, [r3, #56]	@ 0x38
        if (sConfig->OCPolarity == TIM_OCPOLARITY_LOW)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d108      	bne.n	80022ec <TIM_PWM_ConfigChannel+0x128>
            htim->Instance->CCER |= TIM_CCER_CC2P;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0220 	orr.w	r2, r2, #32
 80022e8:	621a      	str	r2, [r3, #32]
        else
            htim->Instance->CCER &= ~TIM_CCER_CC2P;
        break;
 80022ea:	e063      	b.n	80023b4 <TIM_PWM_ConfigChannel+0x1f0>
            htim->Instance->CCER &= ~TIM_CCER_CC2P;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0220 	bic.w	r2, r2, #32
 80022fa:	621a      	str	r2, [r3, #32]
        break;
 80022fc:	e05a      	b.n	80023b4 <TIM_PWM_ConfigChannel+0x1f0>
    case TIM_CHANNEL_3:
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3M;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69da      	ldr	r2, [r3, #28]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800230c:	61da      	str	r2, [r3, #28]
        htim->Instance->CCMR2 |= sConfig->OCMode;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69d9      	ldr	r1, [r3, #28]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	61da      	str	r2, [r3, #28]
        htim->Instance->CCR3 = sConfig->Pulse;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	6852      	ldr	r2, [r2, #4]
 8002328:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (sConfig->OCPolarity == TIM_OCPOLARITY_LOW)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d108      	bne.n	8002344 <TIM_PWM_ConfigChannel+0x180>
            htim->Instance->CCER |= TIM_CCER_CC3P;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6a1a      	ldr	r2, [r3, #32]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002340:	621a      	str	r2, [r3, #32]
        else
            htim->Instance->CCER &= ~TIM_CCER_CC3P;
        break;
 8002342:	e037      	b.n	80023b4 <TIM_PWM_ConfigChannel+0x1f0>
            htim->Instance->CCER &= ~TIM_CCER_CC3P;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6a1a      	ldr	r2, [r3, #32]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002352:	621a      	str	r2, [r3, #32]
        break;
 8002354:	e02e      	b.n	80023b4 <TIM_PWM_ConfigChannel+0x1f0>
    case TIM_CHANNEL_4:
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4M;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002364:	61da      	str	r2, [r3, #28]
        htim->Instance->CCMR2 |= (sConfig->OCMode << 8);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69d9      	ldr	r1, [r3, #28]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	021a      	lsls	r2, r3, #8
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	61da      	str	r2, [r3, #28]
        htim->Instance->CCR4 = sConfig->Pulse;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	6852      	ldr	r2, [r2, #4]
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40
        if (sConfig->OCPolarity == TIM_OCPOLARITY_LOW)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d108      	bne.n	800239e <TIM_PWM_ConfigChannel+0x1da>
            htim->Instance->CCER |= TIM_CCER_CC4P;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a1a      	ldr	r2, [r3, #32]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800239a:	621a      	str	r2, [r3, #32]
        else
            htim->Instance->CCER &= ~TIM_CCER_CC4P;
        break;
 800239c:	e00a      	b.n	80023b4 <TIM_PWM_ConfigChannel+0x1f0>
            htim->Instance->CCER &= ~TIM_CCER_CC4P;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a1a      	ldr	r2, [r3, #32]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023ac:	621a      	str	r2, [r3, #32]
        break;
 80023ae:	e001      	b.n	80023b4 <TIM_PWM_ConfigChannel+0x1f0>
    default:
        return DUNGX_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <TIM_PWM_ConfigChannel+0x1f2>
    }

    return DUNGX_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <TIM_PWM_Start>:

StatusTypeDef TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
    switch (Channel)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	d841      	bhi.n	8002454 <TIM_PWM_Start+0x94>
 80023d0:	a201      	add	r2, pc, #4	@ (adr r2, 80023d8 <TIM_PWM_Start+0x18>)
 80023d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d6:	bf00      	nop
 80023d8:	0800240d 	.word	0x0800240d
 80023dc:	08002455 	.word	0x08002455
 80023e0:	08002455 	.word	0x08002455
 80023e4:	08002455 	.word	0x08002455
 80023e8:	0800241f 	.word	0x0800241f
 80023ec:	08002455 	.word	0x08002455
 80023f0:	08002455 	.word	0x08002455
 80023f4:	08002455 	.word	0x08002455
 80023f8:	08002431 	.word	0x08002431
 80023fc:	08002455 	.word	0x08002455
 8002400:	08002455 	.word	0x08002455
 8002404:	08002455 	.word	0x08002455
 8002408:	08002443 	.word	0x08002443
    {
    case TIM_CHANNEL_1:
        htim->Instance->CCER |= TIM_CCER_CC1E;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6a1a      	ldr	r2, [r3, #32]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	621a      	str	r2, [r3, #32]
        break;
 800241c:	e01c      	b.n	8002458 <TIM_PWM_Start+0x98>
    case TIM_CHANNEL_2:
        htim->Instance->CCER |= TIM_CCER_CC2E;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0210 	orr.w	r2, r2, #16
 800242c:	621a      	str	r2, [r3, #32]
        break;
 800242e:	e013      	b.n	8002458 <TIM_PWM_Start+0x98>
    case TIM_CHANNEL_3:
        htim->Instance->CCER |= TIM_CCER_CC3E;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800243e:	621a      	str	r2, [r3, #32]
        break;
 8002440:	e00a      	b.n	8002458 <TIM_PWM_Start+0x98>
    case TIM_CHANNEL_4:
        htim->Instance->CCER |= TIM_CCER_CC4E;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002450:	621a      	str	r2, [r3, #32]
        break;
 8002452:	e001      	b.n	8002458 <TIM_PWM_Start+0x98>
    default:
        return DUNGX_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e01d      	b.n	8002494 <TIM_PWM_Start+0xd4>
    }

    if (htim->Instance == TIM1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a10      	ldr	r2, [pc, #64]	@ (80024a0 <TIM_PWM_Start+0xe0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10f      	bne.n	8002482 <TIM_PWM_Start+0xc2>
    {
        htim->Instance->BDTR |= TIM_BDTR_MOE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44
        htim->Instance->CR1 |= TIM_CR1_ARPE; // Auto-reload preload enable
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002480:	601a      	str	r2, [r3, #0]
    }

    TIM_ENABLE(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
    return DUNGX_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40012c00 	.word	0x40012c00

080024a4 <TIM_SetCompare>:
    TIM_DISABLE(htim);
    return DUNGX_OK;
}

void TIM_SetCompare(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t Compare)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
    if (htim == NULL)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d034      	beq.n	8002520 <TIM_SetCompare+0x7c>
        return;

    switch (Channel)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b0c      	cmp	r3, #12
 80024ba:	d833      	bhi.n	8002524 <TIM_SetCompare+0x80>
 80024bc:	a201      	add	r2, pc, #4	@ (adr r2, 80024c4 <TIM_SetCompare+0x20>)
 80024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c2:	bf00      	nop
 80024c4:	080024f9 	.word	0x080024f9
 80024c8:	08002525 	.word	0x08002525
 80024cc:	08002525 	.word	0x08002525
 80024d0:	08002525 	.word	0x08002525
 80024d4:	08002503 	.word	0x08002503
 80024d8:	08002525 	.word	0x08002525
 80024dc:	08002525 	.word	0x08002525
 80024e0:	08002525 	.word	0x08002525
 80024e4:	0800250d 	.word	0x0800250d
 80024e8:	08002525 	.word	0x08002525
 80024ec:	08002525 	.word	0x08002525
 80024f0:	08002525 	.word	0x08002525
 80024f4:	08002517 	.word	0x08002517
    {
    case TIM_CHANNEL_1:
        htim->Instance->CCR1 = Compare;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8002500:	e011      	b.n	8002526 <TIM_SetCompare+0x82>
    case TIM_CHANNEL_2:
        htim->Instance->CCR2 = Compare;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800250a:	e00c      	b.n	8002526 <TIM_SetCompare+0x82>
    case TIM_CHANNEL_3:
        htim->Instance->CCR3 = Compare;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8002514:	e007      	b.n	8002526 <TIM_SetCompare+0x82>
    case TIM_CHANNEL_4:
        htim->Instance->CCR4 = Compare;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800251e:	e002      	b.n	8002526 <TIM_SetCompare+0x82>
        return;
 8002520:	bf00      	nop
 8002522:	e000      	b.n	8002526 <TIM_SetCompare+0x82>
    default:
        break;
 8002524:	bf00      	nop
    }
}
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop

08002530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	2b00      	cmp	r3, #0
 8002540:	db0b      	blt.n	800255a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4906      	ldr	r1, [pc, #24]	@ (8002564 <__NVIC_EnableIRQ+0x34>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2001      	movs	r0, #1
 8002552:	fa00 f202 	lsl.w	r2, r0, r2
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	@ (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	@ (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <UART_Init>:
static StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
static StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);


StatusTypeDef UART_Init(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
    if (huart == NULL || huart->Instance == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <UART_Init+0x16>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <UART_Init+0x1a>
        return DUNGX_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0ca      	b.n	800276c <UART_Init+0x1b0>

    // Enable clock for USART1 and GPIOA
    if (huart->Instance == USART1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a66      	ldr	r2, [pc, #408]	@ (8002774 <UART_Init+0x1b8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d107      	bne.n	80025f0 <UART_Init+0x34>
    {
        RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPAEN;
 80025e0:	4b65      	ldr	r3, [pc, #404]	@ (8002778 <UART_Init+0x1bc>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4a64      	ldr	r2, [pc, #400]	@ (8002778 <UART_Init+0x1bc>)
 80025e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6193      	str	r3, [r2, #24]
    }

    if (huart->Instance == USART1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5f      	ldr	r2, [pc, #380]	@ (8002774 <UART_Init+0x1b8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d12b      	bne.n	8002652 <UART_Init+0x96>
    {
        RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80025fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002778 <UART_Init+0x1bc>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002778 <UART_Init+0x1bc>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	6193      	str	r3, [r2, #24]

        // PA9 - TX
        GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 8002606:	4b5d      	ldr	r3, [pc, #372]	@ (800277c <UART_Init+0x1c0>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a5c      	ldr	r2, [pc, #368]	@ (800277c <UART_Init+0x1c0>)
 800260c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002610:	6053      	str	r3, [r2, #4]
        GPIOA->CRH |= GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0;
 8002612:	4b5a      	ldr	r3, [pc, #360]	@ (800277c <UART_Init+0x1c0>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a59      	ldr	r2, [pc, #356]	@ (800277c <UART_Init+0x1c0>)
 8002618:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800261c:	6053      	str	r3, [r2, #4]
        GPIOA->CRH |= GPIO_CRH_CNF9_1;
 800261e:	4b57      	ldr	r3, [pc, #348]	@ (800277c <UART_Init+0x1c0>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a56      	ldr	r2, [pc, #344]	@ (800277c <UART_Init+0x1c0>)
 8002624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002628:	6053      	str	r3, [r2, #4]

        // PA10 - RX
        GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 800262a:	4b54      	ldr	r3, [pc, #336]	@ (800277c <UART_Init+0x1c0>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a53      	ldr	r2, [pc, #332]	@ (800277c <UART_Init+0x1c0>)
 8002630:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002634:	6053      	str	r3, [r2, #4]
        GPIOA->CRH |= GPIO_CRH_CNF10_0; // Input floating
 8002636:	4b51      	ldr	r3, [pc, #324]	@ (800277c <UART_Init+0x1c0>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a50      	ldr	r2, [pc, #320]	@ (800277c <UART_Init+0x1c0>)
 800263c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002640:	6053      	str	r3, [r2, #4]

        NVIC_EnableIRQ(USART1_IRQn);
 8002642:	2025      	movs	r0, #37	@ 0x25
 8002644:	f7ff ff74 	bl	8002530 <__NVIC_EnableIRQ>
        NVIC_SetPriority(USART1_IRQn, 1);
 8002648:	2101      	movs	r1, #1
 800264a:	2025      	movs	r0, #37	@ 0x25
 800264c:	f7ff ff8c 	bl	8002568 <__NVIC_SetPriority>
 8002650:	e02f      	b.n	80026b2 <UART_Init+0xf6>
    }

    else if (huart->Instance == USART2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a4a      	ldr	r2, [pc, #296]	@ (8002780 <UART_Init+0x1c4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d12a      	bne.n	80026b2 <UART_Init+0xf6>
    {
        RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800265c:	4b46      	ldr	r3, [pc, #280]	@ (8002778 <UART_Init+0x1bc>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	4a45      	ldr	r2, [pc, #276]	@ (8002778 <UART_Init+0x1bc>)
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	6193      	str	r3, [r2, #24]

        // PA2 - TX
        GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 8002668:	4b44      	ldr	r3, [pc, #272]	@ (800277c <UART_Init+0x1c0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a43      	ldr	r2, [pc, #268]	@ (800277c <UART_Init+0x1c0>)
 800266e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002672:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_MODE2_1 | GPIO_CRL_MODE2_0;
 8002674:	4b41      	ldr	r3, [pc, #260]	@ (800277c <UART_Init+0x1c0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a40      	ldr	r2, [pc, #256]	@ (800277c <UART_Init+0x1c0>)
 800267a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800267e:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_CNF2_1;
 8002680:	4b3e      	ldr	r3, [pc, #248]	@ (800277c <UART_Init+0x1c0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a3d      	ldr	r2, [pc, #244]	@ (800277c <UART_Init+0x1c0>)
 8002686:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800268a:	6013      	str	r3, [r2, #0]

        // PA3 – RX – input floating
        GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 800268c:	4b3b      	ldr	r3, [pc, #236]	@ (800277c <UART_Init+0x1c0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3a      	ldr	r2, [pc, #232]	@ (800277c <UART_Init+0x1c0>)
 8002692:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002696:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_CNF3_0; // Input floating (01)
 8002698:	4b38      	ldr	r3, [pc, #224]	@ (800277c <UART_Init+0x1c0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a37      	ldr	r2, [pc, #220]	@ (800277c <UART_Init+0x1c0>)
 800269e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a2:	6013      	str	r3, [r2, #0]

        NVIC_EnableIRQ(USART2_IRQn);
 80026a4:	2026      	movs	r0, #38	@ 0x26
 80026a6:	f7ff ff43 	bl	8002530 <__NVIC_EnableIRQ>
        NVIC_SetPriority(USART2_IRQn, 1);
 80026aa:	2101      	movs	r1, #1
 80026ac:	2026      	movs	r0, #38	@ 0x26
 80026ae:	f7ff ff5b 	bl	8002568 <__NVIC_SetPriority>
    }
    // Configure baud rate
    uint32_t pclk = 72000000;
 80026b2:	4b34      	ldr	r3, [pc, #208]	@ (8002784 <UART_Init+0x1c8>)
 80026b4:	60fb      	str	r3, [r7, #12]
    huart->Instance->BRR = (pclk + huart->Init.BaudRate / 2) / huart->Init.BaudRate;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	085a      	lsrs	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	18d1      	adds	r1, r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	fbb1 f2f2 	udiv	r2, r1, r2
 80026cc:	609a      	str	r2, [r3, #8]

    // Clear relevant bits, then set
    huart->Instance->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80026dc:	f023 030c 	bic.w	r3, r3, #12
 80026e0:	60d3      	str	r3, [r2, #12]
    huart->Instance->CR1 |= huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68d9      	ldr	r1, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	60da      	str	r2, [r3, #12]

    // ========================
    // CR2 - Stop bits
    // ========================
    huart->Instance->CR2 &= ~(USART_CR2_STOP);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800270e:	611a      	str	r2, [r3, #16]
    huart->Instance->CR2 |= huart->Init.StopBits;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6919      	ldr	r1, [r3, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	611a      	str	r2, [r3, #16]

    // ========================
    // CR3 - Hardware flow control
    // ========================
    huart->Instance->CR3 &= ~(USART_CR3_CTSE | USART_CR3_RTSE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002730:	615a      	str	r2, [r3, #20]
    huart->Instance->CR3 |= huart->Init.HwFlowCtl;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6959      	ldr	r1, [r3, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699a      	ldr	r2, [r3, #24]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	615a      	str	r2, [r3, #20]

    // Enable USART
    huart->Instance->CR1 |= USART_CR1_UE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002752:	60da      	str	r2, [r3, #12]

    // Set internal state
    huart->gState = UART_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    huart->RxState = UART_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    huart->ErrorCode = UART_ERROR_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	639a      	str	r2, [r3, #56]	@ 0x38

    return DUNGX_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40013800 	.word	0x40013800
 8002778:	40021000 	.word	0x40021000
 800277c:	40010800 	.word	0x40010800
 8002780:	40004400 	.word	0x40004400
 8002784:	044aa200 	.word	0x044aa200

08002788 <UART_Transmit>:

StatusTypeDef UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	80fb      	strh	r3, [r7, #6]
    if (huart == NULL || pData == NULL || Size == 0)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <UART_Transmit+0x22>
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <UART_Transmit+0x22>
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <UART_Transmit+0x50>
        return DUNGX_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e029      	b.n	8002802 <UART_Transmit+0x7a>
    while (Size--)
    {
        // Wait until TXE (Transmit Data Register Empty)
        while (!(huart->Instance->SR & USART_SR_TXE))
        {
            if (Timeout-- == 0)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	603a      	str	r2, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <UART_Transmit+0x34>
                return DUNGX_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e022      	b.n	8002802 <UART_Transmit+0x7a>
        while (!(huart->Instance->SR & USART_SR_TXE))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f1      	beq.n	80027ae <UART_Transmit+0x26>
        }

        huart->Instance->DR = (*pData++ & 0xFF);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	60ba      	str	r2, [r7, #8]
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
    while (Size--)
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	1e5a      	subs	r2, r3, #1
 80027dc:	80fa      	strh	r2, [r7, #6]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1ec      	bne.n	80027bc <UART_Transmit+0x34>
    }

    // Wait for TC (Transmission Complete)
    while (!(huart->Instance->SR & USART_SR_TC))
 80027e2:	e006      	b.n	80027f2 <UART_Transmit+0x6a>
    {
        if (Timeout-- == 0)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	1e5a      	subs	r2, r3, #1
 80027e8:	603a      	str	r2, [r7, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <UART_Transmit+0x6a>
            return DUNGX_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e007      	b.n	8002802 <UART_Transmit+0x7a>
    while (!(huart->Instance->SR & USART_SR_TC))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f1      	beq.n	80027e4 <UART_Transmit+0x5c>
    }

    return DUNGX_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <UART_IRQHandler>:

    return DUNGX_OK;
}

void UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
    uint32_t isrflags = huart->Instance->SR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]
    uint32_t cr1its = huart->Instance->CR1;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	60bb      	str	r3, [r7, #8]

    /* Check for RXNE (data received) */
    if ((isrflags & USART_SR_RXNE) && (cr1its & USART_CR1_RXNEIE))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <UART_IRQHandler+0x34>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <UART_IRQHandler+0x34>
    {
        UART_Receive_IT(huart); // Gọi hàm xử lý nhận IT
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f847 	bl	80028cc <UART_Receive_IT>
        return;
 800283e:	e042      	b.n	80028c6 <UART_IRQHandler+0xba>
    }

    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <UART_IRQHandler+0x50>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <UART_IRQHandler+0x50>
      {
        UART_Transmit_IT(huart);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f8a3 	bl	80029a0 <UART_Transmit_IT>
        return;
 800285a:	e034      	b.n	80028c6 <UART_IRQHandler+0xba>
      }


    /* Check for errors */
    if ((isrflags & (USART_SR_PE | USART_SR_FE | USART_SR_NE | USART_SR_ORE)) != 0)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	2b00      	cmp	r3, #0
 8002864:	d02f      	beq.n	80028c6 <UART_IRQHandler+0xba>
    {
        if (isrflags & USART_SR_PE)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <UART_IRQHandler+0x70>
            huart->ErrorCode |= UART_ERROR_PE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	639a      	str	r2, [r3, #56]	@ 0x38
        if (isrflags & USART_SR_FE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <UART_IRQHandler+0x86>
            huart->ErrorCode |= UART_ERROR_FE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288a:	f043 0204 	orr.w	r2, r3, #4
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	639a      	str	r2, [r3, #56]	@ 0x38
        if (isrflags & USART_SR_NE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <UART_IRQHandler+0x9c>
            huart->ErrorCode |= UART_ERROR_NE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a0:	f043 0202 	orr.w	r2, r3, #2
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	639a      	str	r2, [r3, #56]	@ 0x38
        if (isrflags & USART_SR_ORE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <UART_IRQHandler+0xb2>
            huart->ErrorCode |= UART_ERROR_ORE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b6:	f043 0208 	orr.w	r2, r3, #8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	639a      	str	r2, [r3, #56]	@ 0x38

        huart->gState = UART_STATE_ERROR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	22e0      	movs	r2, #224	@ 0xe0
 80028c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
}
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <UART_Receive_IT>:

static StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    if (huart->RxState != UART_STATE_BUSY_RX)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b22      	cmp	r3, #34	@ 0x22
 80028de:	d001      	beq.n	80028e4 <UART_Receive_IT+0x18>
        return DUNGX_BUSY;
 80028e0:	2302      	movs	r3, #2
 80028e2:	e059      	b.n	8002998 <UART_Receive_IT+0xcc>

    uint8_t *pdata8bits;
    uint16_t *pdata16bits;

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ec:	d115      	bne.n	800291a <UART_Receive_IT+0x4e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d111      	bne.n	800291a <UART_Receive_IT+0x4e>
    {
        pdata16bits = (uint16_t *)huart->pRxBuffPtr;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fa:	60fb      	str	r3, [r7, #12]
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	b29b      	uxth	r3, r3
 8002904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002912:	1c9a      	adds	r2, r3, #2
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28
 8002918:	e024      	b.n	8002964 <UART_Receive_IT+0x98>
    }
    else
    {
        pdata8bits = (uint8_t *)huart->pRxBuffPtr;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291e:	60bb      	str	r3, [r7, #8]

        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) ||
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002928:	d007      	beq.n	800293a <UART_Receive_IT+0x6e>
            ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) ||
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <UART_Receive_IT+0x7c>
            ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <UART_Receive_IT+0x7c>
        {
            *pdata8bits = (uint8_t)(huart->Instance->DR & 0xFF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	701a      	strb	r2, [r3, #0]
 8002946:	e008      	b.n	800295a <UART_Receive_IT+0x8e>
        }
        else
        {
            *pdata8bits = (uint8_t)(huart->Instance->DR & 0x7F);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	701a      	strb	r2, [r3, #0]
        }
        huart->pRxBuffPtr += 1U;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29b      	uxth	r3, r3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4619      	mov	r1, r3
 8002972:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10e      	bne.n	8002996 <UART_Receive_IT+0xca>
    {
        // Tắt ngắt RXNE
        huart->Instance->CR1 &= ~USART_CR1_RXNEIE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0220 	bic.w	r2, r2, #32
 8002986:	60da      	str	r2, [r3, #12]

        // Cập nhật trạng thái
        huart->RxState = UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        // Gọi callback
        UART_RxCpltCallback(huart);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 feeb 	bl	800376c <UART_RxCpltCallback>
    }

    return DUNGX_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <UART_Transmit_IT>:

static StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
    {
        const uint16_t *tmp;

        /* Check that a Tx process is ongoing */
        if (huart->gState == UART_STATE_BUSY_TX)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b21      	cmp	r3, #33	@ 0x21
 80029b2:	d13e      	bne.n	8002a32 <UART_Transmit_IT+0x92>
        {
            if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029bc:	d114      	bne.n	80029e8 <UART_Transmit_IT+0x48>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d110      	bne.n	80029e8 <UART_Transmit_IT+0x48>
            {
                tmp = (const uint16_t *)huart->pTxBuffPtr;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	60fb      	str	r3, [r7, #12]
                huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029da:	605a      	str	r2, [r3, #4]
                huart->pTxBuffPtr += 2U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	1c9a      	adds	r2, r3, #2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	621a      	str	r2, [r3, #32]
 80029e6:	e008      	b.n	80029fa <UART_Transmit_IT+0x5a>
            }
            else
            {
                huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	1c59      	adds	r1, r3, #1
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6211      	str	r1, [r2, #32]
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
            }

            if (--huart->TxXferCount == 0U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4619      	mov	r1, r3
 8002a08:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <UART_Transmit_IT+0x8e>
            {
                /* Disable the UART Transmit Data Register Empty Interrupt */
                UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a1c:	615a      	str	r2, [r3, #20]

                /* Enable the UART Transmit Complete Interrupt */
                UART_ENABLE_IT(huart, UART_IT_TC);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a2c:	615a      	str	r2, [r3, #20]
            }
            return DUNGX_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <UART_Transmit_IT+0x94>
        }
        else
        {
            return DUNGX_BUSY;
 8002a32:	2302      	movs	r3, #2
        }
    }
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
	...

08002a40 <Clear_All_State_Fsm>:
 *
 * Hàm này sẽ xóa bộ đếm, cờ trạng thái, dữ liệu đang lưu tạm, và đưa FSM
 * về trạng thái sẵn sàng nhận frame mới từ đầu.
 */
void Clear_All_State_Fsm(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
    fsm_state = FSM_STATE_START;
 8002a44:	4b07      	ldr	r3, [pc, #28]	@ (8002a64 <Clear_All_State_Fsm+0x24>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
    byte_count = 0;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	@ (8002a68 <Clear_All_State_Fsm+0x28>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
    expected_payload_length = 0;
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <Clear_All_State_Fsm+0x2c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
    flag_fsm_new_message = 0;
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <Clear_All_State_Fsm+0x30>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	20000330 	.word	0x20000330
 8002a68:	20000331 	.word	0x20000331
 8002a6c:	20000332 	.word	0x20000332
 8002a70:	20000333 	.word	0x20000333

08002a74 <Fsm_Get_Message>:
 *
 * Nếu frame hợp lệ và đủ, dữ liệu sẽ được sao chép vào dataout và
 * FSM sẽ chuyển về trạng thái chờ frame mới.
 */
void Fsm_Get_Message(uint8_t datain, uint8_t dataout[])
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	6039      	str	r1, [r7, #0]
 8002a7e:	71fb      	strb	r3, [r7, #7]
    if (flag_fsm_new_message)
 8002a80:	4b89      	ldr	r3, [pc, #548]	@ (8002ca8 <Fsm_Get_Message+0x234>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f040 8102 	bne.w	8002c8e <Fsm_Get_Message+0x21a>
        return;

    switch (fsm_state)
 8002a8a:	4b88      	ldr	r3, [pc, #544]	@ (8002cac <Fsm_Get_Message+0x238>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	f200 8106 	bhi.w	8002ca0 <Fsm_Get_Message+0x22c>
 8002a94:	a201      	add	r2, pc, #4	@ (adr r2, 8002a9c <Fsm_Get_Message+0x28>)
 8002a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9a:	bf00      	nop
 8002a9c:	08002aad 	.word	0x08002aad
 8002aa0:	08002ae9 	.word	0x08002ae9
 8002aa4:	08002bc1 	.word	0x08002bc1
 8002aa8:	08002c07 	.word	0x08002c07
    {
    case FSM_STATE_START:

        dataout[byte_count] = datain;
 8002aac:	4b80      	ldr	r3, [pc, #512]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	79fa      	ldrb	r2, [r7, #7]
 8002ab8:	701a      	strb	r2, [r3, #0]

        if (byte_count == 0)
 8002aba:	4b7d      	ldr	r3, [pc, #500]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 80e7 	bne.w	8002c92 <Fsm_Get_Message+0x21e>
        {

            if (datain == START_BYTE)
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	2baa      	cmp	r3, #170	@ 0xaa
 8002ac8:	d10b      	bne.n	8002ae2 <Fsm_Get_Message+0x6e>
            {

                Clear_All_State_Fsm();
 8002aca:	f7ff ffb9 	bl	8002a40 <Clear_All_State_Fsm>
                fsm_state = FSM_STATE_HEADER;
 8002ace:	4b77      	ldr	r3, [pc, #476]	@ (8002cac <Fsm_Get_Message+0x238>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
                byte_count++;
 8002ad4:	4b76      	ldr	r3, [pc, #472]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	4b74      	ldr	r3, [pc, #464]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002ade:	701a      	strb	r2, [r3, #0]
            {
                // Nếu byte nhận không phải START_BYTE, reset FSM
                Clear_All_State_Fsm();
            }
        }
        break;
 8002ae0:	e0d7      	b.n	8002c92 <Fsm_Get_Message+0x21e>
                Clear_All_State_Fsm();
 8002ae2:	f7ff ffad 	bl	8002a40 <Clear_All_State_Fsm>
        break;
 8002ae6:	e0d4      	b.n	8002c92 <Fsm_Get_Message+0x21e>

    case FSM_STATE_HEADER:
        dataout[byte_count] = datain;
 8002ae8:	4b71      	ldr	r3, [pc, #452]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	79fa      	ldrb	r2, [r7, #7]
 8002af4:	701a      	strb	r2, [r3, #0]
        byte_count++;
 8002af6:	4b6e      	ldr	r3, [pc, #440]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	3301      	adds	r3, #1
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002b00:	701a      	strb	r2, [r3, #0]
        // Check Group
        if (byte_count == 2)
 8002b02:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d106      	bne.n	8002b18 <Fsm_Get_Message+0xa4>
        {

            if (datain != COMMAND)
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	f000 80c2 	beq.w	8002c96 <Fsm_Get_Message+0x222>
            {
                Clear_All_State_Fsm();
 8002b12:	f7ff ff95 	bl	8002a40 <Clear_All_State_Fsm>
            {

                fsm_state = FSM_STATE_PAYLOAD;
            }
        }
        break;
 8002b16:	e0be      	b.n	8002c96 <Fsm_Get_Message+0x222>
        else if (byte_count == 3)
 8002b18:	4b65      	ldr	r3, [pc, #404]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d13d      	bne.n	8002b9c <Fsm_Get_Message+0x128>
            if (dataout[2] != CDS && dataout[2] != IR && dataout[2] != MQ2 && dataout[2] != DHT11_HUMI && dataout[2] != DHT11_TEMP &&
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	3302      	adds	r3, #2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	f000 80b5 	beq.w	8002c96 <Fsm_Get_Message+0x222>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	3302      	adds	r3, #2
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	f000 80af 	beq.w	8002c96 <Fsm_Get_Message+0x222>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	f000 80a9 	beq.w	8002c96 <Fsm_Get_Message+0x222>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	3302      	adds	r3, #2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	f000 80a3 	beq.w	8002c96 <Fsm_Get_Message+0x222>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	3302      	adds	r3, #2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	f000 809d 	beq.w	8002c96 <Fsm_Get_Message+0x222>
                dataout[2] != LED && dataout[2] != MOTOR && dataout[2] != SIREN && dataout[2] != AUTO && dataout[2] != UNKNOWN)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	3302      	adds	r3, #2
 8002b60:	781b      	ldrb	r3, [r3, #0]
            if (dataout[2] != CDS && dataout[2] != IR && dataout[2] != MQ2 && dataout[2] != DHT11_HUMI && dataout[2] != DHT11_TEMP &&
 8002b62:	2b11      	cmp	r3, #17
 8002b64:	f000 8097 	beq.w	8002c96 <Fsm_Get_Message+0x222>
                dataout[2] != LED && dataout[2] != MOTOR && dataout[2] != SIREN && dataout[2] != AUTO && dataout[2] != UNKNOWN)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b12      	cmp	r3, #18
 8002b70:	f000 8091 	beq.w	8002c96 <Fsm_Get_Message+0x222>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	3302      	adds	r3, #2
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b13      	cmp	r3, #19
 8002b7c:	f000 808b 	beq.w	8002c96 <Fsm_Get_Message+0x222>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	3302      	adds	r3, #2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	f000 8085 	beq.w	8002c96 <Fsm_Get_Message+0x222>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	3302      	adds	r3, #2
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2bff      	cmp	r3, #255	@ 0xff
 8002b94:	d07f      	beq.n	8002c96 <Fsm_Get_Message+0x222>
                Clear_All_State_Fsm();
 8002b96:	f7ff ff53 	bl	8002a40 <Clear_All_State_Fsm>
        break;
 8002b9a:	e07c      	b.n	8002c96 <Fsm_Get_Message+0x222>
        else if (byte_count == 4)
 8002b9c:	4b44      	ldr	r3, [pc, #272]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d178      	bne.n	8002c96 <Fsm_Get_Message+0x222>
            expected_payload_length = datain;
 8002ba4:	4a43      	ldr	r2, [pc, #268]	@ (8002cb4 <Fsm_Get_Message+0x240>)
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	7013      	strb	r3, [r2, #0]
            if (expected_payload_length > PAYLOAD_SIZE)
 8002baa:	4b42      	ldr	r3, [pc, #264]	@ (8002cb4 <Fsm_Get_Message+0x240>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d902      	bls.n	8002bb8 <Fsm_Get_Message+0x144>
                Clear_All_State_Fsm();
 8002bb2:	f7ff ff45 	bl	8002a40 <Clear_All_State_Fsm>
        break;
 8002bb6:	e06e      	b.n	8002c96 <Fsm_Get_Message+0x222>
                fsm_state = FSM_STATE_PAYLOAD;
 8002bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8002cac <Fsm_Get_Message+0x238>)
 8002bba:	2202      	movs	r2, #2
 8002bbc:	701a      	strb	r2, [r3, #0]
        break;
 8002bbe:	e06a      	b.n	8002c96 <Fsm_Get_Message+0x222>

    case FSM_STATE_PAYLOAD:
        dataout[byte_count] = datain;
 8002bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	79fa      	ldrb	r2, [r7, #7]
 8002bcc:	701a      	strb	r2, [r3, #0]
        byte_count++;
 8002bce:	4b38      	ldr	r3, [pc, #224]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4b36      	ldr	r3, [pc, #216]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002bd8:	701a      	strb	r2, [r3, #0]
        if (byte_count == 4 + expected_payload_length)
 8002bda:	4b35      	ldr	r3, [pc, #212]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b34      	ldr	r3, [pc, #208]	@ (8002cb4 <Fsm_Get_Message+0x240>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	3304      	adds	r3, #4
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d103      	bne.n	8002bf2 <Fsm_Get_Message+0x17e>
        {

            fsm_state = FSM_STATE_CHECKSUM;
 8002bea:	4b30      	ldr	r3, [pc, #192]	@ (8002cac <Fsm_Get_Message+0x238>)
 8002bec:	2203      	movs	r2, #3
 8002bee:	701a      	strb	r2, [r3, #0]
        else if (byte_count - 4 > expected_payload_length)
        {
            // Nếu nhận quá payload, reset FSM
            Clear_All_State_Fsm();
        }
        break;
 8002bf0:	e053      	b.n	8002c9a <Fsm_Get_Message+0x226>
        else if (byte_count - 4 > expected_payload_length)
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8002cb4 <Fsm_Get_Message+0x240>)
 8002bfa:	7812      	ldrb	r2, [r2, #0]
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	dd4c      	ble.n	8002c9a <Fsm_Get_Message+0x226>
            Clear_All_State_Fsm();
 8002c00:	f7ff ff1e 	bl	8002a40 <Clear_All_State_Fsm>
        break;
 8002c04:	e049      	b.n	8002c9a <Fsm_Get_Message+0x226>

    case FSM_STATE_CHECKSUM:
        dataout[byte_count] = datain;
 8002c06:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	79fa      	ldrb	r2, [r7, #7]
 8002c12:	701a      	strb	r2, [r3, #0]

        byte_count++;
 8002c14:	4b26      	ldr	r3, [pc, #152]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002c1e:	701a      	strb	r2, [r3, #0]

        if (byte_count == 1 + HEADER_SIZE + expected_payload_length + CHECKSUM_SIZE)
 8002c20:	4b23      	ldr	r3, [pc, #140]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b23      	ldr	r3, [pc, #140]	@ (8002cb4 <Fsm_Get_Message+0x240>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	3306      	adds	r3, #6
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d136      	bne.n	8002c9e <Fsm_Get_Message+0x22a>
        {

            uint16_t received_checksum = Convert_Bytes_To_Uint16(
                dataout[byte_count - 2], dataout[byte_count - 1]);
 8002c30:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	3b02      	subs	r3, #2
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	4413      	add	r3, r2
            uint16_t received_checksum = Convert_Bytes_To_Uint16(
 8002c3a:	7818      	ldrb	r0, [r3, #0]
                dataout[byte_count - 2], dataout[byte_count - 1]);
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	4413      	add	r3, r2
            uint16_t received_checksum = Convert_Bytes_To_Uint16(
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f000 fe50 	bl	80038ee <Convert_Bytes_To_Uint16>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	81fb      	strh	r3, [r7, #14]

            uint16_t calculated_checksum = Message_Calculate_Checksum(
 8002c52:	4b17      	ldr	r3, [pc, #92]	@ (8002cb0 <Fsm_Get_Message+0x23c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	3b02      	subs	r3, #2
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	6838      	ldr	r0, [r7, #0]
 8002c5e:	f000 fe58 	bl	8003912 <Message_Calculate_Checksum>
 8002c62:	4603      	mov	r3, r0
 8002c64:	81bb      	strh	r3, [r7, #12]
                dataout, byte_count - CHECKSUM_SIZE);

            if (received_checksum == calculated_checksum)
 8002c66:	89fa      	ldrh	r2, [r7, #14]
 8002c68:	89bb      	ldrh	r3, [r7, #12]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d109      	bne.n	8002c82 <Fsm_Get_Message+0x20e>
            {
                GPIOA->ODR |= (1 << 5);
 8002c6e:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <Fsm_Get_Message+0x244>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	4a11      	ldr	r2, [pc, #68]	@ (8002cb8 <Fsm_Get_Message+0x244>)
 8002c74:	f043 0320 	orr.w	r3, r3, #32
 8002c78:	60d3      	str	r3, [r2, #12]
                flag_fsm_new_message = 1;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <Fsm_Get_Message+0x234>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e001      	b.n	8002c86 <Fsm_Get_Message+0x212>
            }
            else
            {
                // Nếu checksum không hợp lệ, reset FSM
                Clear_All_State_Fsm();
 8002c82:	f7ff fedd 	bl	8002a40 <Clear_All_State_Fsm>
            }

            fsm_state = FSM_STATE_START;
 8002c86:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <Fsm_Get_Message+0x238>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002c8c:	e007      	b.n	8002c9e <Fsm_Get_Message+0x22a>
        return;
 8002c8e:	bf00      	nop
 8002c90:	e006      	b.n	8002ca0 <Fsm_Get_Message+0x22c>
        break;
 8002c92:	bf00      	nop
 8002c94:	e004      	b.n	8002ca0 <Fsm_Get_Message+0x22c>
        break;
 8002c96:	bf00      	nop
 8002c98:	e002      	b.n	8002ca0 <Fsm_Get_Message+0x22c>
        break;
 8002c9a:	bf00      	nop
 8002c9c:	e000      	b.n	8002ca0 <Fsm_Get_Message+0x22c>
        break;
 8002c9e:	bf00      	nop
    }
}
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000333 	.word	0x20000333
 8002cac:	20000330 	.word	0x20000330
 8002cb0:	20000331 	.word	0x20000331
 8002cb4:	20000332 	.word	0x20000332
 8002cb8:	40010800 	.word	0x40010800

08002cbc <Check_Fsm_Flag_New_Message>:
 * @brief Kiểm tra xem đã nhận được một frame hoàn chỉnh và hợp lệ chưa.
 *
 * @return 1 nếu đã nhận đúng và đủ frame; 0 nếu chưa đủ hoặc không hợp lệ.
 */
uint8_t Check_Fsm_Flag_New_Message(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
    return flag_fsm_new_message;
 8002cc0:	4b02      	ldr	r3, [pc, #8]	@ (8002ccc <Check_Fsm_Flag_New_Message+0x10>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	20000333 	.word	0x20000333

08002cd0 <USART1_Init>:

/**
 * @brief Khởi tạo USART1 với tốc độ baud được chỉ định.
 */
void USART1_Init(uint32_t baud_rate)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
    huart1.Instance = USART1;
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <USART1_Init+0x40>)
 8002cda:	4a0e      	ldr	r2, [pc, #56]	@ (8002d14 <USART1_Init+0x44>)
 8002cdc:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = baud_rate;
 8002cde:	4a0c      	ldr	r2, [pc, #48]	@ (8002d10 <USART1_Init+0x40>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6053      	str	r3, [r2, #4]
    // Word length 8-bit => M = 0 (bit 12 clear)
    huart1.Init.WordLength = 0;
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <USART1_Init+0x40>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]

    huart1.Init.StopBits = 0;                            // 1 stop bit (mặc định)
 8002cea:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <USART1_Init+0x40>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = USART_CR1_PCE & ~USART_CR1_PCE; // No parity
 8002cf0:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <USART1_Init+0x40>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;                  // TX + RX
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <USART1_Init+0x40>)
 8002cf8:	220c      	movs	r2, #12
 8002cfa:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;         // Không sử dụng điều khiển luồng phần cứng
 8002cfc:	4b04      	ldr	r3, [pc, #16]	@ (8002d10 <USART1_Init+0x40>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]

    UART_Init(&huart1); // Gọi hàm từ stm32_uart.c
 8002d02:	4803      	ldr	r0, [pc, #12]	@ (8002d10 <USART1_Init+0x40>)
 8002d04:	f7ff fc5a 	bl	80025bc <UART_Init>
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	200001e4 	.word	0x200001e4
 8002d14:	40013800 	.word	0x40013800

08002d18 <USART1_Send_Data>:

/**
 * @brief Gửi một mảng dữ liệu qua USART1.
 */
void USART1_Send_Data(uint8_t *data, uint8_t length)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	70fb      	strb	r3, [r7, #3]
    if (data != NULL && length > 0)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <USART1_Send_Data+0x26>
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d006      	beq.n	8002d3e <USART1_Send_Data+0x26>
    {
        UART_Transmit(&huart1, data, length, 1000000);
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	4b04      	ldr	r3, [pc, #16]	@ (8002d48 <USART1_Send_Data+0x30>)
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4804      	ldr	r0, [pc, #16]	@ (8002d4c <USART1_Send_Data+0x34>)
 8002d3a:	f7ff fd25 	bl	8002788 <UART_Transmit>
    }
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	000f4240 	.word	0x000f4240
 8002d4c:	200001e4 	.word	0x200001e4

08002d50 <USART1_IRQHandler>:
/**
 * @brief Xử lý ngắt nhận dữ liệu từ USART1.
 * @note Hàm này sẽ được gọi tự động khi có dữ liệu đến USART1.
 */
void USART1_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
    UART_IRQHandler(&huart1);
 8002d54:	4802      	ldr	r0, [pc, #8]	@ (8002d60 <USART1_IRQHandler+0x10>)
 8002d56:	f7ff fd59 	bl	800280c <UART_IRQHandler>
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	200001e4 	.word	0x200001e4

08002d64 <DUNGX_UART_Receive_IT>:

StatusTypeDef DUNGX_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint8_t Size)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	71fb      	strb	r3, [r7, #7]

    // Kiểm tra UART đã sẵn sàng nhận chưa
    if (huart->RxState == UART_STATE_READY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d126      	bne.n	8002dcc <DUNGX_UART_Receive_IT+0x68>
    {

        if ((pData == NULL) || (Size == 0))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <DUNGX_UART_Receive_IT+0x26>
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <DUNGX_UART_Receive_IT+0x2a>
        {
            return DUNGX_ERROR; // Lỗi dữ liệu
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e01f      	b.n	8002dce <DUNGX_UART_Receive_IT+0x6a>
        }

        // Cập nhật trạng thái và buffer nhận
        huart->RxState = UART_STATE_BUSY_RX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2222      	movs	r2, #34	@ 0x22
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        huart->ErrorCode = UART_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	639a      	str	r2, [r3, #56]	@ 0x38
        huart->RxXferSize = Size;
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	859a      	strh	r2, [r3, #44]	@ 0x2c
        huart->RxXferCount = Size;
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	85da      	strh	r2, [r3, #46]	@ 0x2e
        huart->pRxBuffPtr = pData;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	629a      	str	r2, [r3, #40]	@ 0x28

        (void)huart1.Instance->DR; // Clear RXNE flag
 8002db2:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <DUNGX_UART_Receive_IT+0x74>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]

        // Bật ngắt RXNE (nhận dữ liệu)
        huart->Instance->CR1 |= USART_CR1_RXNEIE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0220 	orr.w	r2, r2, #32
 8002dc6:	60da      	str	r2, [r3, #12]

        return DUNGX_OK; // Thành công
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <DUNGX_UART_Receive_IT+0x6a>
    }
    else
    {
        return DUNGX_BUSY; // UART đang bận
 8002dcc:	2302      	movs	r3, #2
    }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	200001e4 	.word	0x200001e4

08002ddc <CDS_Init>:
#define CDS_ADC_SAMPLING ADC_SAMPLETIME_71CYCLES_5

static ADC_HandleTypeDef hadc_cds;

void CDS_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
   // 1. Configure PA0 as analog input
   GPIO_InitTypeDef gpio_init = {
 8002de2:	f107 0310 	add.w	r3, r7, #16
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	2301      	movs	r3, #1
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	2303      	movs	r3, #3
 8002df6:	617b      	str	r3, [r7, #20]
       .Pin = CDS_GPIO_PIN,
       .Mode = GPIO_MODE_ANALOG};
   GPIO_Init(CDS_GPIO_PORT, &gpio_init);
 8002df8:	f107 0310 	add.w	r3, r7, #16
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4811      	ldr	r0, [pc, #68]	@ (8002e44 <CDS_Init+0x68>)
 8002e00:	f7ff f80e 	bl	8001e20 <GPIO_Init>

   // 2. Configure ADC1
   hadc_cds.Instance = ADC1;
 8002e04:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <CDS_Init+0x6c>)
 8002e06:	4a11      	ldr	r2, [pc, #68]	@ (8002e4c <CDS_Init+0x70>)
 8002e08:	601a      	str	r2, [r3, #0]
   hadc_cds.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <CDS_Init+0x6c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	605a      	str	r2, [r3, #4]
   hadc_cds.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e10:	4b0d      	ldr	r3, [pc, #52]	@ (8002e48 <CDS_Init+0x6c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
   hadc_cds.Init.ContinuousConvMode = DISABLE;
 8002e16:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <CDS_Init+0x6c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	731a      	strb	r2, [r3, #12]
   hadc_cds.Init.NbrOfConversion = 1;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e48 <CDS_Init+0x6c>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	611a      	str	r2, [r3, #16]
   ADC_Init(&hadc_cds);
 8002e22:	4809      	ldr	r0, [pc, #36]	@ (8002e48 <CDS_Init+0x6c>)
 8002e24:	f7fe fe04 	bl	8001a30 <ADC_Init>

   // 3. Configure ADC channel (Channel 0 = PA0)
   ADC_ChannelConfTypeDef ch_config = {
 8002e28:	4a09      	ldr	r2, [pc, #36]	@ (8002e50 <CDS_Init+0x74>)
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
       .Channel = CDS_ADC_CHANNEL,
       .Rank = ADC_REGULAR_RANK_1,
       .SamplingTime = CDS_ADC_SAMPLING};
   ADC_ConfigChannel(&hadc_cds, &ch_config);
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	4619      	mov	r1, r3
 8002e36:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <CDS_Init+0x6c>)
 8002e38:	f7fe fe9c 	bl	8001b74 <ADC_ConfigChannel>
}
 8002e3c:	bf00      	nop
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40010800 	.word	0x40010800
 8002e48:	20000334 	.word	0x20000334
 8002e4c:	40012400 	.word	0x40012400
 8002e50:	08006810 	.word	0x08006810

08002e54 <CDS_ReadRaw>:

uint16_t CDS_ReadRaw(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
   ADC_Start(&hadc_cds);
 8002e58:	4809      	ldr	r0, [pc, #36]	@ (8002e80 <CDS_ReadRaw+0x2c>)
 8002e5a:	f7fe ff6a 	bl	8001d32 <ADC_Start>
   if (ADC_PollForConversion(&hadc_cds, 1000) != DUNGX_OK)
 8002e5e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002e62:	4807      	ldr	r0, [pc, #28]	@ (8002e80 <CDS_ReadRaw+0x2c>)
 8002e64:	f7fe ffad 	bl	8001dc2 <ADC_PollForConversion>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <CDS_ReadRaw+0x1e>
       return 0; // Timeout or error
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e004      	b.n	8002e7c <CDS_ReadRaw+0x28>
   return (uint16_t)ADC_GetValue(&hadc_cds);
 8002e72:	4803      	ldr	r0, [pc, #12]	@ (8002e80 <CDS_ReadRaw+0x2c>)
 8002e74:	f7fe ffc3 	bl	8001dfe <ADC_GetValue>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	b29b      	uxth	r3, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000334 	.word	0x20000334

08002e84 <CDS_ReadLux>:

float CDS_ReadLux(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
   uint16_t raw = CDS_ReadRaw();
 8002e8a:	f7ff ffe3 	bl	8002e54 <CDS_ReadRaw>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	80fb      	strh	r3, [r7, #6]

   // Convert raw ADC value to lux
   float lux = (float)(4095 - raw) * 2000.0f / 4095.0f;
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8002e98:	330f      	adds	r3, #15
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd febe 	bl	8000c1c <__aeabi_i2f>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4908      	ldr	r1, [pc, #32]	@ (8002ec4 <CDS_ReadLux+0x40>)
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd ff0d 	bl	8000cc4 <__aeabi_fmul>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4906      	ldr	r1, [pc, #24]	@ (8002ec8 <CDS_ReadLux+0x44>)
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd ffbc 	bl	8000e2c <__aeabi_fdiv>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	603b      	str	r3, [r7, #0]
   return lux;
 8002eb8:	683b      	ldr	r3, [r7, #0]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	44fa0000 	.word	0x44fa0000
 8002ec8:	457ff000 	.word	0x457ff000

08002ecc <DHT_SetPinOutput>:

#define DHT11_PORT GPIOA
#define DHT11_PIN (1U << 2) // PA2

static void DHT_SetPinOutput(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio = {
 8002ed2:	463b      	mov	r3, r7
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	2304      	movs	r3, #4
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	2311      	movs	r3, #17
 8002ee4:	607b      	str	r3, [r7, #4]
        .Pin = DHT11_PIN,
        .Mode = GPIO_MODE_OUTPUT_OD,
        .Speed = GPIO_SPEED_LOW,
    };
    GPIO_Init(DHT11_PORT, &gpio);
 8002ee6:	463b      	mov	r3, r7
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4803      	ldr	r0, [pc, #12]	@ (8002ef8 <DHT_SetPinOutput+0x2c>)
 8002eec:	f7fe ff98 	bl	8001e20 <GPIO_Init>
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40010800 	.word	0x40010800

08002efc <DHT_SetPinInput>:

static void DHT_SetPinInput(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio = {
 8002f02:	463b      	mov	r3, r7
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	2304      	movs	r3, #4
 8002f10:	603b      	str	r3, [r7, #0]
        .Pin = DHT11_PIN,
        .Mode = GPIO_MODE_INPUT,
        .Pull = GPIO_NOPULL};
    GPIO_Init(DHT11_PORT, &gpio);
 8002f12:	463b      	mov	r3, r7
 8002f14:	4619      	mov	r1, r3
 8002f16:	4803      	ldr	r0, [pc, #12]	@ (8002f24 <DHT_SetPinInput+0x28>)
 8002f18:	f7fe ff82 	bl	8001e20 <GPIO_Init>
}
 8002f1c:	bf00      	nop
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40010800 	.word	0x40010800

08002f28 <DHT_ReadPin>:

static uint8_t DHT_ReadPin(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
    return (DHT11_PORT->IDR & DHT11_PIN) ? 1 : 0;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <DHT_ReadPin+0x20>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010800 	.word	0x40010800

08002f4c <DHT11_Init>:

void DHT11_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002f50:	4b07      	ldr	r3, [pc, #28]	@ (8002f70 <DHT11_Init+0x24>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	4a06      	ldr	r2, [pc, #24]	@ (8002f70 <DHT11_Init+0x24>)
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	6193      	str	r3, [r2, #24]
    DHT_SetPinOutput();
 8002f5c:	f7ff ffb6 	bl	8002ecc <DHT_SetPinOutput>
    GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8002f60:	2201      	movs	r2, #1
 8002f62:	2104      	movs	r1, #4
 8002f64:	4803      	ldr	r0, [pc, #12]	@ (8002f74 <DHT11_Init+0x28>)
 8002f66:	f7ff f89b 	bl	80020a0 <GPIO_WritePin>
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40010800 	.word	0x40010800

08002f78 <DHT11_Start>:

static void DHT11_Start(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
    DHT_SetPinOutput();
 8002f7c:	f7ff ffa6 	bl	8002ecc <DHT_SetPinOutput>
    GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2104      	movs	r1, #4
 8002f84:	4808      	ldr	r0, [pc, #32]	@ (8002fa8 <DHT11_Start+0x30>)
 8002f86:	f7ff f88b 	bl	80020a0 <GPIO_WritePin>
    Delay_ms(20); // Kéo thấp ≥ 18ms
 8002f8a:	2014      	movs	r0, #20
 8002f8c:	f000 ff44 	bl	8003e18 <Delay_ms>
    GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8002f90:	2201      	movs	r2, #1
 8002f92:	2104      	movs	r1, #4
 8002f94:	4804      	ldr	r0, [pc, #16]	@ (8002fa8 <DHT11_Start+0x30>)
 8002f96:	f7ff f883 	bl	80020a0 <GPIO_WritePin>
    Delay_us(30);
 8002f9a:	201e      	movs	r0, #30
 8002f9c:	f000 ff52 	bl	8003e44 <Delay_us>
    DHT_SetPinInput();
 8002fa0:	f7ff ffac 	bl	8002efc <DHT_SetPinInput>
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40010800 	.word	0x40010800

08002fac <DHT_ReadBit>:

static uint8_t DHT_ReadBit(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
    while (DHT_ReadPin() == 0)
 8002fb0:	bf00      	nop
 8002fb2:	f7ff ffb9 	bl	8002f28 <DHT_ReadPin>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0fa      	beq.n	8002fb2 <DHT_ReadBit+0x6>
        ;                 // Chờ đầu 0
    Delay_us(40);         // Sau 30us kiểm tra
 8002fbc:	2028      	movs	r0, #40	@ 0x28
 8002fbe:	f000 ff41 	bl	8003e44 <Delay_us>
    return DHT_ReadPin(); // HIGH → 1, LOW → 0
 8002fc2:	f7ff ffb1 	bl	8002f28 <DHT_ReadPin>
 8002fc6:	4603      	mov	r3, r0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <DHT_ReadByte>:

static uint8_t DHT_ReadByte(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
    uint8_t i, byte = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	71fb      	strb	r3, [r7, #7]
 8002fda:	e012      	b.n	8003002 <DHT_ReadByte+0x36>
    {
        byte <<= 1;
 8002fdc:	79bb      	ldrb	r3, [r7, #6]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	71bb      	strb	r3, [r7, #6]
        byte |= DHT_ReadBit();
 8002fe2:	f7ff ffe3 	bl	8002fac <DHT_ReadBit>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	79bb      	ldrb	r3, [r7, #6]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	71bb      	strb	r3, [r7, #6]
        while (DHT_ReadPin())
 8002ff0:	bf00      	nop
 8002ff2:	f7ff ff99 	bl	8002f28 <DHT_ReadPin>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1fa      	bne.n	8002ff2 <DHT_ReadByte+0x26>
    for (i = 0; i < 8; i++)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	3301      	adds	r3, #1
 8003000:	71fb      	strb	r3, [r7, #7]
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	2b07      	cmp	r3, #7
 8003006:	d9e9      	bls.n	8002fdc <DHT_ReadByte+0x10>
            ; // Chờ kết thúc bit
    }
    return byte;
 8003008:	79bb      	ldrb	r3, [r7, #6]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <DHT11_Read>:

bool DHT11_Read(uint8_t *humi_int, uint8_t *humi_dec, uint8_t *temp_int, uint8_t *temp_dec)
{
 8003012:	b590      	push	{r4, r7, lr}
 8003014:	b089      	sub	sp, #36	@ 0x24
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
	if (!humi_int || !humi_dec || !temp_int || !temp_dec)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <DHT11_Read+0x26>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <DHT11_Read+0x26>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <DHT11_Read+0x26>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <DHT11_Read+0x2a>
	        return false;
 8003038:	2300      	movs	r3, #0
 800303a:	e068      	b.n	800310e <DHT11_Read+0xfc>
    uint8_t data[5] = {0};
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	2300      	movs	r3, #0
 8003042:	763b      	strb	r3, [r7, #24]

    DHT11_Start();
 8003044:	f7ff ff98 	bl	8002f78 <DHT11_Start>

    // Chờ phản hồi từ DHT11
    uint32_t timeout = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
    while (DHT_ReadPin())
 800304c:	e009      	b.n	8003062 <DHT11_Read+0x50>
        if (++timeout > 10000)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3301      	adds	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f242 7210 	movw	r2, #10000	@ 0x2710
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <DHT11_Read+0x50>
            return false;
 800305e:	2300      	movs	r3, #0
 8003060:	e055      	b.n	800310e <DHT11_Read+0xfc>
    while (DHT_ReadPin())
 8003062:	f7ff ff61 	bl	8002f28 <DHT_ReadPin>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <DHT11_Read+0x3c>
    timeout = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
    while (!DHT_ReadPin())
 8003070:	e009      	b.n	8003086 <DHT11_Read+0x74>
        if (++timeout > 10000)
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3301      	adds	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <DHT11_Read+0x74>
            return false;
 8003082:	2300      	movs	r3, #0
 8003084:	e043      	b.n	800310e <DHT11_Read+0xfc>
    while (!DHT_ReadPin())
 8003086:	f7ff ff4f 	bl	8002f28 <DHT_ReadPin>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <DHT11_Read+0x60>
    timeout = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
    while (DHT_ReadPin())
 8003094:	e009      	b.n	80030aa <DHT11_Read+0x98>
        if (++timeout > 10000)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3301      	adds	r3, #1
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <DHT11_Read+0x98>
            return false;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e031      	b.n	800310e <DHT11_Read+0xfc>
    while (DHT_ReadPin())
 80030aa:	f7ff ff3d 	bl	8002f28 <DHT_ReadPin>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f0      	bne.n	8003096 <DHT11_Read+0x84>

    // Đọc 5 byte
    for (uint8_t i = 0; i < 5; i++)
 80030b4:	2300      	movs	r3, #0
 80030b6:	76fb      	strb	r3, [r7, #27]
 80030b8:	e00c      	b.n	80030d4 <DHT11_Read+0xc2>
        data[i] = DHT_ReadByte();
 80030ba:	7efc      	ldrb	r4, [r7, #27]
 80030bc:	f7ff ff86 	bl	8002fcc <DHT_ReadByte>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	f104 0320 	add.w	r3, r4, #32
 80030c8:	443b      	add	r3, r7
 80030ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 5; i++)
 80030ce:	7efb      	ldrb	r3, [r7, #27]
 80030d0:	3301      	adds	r3, #1
 80030d2:	76fb      	strb	r3, [r7, #27]
 80030d4:	7efb      	ldrb	r3, [r7, #27]
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d9ef      	bls.n	80030ba <DHT11_Read+0xa8>

    // Kiểm tra checksum
    if ((data[0] + data[1] + data[2] + data[3]) != data[4])
 80030da:	7d3b      	ldrb	r3, [r7, #20]
 80030dc:	461a      	mov	r2, r3
 80030de:	7d7b      	ldrb	r3, [r7, #21]
 80030e0:	4413      	add	r3, r2
 80030e2:	7dba      	ldrb	r2, [r7, #22]
 80030e4:	4413      	add	r3, r2
 80030e6:	7dfa      	ldrb	r2, [r7, #23]
 80030e8:	4413      	add	r3, r2
 80030ea:	7e3a      	ldrb	r2, [r7, #24]
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d001      	beq.n	80030f4 <DHT11_Read+0xe2>
        return false;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e00c      	b.n	800310e <DHT11_Read+0xfc>

    *humi_int = data[0];
 80030f4:	7d3a      	ldrb	r2, [r7, #20]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	701a      	strb	r2, [r3, #0]
    *humi_dec = data[1];
 80030fa:	7d7a      	ldrb	r2, [r7, #21]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	701a      	strb	r2, [r3, #0]
    *temp_int = data[2];
 8003100:	7dba      	ldrb	r2, [r7, #22]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	701a      	strb	r2, [r3, #0]
    *temp_dec = data[3];
 8003106:	7dfa      	ldrb	r2, [r7, #23]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	701a      	strb	r2, [r3, #0]
    return true;
 800310c:	2301      	movs	r3, #1
}
 800310e:	4618      	mov	r0, r3
 8003110:	3724      	adds	r7, #36	@ 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}
	...

08003118 <MQ2_Init>:
#define ADC_MAX 4095.0f // 12-bit ADC

static ADC_HandleTypeDef hadc_mq2;

void MQ2_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
    // Cấu hình chân analog PA1
    GPIO_InitTypeDef GPIO_InitStruct = {
 800311e:	f107 0310 	add.w	r3, r7, #16
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	609a      	str	r2, [r3, #8]
 800312a:	60da      	str	r2, [r3, #12]
 800312c:	2302      	movs	r3, #2
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	2303      	movs	r3, #3
 8003132:	617b      	str	r3, [r7, #20]
        .Pin = MQ2_PIN,
        .Mode = GPIO_MODE_ANALOG};
    GPIO_Init(MQ2_PORT, &GPIO_InitStruct);
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	4619      	mov	r1, r3
 800313a:	4811      	ldr	r0, [pc, #68]	@ (8003180 <MQ2_Init+0x68>)
 800313c:	f7fe fe70 	bl	8001e20 <GPIO_Init>

    // Cấu hình ADC
    hadc_mq2.Instance = ADC2;
 8003140:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <MQ2_Init+0x6c>)
 8003142:	4a11      	ldr	r2, [pc, #68]	@ (8003188 <MQ2_Init+0x70>)
 8003144:	601a      	str	r2, [r3, #0]
    hadc_mq2.Init.ContinuousConvMode = DISABLE;
 8003146:	4b0f      	ldr	r3, [pc, #60]	@ (8003184 <MQ2_Init+0x6c>)
 8003148:	2200      	movs	r2, #0
 800314a:	731a      	strb	r2, [r3, #12]
    hadc_mq2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800314c:	4b0d      	ldr	r3, [pc, #52]	@ (8003184 <MQ2_Init+0x6c>)
 800314e:	2200      	movs	r2, #0
 8003150:	605a      	str	r2, [r3, #4]
    hadc_mq2.Init.NbrOfConversion = 1;
 8003152:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <MQ2_Init+0x6c>)
 8003154:	2201      	movs	r2, #1
 8003156:	611a      	str	r2, [r3, #16]
    hadc_mq2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003158:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <MQ2_Init+0x6c>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
    ADC_Init(&hadc_mq2);
 800315e:	4809      	ldr	r0, [pc, #36]	@ (8003184 <MQ2_Init+0x6c>)
 8003160:	f7fe fc66 	bl	8001a30 <ADC_Init>

    ADC_ChannelConfTypeDef sConfig = {
 8003164:	4a09      	ldr	r2, [pc, #36]	@ (800318c <MQ2_Init+0x74>)
 8003166:	1d3b      	adds	r3, r7, #4
 8003168:	ca07      	ldmia	r2, {r0, r1, r2}
 800316a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        .Channel = 1, // ADC1_IN1 (PA1)
        .Rank = ADC_REGULAR_RANK_1,
        .SamplingTime = MQ2_ADC_SAMPLING};
    ADC_ConfigChannel(&hadc_mq2, &sConfig);
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	4619      	mov	r1, r3
 8003172:	4804      	ldr	r0, [pc, #16]	@ (8003184 <MQ2_Init+0x6c>)
 8003174:	f7fe fcfe 	bl	8001b74 <ADC_ConfigChannel>
}
 8003178:	bf00      	nop
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40010800 	.word	0x40010800
 8003184:	20000350 	.word	0x20000350
 8003188:	40012800 	.word	0x40012800
 800318c:	0800681c 	.word	0x0800681c

08003190 <MQ2_ReadLevel>:
/**
 * @brief Đọc mức khí từ MQ2 (giá trị từ 0 đến 2000)
 * @return uint16_t mức khí (ppm giả định hoặc chất lượng)
 */
float MQ2_ReadLevel(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
    ADC_Start(&hadc_mq2);
 8003196:	4812      	ldr	r0, [pc, #72]	@ (80031e0 <MQ2_ReadLevel+0x50>)
 8003198:	f7fe fdcb 	bl	8001d32 <ADC_Start>
    if (ADC_PollForConversion(&hadc_mq2, 1000) != DUNGX_OK)
 800319c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80031a0:	480f      	ldr	r0, [pc, #60]	@ (80031e0 <MQ2_ReadLevel+0x50>)
 80031a2:	f7fe fe0e 	bl	8001dc2 <ADC_PollForConversion>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <MQ2_ReadLevel+0x22>
        return 0;
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e012      	b.n	80031d8 <MQ2_ReadLevel+0x48>
    float raw_adc = (float)ADC_GetValue(&hadc_mq2);
 80031b2:	480b      	ldr	r0, [pc, #44]	@ (80031e0 <MQ2_ReadLevel+0x50>)
 80031b4:	f7fe fe23 	bl	8001dfe <ADC_GetValue>
 80031b8:	4603      	mov	r3, r0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd fd2a 	bl	8000c14 <__aeabi_ui2f>
 80031c0:	4603      	mov	r3, r0
 80031c2:	607b      	str	r3, [r7, #4]

    return raw_adc * 2000.0f / ADC_MAX;
 80031c4:	4907      	ldr	r1, [pc, #28]	@ (80031e4 <MQ2_ReadLevel+0x54>)
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fd fd7c 	bl	8000cc4 <__aeabi_fmul>
 80031cc:	4603      	mov	r3, r0
 80031ce:	4906      	ldr	r1, [pc, #24]	@ (80031e8 <MQ2_ReadLevel+0x58>)
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fe2b 	bl	8000e2c <__aeabi_fdiv>
 80031d6:	4603      	mov	r3, r0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000350 	.word	0x20000350
 80031e4:	44fa0000 	.word	0x44fa0000
 80031e8:	457ff000 	.word	0x457ff000

080031ec <LED_RGB_Init>:
    [LED_WHITE_100] = {255, 255, 255},
    [LED_GREEN] = {0, 255, 0},
    [LED_RED] = {255, 0, 0}};

void LED_RGB_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
    // 1. Cấu hình các chân PWM: PA6, PA7, PB0 (AF_PP)
    GPIO_InitTypeDef gpio;

    gpio.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	617b      	str	r3, [r7, #20]
    gpio.Speed = GPIO_SPEED_HIGH;
 80031f6:	2302      	movs	r3, #2
 80031f8:	61fb      	str	r3, [r7, #28]

    gpio.Pin = LED_R_PIN;
 80031fa:	2340      	movs	r3, #64	@ 0x40
 80031fc:	613b      	str	r3, [r7, #16]
    GPIO_Init(LED_R_PORT, &gpio);
 80031fe:	f107 0310 	add.w	r3, r7, #16
 8003202:	4619      	mov	r1, r3
 8003204:	4827      	ldr	r0, [pc, #156]	@ (80032a4 <LED_RGB_Init+0xb8>)
 8003206:	f7fe fe0b 	bl	8001e20 <GPIO_Init>

    gpio.Pin = LED_G_PIN;
 800320a:	2380      	movs	r3, #128	@ 0x80
 800320c:	613b      	str	r3, [r7, #16]
    GPIO_Init(LED_G_PORT, &gpio);
 800320e:	f107 0310 	add.w	r3, r7, #16
 8003212:	4619      	mov	r1, r3
 8003214:	4823      	ldr	r0, [pc, #140]	@ (80032a4 <LED_RGB_Init+0xb8>)
 8003216:	f7fe fe03 	bl	8001e20 <GPIO_Init>

    gpio.Pin = LED_B_PIN;
 800321a:	2301      	movs	r3, #1
 800321c:	613b      	str	r3, [r7, #16]
    GPIO_Init(LED_B_PORT, &gpio);
 800321e:	f107 0310 	add.w	r3, r7, #16
 8003222:	4619      	mov	r1, r3
 8003224:	4820      	ldr	r0, [pc, #128]	@ (80032a8 <LED_RGB_Init+0xbc>)
 8003226:	f7fe fdfb 	bl	8001e20 <GPIO_Init>

    // 2. Cấu hình timer TIM3
    htim3.Instance = TIM3;
 800322a:	4b20      	ldr	r3, [pc, #128]	@ (80032ac <LED_RGB_Init+0xc0>)
 800322c:	4a20      	ldr	r2, [pc, #128]	@ (80032b0 <LED_RGB_Init+0xc4>)
 800322e:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 71; // 72 MHz / (71+1) = 1 MHz
 8003230:	4b1e      	ldr	r3, [pc, #120]	@ (80032ac <LED_RGB_Init+0xc0>)
 8003232:	2247      	movs	r2, #71	@ 0x47
 8003234:	605a      	str	r2, [r3, #4]
    htim3.Init.Period = 999;   // PWM tần số = 1 kHz
 8003236:	4b1d      	ldr	r3, [pc, #116]	@ (80032ac <LED_RGB_Init+0xc0>)
 8003238:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800323c:	60da      	str	r2, [r3, #12]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323e:	4b1b      	ldr	r3, [pc, #108]	@ (80032ac <LED_RGB_Init+0xc0>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <LED_RGB_Init+0xc0>)
 8003246:	2200      	movs	r2, #0
 8003248:	611a      	str	r2, [r3, #16]
    TIM_PWM_Init(&htim3);
 800324a:	4818      	ldr	r0, [pc, #96]	@ (80032ac <LED_RGB_Init+0xc0>)
 800324c:	f7fe ffae 	bl	80021ac <TIM_PWM_Init>

    // 3. Cấu hình từng kênh PWM (CH1–CH3)
    TIM_OC_InitTypeDef sConfigOC = {
 8003250:	2360      	movs	r3, #96	@ 0x60
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	2300      	movs	r3, #0
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	2300      	movs	r3, #0
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
        .OCMode = TIM_OCMODE_PWM1,
        .Pulse = 0,
        .OCPolarity = TIM_OCPOLARITY_HIGH,
        .OCFastMode = TIM_OCFAST_DISABLE};

    TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1); // RED
 8003260:	463b      	mov	r3, r7
 8003262:	2200      	movs	r2, #0
 8003264:	4619      	mov	r1, r3
 8003266:	4811      	ldr	r0, [pc, #68]	@ (80032ac <LED_RGB_Init+0xc0>)
 8003268:	f7fe ffac 	bl	80021c4 <TIM_PWM_ConfigChannel>
    TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2); // GREEN
 800326c:	463b      	mov	r3, r7
 800326e:	2204      	movs	r2, #4
 8003270:	4619      	mov	r1, r3
 8003272:	480e      	ldr	r0, [pc, #56]	@ (80032ac <LED_RGB_Init+0xc0>)
 8003274:	f7fe ffa6 	bl	80021c4 <TIM_PWM_ConfigChannel>
    TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3); // BLUE
 8003278:	463b      	mov	r3, r7
 800327a:	2208      	movs	r2, #8
 800327c:	4619      	mov	r1, r3
 800327e:	480b      	ldr	r0, [pc, #44]	@ (80032ac <LED_RGB_Init+0xc0>)
 8003280:	f7fe ffa0 	bl	80021c4 <TIM_PWM_ConfigChannel>

    TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003284:	2100      	movs	r1, #0
 8003286:	4809      	ldr	r0, [pc, #36]	@ (80032ac <LED_RGB_Init+0xc0>)
 8003288:	f7ff f89a 	bl	80023c0 <TIM_PWM_Start>
    TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800328c:	2104      	movs	r1, #4
 800328e:	4807      	ldr	r0, [pc, #28]	@ (80032ac <LED_RGB_Init+0xc0>)
 8003290:	f7ff f896 	bl	80023c0 <TIM_PWM_Start>
    TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003294:	2108      	movs	r1, #8
 8003296:	4805      	ldr	r0, [pc, #20]	@ (80032ac <LED_RGB_Init+0xc0>)
 8003298:	f7ff f892 	bl	80023c0 <TIM_PWM_Start>
}
 800329c:	bf00      	nop
 800329e:	3720      	adds	r7, #32
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40010800 	.word	0x40010800
 80032a8:	40010c00 	.word	0x40010c00
 80032ac:	2000036c 	.word	0x2000036c
 80032b0:	40000400 	.word	0x40000400

080032b4 <LED_RGB_Set>:

void LED_RGB_Set(uint8_t r_percent, uint8_t g_percent, uint8_t b_percent)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
 80032be:	460b      	mov	r3, r1
 80032c0:	71bb      	strb	r3, [r7, #6]
 80032c2:	4613      	mov	r3, r2
 80032c4:	717b      	strb	r3, [r7, #5]
    uint32_t period = htim3.Init.Period + 1;
 80032c6:	4b17      	ldr	r3, [pc, #92]	@ (8003324 <LED_RGB_Set+0x70>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]

    TIM_SetCompare(&htim3, TIM_CHANNEL_1, (r_percent * period) / 255);
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	4a14      	ldr	r2, [pc, #80]	@ (8003328 <LED_RGB_Set+0x74>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	09db      	lsrs	r3, r3, #7
 80032de:	461a      	mov	r2, r3
 80032e0:	2100      	movs	r1, #0
 80032e2:	4810      	ldr	r0, [pc, #64]	@ (8003324 <LED_RGB_Set+0x70>)
 80032e4:	f7ff f8de 	bl	80024a4 <TIM_SetCompare>
    TIM_SetCompare(&htim3, TIM_CHANNEL_2, (g_percent * period) / 255);
 80032e8:	79bb      	ldrb	r3, [r7, #6]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <LED_RGB_Set+0x74>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	09db      	lsrs	r3, r3, #7
 80032f8:	461a      	mov	r2, r3
 80032fa:	2104      	movs	r1, #4
 80032fc:	4809      	ldr	r0, [pc, #36]	@ (8003324 <LED_RGB_Set+0x70>)
 80032fe:	f7ff f8d1 	bl	80024a4 <TIM_SetCompare>
    TIM_SetCompare(&htim3, TIM_CHANNEL_3, (b_percent * period) / 255);
 8003302:	797b      	ldrb	r3, [r7, #5]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	4a07      	ldr	r2, [pc, #28]	@ (8003328 <LED_RGB_Set+0x74>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	09db      	lsrs	r3, r3, #7
 8003312:	461a      	mov	r2, r3
 8003314:	2108      	movs	r1, #8
 8003316:	4803      	ldr	r0, [pc, #12]	@ (8003324 <LED_RGB_Set+0x70>)
 8003318:	f7ff f8c4 	bl	80024a4 <TIM_SetCompare>
}
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	2000036c 	.word	0x2000036c
 8003328:	80808081 	.word	0x80808081

0800332c <LED_RGB_Off>:

void LED_RGB_Off(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
    TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8003330:	2200      	movs	r2, #0
 8003332:	2100      	movs	r1, #0
 8003334:	4807      	ldr	r0, [pc, #28]	@ (8003354 <LED_RGB_Off+0x28>)
 8003336:	f7ff f8b5 	bl	80024a4 <TIM_SetCompare>
    TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 800333a:	2200      	movs	r2, #0
 800333c:	2104      	movs	r1, #4
 800333e:	4805      	ldr	r0, [pc, #20]	@ (8003354 <LED_RGB_Off+0x28>)
 8003340:	f7ff f8b0 	bl	80024a4 <TIM_SetCompare>
    TIM_SetCompare(&htim3, TIM_CHANNEL_3, 0);
 8003344:	2200      	movs	r2, #0
 8003346:	2108      	movs	r1, #8
 8003348:	4802      	ldr	r0, [pc, #8]	@ (8003354 <LED_RGB_Off+0x28>)
 800334a:	f7ff f8ab 	bl	80024a4 <TIM_SetCompare>
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	2000036c 	.word	0x2000036c

08003358 <LED_RGB_Get>:

void LED_RGB_Get(uint8_t *r_percent, uint8_t *g_percent, uint8_t *b_percent)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
    uint32_t period = htim3.Init.Period + 1;
 8003364:	4b16      	ldr	r3, [pc, #88]	@ (80033c0 <LED_RGB_Get+0x68>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	3301      	adds	r3, #1
 800336a:	617b      	str	r3, [r7, #20]

    *r_percent = (htim3.Instance->CCR1 * 255) / period;
 800336c:	4b14      	ldr	r3, [pc, #80]	@ (80033c0 <LED_RGB_Get+0x68>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003372:	4613      	mov	r3, r2
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	1a9a      	subs	r2, r3, r2
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fbb2 f3f3 	udiv	r3, r2, r3
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	701a      	strb	r2, [r3, #0]
    *g_percent = (htim3.Instance->CCR2 * 255) / period;
 8003384:	4b0e      	ldr	r3, [pc, #56]	@ (80033c0 <LED_RGB_Get+0x68>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800338a:	4613      	mov	r3, r2
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	1a9a      	subs	r2, r3, r2
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	b2da      	uxtb	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	701a      	strb	r2, [r3, #0]
    *b_percent = (htim3.Instance->CCR3 * 255) / period;
 800339c:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <LED_RGB_Get+0x68>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033a2:	4613      	mov	r3, r2
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	1a9a      	subs	r2, r3, r2
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	701a      	strb	r2, [r3, #0]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	2000036c 	.word	0x2000036c

080033c4 <LED_RGB_SetState>:

void LED_RGB_SetState(LED_State_t state)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
    if (state < LED_OFF || state > LED_RED)
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d812      	bhi.n	80033fa <LED_RGB_SetState+0x36>
    {
        return; // Invalid state
    }

    RGB_Color_t color = led_color_table[state];
 80033d4:	79fa      	ldrb	r2, [r7, #7]
 80033d6:	490b      	ldr	r1, [pc, #44]	@ (8003404 <LED_RGB_SetState+0x40>)
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	18ca      	adds	r2, r1, r3
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	8811      	ldrh	r1, [r2, #0]
 80033e6:	7892      	ldrb	r2, [r2, #2]
 80033e8:	8019      	strh	r1, [r3, #0]
 80033ea:	709a      	strb	r2, [r3, #2]
    LED_RGB_Set(color.R, color.G, color.B);
 80033ec:	7b3b      	ldrb	r3, [r7, #12]
 80033ee:	7b79      	ldrb	r1, [r7, #13]
 80033f0:	7bba      	ldrb	r2, [r7, #14]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff ff5e 	bl	80032b4 <LED_RGB_Set>
 80033f8:	e000      	b.n	80033fc <LED_RGB_SetState+0x38>
        return; // Invalid state
 80033fa:	bf00      	nop
}
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	08006828 	.word	0x08006828

08003408 <LED_RGB_GetState>:

LED_State_t LED_RGB_GetState(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
    uint8_t r, g, b;
    LED_RGB_Get(&r, &g, &b);
 800340e:	1d3a      	adds	r2, r7, #4
 8003410:	1d79      	adds	r1, r7, #5
 8003412:	1dbb      	adds	r3, r7, #6
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff9f 	bl	8003358 <LED_RGB_Get>

    for (LED_State_t state = LED_OFF; state <= LED_RED; state++)
 800341a:	2300      	movs	r3, #0
 800341c:	71fb      	strb	r3, [r7, #7]
 800341e:	e01b      	b.n	8003458 <LED_RGB_GetState+0x50>
    {
        RGB_Color_t color = led_color_table[state];
 8003420:	79fa      	ldrb	r2, [r7, #7]
 8003422:	4911      	ldr	r1, [pc, #68]	@ (8003468 <LED_RGB_GetState+0x60>)
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	18ca      	adds	r2, r1, r3
 800342c:	463b      	mov	r3, r7
 800342e:	8811      	ldrh	r1, [r2, #0]
 8003430:	7892      	ldrb	r2, [r2, #2]
 8003432:	8019      	strh	r1, [r3, #0]
 8003434:	709a      	strb	r2, [r3, #2]
        if (r == color.R && g == color.G && b == color.B)
 8003436:	783a      	ldrb	r2, [r7, #0]
 8003438:	79bb      	ldrb	r3, [r7, #6]
 800343a:	429a      	cmp	r2, r3
 800343c:	d109      	bne.n	8003452 <LED_RGB_GetState+0x4a>
 800343e:	787a      	ldrb	r2, [r7, #1]
 8003440:	797b      	ldrb	r3, [r7, #5]
 8003442:	429a      	cmp	r2, r3
 8003444:	d105      	bne.n	8003452 <LED_RGB_GetState+0x4a>
 8003446:	78ba      	ldrb	r2, [r7, #2]
 8003448:	793b      	ldrb	r3, [r7, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d101      	bne.n	8003452 <LED_RGB_GetState+0x4a>
        {
            return state;
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	e006      	b.n	8003460 <LED_RGB_GetState+0x58>
    for (LED_State_t state = LED_OFF; state <= LED_RED; state++)
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	3301      	adds	r3, #1
 8003456:	71fb      	strb	r3, [r7, #7]
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2b04      	cmp	r3, #4
 800345c:	d9e0      	bls.n	8003420 <LED_RGB_GetState+0x18>
        }
    }

    return LED_UNKNOWN;
 800345e:	2305      	movs	r3, #5
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	08006828 	.word	0x08006828

0800346c <Motor_Init>:
#define MOTOR_IN1_PIN (1U << 15) // PB15 - IN1 pin
#define MOTOR_IN2_PORT GPIOB
#define MOTOR_IN2_PIN (1U << 14) // PB14 - IN2 pin

void Motor_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b090      	sub	sp, #64	@ 0x40
 8003470:	af00      	add	r7, sp, #0
    // 1. Clock enable
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_TIM1EN;
 8003472:	4b34      	ldr	r3, [pc, #208]	@ (8003544 <Motor_Init+0xd8>)
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	4a33      	ldr	r2, [pc, #204]	@ (8003544 <Motor_Init+0xd8>)
 8003478:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800347c:	f043 030c 	orr.w	r3, r3, #12
 8003480:	6193      	str	r3, [r2, #24]

    // 2. Init PA8: TIM1_CH1 (AF_PP)
    GPIO_InitTypeDef gpio_pwm = {
 8003482:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	60da      	str	r2, [r3, #12]
 8003490:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003494:	633b      	str	r3, [r7, #48]	@ 0x30
 8003496:	2302      	movs	r3, #2
 8003498:	637b      	str	r3, [r7, #52]	@ 0x34
 800349a:	2302      	movs	r3, #2
 800349c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        .Pin = (MOTOR_PWM_PIN),
        .Mode = GPIO_MODE_AF_PP,
        .Speed = GPIO_SPEED_HIGH};
    GPIO_Init(MOTOR_PWM_PORT, &gpio_pwm);
 800349e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80034a2:	4619      	mov	r1, r3
 80034a4:	4828      	ldr	r0, [pc, #160]	@ (8003548 <Motor_Init+0xdc>)
 80034a6:	f7fe fcbb 	bl	8001e20 <GPIO_Init>

    // 3. Init PB15: IN1 pin (output push-pull)
    GPIO_InitTypeDef gpio_in1 = {
 80034aa:	f107 0320 	add.w	r3, r7, #32
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	605a      	str	r2, [r3, #4]
 80034b4:	609a      	str	r2, [r3, #8]
 80034b6:	60da      	str	r2, [r3, #12]
 80034b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034bc:	623b      	str	r3, [r7, #32]
 80034be:	2301      	movs	r3, #1
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
        .Pin = (MOTOR_IN1_PIN),
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Speed = GPIO_SPEED_LOW};
    GPIO_Init(MOTOR_IN1_PORT, &gpio_in1);
 80034c2:	f107 0320 	add.w	r3, r7, #32
 80034c6:	4619      	mov	r1, r3
 80034c8:	4820      	ldr	r0, [pc, #128]	@ (800354c <Motor_Init+0xe0>)
 80034ca:	f7fe fca9 	bl	8001e20 <GPIO_Init>

    // 4. Init PB14: IN2 pin (output push-pull)
    GPIO_InitTypeDef gpio_in2 = {
 80034ce:	f107 0310 	add.w	r3, r7, #16
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	2301      	movs	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
        .Pin = (MOTOR_IN2_PIN),
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Speed = GPIO_SPEED_LOW};
    GPIO_Init(MOTOR_IN2_PORT, &gpio_in2);
 80034e6:	f107 0310 	add.w	r3, r7, #16
 80034ea:	4619      	mov	r1, r3
 80034ec:	4817      	ldr	r0, [pc, #92]	@ (800354c <Motor_Init+0xe0>)
 80034ee:	f7fe fc97 	bl	8001e20 <GPIO_Init>

    // 4. Timer config
    htim1.Instance = TIM1;
 80034f2:	4b17      	ldr	r3, [pc, #92]	@ (8003550 <Motor_Init+0xe4>)
 80034f4:	4a17      	ldr	r2, [pc, #92]	@ (8003554 <Motor_Init+0xe8>)
 80034f6:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 71; // 72MHz / (71+1) = 1MHz
 80034f8:	4b15      	ldr	r3, [pc, #84]	@ (8003550 <Motor_Init+0xe4>)
 80034fa:	2247      	movs	r2, #71	@ 0x47
 80034fc:	605a      	str	r2, [r3, #4]
    htim1.Init.Period = 200;   // 1MHz / (49+1) = 20kHz PWM
 80034fe:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <Motor_Init+0xe4>)
 8003500:	22c8      	movs	r2, #200	@ 0xc8
 8003502:	60da      	str	r2, [r3, #12]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003504:	4b12      	ldr	r3, [pc, #72]	@ (8003550 <Motor_Init+0xe4>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800350a:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <Motor_Init+0xe4>)
 800350c:	2200      	movs	r2, #0
 800350e:	611a      	str	r2, [r3, #16]

    TIM_PWM_Init(&htim1);
 8003510:	480f      	ldr	r0, [pc, #60]	@ (8003550 <Motor_Init+0xe4>)
 8003512:	f7fe fe4b 	bl	80021ac <TIM_PWM_Init>

    // 5. PWM channel config
    TIM_OC_InitTypeDef oc = {
 8003516:	2360      	movs	r3, #96	@ 0x60
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
        .OCMode = TIM_OCMODE_PWM1,
        .Pulse = 0,
        .OCPolarity = TIM_OCPOLARITY_HIGH,
        .OCFastMode = TIM_OCFAST_DISABLE};

    TIM_PWM_ConfigChannel(&htim1, &oc, TIM_CHANNEL_1);
 8003526:	463b      	mov	r3, r7
 8003528:	2200      	movs	r2, #0
 800352a:	4619      	mov	r1, r3
 800352c:	4808      	ldr	r0, [pc, #32]	@ (8003550 <Motor_Init+0xe4>)
 800352e:	f7fe fe49 	bl	80021c4 <TIM_PWM_ConfigChannel>
    TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003532:	2100      	movs	r1, #0
 8003534:	4806      	ldr	r0, [pc, #24]	@ (8003550 <Motor_Init+0xe4>)
 8003536:	f7fe ff43 	bl	80023c0 <TIM_PWM_Start>
}
 800353a:	bf00      	nop
 800353c:	3740      	adds	r7, #64	@ 0x40
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	40010800 	.word	0x40010800
 800354c:	40010c00 	.word	0x40010c00
 8003550:	20000384 	.word	0x20000384
 8003554:	40012c00 	.word	0x40012c00

08003558 <Motor_SetSpeed>:

void Motor_SetSpeed(int8_t speed_percent)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]

    if (speed_percent > 100)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	2b64      	cmp	r3, #100	@ 0x64
 8003568:	dd01      	ble.n	800356e <Motor_SetSpeed+0x16>
        speed_percent = 100;
 800356a:	2364      	movs	r3, #100	@ 0x64
 800356c:	71fb      	strb	r3, [r7, #7]
    if (speed_percent < -100)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8003576:	da01      	bge.n	800357c <Motor_SetSpeed+0x24>
        speed_percent = -100;
 8003578:	239c      	movs	r3, #156	@ 0x9c
 800357a:	71fb      	strb	r3, [r7, #7]

    if (speed_percent >= 0)
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	2b00      	cmp	r3, #0
 8003582:	db0c      	blt.n	800359e <Motor_SetSpeed+0x46>
    {
        GPIO_WritePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, GPIO_PIN_SET);
 8003584:	2201      	movs	r2, #1
 8003586:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800358a:	4817      	ldr	r0, [pc, #92]	@ (80035e8 <Motor_SetSpeed+0x90>)
 800358c:	f7fe fd88 	bl	80020a0 <GPIO_WritePin>
        GPIO_WritePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, GPIO_PIN_RESET);
 8003590:	2200      	movs	r2, #0
 8003592:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003596:	4814      	ldr	r0, [pc, #80]	@ (80035e8 <Motor_SetSpeed+0x90>)
 8003598:	f7fe fd82 	bl	80020a0 <GPIO_WritePin>
 800359c:	e00f      	b.n	80035be <Motor_SetSpeed+0x66>
    }
    else
    {
        GPIO_WritePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, GPIO_PIN_RESET);
 800359e:	2200      	movs	r2, #0
 80035a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035a4:	4810      	ldr	r0, [pc, #64]	@ (80035e8 <Motor_SetSpeed+0x90>)
 80035a6:	f7fe fd7b 	bl	80020a0 <GPIO_WritePin>
        GPIO_WritePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, GPIO_PIN_SET);
 80035aa:	2201      	movs	r2, #1
 80035ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80035b0:	480d      	ldr	r0, [pc, #52]	@ (80035e8 <Motor_SetSpeed+0x90>)
 80035b2:	f7fe fd75 	bl	80020a0 <GPIO_WritePin>
        speed_percent = -speed_percent;
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	425b      	negs	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	71fb      	strb	r3, [r7, #7]
    }

    uint32_t compare = ((htim1.Init.Period + 1) * speed_percent) / 100;
 80035be:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <Motor_SetSpeed+0x94>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	3301      	adds	r3, #1
 80035c4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
 80035cc:	4a08      	ldr	r2, [pc, #32]	@ (80035f0 <Motor_SetSpeed+0x98>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	60fb      	str	r3, [r7, #12]

    TIM_SetCompare(&htim1, MOTOR_PWM_CHANNEL, compare);
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	2100      	movs	r1, #0
 80035da:	4804      	ldr	r0, [pc, #16]	@ (80035ec <Motor_SetSpeed+0x94>)
 80035dc:	f7fe ff62 	bl	80024a4 <TIM_SetCompare>
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40010c00 	.word	0x40010c00
 80035ec:	20000384 	.word	0x20000384
 80035f0:	51eb851f 	.word	0x51eb851f

080035f4 <Motor_Stop>:

void Motor_Stop(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
    TIM_SetCompare(&htim1, MOTOR_PWM_CHANNEL, 0);
 80035f8:	2200      	movs	r2, #0
 80035fa:	2100      	movs	r1, #0
 80035fc:	4802      	ldr	r0, [pc, #8]	@ (8003608 <Motor_Stop+0x14>)
 80035fe:	f7fe ff51 	bl	80024a4 <TIM_SetCompare>
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000384 	.word	0x20000384

0800360c <Motor_SetLevel>:

void Motor_SetLevel(uint8_t state)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
    if (state == 0)
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10e      	bne.n	800363a <Motor_SetLevel+0x2e>
    {
        Motor_Stop();
 800361c:	f7ff ffea 	bl	80035f4 <Motor_Stop>
        GPIO_WritePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, GPIO_PIN_RESET);
 8003620:	2200      	movs	r2, #0
 8003622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003626:	4811      	ldr	r0, [pc, #68]	@ (800366c <Motor_SetLevel+0x60>)
 8003628:	f7fe fd3a 	bl	80020a0 <GPIO_WritePin>
        GPIO_WritePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, GPIO_PIN_RESET);
 800362c:	2200      	movs	r2, #0
 800362e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003632:	480e      	ldr	r0, [pc, #56]	@ (800366c <Motor_SetLevel+0x60>)
 8003634:	f7fe fd34 	bl	80020a0 <GPIO_WritePin>
    }
    else if (state == 3)
    {
        Motor_SetSpeed(100); // High speed
    }
}
 8003638:	e013      	b.n	8003662 <Motor_SetLevel+0x56>
    else if (state == 1)
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d103      	bne.n	8003648 <Motor_SetLevel+0x3c>
        Motor_SetSpeed(50); // Low speed
 8003640:	2032      	movs	r0, #50	@ 0x32
 8003642:	f7ff ff89 	bl	8003558 <Motor_SetSpeed>
}
 8003646:	e00c      	b.n	8003662 <Motor_SetLevel+0x56>
    else if (state == 2)
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d103      	bne.n	8003656 <Motor_SetLevel+0x4a>
        Motor_SetSpeed(75); // Medium speed
 800364e:	204b      	movs	r0, #75	@ 0x4b
 8003650:	f7ff ff82 	bl	8003558 <Motor_SetSpeed>
}
 8003654:	e005      	b.n	8003662 <Motor_SetLevel+0x56>
    else if (state == 3)
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d102      	bne.n	8003662 <Motor_SetLevel+0x56>
        Motor_SetSpeed(100); // High speed
 800365c:	2064      	movs	r0, #100	@ 0x64
 800365e:	f7ff ff7b 	bl	8003558 <Motor_SetSpeed>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40010c00 	.word	0x40010c00

08003670 <Motor_GetLevel>:

uint8_t Motor_GetLevel(void)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
    uint32_t period = htim1.Init.Period + 1;
 8003676:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <Motor_GetLevel+0x5c>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	3301      	adds	r3, #1
 800367c:	60fb      	str	r3, [r7, #12]
    if (period == 0) return 0;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <Motor_GetLevel+0x18>
 8003684:	2300      	movs	r3, #0
 8003686:	e01b      	b.n	80036c0 <Motor_GetLevel+0x50>

    uint32_t ccr = htim1.Instance->CCR1;
 8003688:	4b10      	ldr	r3, [pc, #64]	@ (80036cc <Motor_GetLevel+0x5c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368e:	60bb      	str	r3, [r7, #8]
    uint8_t speed_percent = (ccr * 100) / period;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2264      	movs	r2, #100	@ 0x64
 8003694:	fb03 f202 	mul.w	r2, r3, r2
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	fbb2 f3f3 	udiv	r3, r2, r3
 800369e:	71fb      	strb	r3, [r7, #7]

    if (speed_percent == 0)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <Motor_GetLevel+0x3a>
        return 0; // STOP
 80036a6:	2300      	movs	r3, #0
 80036a8:	e00a      	b.n	80036c0 <Motor_GetLevel+0x50>
    else if (speed_percent <= 60)
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	2b3c      	cmp	r3, #60	@ 0x3c
 80036ae:	d801      	bhi.n	80036b4 <Motor_GetLevel+0x44>
        return 1; // LOW
 80036b0:	2301      	movs	r3, #1
 80036b2:	e005      	b.n	80036c0 <Motor_GetLevel+0x50>
    else if (speed_percent <= 85)
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	2b55      	cmp	r3, #85	@ 0x55
 80036b8:	d801      	bhi.n	80036be <Motor_GetLevel+0x4e>
        return 2; // MEDIUM
 80036ba:	2302      	movs	r3, #2
 80036bc:	e000      	b.n	80036c0 <Motor_GetLevel+0x50>
    else
        return 3; // HIGH
 80036be:	2303      	movs	r3, #3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000384 	.word	0x20000384

080036d0 <Siren_Init>:

#define SIREN_GPIO_PORT GPIOA
#define SIREN_GPIO_PIN (1U << 3) // PA3

void Siren_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio = {
 80036d6:	463b      	mov	r3, r7
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	2308      	movs	r3, #8
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	2301      	movs	r3, #1
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	2302      	movs	r3, #2
 80036ec:	60fb      	str	r3, [r7, #12]
        .Pin = SIREN_GPIO_PIN,
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Speed = GPIO_SPEED_HIGH};
    GPIO_Init(SIREN_GPIO_PORT, &gpio);
 80036ee:	463b      	mov	r3, r7
 80036f0:	4619      	mov	r1, r3
 80036f2:	4806      	ldr	r0, [pc, #24]	@ (800370c <Siren_Init+0x3c>)
 80036f4:	f7fe fb94 	bl	8001e20 <GPIO_Init>
    GPIO_WritePin(SIREN_GPIO_PORT, SIREN_GPIO_PIN, GPIO_PIN_SET);
 80036f8:	2201      	movs	r2, #1
 80036fa:	2108      	movs	r1, #8
 80036fc:	4803      	ldr	r0, [pc, #12]	@ (800370c <Siren_Init+0x3c>)
 80036fe:	f7fe fccf 	bl	80020a0 <GPIO_WritePin>
}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40010800 	.word	0x40010800

08003710 <Siren_On>:

void Siren_On(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
    GPIO_WritePin(SIREN_GPIO_PORT, SIREN_GPIO_PIN, GPIO_PIN_RESET);
 8003714:	2200      	movs	r2, #0
 8003716:	2108      	movs	r1, #8
 8003718:	4802      	ldr	r0, [pc, #8]	@ (8003724 <Siren_On+0x14>)
 800371a:	f7fe fcc1 	bl	80020a0 <GPIO_WritePin>
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40010800 	.word	0x40010800

08003728 <Siren_Off>:

void Siren_Off(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
    GPIO_WritePin(SIREN_GPIO_PORT, SIREN_GPIO_PIN, GPIO_PIN_SET);
 800372c:	2201      	movs	r2, #1
 800372e:	2108      	movs	r1, #8
 8003730:	4802      	ldr	r0, [pc, #8]	@ (800373c <Siren_Off+0x14>)
 8003732:	f7fe fcb5 	bl	80020a0 <GPIO_WritePin>
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40010800 	.word	0x40010800

08003740 <Siren_GetState>:
    Delay_ms(duration_ms);
    Siren_Off();
}

uint8_t Siren_GetState(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
    GPIO_PinState state = GPIO_ReadPin(SIREN_GPIO_PORT, SIREN_GPIO_PIN);
 8003746:	2108      	movs	r1, #8
 8003748:	4807      	ldr	r0, [pc, #28]	@ (8003768 <Siren_GetState+0x28>)
 800374a:	f7fe fcc0 	bl	80020ce <GPIO_ReadPin>
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]

    // Còi kêu khi pin ở mức RESET (0)
    return (state == GPIO_PIN_RESET) ? 1 : 0;
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40010800 	.word	0x40010800

0800376c <UART_RxCpltCallback>:
static message_t message;

uint8_t buffer[FRAME_SIZE];

void UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	@ 0x30
 8003770:	af02      	add	r7, sp, #8
 8003772:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2b      	ldr	r2, [pc, #172]	@ (8003828 <UART_RxCpltCallback+0xbc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d14f      	bne.n	800381e <UART_RxCpltCallback+0xb2>
    {
    	for(int i = 0;i<2;i++){
 800377e:	2300      	movs	r3, #0
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
 8003782:	e044      	b.n	800380e <UART_RxCpltCallback+0xa2>
            Fsm_Get_Message(uart_rx_buffer[i], buffer);
 8003784:	4a29      	ldr	r2, [pc, #164]	@ (800382c <UART_RxCpltCallback+0xc0>)
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	4413      	add	r3, r2
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	4928      	ldr	r1, [pc, #160]	@ (8003830 <UART_RxCpltCallback+0xc4>)
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff f970 	bl	8002a74 <Fsm_Get_Message>

            if (Check_Fsm_Flag_New_Message())
 8003794:	f7ff fa92 	bl	8002cbc <Check_Fsm_Flag_New_Message>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d034      	beq.n	8003808 <UART_RxCpltCallback+0x9c>
            {

                if (Message_Decode(buffer, &message))
 800379e:	4925      	ldr	r1, [pc, #148]	@ (8003834 <UART_RxCpltCallback+0xc8>)
 80037a0:	4823      	ldr	r0, [pc, #140]	@ (8003830 <UART_RxCpltCallback+0xc4>)
 80037a2:	f000 f980 	bl	8003aa6 <Message_Decode>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d019      	beq.n	80037e0 <UART_RxCpltCallback+0x74>
                {


                    push(&g_uartQueue, message, FRAME_SIZE);
 80037ac:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <UART_RxCpltCallback+0xc8>)
 80037ae:	220a      	movs	r2, #10
 80037b0:	9200      	str	r2, [sp, #0]
 80037b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b4:	4820      	ldr	r0, [pc, #128]	@ (8003838 <UART_RxCpltCallback+0xcc>)
 80037b6:	f000 fa13 	bl	8003be0 <push>

                    // Gửi ACK
                    uint8_t data[FRAME_SIZE];
                    uint8_t len = Create_Message_RESPONSE(UNKNOWN, RESPONSE_ACK, data);
 80037ba:	f107 0318 	add.w	r3, r7, #24
 80037be:	461a      	mov	r2, r3
 80037c0:	2101      	movs	r1, #1
 80037c2:	20ff      	movs	r0, #255	@ 0xff
 80037c4:	f000 f918 	bl	80039f8 <Create_Message_RESPONSE>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                    USART1_Send_Data(data, len);
 80037ce:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80037d2:	f107 0318 	add.w	r3, r7, #24
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fa9d 	bl	8002d18 <USART1_Send_Data>
 80037de:	e011      	b.n	8003804 <UART_RxCpltCallback+0x98>
                }
                else
                {
                    // Gửi NACK
                    uint8_t data[FRAME_SIZE];
                    uint8_t len = Create_Message_RESPONSE(UNKNOWN, RESPONSE_NACK, data);
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	461a      	mov	r2, r3
 80037e6:	2102      	movs	r1, #2
 80037e8:	20ff      	movs	r0, #255	@ 0xff
 80037ea:	f000 f905 	bl	80039f8 <Create_Message_RESPONSE>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    USART1_Send_Data(data, len);
 80037f4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fa8a 	bl	8002d18 <USART1_Send_Data>
                }

                Clear_All_State_Fsm(); // Reset để nhận frame mới
 8003804:	f7ff f91c 	bl	8002a40 <Clear_All_State_Fsm>
    	for(int i = 0;i<2;i++){
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	3301      	adds	r3, #1
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	2b01      	cmp	r3, #1
 8003812:	ddb7      	ble.n	8003784 <UART_RxCpltCallback+0x18>
            }
    	}

        // Nhận byte tiếp theo
        DUNGX_UART_Receive_IT(&huart1, uart_rx_buffer, 2);
 8003814:	2202      	movs	r2, #2
 8003816:	4905      	ldr	r1, [pc, #20]	@ (800382c <UART_RxCpltCallback+0xc0>)
 8003818:	4808      	ldr	r0, [pc, #32]	@ (800383c <UART_RxCpltCallback+0xd0>)
 800381a:	f7ff faa3 	bl	8002d64 <DUNGX_UART_Receive_IT>
	}
}
 800381e:	bf00      	nop
 8003820:	3728      	adds	r7, #40	@ 0x28
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40013800 	.word	0x40013800
 800382c:	200002f4 	.word	0x200002f4
 8003830:	200003a8 	.word	0x200003a8
 8003834:	2000039c 	.word	0x2000039c
 8003838:	20000220 	.word	0x20000220
 800383c:	200001e4 	.word	0x200001e4

08003840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003840:	480d      	ldr	r0, [pc, #52]	@ (8003878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003842:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003844:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003848:	480c      	ldr	r0, [pc, #48]	@ (800387c <LoopForever+0x6>)
  ldr r1, =_edata
 800384a:	490d      	ldr	r1, [pc, #52]	@ (8003880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800384c:	4a0d      	ldr	r2, [pc, #52]	@ (8003884 <LoopForever+0xe>)
  movs r3, #0
 800384e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003850:	e002      	b.n	8003858 <LoopCopyDataInit>

08003852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003856:	3304      	adds	r3, #4

08003858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800385a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800385c:	d3f9      	bcc.n	8003852 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800385e:	4a0a      	ldr	r2, [pc, #40]	@ (8003888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003860:	4c0a      	ldr	r4, [pc, #40]	@ (800388c <LoopForever+0x16>)
  movs r3, #0
 8003862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003864:	e001      	b.n	800386a <LoopFillZerobss>

08003866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003868:	3204      	adds	r2, #4

0800386a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800386a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800386c:	d3fb      	bcc.n	8003866 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800386e:	f001 f8f3 	bl	8004a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003872:	f7fe f815 	bl	80018a0 <main>

08003876 <LoopForever>:

LoopForever:
  b LoopForever
 8003876:	e7fe      	b.n	8003876 <LoopForever>
  ldr   r0, =_estack
 8003878:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800387c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003880:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8003884:	08006bb8 	.word	0x08006bb8
  ldr r2, =_sbss
 8003888:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800388c:	20000520 	.word	0x20000520

08003890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003890:	e7fe      	b.n	8003890 <ADC1_2_IRQHandler>
	...

08003894 <Convert_Float_To_Bytes>:
 * @brief: Chuyển đổi một biến float sang dạng mảng byte (4 byte).
 * @param data: Biến kiểu float cần chuyển đổi.
 * @return: Con trỏ trỏ đến mảng byte tương ứng.
 */
uint8_t *Convert_Float_To_Bytes(float data)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
    static data_convert_float_and_bytes input;
    input.data_float = data;
 800389c:	4a04      	ldr	r2, [pc, #16]	@ (80038b0 <Convert_Float_To_Bytes+0x1c>)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6013      	str	r3, [r2, #0]
    return input.data_bytes;
 80038a2:	4b03      	ldr	r3, [pc, #12]	@ (80038b0 <Convert_Float_To_Bytes+0x1c>)
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	200003b4 	.word	0x200003b4

080038b4 <Convert_Bytes_To_Float>:
 * @param data3: Byte thứ ba.
 * @param data4: Byte thứ tư.
 * @return: Biến float sau khi ghép.
 */
float Convert_Bytes_To_Float(uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
 80038b4:	b490      	push	{r4, r7}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4604      	mov	r4, r0
 80038bc:	4608      	mov	r0, r1
 80038be:	4611      	mov	r1, r2
 80038c0:	461a      	mov	r2, r3
 80038c2:	4623      	mov	r3, r4
 80038c4:	71fb      	strb	r3, [r7, #7]
 80038c6:	4603      	mov	r3, r0
 80038c8:	71bb      	strb	r3, [r7, #6]
 80038ca:	460b      	mov	r3, r1
 80038cc:	717b      	strb	r3, [r7, #5]
 80038ce:	4613      	mov	r3, r2
 80038d0:	713b      	strb	r3, [r7, #4]
    data_convert_float_and_bytes input;
    input.data_bytes[0] = data1;
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	733b      	strb	r3, [r7, #12]
    input.data_bytes[1] = data2;
 80038d6:	79bb      	ldrb	r3, [r7, #6]
 80038d8:	737b      	strb	r3, [r7, #13]
    input.data_bytes[2] = data3;
 80038da:	797b      	ldrb	r3, [r7, #5]
 80038dc:	73bb      	strb	r3, [r7, #14]
    input.data_bytes[3] = data4;
 80038de:	793b      	ldrb	r3, [r7, #4]
 80038e0:	73fb      	strb	r3, [r7, #15]
    return input.data_float;
 80038e2:	68fb      	ldr	r3, [r7, #12]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc90      	pop	{r4, r7}
 80038ec:	4770      	bx	lr

080038ee <Convert_Bytes_To_Uint16>:
 * @param data1: Byte thứ nhất.
 * @param data2: Byte thứ hai.
 * @return: Biến uint16_t sau khi ghép từ 2 byte.
 */
uint16_t Convert_Bytes_To_Uint16(uint8_t data1, uint8_t data2)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	4603      	mov	r3, r0
 80038f6:	460a      	mov	r2, r1
 80038f8:	71fb      	strb	r3, [r7, #7]
 80038fa:	4613      	mov	r3, r2
 80038fc:	71bb      	strb	r3, [r7, #6]
    data_convert_uint16_and_bytes input;
    input.data_bytes[0] = data1;
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	733b      	strb	r3, [r7, #12]
    input.data_bytes[1] = data2;
 8003902:	79bb      	ldrb	r3, [r7, #6]
 8003904:	737b      	strb	r3, [r7, #13]
    return input.data_uint16;
 8003906:	89bb      	ldrh	r3, [r7, #12]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <Message_Calculate_Checksum>:

/**
 * @brief Kiểm tra dữ liệu
 */
uint16_t Message_Calculate_Checksum(const uint8_t *buf, uint8_t len)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	70fb      	strb	r3, [r7, #3]
    return 0xFFFF; // Todo: Implement checksum calculation
 800391e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <Create_Message_Notify>:

/**
 * @brief Tạo frame bản tin NOTIFY (truyền dữ liệu float từ cảm biến)
 */
uint8_t Create_Message_Notify(ID_t id, float value, uint8_t *dataout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	73fb      	strb	r3, [r7, #15]
    if (dataout == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <Create_Message_Notify+0x18>
        return 0;
 8003940:	2300      	movs	r3, #0
 8003942:	e055      	b.n	80039f0 <Create_Message_Notify+0xc4>

    uint8_t count = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	77fb      	strb	r3, [r7, #31]

    dataout[count++] = START_BYTE;
 8003948:	7ffb      	ldrb	r3, [r7, #31]
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	77fa      	strb	r2, [r7, #31]
 800394e:	461a      	mov	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	22aa      	movs	r2, #170	@ 0xaa
 8003956:	701a      	strb	r2, [r3, #0]
    dataout[count++] = NOTIFY; // Group: NOTIFY
 8003958:	7ffb      	ldrb	r3, [r7, #31]
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	77fa      	strb	r2, [r7, #31]
 800395e:	461a      	mov	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	2203      	movs	r2, #3
 8003966:	701a      	strb	r2, [r3, #0]
    dataout[count++] = id;     // ID thiết bị cảm biến (tùy chỉnh nếu cần)
 8003968:	7ffb      	ldrb	r3, [r7, #31]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	77fa      	strb	r2, [r7, #31]
 800396e:	461a      	mov	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4413      	add	r3, r2
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	701a      	strb	r2, [r3, #0]
    dataout[count++] = 4;      // Payload: 4 byte float
 8003978:	7ffb      	ldrb	r3, [r7, #31]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	77fa      	strb	r2, [r7, #31]
 800397e:	461a      	mov	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	2204      	movs	r2, #4
 8003986:	701a      	strb	r2, [r3, #0]

    // Chuyển float thành 4 byte Big-Endian
    uint8_t *pval = Convert_Float_To_Bytes(value);
 8003988:	68b8      	ldr	r0, [r7, #8]
 800398a:	f7ff ff83 	bl	8003894 <Convert_Float_To_Bytes>
 800398e:	6178      	str	r0, [r7, #20]
    // Reverse byte order for Big-Endian
    for (int i = 0; i <= 3; i++)
 8003990:	2300      	movs	r3, #0
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e00d      	b.n	80039b2 <Create_Message_Notify+0x86>
    {
        dataout[count++] = pval[i];
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	441a      	add	r2, r3
 800399c:	7ffb      	ldrb	r3, [r7, #31]
 800399e:	1c59      	adds	r1, r3, #1
 80039a0:	77f9      	strb	r1, [r7, #31]
 80039a2:	4619      	mov	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	440b      	add	r3, r1
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i <= 3; i++)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	3301      	adds	r3, #1
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	ddee      	ble.n	8003996 <Create_Message_Notify+0x6a>
    }

    // Calculate checksum
    uint16_t checksum = Message_Calculate_Checksum(dataout, count);
 80039b8:	7ffb      	ldrb	r3, [r7, #31]
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ffa8 	bl	8003912 <Message_Calculate_Checksum>
 80039c2:	4603      	mov	r3, r0
 80039c4:	827b      	strh	r3, [r7, #18]

    // Write checksum in Big-Endian
    dataout[count++] = (checksum >> 8) & 0xFF; // High byte
 80039c6:	8a7b      	ldrh	r3, [r7, #18]
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	7ffb      	ldrb	r3, [r7, #31]
 80039ce:	1c59      	adds	r1, r3, #1
 80039d0:	77f9      	strb	r1, [r7, #31]
 80039d2:	4619      	mov	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	440b      	add	r3, r1
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]
    dataout[count++] = checksum & 0xFF;        // Low byte
 80039dc:	7ffb      	ldrb	r3, [r7, #31]
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	77fa      	strb	r2, [r7, #31]
 80039e2:	461a      	mov	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4413      	add	r3, r2
 80039e8:	8a7a      	ldrh	r2, [r7, #18]
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]

    return count; // Trả về độ dài của Message
 80039ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <Create_Message_RESPONSE>:

/**
 * @brief Tạo bản tin phản hồi (RESPONSE)
 */
uint8_t Create_Message_RESPONSE(ID_t id, RESPONSE_t r, uint8_t *dataout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	603a      	str	r2, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
 8003a04:	460b      	mov	r3, r1
 8003a06:	71bb      	strb	r3, [r7, #6]
    if (dataout == NULL)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <Create_Message_RESPONSE+0x1a>
        return 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e045      	b.n	8003a9e <Create_Message_RESPONSE+0xa6>

    uint8_t count = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]
    dataout[count++] = START_BYTE;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	73fa      	strb	r2, [r7, #15]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	4413      	add	r3, r2
 8003a22:	22aa      	movs	r2, #170	@ 0xaa
 8003a24:	701a      	strb	r2, [r3, #0]
    dataout[count++] = RESPONSE;   // Group: RESPONSE
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	73fa      	strb	r2, [r7, #15]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	4413      	add	r3, r2
 8003a32:	2202      	movs	r2, #2
 8003a34:	701a      	strb	r2, [r3, #0]
    dataout[count++] = id;         // ID thiết bị phản hồi (tùy chỉnh nếu cần)
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	73fa      	strb	r2, [r7, #15]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	4413      	add	r3, r2
 8003a42:	79fa      	ldrb	r2, [r7, #7]
 8003a44:	701a      	strb	r2, [r3, #0]
    dataout[count++] = 1;          // Payload chỉ 1 byte phản hồi
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	73fa      	strb	r2, [r7, #15]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	4413      	add	r3, r2
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
    dataout[count++] = (uint8_t)r; // Phản hồi
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	73fa      	strb	r2, [r7, #15]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	4413      	add	r3, r2
 8003a62:	79ba      	ldrb	r2, [r7, #6]
 8003a64:	701a      	strb	r2, [r3, #0]
    // Calculate checksum
    uint16_t checksum = Message_Calculate_Checksum(dataout, count);
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6838      	ldr	r0, [r7, #0]
 8003a6c:	f7ff ff51 	bl	8003912 <Message_Calculate_Checksum>
 8003a70:	4603      	mov	r3, r0
 8003a72:	81bb      	strh	r3, [r7, #12]
    // Write checksum in Big-Endian
    dataout[count++] = (checksum >> 8) & 0xFF; // High byte
 8003a74:	89bb      	ldrh	r3, [r7, #12]
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	1c59      	adds	r1, r3, #1
 8003a7e:	73f9      	strb	r1, [r7, #15]
 8003a80:	4619      	mov	r1, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	440b      	add	r3, r1
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]
    dataout[count++] = checksum & 0xFF;        // Low byte
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	73fa      	strb	r2, [r7, #15]
 8003a90:	461a      	mov	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	4413      	add	r3, r2
 8003a96:	89ba      	ldrh	r2, [r7, #12]
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]
    return count;                              // Trả về độ dài của Message
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <Message_Decode>:

/**
 * @brief Giải mã frame nhận được
 */
bool Message_Decode(const uint8_t *buffer, message_t *frame_out)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
    if (buffer == NULL || frame_out == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <Message_Decode+0x16>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <Message_Decode+0x1a>
        return false;
 8003abc:	2300      	movs	r3, #0
 8003abe:	e052      	b.n	8003b66 <Message_Decode+0xc0>

    if (buffer[0] != START_BYTE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2baa      	cmp	r3, #170	@ 0xaa
 8003ac6:	d001      	beq.n	8003acc <Message_Decode+0x26>
        return false;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e04c      	b.n	8003b66 <Message_Decode+0xc0>

    frame_out->start = buffer[0];
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	781a      	ldrb	r2, [r3, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	701a      	strb	r2, [r3, #0]
    memcpy(frame_out->header, &buffer[1], HEADER_SIZE);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	1c58      	adds	r0, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3301      	adds	r3, #1
 8003adc:	2203      	movs	r2, #3
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f000 ffef 	bl	8004ac2 <memcpy>
    uint8_t payload_len = frame_out->header[2];
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	78db      	ldrb	r3, [r3, #3]
 8003ae8:	75fb      	strb	r3, [r7, #23]

    if (payload_len > PAYLOAD_SIZE)
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d901      	bls.n	8003af4 <Message_Decode+0x4e>
        return false;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e038      	b.n	8003b66 <Message_Decode+0xc0>

    memcpy(frame_out->payload, &buffer[1 + HEADER_SIZE], payload_len);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	1d18      	adds	r0, r3, #4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	7dfa      	ldrb	r2, [r7, #23]
 8003afe:	4619      	mov	r1, r3
 8003b00:	f000 ffdf 	bl	8004ac2 <memcpy>

    uint8_t temp[HEADER_SIZE + PAYLOAD_SIZE];
    memcpy(temp, frame_out->header, HEADER_SIZE);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	f107 0308 	add.w	r3, r7, #8
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 ffd7 	bl	8004ac2 <memcpy>
    memcpy(temp + HEADER_SIZE, frame_out->payload, payload_len);
 8003b14:	f107 0308 	add.w	r3, r7, #8
 8003b18:	3303      	adds	r3, #3
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	1d11      	adds	r1, r2, #4
 8003b1e:	7dfa      	ldrb	r2, [r7, #23]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 ffce 	bl	8004ac2 <memcpy>

    uint16_t received_checksum = buffer[1 + HEADER_SIZE + payload_len] |
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b21a      	sxth	r2, r3
                                 (buffer[1 + HEADER_SIZE + payload_len + 1] << 8);
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	3305      	adds	r3, #5
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	440b      	add	r3, r1
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	021b      	lsls	r3, r3, #8
    uint16_t received_checksum = buffer[1 + HEADER_SIZE + payload_len] |
 8003b40:	b21b      	sxth	r3, r3
 8003b42:	4313      	orrs	r3, r2
 8003b44:	b21b      	sxth	r3, r3
 8003b46:	82bb      	strh	r3, [r7, #20]
    uint16_t calc_checksum = Message_Calculate_Checksum(temp, HEADER_SIZE + payload_len);
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	3303      	adds	r3, #3
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	f107 0308 	add.w	r3, r7, #8
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fedc 	bl	8003912 <Message_Calculate_Checksum>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	827b      	strh	r3, [r7, #18]

    // if (received_checksum != calc_checksum) return false;

    frame_out->checksum = received_checksum;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	8aba      	ldrh	r2, [r7, #20]
 8003b62:	811a      	strh	r2, [r3, #8]
    return true;
 8003b64:	2301      	movs	r3, #1
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <Queue_init>:
#include "queue.h"
#include <string.h>

void Queue_init(FrameQueue *q) {
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
    q->front = 0;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    q->rear = -1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f04f 32ff 	mov.w	r2, #4294967295
 8003b84:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    q->size = 0;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <empty>:

bool empty(const FrameQueue *q) {
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
    return q->size == 0;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <full>:

bool full(const FrameQueue *q) {
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
    return q->size == FRAME_QUEUE_CAPACITY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003bca:	2b14      	cmp	r3, #20
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
	...

08003be0 <push>:

int size(const FrameQueue *q) {
    return q->size;
}

bool push(FrameQueue *q, const message_t f, uint8_t length) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	4638      	mov	r0, r7
 8003bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (full(q)) return false;
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff ffe4 	bl	8003bbc <full>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <push+0x1e>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e027      	b.n	8003c4e <push+0x6e>

    q->rear = (q->rear + 1) % FRAME_QUEUE_CAPACITY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003c04:	1c59      	adds	r1, r3, #1
 8003c06:	4b14      	ldr	r3, [pc, #80]	@ (8003c58 <push+0x78>)
 8003c08:	fb83 2301 	smull	r2, r3, r3, r1
 8003c0c:	10da      	asrs	r2, r3, #3
 8003c0e:	17cb      	asrs	r3, r1, #31
 8003c10:	1ad2      	subs	r2, r2, r3
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	1aca      	subs	r2, r1, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    memcpy(&q->buffer[q->rear], &f, length);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	7e3a      	ldrb	r2, [r7, #24]
 8003c36:	4639      	mov	r1, r7
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 ff42 	bl	8004ac2 <memcpy>
    q->size++;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    return true;
 8003c4c:	2301      	movs	r3, #1
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	66666667 	.word	0x66666667

08003c5c <pop>:

bool pop(FrameQueue *q) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
    if (empty(q)) return false;
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff98 	bl	8003b9a <empty>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <pop+0x18>
 8003c70:	2300      	movs	r3, #0
 8003c72:	e019      	b.n	8003ca8 <pop+0x4c>

    q->front = (q->front + 1) % FRAME_QUEUE_CAPACITY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003c7a:	1c59      	adds	r1, r3, #1
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb0 <pop+0x54>)
 8003c7e:	fb83 2301 	smull	r2, r3, r3, r1
 8003c82:	10da      	asrs	r2, r3, #3
 8003c84:	17cb      	asrs	r3, r1, #31
 8003c86:	1ad2      	subs	r2, r2, r3
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	1aca      	subs	r2, r1, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    q->size--;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003c9e:	1e5a      	subs	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    return true;
 8003ca6:	2301      	movs	r3, #1
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	66666667 	.word	0x66666667

08003cb4 <front>:

message_t* front(const FrameQueue *q) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
    if (empty(q)) return NULL;
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ff6c 	bl	8003b9a <empty>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <front+0x18>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e008      	b.n	8003cde <front+0x2a>
    return (message_t*)&q->buffer[q->front];
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4413      	add	r3, r2
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <__NVIC_EnableIRQ>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	db0b      	blt.n	8003d12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	f003 021f 	and.w	r2, r3, #31
 8003d00:	4906      	ldr	r1, [pc, #24]	@ (8003d1c <__NVIC_EnableIRQ+0x34>)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	2001      	movs	r0, #1
 8003d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	e000e100 	.word	0xe000e100

08003d20 <__NVIC_SetPriority>:
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	6039      	str	r1, [r7, #0]
 8003d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	db0a      	blt.n	8003d4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	490c      	ldr	r1, [pc, #48]	@ (8003d6c <__NVIC_SetPriority+0x4c>)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	0112      	lsls	r2, r2, #4
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	440b      	add	r3, r1
 8003d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003d48:	e00a      	b.n	8003d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4908      	ldr	r1, [pc, #32]	@ (8003d70 <__NVIC_SetPriority+0x50>)
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	3b04      	subs	r3, #4
 8003d58:	0112      	lsls	r2, r2, #4
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	761a      	strb	r2, [r3, #24]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	e000e100 	.word	0xe000e100
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <Timer_Init>:
static volatile uint32_t tick_ms = 0; // Bộ đếm ms

static TIM_HandleTypeDef htim2;

void Timer_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
	 RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003d78:	4b19      	ldr	r3, [pc, #100]	@ (8003de0 <Timer_Init+0x6c>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	4a18      	ldr	r2, [pc, #96]	@ (8003de0 <Timer_Init+0x6c>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	61d3      	str	r3, [r2, #28]

    // Cấu hình TIM2 cho 1ms (SystemCoreClock = 72MHz)
    htim2.Instance = TIM2;
 8003d84:	4b17      	ldr	r3, [pc, #92]	@ (8003de4 <Timer_Init+0x70>)
 8003d86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003d8a:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 72 - 1;     // 1 MHz (1 tick = 1us)
 8003d8c:	4b15      	ldr	r3, [pc, #84]	@ (8003de4 <Timer_Init+0x70>)
 8003d8e:	2247      	movs	r2, #71	@ 0x47
 8003d90:	605a      	str	r2, [r3, #4]
    htim2.Init.Period = 1000-1;      // 1000 ticks = 1ms
 8003d92:	4b14      	ldr	r3, [pc, #80]	@ (8003de4 <Timer_Init+0x70>)
 8003d94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003d98:	60da      	str	r2, [r3, #12]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9a:	4b12      	ldr	r3, [pc, #72]	@ (8003de4 <Timer_Init+0x70>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da0:	4b10      	ldr	r3, [pc, #64]	@ (8003de4 <Timer_Init+0x70>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]

    TIM_Base_Init(&htim2);
 8003da6:	480f      	ldr	r0, [pc, #60]	@ (8003de4 <Timer_Init+0x70>)
 8003da8:	f7fe f9a6 	bl	80020f8 <TIM_Base_Init>

    // Bật update interrupt
    htim2.Instance->DIER |= TIM_DIER_UIE;
 8003dac:	4b0d      	ldr	r3, [pc, #52]	@ (8003de4 <Timer_Init+0x70>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <Timer_Init+0x70>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	60da      	str	r2, [r3, #12]

    // Bật timer
    TIM_ENABLE(&htim2);
 8003dbc:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <Timer_Init+0x70>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4b08      	ldr	r3, [pc, #32]	@ (8003de4 <Timer_Init+0x70>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]



    // Bật ngắt TIM2 trong NVIC
    NVIC_SetPriority(TIM2_IRQn, 1);
 8003dcc:	2101      	movs	r1, #1
 8003dce:	201c      	movs	r0, #28
 8003dd0:	f7ff ffa6 	bl	8003d20 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8003dd4:	201c      	movs	r0, #28
 8003dd6:	f7ff ff87 	bl	8003ce8 <__NVIC_EnableIRQ>
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
 8003de4:	200003bc 	.word	0x200003bc

08003de8 <IncTick>:

void IncTick(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
    tick_ms++;
 8003dec:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <IncTick+0x18>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3301      	adds	r3, #1
 8003df2:	4a03      	ldr	r2, [pc, #12]	@ (8003e00 <IncTick+0x18>)
 8003df4:	6013      	str	r3, [r2, #0]
}
 8003df6:	bf00      	nop
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	200003b8 	.word	0x200003b8

08003e04 <GetTick>:

uint32_t GetTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
    return tick_ms;
 8003e08:	4b02      	ldr	r3, [pc, #8]	@ (8003e14 <GetTick+0x10>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr
 8003e14:	200003b8 	.word	0x200003b8

08003e18 <Delay_ms>:

void Delay_ms(uint32_t ms)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
    uint32_t start = GetTick();
 8003e20:	f7ff fff0 	bl	8003e04 <GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]
    while ((GetTick() - start) < ms);
 8003e26:	bf00      	nop
 8003e28:	f7ff ffec 	bl	8003e04 <GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d8f7      	bhi.n	8003e28 <Delay_ms+0x10>
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <Delay_us>:

void Delay_us(uint32_t us)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8003e4c:	4b18      	ldr	r3, [pc, #96]	@ (8003eb0 <Delay_us+0x6c>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <Delay_us+0x20>
	        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003e58:	4b15      	ldr	r3, [pc, #84]	@ (8003eb0 <Delay_us+0x6c>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a14      	ldr	r2, [pc, #80]	@ (8003eb0 <Delay_us+0x6c>)
 8003e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e62:	60d3      	str	r3, [r2, #12]

	    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk)) {
 8003e64:	4b13      	ldr	r3, [pc, #76]	@ (8003eb4 <Delay_us+0x70>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d108      	bne.n	8003e82 <Delay_us+0x3e>
	        DWT->CYCCNT = 0;
 8003e70:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <Delay_us+0x70>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	605a      	str	r2, [r3, #4]
	        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003e76:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb4 <Delay_us+0x70>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb4 <Delay_us+0x70>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6013      	str	r3, [r2, #0]
	    }

	    uint32_t start = DWT->CYCCNT;
 8003e82:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <Delay_us+0x70>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	60fb      	str	r3, [r7, #12]
	    uint32_t ticks = us * (SystemCoreClock / 1000000);
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4413      	add	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	60bb      	str	r3, [r7, #8]
	    while ((DWT->CYCCNT - start) < ticks);
 8003e94:	bf00      	nop
 8003e96:	4b07      	ldr	r3, [pc, #28]	@ (8003eb4 <Delay_us+0x70>)
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d8f8      	bhi.n	8003e96 <Delay_us+0x52>
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr
 8003eb0:	e000edf0 	.word	0xe000edf0
 8003eb4:	e0001000 	.word	0xe0001000

08003eb8 <TIM2_IRQHandler>:

// Handler xử lý ngắt TIM2
void TIM2_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // Kiểm tra cờ ngắt Update Interrupt Flag
 8003ebc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <TIM2_IRQHandler+0x26>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 8003eca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	6113      	str	r3, [r2, #16]
        IncTick();
 8003eda:	f7ff ff85 	bl	8003de8 <IncTick>
    }
}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <__cvt>:
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	461d      	mov	r5, r3
 8003eea:	bfbb      	ittet	lt
 8003eec:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003ef0:	461d      	movlt	r5, r3
 8003ef2:	2300      	movge	r3, #0
 8003ef4:	232d      	movlt	r3, #45	@ 0x2d
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	4614      	mov	r4, r2
 8003efa:	bfb8      	it	lt
 8003efc:	4614      	movlt	r4, r2
 8003efe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003f00:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003f02:	7013      	strb	r3, [r2, #0]
 8003f04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003f06:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003f0a:	f023 0820 	bic.w	r8, r3, #32
 8003f0e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f12:	d005      	beq.n	8003f20 <__cvt+0x3e>
 8003f14:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003f18:	d100      	bne.n	8003f1c <__cvt+0x3a>
 8003f1a:	3601      	adds	r6, #1
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e000      	b.n	8003f22 <__cvt+0x40>
 8003f20:	2303      	movs	r3, #3
 8003f22:	aa07      	add	r2, sp, #28
 8003f24:	9204      	str	r2, [sp, #16]
 8003f26:	aa06      	add	r2, sp, #24
 8003f28:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f2c:	e9cd 3600 	strd	r3, r6, [sp]
 8003f30:	4622      	mov	r2, r4
 8003f32:	462b      	mov	r3, r5
 8003f34:	f000 fe5c 	bl	8004bf0 <_dtoa_r>
 8003f38:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003f3c:	4607      	mov	r7, r0
 8003f3e:	d119      	bne.n	8003f74 <__cvt+0x92>
 8003f40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003f42:	07db      	lsls	r3, r3, #31
 8003f44:	d50e      	bpl.n	8003f64 <__cvt+0x82>
 8003f46:	eb00 0906 	add.w	r9, r0, r6
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	4620      	mov	r0, r4
 8003f50:	4629      	mov	r1, r5
 8003f52:	f7fc fd39 	bl	80009c8 <__aeabi_dcmpeq>
 8003f56:	b108      	cbz	r0, 8003f5c <__cvt+0x7a>
 8003f58:	f8cd 901c 	str.w	r9, [sp, #28]
 8003f5c:	2230      	movs	r2, #48	@ 0x30
 8003f5e:	9b07      	ldr	r3, [sp, #28]
 8003f60:	454b      	cmp	r3, r9
 8003f62:	d31e      	bcc.n	8003fa2 <__cvt+0xc0>
 8003f64:	4638      	mov	r0, r7
 8003f66:	9b07      	ldr	r3, [sp, #28]
 8003f68:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003f6a:	1bdb      	subs	r3, r3, r7
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	b008      	add	sp, #32
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f78:	eb00 0906 	add.w	r9, r0, r6
 8003f7c:	d1e5      	bne.n	8003f4a <__cvt+0x68>
 8003f7e:	7803      	ldrb	r3, [r0, #0]
 8003f80:	2b30      	cmp	r3, #48	@ 0x30
 8003f82:	d10a      	bne.n	8003f9a <__cvt+0xb8>
 8003f84:	2200      	movs	r2, #0
 8003f86:	2300      	movs	r3, #0
 8003f88:	4620      	mov	r0, r4
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	f7fc fd1c 	bl	80009c8 <__aeabi_dcmpeq>
 8003f90:	b918      	cbnz	r0, 8003f9a <__cvt+0xb8>
 8003f92:	f1c6 0601 	rsb	r6, r6, #1
 8003f96:	f8ca 6000 	str.w	r6, [sl]
 8003f9a:	f8da 3000 	ldr.w	r3, [sl]
 8003f9e:	4499      	add	r9, r3
 8003fa0:	e7d3      	b.n	8003f4a <__cvt+0x68>
 8003fa2:	1c59      	adds	r1, r3, #1
 8003fa4:	9107      	str	r1, [sp, #28]
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e7d9      	b.n	8003f5e <__cvt+0x7c>

08003faa <__exponent>:
 8003faa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fac:	2900      	cmp	r1, #0
 8003fae:	bfb6      	itet	lt
 8003fb0:	232d      	movlt	r3, #45	@ 0x2d
 8003fb2:	232b      	movge	r3, #43	@ 0x2b
 8003fb4:	4249      	neglt	r1, r1
 8003fb6:	2909      	cmp	r1, #9
 8003fb8:	7002      	strb	r2, [r0, #0]
 8003fba:	7043      	strb	r3, [r0, #1]
 8003fbc:	dd29      	ble.n	8004012 <__exponent+0x68>
 8003fbe:	f10d 0307 	add.w	r3, sp, #7
 8003fc2:	461d      	mov	r5, r3
 8003fc4:	270a      	movs	r7, #10
 8003fc6:	fbb1 f6f7 	udiv	r6, r1, r7
 8003fca:	461a      	mov	r2, r3
 8003fcc:	fb07 1416 	mls	r4, r7, r6, r1
 8003fd0:	3430      	adds	r4, #48	@ 0x30
 8003fd2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	2c63      	cmp	r4, #99	@ 0x63
 8003fda:	4631      	mov	r1, r6
 8003fdc:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fe0:	dcf1      	bgt.n	8003fc6 <__exponent+0x1c>
 8003fe2:	3130      	adds	r1, #48	@ 0x30
 8003fe4:	1e94      	subs	r4, r2, #2
 8003fe6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003fea:	4623      	mov	r3, r4
 8003fec:	1c41      	adds	r1, r0, #1
 8003fee:	42ab      	cmp	r3, r5
 8003ff0:	d30a      	bcc.n	8004008 <__exponent+0x5e>
 8003ff2:	f10d 0309 	add.w	r3, sp, #9
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	42ac      	cmp	r4, r5
 8003ffa:	bf88      	it	hi
 8003ffc:	2300      	movhi	r3, #0
 8003ffe:	3302      	adds	r3, #2
 8004000:	4403      	add	r3, r0
 8004002:	1a18      	subs	r0, r3, r0
 8004004:	b003      	add	sp, #12
 8004006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004008:	f813 6b01 	ldrb.w	r6, [r3], #1
 800400c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004010:	e7ed      	b.n	8003fee <__exponent+0x44>
 8004012:	2330      	movs	r3, #48	@ 0x30
 8004014:	3130      	adds	r1, #48	@ 0x30
 8004016:	7083      	strb	r3, [r0, #2]
 8004018:	70c1      	strb	r1, [r0, #3]
 800401a:	1d03      	adds	r3, r0, #4
 800401c:	e7f1      	b.n	8004002 <__exponent+0x58>
	...

08004020 <_printf_float>:
 8004020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004024:	b091      	sub	sp, #68	@ 0x44
 8004026:	460c      	mov	r4, r1
 8004028:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800402c:	4616      	mov	r6, r2
 800402e:	461f      	mov	r7, r3
 8004030:	4605      	mov	r5, r0
 8004032:	f000 fcc1 	bl	80049b8 <_localeconv_r>
 8004036:	6803      	ldr	r3, [r0, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	9308      	str	r3, [sp, #32]
 800403c:	f7fc f898 	bl	8000170 <strlen>
 8004040:	2300      	movs	r3, #0
 8004042:	930e      	str	r3, [sp, #56]	@ 0x38
 8004044:	f8d8 3000 	ldr.w	r3, [r8]
 8004048:	9009      	str	r0, [sp, #36]	@ 0x24
 800404a:	3307      	adds	r3, #7
 800404c:	f023 0307 	bic.w	r3, r3, #7
 8004050:	f103 0208 	add.w	r2, r3, #8
 8004054:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004058:	f8d4 b000 	ldr.w	fp, [r4]
 800405c:	f8c8 2000 	str.w	r2, [r8]
 8004060:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004064:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800406a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800406e:	f04f 32ff 	mov.w	r2, #4294967295
 8004072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004076:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800407a:	4b9c      	ldr	r3, [pc, #624]	@ (80042ec <_printf_float+0x2cc>)
 800407c:	f7fc fcd6 	bl	8000a2c <__aeabi_dcmpun>
 8004080:	bb70      	cbnz	r0, 80040e0 <_printf_float+0xc0>
 8004082:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004086:	f04f 32ff 	mov.w	r2, #4294967295
 800408a:	4b98      	ldr	r3, [pc, #608]	@ (80042ec <_printf_float+0x2cc>)
 800408c:	f7fc fcb0 	bl	80009f0 <__aeabi_dcmple>
 8004090:	bb30      	cbnz	r0, 80040e0 <_printf_float+0xc0>
 8004092:	2200      	movs	r2, #0
 8004094:	2300      	movs	r3, #0
 8004096:	4640      	mov	r0, r8
 8004098:	4649      	mov	r1, r9
 800409a:	f7fc fc9f 	bl	80009dc <__aeabi_dcmplt>
 800409e:	b110      	cbz	r0, 80040a6 <_printf_float+0x86>
 80040a0:	232d      	movs	r3, #45	@ 0x2d
 80040a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040a6:	4a92      	ldr	r2, [pc, #584]	@ (80042f0 <_printf_float+0x2d0>)
 80040a8:	4b92      	ldr	r3, [pc, #584]	@ (80042f4 <_printf_float+0x2d4>)
 80040aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80040ae:	bf94      	ite	ls
 80040b0:	4690      	movls	r8, r2
 80040b2:	4698      	movhi	r8, r3
 80040b4:	2303      	movs	r3, #3
 80040b6:	f04f 0900 	mov.w	r9, #0
 80040ba:	6123      	str	r3, [r4, #16]
 80040bc:	f02b 0304 	bic.w	r3, fp, #4
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	4633      	mov	r3, r6
 80040c4:	4621      	mov	r1, r4
 80040c6:	4628      	mov	r0, r5
 80040c8:	9700      	str	r7, [sp, #0]
 80040ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 80040cc:	f000 f9d4 	bl	8004478 <_printf_common>
 80040d0:	3001      	adds	r0, #1
 80040d2:	f040 8090 	bne.w	80041f6 <_printf_float+0x1d6>
 80040d6:	f04f 30ff 	mov.w	r0, #4294967295
 80040da:	b011      	add	sp, #68	@ 0x44
 80040dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040e0:	4642      	mov	r2, r8
 80040e2:	464b      	mov	r3, r9
 80040e4:	4640      	mov	r0, r8
 80040e6:	4649      	mov	r1, r9
 80040e8:	f7fc fca0 	bl	8000a2c <__aeabi_dcmpun>
 80040ec:	b148      	cbz	r0, 8004102 <_printf_float+0xe2>
 80040ee:	464b      	mov	r3, r9
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bfb8      	it	lt
 80040f4:	232d      	movlt	r3, #45	@ 0x2d
 80040f6:	4a80      	ldr	r2, [pc, #512]	@ (80042f8 <_printf_float+0x2d8>)
 80040f8:	bfb8      	it	lt
 80040fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80040fe:	4b7f      	ldr	r3, [pc, #508]	@ (80042fc <_printf_float+0x2dc>)
 8004100:	e7d3      	b.n	80040aa <_printf_float+0x8a>
 8004102:	6863      	ldr	r3, [r4, #4]
 8004104:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	d13f      	bne.n	800418c <_printf_float+0x16c>
 800410c:	2306      	movs	r3, #6
 800410e:	6063      	str	r3, [r4, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004116:	6023      	str	r3, [r4, #0]
 8004118:	9206      	str	r2, [sp, #24]
 800411a:	aa0e      	add	r2, sp, #56	@ 0x38
 800411c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004120:	aa0d      	add	r2, sp, #52	@ 0x34
 8004122:	9203      	str	r2, [sp, #12]
 8004124:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004128:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800412c:	6863      	ldr	r3, [r4, #4]
 800412e:	4642      	mov	r2, r8
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	4628      	mov	r0, r5
 8004134:	464b      	mov	r3, r9
 8004136:	910a      	str	r1, [sp, #40]	@ 0x28
 8004138:	f7ff fed3 	bl	8003ee2 <__cvt>
 800413c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800413e:	4680      	mov	r8, r0
 8004140:	2947      	cmp	r1, #71	@ 0x47
 8004142:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004144:	d128      	bne.n	8004198 <_printf_float+0x178>
 8004146:	1cc8      	adds	r0, r1, #3
 8004148:	db02      	blt.n	8004150 <_printf_float+0x130>
 800414a:	6863      	ldr	r3, [r4, #4]
 800414c:	4299      	cmp	r1, r3
 800414e:	dd40      	ble.n	80041d2 <_printf_float+0x1b2>
 8004150:	f1aa 0a02 	sub.w	sl, sl, #2
 8004154:	fa5f fa8a 	uxtb.w	sl, sl
 8004158:	4652      	mov	r2, sl
 800415a:	3901      	subs	r1, #1
 800415c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004160:	910d      	str	r1, [sp, #52]	@ 0x34
 8004162:	f7ff ff22 	bl	8003faa <__exponent>
 8004166:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004168:	4681      	mov	r9, r0
 800416a:	1813      	adds	r3, r2, r0
 800416c:	2a01      	cmp	r2, #1
 800416e:	6123      	str	r3, [r4, #16]
 8004170:	dc02      	bgt.n	8004178 <_printf_float+0x158>
 8004172:	6822      	ldr	r2, [r4, #0]
 8004174:	07d2      	lsls	r2, r2, #31
 8004176:	d501      	bpl.n	800417c <_printf_float+0x15c>
 8004178:	3301      	adds	r3, #1
 800417a:	6123      	str	r3, [r4, #16]
 800417c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004180:	2b00      	cmp	r3, #0
 8004182:	d09e      	beq.n	80040c2 <_printf_float+0xa2>
 8004184:	232d      	movs	r3, #45	@ 0x2d
 8004186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800418a:	e79a      	b.n	80040c2 <_printf_float+0xa2>
 800418c:	2947      	cmp	r1, #71	@ 0x47
 800418e:	d1bf      	bne.n	8004110 <_printf_float+0xf0>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1bd      	bne.n	8004110 <_printf_float+0xf0>
 8004194:	2301      	movs	r3, #1
 8004196:	e7ba      	b.n	800410e <_printf_float+0xee>
 8004198:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800419c:	d9dc      	bls.n	8004158 <_printf_float+0x138>
 800419e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80041a2:	d118      	bne.n	80041d6 <_printf_float+0x1b6>
 80041a4:	2900      	cmp	r1, #0
 80041a6:	6863      	ldr	r3, [r4, #4]
 80041a8:	dd0b      	ble.n	80041c2 <_printf_float+0x1a2>
 80041aa:	6121      	str	r1, [r4, #16]
 80041ac:	b913      	cbnz	r3, 80041b4 <_printf_float+0x194>
 80041ae:	6822      	ldr	r2, [r4, #0]
 80041b0:	07d0      	lsls	r0, r2, #31
 80041b2:	d502      	bpl.n	80041ba <_printf_float+0x19a>
 80041b4:	3301      	adds	r3, #1
 80041b6:	440b      	add	r3, r1
 80041b8:	6123      	str	r3, [r4, #16]
 80041ba:	f04f 0900 	mov.w	r9, #0
 80041be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80041c0:	e7dc      	b.n	800417c <_printf_float+0x15c>
 80041c2:	b913      	cbnz	r3, 80041ca <_printf_float+0x1aa>
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	07d2      	lsls	r2, r2, #31
 80041c8:	d501      	bpl.n	80041ce <_printf_float+0x1ae>
 80041ca:	3302      	adds	r3, #2
 80041cc:	e7f4      	b.n	80041b8 <_printf_float+0x198>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e7f2      	b.n	80041b8 <_printf_float+0x198>
 80041d2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80041d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80041d8:	4299      	cmp	r1, r3
 80041da:	db05      	blt.n	80041e8 <_printf_float+0x1c8>
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	6121      	str	r1, [r4, #16]
 80041e0:	07d8      	lsls	r0, r3, #31
 80041e2:	d5ea      	bpl.n	80041ba <_printf_float+0x19a>
 80041e4:	1c4b      	adds	r3, r1, #1
 80041e6:	e7e7      	b.n	80041b8 <_printf_float+0x198>
 80041e8:	2900      	cmp	r1, #0
 80041ea:	bfcc      	ite	gt
 80041ec:	2201      	movgt	r2, #1
 80041ee:	f1c1 0202 	rsble	r2, r1, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	e7e0      	b.n	80041b8 <_printf_float+0x198>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	055a      	lsls	r2, r3, #21
 80041fa:	d407      	bmi.n	800420c <_printf_float+0x1ec>
 80041fc:	6923      	ldr	r3, [r4, #16]
 80041fe:	4642      	mov	r2, r8
 8004200:	4631      	mov	r1, r6
 8004202:	4628      	mov	r0, r5
 8004204:	47b8      	blx	r7
 8004206:	3001      	adds	r0, #1
 8004208:	d12b      	bne.n	8004262 <_printf_float+0x242>
 800420a:	e764      	b.n	80040d6 <_printf_float+0xb6>
 800420c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004210:	f240 80dc 	bls.w	80043cc <_printf_float+0x3ac>
 8004214:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004218:	2200      	movs	r2, #0
 800421a:	2300      	movs	r3, #0
 800421c:	f7fc fbd4 	bl	80009c8 <__aeabi_dcmpeq>
 8004220:	2800      	cmp	r0, #0
 8004222:	d033      	beq.n	800428c <_printf_float+0x26c>
 8004224:	2301      	movs	r3, #1
 8004226:	4631      	mov	r1, r6
 8004228:	4628      	mov	r0, r5
 800422a:	4a35      	ldr	r2, [pc, #212]	@ (8004300 <_printf_float+0x2e0>)
 800422c:	47b8      	blx	r7
 800422e:	3001      	adds	r0, #1
 8004230:	f43f af51 	beq.w	80040d6 <_printf_float+0xb6>
 8004234:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004238:	4543      	cmp	r3, r8
 800423a:	db02      	blt.n	8004242 <_printf_float+0x222>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	07d8      	lsls	r0, r3, #31
 8004240:	d50f      	bpl.n	8004262 <_printf_float+0x242>
 8004242:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004246:	4631      	mov	r1, r6
 8004248:	4628      	mov	r0, r5
 800424a:	47b8      	blx	r7
 800424c:	3001      	adds	r0, #1
 800424e:	f43f af42 	beq.w	80040d6 <_printf_float+0xb6>
 8004252:	f04f 0900 	mov.w	r9, #0
 8004256:	f108 38ff 	add.w	r8, r8, #4294967295
 800425a:	f104 0a1a 	add.w	sl, r4, #26
 800425e:	45c8      	cmp	r8, r9
 8004260:	dc09      	bgt.n	8004276 <_printf_float+0x256>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	079b      	lsls	r3, r3, #30
 8004266:	f100 8102 	bmi.w	800446e <_printf_float+0x44e>
 800426a:	68e0      	ldr	r0, [r4, #12]
 800426c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800426e:	4298      	cmp	r0, r3
 8004270:	bfb8      	it	lt
 8004272:	4618      	movlt	r0, r3
 8004274:	e731      	b.n	80040da <_printf_float+0xba>
 8004276:	2301      	movs	r3, #1
 8004278:	4652      	mov	r2, sl
 800427a:	4631      	mov	r1, r6
 800427c:	4628      	mov	r0, r5
 800427e:	47b8      	blx	r7
 8004280:	3001      	adds	r0, #1
 8004282:	f43f af28 	beq.w	80040d6 <_printf_float+0xb6>
 8004286:	f109 0901 	add.w	r9, r9, #1
 800428a:	e7e8      	b.n	800425e <_printf_float+0x23e>
 800428c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800428e:	2b00      	cmp	r3, #0
 8004290:	dc38      	bgt.n	8004304 <_printf_float+0x2e4>
 8004292:	2301      	movs	r3, #1
 8004294:	4631      	mov	r1, r6
 8004296:	4628      	mov	r0, r5
 8004298:	4a19      	ldr	r2, [pc, #100]	@ (8004300 <_printf_float+0x2e0>)
 800429a:	47b8      	blx	r7
 800429c:	3001      	adds	r0, #1
 800429e:	f43f af1a 	beq.w	80040d6 <_printf_float+0xb6>
 80042a2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80042a6:	ea59 0303 	orrs.w	r3, r9, r3
 80042aa:	d102      	bne.n	80042b2 <_printf_float+0x292>
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	07d9      	lsls	r1, r3, #31
 80042b0:	d5d7      	bpl.n	8004262 <_printf_float+0x242>
 80042b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042b6:	4631      	mov	r1, r6
 80042b8:	4628      	mov	r0, r5
 80042ba:	47b8      	blx	r7
 80042bc:	3001      	adds	r0, #1
 80042be:	f43f af0a 	beq.w	80040d6 <_printf_float+0xb6>
 80042c2:	f04f 0a00 	mov.w	sl, #0
 80042c6:	f104 0b1a 	add.w	fp, r4, #26
 80042ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042cc:	425b      	negs	r3, r3
 80042ce:	4553      	cmp	r3, sl
 80042d0:	dc01      	bgt.n	80042d6 <_printf_float+0x2b6>
 80042d2:	464b      	mov	r3, r9
 80042d4:	e793      	b.n	80041fe <_printf_float+0x1de>
 80042d6:	2301      	movs	r3, #1
 80042d8:	465a      	mov	r2, fp
 80042da:	4631      	mov	r1, r6
 80042dc:	4628      	mov	r0, r5
 80042de:	47b8      	blx	r7
 80042e0:	3001      	adds	r0, #1
 80042e2:	f43f aef8 	beq.w	80040d6 <_printf_float+0xb6>
 80042e6:	f10a 0a01 	add.w	sl, sl, #1
 80042ea:	e7ee      	b.n	80042ca <_printf_float+0x2aa>
 80042ec:	7fefffff 	.word	0x7fefffff
 80042f0:	08006837 	.word	0x08006837
 80042f4:	0800683b 	.word	0x0800683b
 80042f8:	0800683f 	.word	0x0800683f
 80042fc:	08006843 	.word	0x08006843
 8004300:	08006847 	.word	0x08006847
 8004304:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004306:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800430a:	4553      	cmp	r3, sl
 800430c:	bfa8      	it	ge
 800430e:	4653      	movge	r3, sl
 8004310:	2b00      	cmp	r3, #0
 8004312:	4699      	mov	r9, r3
 8004314:	dc36      	bgt.n	8004384 <_printf_float+0x364>
 8004316:	f04f 0b00 	mov.w	fp, #0
 800431a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800431e:	f104 021a 	add.w	r2, r4, #26
 8004322:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004324:	930a      	str	r3, [sp, #40]	@ 0x28
 8004326:	eba3 0309 	sub.w	r3, r3, r9
 800432a:	455b      	cmp	r3, fp
 800432c:	dc31      	bgt.n	8004392 <_printf_float+0x372>
 800432e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004330:	459a      	cmp	sl, r3
 8004332:	dc3a      	bgt.n	80043aa <_printf_float+0x38a>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	07da      	lsls	r2, r3, #31
 8004338:	d437      	bmi.n	80043aa <_printf_float+0x38a>
 800433a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800433c:	ebaa 0903 	sub.w	r9, sl, r3
 8004340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004342:	ebaa 0303 	sub.w	r3, sl, r3
 8004346:	4599      	cmp	r9, r3
 8004348:	bfa8      	it	ge
 800434a:	4699      	movge	r9, r3
 800434c:	f1b9 0f00 	cmp.w	r9, #0
 8004350:	dc33      	bgt.n	80043ba <_printf_float+0x39a>
 8004352:	f04f 0800 	mov.w	r8, #0
 8004356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800435a:	f104 0b1a 	add.w	fp, r4, #26
 800435e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004360:	ebaa 0303 	sub.w	r3, sl, r3
 8004364:	eba3 0309 	sub.w	r3, r3, r9
 8004368:	4543      	cmp	r3, r8
 800436a:	f77f af7a 	ble.w	8004262 <_printf_float+0x242>
 800436e:	2301      	movs	r3, #1
 8004370:	465a      	mov	r2, fp
 8004372:	4631      	mov	r1, r6
 8004374:	4628      	mov	r0, r5
 8004376:	47b8      	blx	r7
 8004378:	3001      	adds	r0, #1
 800437a:	f43f aeac 	beq.w	80040d6 <_printf_float+0xb6>
 800437e:	f108 0801 	add.w	r8, r8, #1
 8004382:	e7ec      	b.n	800435e <_printf_float+0x33e>
 8004384:	4642      	mov	r2, r8
 8004386:	4631      	mov	r1, r6
 8004388:	4628      	mov	r0, r5
 800438a:	47b8      	blx	r7
 800438c:	3001      	adds	r0, #1
 800438e:	d1c2      	bne.n	8004316 <_printf_float+0x2f6>
 8004390:	e6a1      	b.n	80040d6 <_printf_float+0xb6>
 8004392:	2301      	movs	r3, #1
 8004394:	4631      	mov	r1, r6
 8004396:	4628      	mov	r0, r5
 8004398:	920a      	str	r2, [sp, #40]	@ 0x28
 800439a:	47b8      	blx	r7
 800439c:	3001      	adds	r0, #1
 800439e:	f43f ae9a 	beq.w	80040d6 <_printf_float+0xb6>
 80043a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80043a4:	f10b 0b01 	add.w	fp, fp, #1
 80043a8:	e7bb      	b.n	8004322 <_printf_float+0x302>
 80043aa:	4631      	mov	r1, r6
 80043ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	d1c0      	bne.n	800433a <_printf_float+0x31a>
 80043b8:	e68d      	b.n	80040d6 <_printf_float+0xb6>
 80043ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80043bc:	464b      	mov	r3, r9
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	4442      	add	r2, r8
 80043c4:	47b8      	blx	r7
 80043c6:	3001      	adds	r0, #1
 80043c8:	d1c3      	bne.n	8004352 <_printf_float+0x332>
 80043ca:	e684      	b.n	80040d6 <_printf_float+0xb6>
 80043cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80043d0:	f1ba 0f01 	cmp.w	sl, #1
 80043d4:	dc01      	bgt.n	80043da <_printf_float+0x3ba>
 80043d6:	07db      	lsls	r3, r3, #31
 80043d8:	d536      	bpl.n	8004448 <_printf_float+0x428>
 80043da:	2301      	movs	r3, #1
 80043dc:	4642      	mov	r2, r8
 80043de:	4631      	mov	r1, r6
 80043e0:	4628      	mov	r0, r5
 80043e2:	47b8      	blx	r7
 80043e4:	3001      	adds	r0, #1
 80043e6:	f43f ae76 	beq.w	80040d6 <_printf_float+0xb6>
 80043ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043ee:	4631      	mov	r1, r6
 80043f0:	4628      	mov	r0, r5
 80043f2:	47b8      	blx	r7
 80043f4:	3001      	adds	r0, #1
 80043f6:	f43f ae6e 	beq.w	80040d6 <_printf_float+0xb6>
 80043fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80043fe:	2200      	movs	r2, #0
 8004400:	2300      	movs	r3, #0
 8004402:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004406:	f7fc fadf 	bl	80009c8 <__aeabi_dcmpeq>
 800440a:	b9c0      	cbnz	r0, 800443e <_printf_float+0x41e>
 800440c:	4653      	mov	r3, sl
 800440e:	f108 0201 	add.w	r2, r8, #1
 8004412:	4631      	mov	r1, r6
 8004414:	4628      	mov	r0, r5
 8004416:	47b8      	blx	r7
 8004418:	3001      	adds	r0, #1
 800441a:	d10c      	bne.n	8004436 <_printf_float+0x416>
 800441c:	e65b      	b.n	80040d6 <_printf_float+0xb6>
 800441e:	2301      	movs	r3, #1
 8004420:	465a      	mov	r2, fp
 8004422:	4631      	mov	r1, r6
 8004424:	4628      	mov	r0, r5
 8004426:	47b8      	blx	r7
 8004428:	3001      	adds	r0, #1
 800442a:	f43f ae54 	beq.w	80040d6 <_printf_float+0xb6>
 800442e:	f108 0801 	add.w	r8, r8, #1
 8004432:	45d0      	cmp	r8, sl
 8004434:	dbf3      	blt.n	800441e <_printf_float+0x3fe>
 8004436:	464b      	mov	r3, r9
 8004438:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800443c:	e6e0      	b.n	8004200 <_printf_float+0x1e0>
 800443e:	f04f 0800 	mov.w	r8, #0
 8004442:	f104 0b1a 	add.w	fp, r4, #26
 8004446:	e7f4      	b.n	8004432 <_printf_float+0x412>
 8004448:	2301      	movs	r3, #1
 800444a:	4642      	mov	r2, r8
 800444c:	e7e1      	b.n	8004412 <_printf_float+0x3f2>
 800444e:	2301      	movs	r3, #1
 8004450:	464a      	mov	r2, r9
 8004452:	4631      	mov	r1, r6
 8004454:	4628      	mov	r0, r5
 8004456:	47b8      	blx	r7
 8004458:	3001      	adds	r0, #1
 800445a:	f43f ae3c 	beq.w	80040d6 <_printf_float+0xb6>
 800445e:	f108 0801 	add.w	r8, r8, #1
 8004462:	68e3      	ldr	r3, [r4, #12]
 8004464:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004466:	1a5b      	subs	r3, r3, r1
 8004468:	4543      	cmp	r3, r8
 800446a:	dcf0      	bgt.n	800444e <_printf_float+0x42e>
 800446c:	e6fd      	b.n	800426a <_printf_float+0x24a>
 800446e:	f04f 0800 	mov.w	r8, #0
 8004472:	f104 0919 	add.w	r9, r4, #25
 8004476:	e7f4      	b.n	8004462 <_printf_float+0x442>

08004478 <_printf_common>:
 8004478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800447c:	4616      	mov	r6, r2
 800447e:	4698      	mov	r8, r3
 8004480:	688a      	ldr	r2, [r1, #8]
 8004482:	690b      	ldr	r3, [r1, #16]
 8004484:	4607      	mov	r7, r0
 8004486:	4293      	cmp	r3, r2
 8004488:	bfb8      	it	lt
 800448a:	4613      	movlt	r3, r2
 800448c:	6033      	str	r3, [r6, #0]
 800448e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004492:	460c      	mov	r4, r1
 8004494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004498:	b10a      	cbz	r2, 800449e <_printf_common+0x26>
 800449a:	3301      	adds	r3, #1
 800449c:	6033      	str	r3, [r6, #0]
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	0699      	lsls	r1, r3, #26
 80044a2:	bf42      	ittt	mi
 80044a4:	6833      	ldrmi	r3, [r6, #0]
 80044a6:	3302      	addmi	r3, #2
 80044a8:	6033      	strmi	r3, [r6, #0]
 80044aa:	6825      	ldr	r5, [r4, #0]
 80044ac:	f015 0506 	ands.w	r5, r5, #6
 80044b0:	d106      	bne.n	80044c0 <_printf_common+0x48>
 80044b2:	f104 0a19 	add.w	sl, r4, #25
 80044b6:	68e3      	ldr	r3, [r4, #12]
 80044b8:	6832      	ldr	r2, [r6, #0]
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	42ab      	cmp	r3, r5
 80044be:	dc2b      	bgt.n	8004518 <_printf_common+0xa0>
 80044c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044c4:	6822      	ldr	r2, [r4, #0]
 80044c6:	3b00      	subs	r3, #0
 80044c8:	bf18      	it	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	0692      	lsls	r2, r2, #26
 80044ce:	d430      	bmi.n	8004532 <_printf_common+0xba>
 80044d0:	4641      	mov	r1, r8
 80044d2:	4638      	mov	r0, r7
 80044d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044d8:	47c8      	blx	r9
 80044da:	3001      	adds	r0, #1
 80044dc:	d023      	beq.n	8004526 <_printf_common+0xae>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	6922      	ldr	r2, [r4, #16]
 80044e2:	f003 0306 	and.w	r3, r3, #6
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	bf14      	ite	ne
 80044ea:	2500      	movne	r5, #0
 80044ec:	6833      	ldreq	r3, [r6, #0]
 80044ee:	f04f 0600 	mov.w	r6, #0
 80044f2:	bf08      	it	eq
 80044f4:	68e5      	ldreq	r5, [r4, #12]
 80044f6:	f104 041a 	add.w	r4, r4, #26
 80044fa:	bf08      	it	eq
 80044fc:	1aed      	subeq	r5, r5, r3
 80044fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004502:	bf08      	it	eq
 8004504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004508:	4293      	cmp	r3, r2
 800450a:	bfc4      	itt	gt
 800450c:	1a9b      	subgt	r3, r3, r2
 800450e:	18ed      	addgt	r5, r5, r3
 8004510:	42b5      	cmp	r5, r6
 8004512:	d11a      	bne.n	800454a <_printf_common+0xd2>
 8004514:	2000      	movs	r0, #0
 8004516:	e008      	b.n	800452a <_printf_common+0xb2>
 8004518:	2301      	movs	r3, #1
 800451a:	4652      	mov	r2, sl
 800451c:	4641      	mov	r1, r8
 800451e:	4638      	mov	r0, r7
 8004520:	47c8      	blx	r9
 8004522:	3001      	adds	r0, #1
 8004524:	d103      	bne.n	800452e <_printf_common+0xb6>
 8004526:	f04f 30ff 	mov.w	r0, #4294967295
 800452a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800452e:	3501      	adds	r5, #1
 8004530:	e7c1      	b.n	80044b6 <_printf_common+0x3e>
 8004532:	2030      	movs	r0, #48	@ 0x30
 8004534:	18e1      	adds	r1, r4, r3
 8004536:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004540:	4422      	add	r2, r4
 8004542:	3302      	adds	r3, #2
 8004544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004548:	e7c2      	b.n	80044d0 <_printf_common+0x58>
 800454a:	2301      	movs	r3, #1
 800454c:	4622      	mov	r2, r4
 800454e:	4641      	mov	r1, r8
 8004550:	4638      	mov	r0, r7
 8004552:	47c8      	blx	r9
 8004554:	3001      	adds	r0, #1
 8004556:	d0e6      	beq.n	8004526 <_printf_common+0xae>
 8004558:	3601      	adds	r6, #1
 800455a:	e7d9      	b.n	8004510 <_printf_common+0x98>

0800455c <_printf_i>:
 800455c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004560:	7e0f      	ldrb	r7, [r1, #24]
 8004562:	4691      	mov	r9, r2
 8004564:	2f78      	cmp	r7, #120	@ 0x78
 8004566:	4680      	mov	r8, r0
 8004568:	460c      	mov	r4, r1
 800456a:	469a      	mov	sl, r3
 800456c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800456e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004572:	d807      	bhi.n	8004584 <_printf_i+0x28>
 8004574:	2f62      	cmp	r7, #98	@ 0x62
 8004576:	d80a      	bhi.n	800458e <_printf_i+0x32>
 8004578:	2f00      	cmp	r7, #0
 800457a:	f000 80d3 	beq.w	8004724 <_printf_i+0x1c8>
 800457e:	2f58      	cmp	r7, #88	@ 0x58
 8004580:	f000 80ba 	beq.w	80046f8 <_printf_i+0x19c>
 8004584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004588:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800458c:	e03a      	b.n	8004604 <_printf_i+0xa8>
 800458e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004592:	2b15      	cmp	r3, #21
 8004594:	d8f6      	bhi.n	8004584 <_printf_i+0x28>
 8004596:	a101      	add	r1, pc, #4	@ (adr r1, 800459c <_printf_i+0x40>)
 8004598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800459c:	080045f5 	.word	0x080045f5
 80045a0:	08004609 	.word	0x08004609
 80045a4:	08004585 	.word	0x08004585
 80045a8:	08004585 	.word	0x08004585
 80045ac:	08004585 	.word	0x08004585
 80045b0:	08004585 	.word	0x08004585
 80045b4:	08004609 	.word	0x08004609
 80045b8:	08004585 	.word	0x08004585
 80045bc:	08004585 	.word	0x08004585
 80045c0:	08004585 	.word	0x08004585
 80045c4:	08004585 	.word	0x08004585
 80045c8:	0800470b 	.word	0x0800470b
 80045cc:	08004633 	.word	0x08004633
 80045d0:	080046c5 	.word	0x080046c5
 80045d4:	08004585 	.word	0x08004585
 80045d8:	08004585 	.word	0x08004585
 80045dc:	0800472d 	.word	0x0800472d
 80045e0:	08004585 	.word	0x08004585
 80045e4:	08004633 	.word	0x08004633
 80045e8:	08004585 	.word	0x08004585
 80045ec:	08004585 	.word	0x08004585
 80045f0:	080046cd 	.word	0x080046cd
 80045f4:	6833      	ldr	r3, [r6, #0]
 80045f6:	1d1a      	adds	r2, r3, #4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6032      	str	r2, [r6, #0]
 80045fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004600:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004604:	2301      	movs	r3, #1
 8004606:	e09e      	b.n	8004746 <_printf_i+0x1ea>
 8004608:	6833      	ldr	r3, [r6, #0]
 800460a:	6820      	ldr	r0, [r4, #0]
 800460c:	1d19      	adds	r1, r3, #4
 800460e:	6031      	str	r1, [r6, #0]
 8004610:	0606      	lsls	r6, r0, #24
 8004612:	d501      	bpl.n	8004618 <_printf_i+0xbc>
 8004614:	681d      	ldr	r5, [r3, #0]
 8004616:	e003      	b.n	8004620 <_printf_i+0xc4>
 8004618:	0645      	lsls	r5, r0, #25
 800461a:	d5fb      	bpl.n	8004614 <_printf_i+0xb8>
 800461c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004620:	2d00      	cmp	r5, #0
 8004622:	da03      	bge.n	800462c <_printf_i+0xd0>
 8004624:	232d      	movs	r3, #45	@ 0x2d
 8004626:	426d      	negs	r5, r5
 8004628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800462c:	230a      	movs	r3, #10
 800462e:	4859      	ldr	r0, [pc, #356]	@ (8004794 <_printf_i+0x238>)
 8004630:	e011      	b.n	8004656 <_printf_i+0xfa>
 8004632:	6821      	ldr	r1, [r4, #0]
 8004634:	6833      	ldr	r3, [r6, #0]
 8004636:	0608      	lsls	r0, r1, #24
 8004638:	f853 5b04 	ldr.w	r5, [r3], #4
 800463c:	d402      	bmi.n	8004644 <_printf_i+0xe8>
 800463e:	0649      	lsls	r1, r1, #25
 8004640:	bf48      	it	mi
 8004642:	b2ad      	uxthmi	r5, r5
 8004644:	2f6f      	cmp	r7, #111	@ 0x6f
 8004646:	6033      	str	r3, [r6, #0]
 8004648:	bf14      	ite	ne
 800464a:	230a      	movne	r3, #10
 800464c:	2308      	moveq	r3, #8
 800464e:	4851      	ldr	r0, [pc, #324]	@ (8004794 <_printf_i+0x238>)
 8004650:	2100      	movs	r1, #0
 8004652:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004656:	6866      	ldr	r6, [r4, #4]
 8004658:	2e00      	cmp	r6, #0
 800465a:	bfa8      	it	ge
 800465c:	6821      	ldrge	r1, [r4, #0]
 800465e:	60a6      	str	r6, [r4, #8]
 8004660:	bfa4      	itt	ge
 8004662:	f021 0104 	bicge.w	r1, r1, #4
 8004666:	6021      	strge	r1, [r4, #0]
 8004668:	b90d      	cbnz	r5, 800466e <_printf_i+0x112>
 800466a:	2e00      	cmp	r6, #0
 800466c:	d04b      	beq.n	8004706 <_printf_i+0x1aa>
 800466e:	4616      	mov	r6, r2
 8004670:	fbb5 f1f3 	udiv	r1, r5, r3
 8004674:	fb03 5711 	mls	r7, r3, r1, r5
 8004678:	5dc7      	ldrb	r7, [r0, r7]
 800467a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800467e:	462f      	mov	r7, r5
 8004680:	42bb      	cmp	r3, r7
 8004682:	460d      	mov	r5, r1
 8004684:	d9f4      	bls.n	8004670 <_printf_i+0x114>
 8004686:	2b08      	cmp	r3, #8
 8004688:	d10b      	bne.n	80046a2 <_printf_i+0x146>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	07df      	lsls	r7, r3, #31
 800468e:	d508      	bpl.n	80046a2 <_printf_i+0x146>
 8004690:	6923      	ldr	r3, [r4, #16]
 8004692:	6861      	ldr	r1, [r4, #4]
 8004694:	4299      	cmp	r1, r3
 8004696:	bfde      	ittt	le
 8004698:	2330      	movle	r3, #48	@ 0x30
 800469a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800469e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046a2:	1b92      	subs	r2, r2, r6
 80046a4:	6122      	str	r2, [r4, #16]
 80046a6:	464b      	mov	r3, r9
 80046a8:	4621      	mov	r1, r4
 80046aa:	4640      	mov	r0, r8
 80046ac:	f8cd a000 	str.w	sl, [sp]
 80046b0:	aa03      	add	r2, sp, #12
 80046b2:	f7ff fee1 	bl	8004478 <_printf_common>
 80046b6:	3001      	adds	r0, #1
 80046b8:	d14a      	bne.n	8004750 <_printf_i+0x1f4>
 80046ba:	f04f 30ff 	mov.w	r0, #4294967295
 80046be:	b004      	add	sp, #16
 80046c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	f043 0320 	orr.w	r3, r3, #32
 80046ca:	6023      	str	r3, [r4, #0]
 80046cc:	2778      	movs	r7, #120	@ 0x78
 80046ce:	4832      	ldr	r0, [pc, #200]	@ (8004798 <_printf_i+0x23c>)
 80046d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	6831      	ldr	r1, [r6, #0]
 80046d8:	061f      	lsls	r7, r3, #24
 80046da:	f851 5b04 	ldr.w	r5, [r1], #4
 80046de:	d402      	bmi.n	80046e6 <_printf_i+0x18a>
 80046e0:	065f      	lsls	r7, r3, #25
 80046e2:	bf48      	it	mi
 80046e4:	b2ad      	uxthmi	r5, r5
 80046e6:	6031      	str	r1, [r6, #0]
 80046e8:	07d9      	lsls	r1, r3, #31
 80046ea:	bf44      	itt	mi
 80046ec:	f043 0320 	orrmi.w	r3, r3, #32
 80046f0:	6023      	strmi	r3, [r4, #0]
 80046f2:	b11d      	cbz	r5, 80046fc <_printf_i+0x1a0>
 80046f4:	2310      	movs	r3, #16
 80046f6:	e7ab      	b.n	8004650 <_printf_i+0xf4>
 80046f8:	4826      	ldr	r0, [pc, #152]	@ (8004794 <_printf_i+0x238>)
 80046fa:	e7e9      	b.n	80046d0 <_printf_i+0x174>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	f023 0320 	bic.w	r3, r3, #32
 8004702:	6023      	str	r3, [r4, #0]
 8004704:	e7f6      	b.n	80046f4 <_printf_i+0x198>
 8004706:	4616      	mov	r6, r2
 8004708:	e7bd      	b.n	8004686 <_printf_i+0x12a>
 800470a:	6833      	ldr	r3, [r6, #0]
 800470c:	6825      	ldr	r5, [r4, #0]
 800470e:	1d18      	adds	r0, r3, #4
 8004710:	6961      	ldr	r1, [r4, #20]
 8004712:	6030      	str	r0, [r6, #0]
 8004714:	062e      	lsls	r6, r5, #24
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	d501      	bpl.n	800471e <_printf_i+0x1c2>
 800471a:	6019      	str	r1, [r3, #0]
 800471c:	e002      	b.n	8004724 <_printf_i+0x1c8>
 800471e:	0668      	lsls	r0, r5, #25
 8004720:	d5fb      	bpl.n	800471a <_printf_i+0x1be>
 8004722:	8019      	strh	r1, [r3, #0]
 8004724:	2300      	movs	r3, #0
 8004726:	4616      	mov	r6, r2
 8004728:	6123      	str	r3, [r4, #16]
 800472a:	e7bc      	b.n	80046a6 <_printf_i+0x14a>
 800472c:	6833      	ldr	r3, [r6, #0]
 800472e:	2100      	movs	r1, #0
 8004730:	1d1a      	adds	r2, r3, #4
 8004732:	6032      	str	r2, [r6, #0]
 8004734:	681e      	ldr	r6, [r3, #0]
 8004736:	6862      	ldr	r2, [r4, #4]
 8004738:	4630      	mov	r0, r6
 800473a:	f000 f9b4 	bl	8004aa6 <memchr>
 800473e:	b108      	cbz	r0, 8004744 <_printf_i+0x1e8>
 8004740:	1b80      	subs	r0, r0, r6
 8004742:	6060      	str	r0, [r4, #4]
 8004744:	6863      	ldr	r3, [r4, #4]
 8004746:	6123      	str	r3, [r4, #16]
 8004748:	2300      	movs	r3, #0
 800474a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800474e:	e7aa      	b.n	80046a6 <_printf_i+0x14a>
 8004750:	4632      	mov	r2, r6
 8004752:	4649      	mov	r1, r9
 8004754:	4640      	mov	r0, r8
 8004756:	6923      	ldr	r3, [r4, #16]
 8004758:	47d0      	blx	sl
 800475a:	3001      	adds	r0, #1
 800475c:	d0ad      	beq.n	80046ba <_printf_i+0x15e>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	079b      	lsls	r3, r3, #30
 8004762:	d413      	bmi.n	800478c <_printf_i+0x230>
 8004764:	68e0      	ldr	r0, [r4, #12]
 8004766:	9b03      	ldr	r3, [sp, #12]
 8004768:	4298      	cmp	r0, r3
 800476a:	bfb8      	it	lt
 800476c:	4618      	movlt	r0, r3
 800476e:	e7a6      	b.n	80046be <_printf_i+0x162>
 8004770:	2301      	movs	r3, #1
 8004772:	4632      	mov	r2, r6
 8004774:	4649      	mov	r1, r9
 8004776:	4640      	mov	r0, r8
 8004778:	47d0      	blx	sl
 800477a:	3001      	adds	r0, #1
 800477c:	d09d      	beq.n	80046ba <_printf_i+0x15e>
 800477e:	3501      	adds	r5, #1
 8004780:	68e3      	ldr	r3, [r4, #12]
 8004782:	9903      	ldr	r1, [sp, #12]
 8004784:	1a5b      	subs	r3, r3, r1
 8004786:	42ab      	cmp	r3, r5
 8004788:	dcf2      	bgt.n	8004770 <_printf_i+0x214>
 800478a:	e7eb      	b.n	8004764 <_printf_i+0x208>
 800478c:	2500      	movs	r5, #0
 800478e:	f104 0619 	add.w	r6, r4, #25
 8004792:	e7f5      	b.n	8004780 <_printf_i+0x224>
 8004794:	08006849 	.word	0x08006849
 8004798:	0800685a 	.word	0x0800685a

0800479c <std>:
 800479c:	2300      	movs	r3, #0
 800479e:	b510      	push	{r4, lr}
 80047a0:	4604      	mov	r4, r0
 80047a2:	e9c0 3300 	strd	r3, r3, [r0]
 80047a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047aa:	6083      	str	r3, [r0, #8]
 80047ac:	8181      	strh	r1, [r0, #12]
 80047ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80047b0:	81c2      	strh	r2, [r0, #14]
 80047b2:	6183      	str	r3, [r0, #24]
 80047b4:	4619      	mov	r1, r3
 80047b6:	2208      	movs	r2, #8
 80047b8:	305c      	adds	r0, #92	@ 0x5c
 80047ba:	f000 f8f4 	bl	80049a6 <memset>
 80047be:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <std+0x58>)
 80047c0:	6224      	str	r4, [r4, #32]
 80047c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80047c4:	4b0c      	ldr	r3, [pc, #48]	@ (80047f8 <std+0x5c>)
 80047c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047c8:	4b0c      	ldr	r3, [pc, #48]	@ (80047fc <std+0x60>)
 80047ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004800 <std+0x64>)
 80047ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80047d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004804 <std+0x68>)
 80047d2:	429c      	cmp	r4, r3
 80047d4:	d006      	beq.n	80047e4 <std+0x48>
 80047d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047da:	4294      	cmp	r4, r2
 80047dc:	d002      	beq.n	80047e4 <std+0x48>
 80047de:	33d0      	adds	r3, #208	@ 0xd0
 80047e0:	429c      	cmp	r4, r3
 80047e2:	d105      	bne.n	80047f0 <std+0x54>
 80047e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ec:	f000 b958 	b.w	8004aa0 <__retarget_lock_init_recursive>
 80047f0:	bd10      	pop	{r4, pc}
 80047f2:	bf00      	nop
 80047f4:	08004921 	.word	0x08004921
 80047f8:	08004943 	.word	0x08004943
 80047fc:	0800497b 	.word	0x0800497b
 8004800:	0800499f 	.word	0x0800499f
 8004804:	200003d4 	.word	0x200003d4

08004808 <stdio_exit_handler>:
 8004808:	4a02      	ldr	r2, [pc, #8]	@ (8004814 <stdio_exit_handler+0xc>)
 800480a:	4903      	ldr	r1, [pc, #12]	@ (8004818 <stdio_exit_handler+0x10>)
 800480c:	4803      	ldr	r0, [pc, #12]	@ (800481c <stdio_exit_handler+0x14>)
 800480e:	f000 b869 	b.w	80048e4 <_fwalk_sglue>
 8004812:	bf00      	nop
 8004814:	20000000 	.word	0x20000000
 8004818:	0800617d 	.word	0x0800617d
 800481c:	20000010 	.word	0x20000010

08004820 <cleanup_stdio>:
 8004820:	6841      	ldr	r1, [r0, #4]
 8004822:	4b0c      	ldr	r3, [pc, #48]	@ (8004854 <cleanup_stdio+0x34>)
 8004824:	b510      	push	{r4, lr}
 8004826:	4299      	cmp	r1, r3
 8004828:	4604      	mov	r4, r0
 800482a:	d001      	beq.n	8004830 <cleanup_stdio+0x10>
 800482c:	f001 fca6 	bl	800617c <_fflush_r>
 8004830:	68a1      	ldr	r1, [r4, #8]
 8004832:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <cleanup_stdio+0x38>)
 8004834:	4299      	cmp	r1, r3
 8004836:	d002      	beq.n	800483e <cleanup_stdio+0x1e>
 8004838:	4620      	mov	r0, r4
 800483a:	f001 fc9f 	bl	800617c <_fflush_r>
 800483e:	68e1      	ldr	r1, [r4, #12]
 8004840:	4b06      	ldr	r3, [pc, #24]	@ (800485c <cleanup_stdio+0x3c>)
 8004842:	4299      	cmp	r1, r3
 8004844:	d004      	beq.n	8004850 <cleanup_stdio+0x30>
 8004846:	4620      	mov	r0, r4
 8004848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800484c:	f001 bc96 	b.w	800617c <_fflush_r>
 8004850:	bd10      	pop	{r4, pc}
 8004852:	bf00      	nop
 8004854:	200003d4 	.word	0x200003d4
 8004858:	2000043c 	.word	0x2000043c
 800485c:	200004a4 	.word	0x200004a4

08004860 <global_stdio_init.part.0>:
 8004860:	b510      	push	{r4, lr}
 8004862:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <global_stdio_init.part.0+0x30>)
 8004864:	4c0b      	ldr	r4, [pc, #44]	@ (8004894 <global_stdio_init.part.0+0x34>)
 8004866:	4a0c      	ldr	r2, [pc, #48]	@ (8004898 <global_stdio_init.part.0+0x38>)
 8004868:	4620      	mov	r0, r4
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	2104      	movs	r1, #4
 800486e:	2200      	movs	r2, #0
 8004870:	f7ff ff94 	bl	800479c <std>
 8004874:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004878:	2201      	movs	r2, #1
 800487a:	2109      	movs	r1, #9
 800487c:	f7ff ff8e 	bl	800479c <std>
 8004880:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004884:	2202      	movs	r2, #2
 8004886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800488a:	2112      	movs	r1, #18
 800488c:	f7ff bf86 	b.w	800479c <std>
 8004890:	2000050c 	.word	0x2000050c
 8004894:	200003d4 	.word	0x200003d4
 8004898:	08004809 	.word	0x08004809

0800489c <__sfp_lock_acquire>:
 800489c:	4801      	ldr	r0, [pc, #4]	@ (80048a4 <__sfp_lock_acquire+0x8>)
 800489e:	f000 b900 	b.w	8004aa2 <__retarget_lock_acquire_recursive>
 80048a2:	bf00      	nop
 80048a4:	20000515 	.word	0x20000515

080048a8 <__sfp_lock_release>:
 80048a8:	4801      	ldr	r0, [pc, #4]	@ (80048b0 <__sfp_lock_release+0x8>)
 80048aa:	f000 b8fb 	b.w	8004aa4 <__retarget_lock_release_recursive>
 80048ae:	bf00      	nop
 80048b0:	20000515 	.word	0x20000515

080048b4 <__sinit>:
 80048b4:	b510      	push	{r4, lr}
 80048b6:	4604      	mov	r4, r0
 80048b8:	f7ff fff0 	bl	800489c <__sfp_lock_acquire>
 80048bc:	6a23      	ldr	r3, [r4, #32]
 80048be:	b11b      	cbz	r3, 80048c8 <__sinit+0x14>
 80048c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c4:	f7ff bff0 	b.w	80048a8 <__sfp_lock_release>
 80048c8:	4b04      	ldr	r3, [pc, #16]	@ (80048dc <__sinit+0x28>)
 80048ca:	6223      	str	r3, [r4, #32]
 80048cc:	4b04      	ldr	r3, [pc, #16]	@ (80048e0 <__sinit+0x2c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f5      	bne.n	80048c0 <__sinit+0xc>
 80048d4:	f7ff ffc4 	bl	8004860 <global_stdio_init.part.0>
 80048d8:	e7f2      	b.n	80048c0 <__sinit+0xc>
 80048da:	bf00      	nop
 80048dc:	08004821 	.word	0x08004821
 80048e0:	2000050c 	.word	0x2000050c

080048e4 <_fwalk_sglue>:
 80048e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e8:	4607      	mov	r7, r0
 80048ea:	4688      	mov	r8, r1
 80048ec:	4614      	mov	r4, r2
 80048ee:	2600      	movs	r6, #0
 80048f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048f4:	f1b9 0901 	subs.w	r9, r9, #1
 80048f8:	d505      	bpl.n	8004906 <_fwalk_sglue+0x22>
 80048fa:	6824      	ldr	r4, [r4, #0]
 80048fc:	2c00      	cmp	r4, #0
 80048fe:	d1f7      	bne.n	80048f0 <_fwalk_sglue+0xc>
 8004900:	4630      	mov	r0, r6
 8004902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004906:	89ab      	ldrh	r3, [r5, #12]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d907      	bls.n	800491c <_fwalk_sglue+0x38>
 800490c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004910:	3301      	adds	r3, #1
 8004912:	d003      	beq.n	800491c <_fwalk_sglue+0x38>
 8004914:	4629      	mov	r1, r5
 8004916:	4638      	mov	r0, r7
 8004918:	47c0      	blx	r8
 800491a:	4306      	orrs	r6, r0
 800491c:	3568      	adds	r5, #104	@ 0x68
 800491e:	e7e9      	b.n	80048f4 <_fwalk_sglue+0x10>

08004920 <__sread>:
 8004920:	b510      	push	{r4, lr}
 8004922:	460c      	mov	r4, r1
 8004924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004928:	f000 f86c 	bl	8004a04 <_read_r>
 800492c:	2800      	cmp	r0, #0
 800492e:	bfab      	itete	ge
 8004930:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004932:	89a3      	ldrhlt	r3, [r4, #12]
 8004934:	181b      	addge	r3, r3, r0
 8004936:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800493a:	bfac      	ite	ge
 800493c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800493e:	81a3      	strhlt	r3, [r4, #12]
 8004940:	bd10      	pop	{r4, pc}

08004942 <__swrite>:
 8004942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004946:	461f      	mov	r7, r3
 8004948:	898b      	ldrh	r3, [r1, #12]
 800494a:	4605      	mov	r5, r0
 800494c:	05db      	lsls	r3, r3, #23
 800494e:	460c      	mov	r4, r1
 8004950:	4616      	mov	r6, r2
 8004952:	d505      	bpl.n	8004960 <__swrite+0x1e>
 8004954:	2302      	movs	r3, #2
 8004956:	2200      	movs	r2, #0
 8004958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800495c:	f000 f840 	bl	80049e0 <_lseek_r>
 8004960:	89a3      	ldrh	r3, [r4, #12]
 8004962:	4632      	mov	r2, r6
 8004964:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004968:	81a3      	strh	r3, [r4, #12]
 800496a:	4628      	mov	r0, r5
 800496c:	463b      	mov	r3, r7
 800496e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004976:	f000 b857 	b.w	8004a28 <_write_r>

0800497a <__sseek>:
 800497a:	b510      	push	{r4, lr}
 800497c:	460c      	mov	r4, r1
 800497e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004982:	f000 f82d 	bl	80049e0 <_lseek_r>
 8004986:	1c43      	adds	r3, r0, #1
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	bf15      	itete	ne
 800498c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800498e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004992:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004996:	81a3      	strheq	r3, [r4, #12]
 8004998:	bf18      	it	ne
 800499a:	81a3      	strhne	r3, [r4, #12]
 800499c:	bd10      	pop	{r4, pc}

0800499e <__sclose>:
 800499e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a2:	f000 b80d 	b.w	80049c0 <_close_r>

080049a6 <memset>:
 80049a6:	4603      	mov	r3, r0
 80049a8:	4402      	add	r2, r0
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d100      	bne.n	80049b0 <memset+0xa>
 80049ae:	4770      	bx	lr
 80049b0:	f803 1b01 	strb.w	r1, [r3], #1
 80049b4:	e7f9      	b.n	80049aa <memset+0x4>
	...

080049b8 <_localeconv_r>:
 80049b8:	4800      	ldr	r0, [pc, #0]	@ (80049bc <_localeconv_r+0x4>)
 80049ba:	4770      	bx	lr
 80049bc:	2000014c 	.word	0x2000014c

080049c0 <_close_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	2300      	movs	r3, #0
 80049c4:	4d05      	ldr	r5, [pc, #20]	@ (80049dc <_close_r+0x1c>)
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	f7fc ffca 	bl	8001964 <_close>
 80049d0:	1c43      	adds	r3, r0, #1
 80049d2:	d102      	bne.n	80049da <_close_r+0x1a>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	b103      	cbz	r3, 80049da <_close_r+0x1a>
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	bd38      	pop	{r3, r4, r5, pc}
 80049dc:	20000510 	.word	0x20000510

080049e0 <_lseek_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4604      	mov	r4, r0
 80049e4:	4608      	mov	r0, r1
 80049e6:	4611      	mov	r1, r2
 80049e8:	2200      	movs	r2, #0
 80049ea:	4d05      	ldr	r5, [pc, #20]	@ (8004a00 <_lseek_r+0x20>)
 80049ec:	602a      	str	r2, [r5, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	f7fc ffdc 	bl	80019ac <_lseek>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d102      	bne.n	80049fe <_lseek_r+0x1e>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b103      	cbz	r3, 80049fe <_lseek_r+0x1e>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	20000510 	.word	0x20000510

08004a04 <_read_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4604      	mov	r4, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	4d05      	ldr	r5, [pc, #20]	@ (8004a24 <_read_r+0x20>)
 8004a10:	602a      	str	r2, [r5, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	f7fc ff6d 	bl	80018f2 <_read>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d102      	bne.n	8004a22 <_read_r+0x1e>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	b103      	cbz	r3, 8004a22 <_read_r+0x1e>
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	20000510 	.word	0x20000510

08004a28 <_write_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	2200      	movs	r2, #0
 8004a32:	4d05      	ldr	r5, [pc, #20]	@ (8004a48 <_write_r+0x20>)
 8004a34:	602a      	str	r2, [r5, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f7fc ff78 	bl	800192c <_write>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	d102      	bne.n	8004a46 <_write_r+0x1e>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	b103      	cbz	r3, 8004a46 <_write_r+0x1e>
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	20000510 	.word	0x20000510

08004a4c <__errno>:
 8004a4c:	4b01      	ldr	r3, [pc, #4]	@ (8004a54 <__errno+0x8>)
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c

08004a58 <__libc_init_array>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	2600      	movs	r6, #0
 8004a5c:	4d0c      	ldr	r5, [pc, #48]	@ (8004a90 <__libc_init_array+0x38>)
 8004a5e:	4c0d      	ldr	r4, [pc, #52]	@ (8004a94 <__libc_init_array+0x3c>)
 8004a60:	1b64      	subs	r4, r4, r5
 8004a62:	10a4      	asrs	r4, r4, #2
 8004a64:	42a6      	cmp	r6, r4
 8004a66:	d109      	bne.n	8004a7c <__libc_init_array+0x24>
 8004a68:	f001 fec6 	bl	80067f8 <_init>
 8004a6c:	2600      	movs	r6, #0
 8004a6e:	4d0a      	ldr	r5, [pc, #40]	@ (8004a98 <__libc_init_array+0x40>)
 8004a70:	4c0a      	ldr	r4, [pc, #40]	@ (8004a9c <__libc_init_array+0x44>)
 8004a72:	1b64      	subs	r4, r4, r5
 8004a74:	10a4      	asrs	r4, r4, #2
 8004a76:	42a6      	cmp	r6, r4
 8004a78:	d105      	bne.n	8004a86 <__libc_init_array+0x2e>
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a80:	4798      	blx	r3
 8004a82:	3601      	adds	r6, #1
 8004a84:	e7ee      	b.n	8004a64 <__libc_init_array+0xc>
 8004a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8a:	4798      	blx	r3
 8004a8c:	3601      	adds	r6, #1
 8004a8e:	e7f2      	b.n	8004a76 <__libc_init_array+0x1e>
 8004a90:	08006bb0 	.word	0x08006bb0
 8004a94:	08006bb0 	.word	0x08006bb0
 8004a98:	08006bb0 	.word	0x08006bb0
 8004a9c:	08006bb4 	.word	0x08006bb4

08004aa0 <__retarget_lock_init_recursive>:
 8004aa0:	4770      	bx	lr

08004aa2 <__retarget_lock_acquire_recursive>:
 8004aa2:	4770      	bx	lr

08004aa4 <__retarget_lock_release_recursive>:
 8004aa4:	4770      	bx	lr

08004aa6 <memchr>:
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	b2c9      	uxtb	r1, r1
 8004aac:	4402      	add	r2, r0
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	d101      	bne.n	8004ab8 <memchr+0x12>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e003      	b.n	8004ac0 <memchr+0x1a>
 8004ab8:	7804      	ldrb	r4, [r0, #0]
 8004aba:	3301      	adds	r3, #1
 8004abc:	428c      	cmp	r4, r1
 8004abe:	d1f6      	bne.n	8004aae <memchr+0x8>
 8004ac0:	bd10      	pop	{r4, pc}

08004ac2 <memcpy>:
 8004ac2:	440a      	add	r2, r1
 8004ac4:	4291      	cmp	r1, r2
 8004ac6:	f100 33ff 	add.w	r3, r0, #4294967295
 8004aca:	d100      	bne.n	8004ace <memcpy+0xc>
 8004acc:	4770      	bx	lr
 8004ace:	b510      	push	{r4, lr}
 8004ad0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ad4:	4291      	cmp	r1, r2
 8004ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ada:	d1f9      	bne.n	8004ad0 <memcpy+0xe>
 8004adc:	bd10      	pop	{r4, pc}

08004ade <quorem>:
 8004ade:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae2:	6903      	ldr	r3, [r0, #16]
 8004ae4:	690c      	ldr	r4, [r1, #16]
 8004ae6:	4607      	mov	r7, r0
 8004ae8:	42a3      	cmp	r3, r4
 8004aea:	db7e      	blt.n	8004bea <quorem+0x10c>
 8004aec:	3c01      	subs	r4, #1
 8004aee:	00a3      	lsls	r3, r4, #2
 8004af0:	f100 0514 	add.w	r5, r0, #20
 8004af4:	f101 0814 	add.w	r8, r1, #20
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b14:	d32e      	bcc.n	8004b74 <quorem+0x96>
 8004b16:	f04f 0a00 	mov.w	sl, #0
 8004b1a:	46c4      	mov	ip, r8
 8004b1c:	46ae      	mov	lr, r5
 8004b1e:	46d3      	mov	fp, sl
 8004b20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b24:	b298      	uxth	r0, r3
 8004b26:	fb06 a000 	mla	r0, r6, r0, sl
 8004b2a:	0c1b      	lsrs	r3, r3, #16
 8004b2c:	0c02      	lsrs	r2, r0, #16
 8004b2e:	fb06 2303 	mla	r3, r6, r3, r2
 8004b32:	f8de 2000 	ldr.w	r2, [lr]
 8004b36:	b280      	uxth	r0, r0
 8004b38:	b292      	uxth	r2, r2
 8004b3a:	1a12      	subs	r2, r2, r0
 8004b3c:	445a      	add	r2, fp
 8004b3e:	f8de 0000 	ldr.w	r0, [lr]
 8004b42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004b4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004b50:	b292      	uxth	r2, r2
 8004b52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004b56:	45e1      	cmp	r9, ip
 8004b58:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004b5c:	f84e 2b04 	str.w	r2, [lr], #4
 8004b60:	d2de      	bcs.n	8004b20 <quorem+0x42>
 8004b62:	9b00      	ldr	r3, [sp, #0]
 8004b64:	58eb      	ldr	r3, [r5, r3]
 8004b66:	b92b      	cbnz	r3, 8004b74 <quorem+0x96>
 8004b68:	9b01      	ldr	r3, [sp, #4]
 8004b6a:	3b04      	subs	r3, #4
 8004b6c:	429d      	cmp	r5, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	d32f      	bcc.n	8004bd2 <quorem+0xf4>
 8004b72:	613c      	str	r4, [r7, #16]
 8004b74:	4638      	mov	r0, r7
 8004b76:	f001 f979 	bl	8005e6c <__mcmp>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	db25      	blt.n	8004bca <quorem+0xec>
 8004b7e:	4629      	mov	r1, r5
 8004b80:	2000      	movs	r0, #0
 8004b82:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b86:	f8d1 c000 	ldr.w	ip, [r1]
 8004b8a:	fa1f fe82 	uxth.w	lr, r2
 8004b8e:	fa1f f38c 	uxth.w	r3, ip
 8004b92:	eba3 030e 	sub.w	r3, r3, lr
 8004b96:	4403      	add	r3, r0
 8004b98:	0c12      	lsrs	r2, r2, #16
 8004b9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004b9e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ba8:	45c1      	cmp	r9, r8
 8004baa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004bae:	f841 3b04 	str.w	r3, [r1], #4
 8004bb2:	d2e6      	bcs.n	8004b82 <quorem+0xa4>
 8004bb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bbc:	b922      	cbnz	r2, 8004bc8 <quorem+0xea>
 8004bbe:	3b04      	subs	r3, #4
 8004bc0:	429d      	cmp	r5, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	d30b      	bcc.n	8004bde <quorem+0x100>
 8004bc6:	613c      	str	r4, [r7, #16]
 8004bc8:	3601      	adds	r6, #1
 8004bca:	4630      	mov	r0, r6
 8004bcc:	b003      	add	sp, #12
 8004bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	3b04      	subs	r3, #4
 8004bd6:	2a00      	cmp	r2, #0
 8004bd8:	d1cb      	bne.n	8004b72 <quorem+0x94>
 8004bda:	3c01      	subs	r4, #1
 8004bdc:	e7c6      	b.n	8004b6c <quorem+0x8e>
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	3b04      	subs	r3, #4
 8004be2:	2a00      	cmp	r2, #0
 8004be4:	d1ef      	bne.n	8004bc6 <quorem+0xe8>
 8004be6:	3c01      	subs	r4, #1
 8004be8:	e7ea      	b.n	8004bc0 <quorem+0xe2>
 8004bea:	2000      	movs	r0, #0
 8004bec:	e7ee      	b.n	8004bcc <quorem+0xee>
	...

08004bf0 <_dtoa_r>:
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	461d      	mov	r5, r3
 8004bf8:	69c7      	ldr	r7, [r0, #28]
 8004bfa:	b097      	sub	sp, #92	@ 0x5c
 8004bfc:	4683      	mov	fp, r0
 8004bfe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c02:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004c04:	b97f      	cbnz	r7, 8004c26 <_dtoa_r+0x36>
 8004c06:	2010      	movs	r0, #16
 8004c08:	f000 fe02 	bl	8005810 <malloc>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004c12:	b920      	cbnz	r0, 8004c1e <_dtoa_r+0x2e>
 8004c14:	21ef      	movs	r1, #239	@ 0xef
 8004c16:	4ba8      	ldr	r3, [pc, #672]	@ (8004eb8 <_dtoa_r+0x2c8>)
 8004c18:	48a8      	ldr	r0, [pc, #672]	@ (8004ebc <_dtoa_r+0x2cc>)
 8004c1a:	f001 fae7 	bl	80061ec <__assert_func>
 8004c1e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004c22:	6007      	str	r7, [r0, #0]
 8004c24:	60c7      	str	r7, [r0, #12]
 8004c26:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c2a:	6819      	ldr	r1, [r3, #0]
 8004c2c:	b159      	cbz	r1, 8004c46 <_dtoa_r+0x56>
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	2301      	movs	r3, #1
 8004c32:	4093      	lsls	r3, r2
 8004c34:	604a      	str	r2, [r1, #4]
 8004c36:	608b      	str	r3, [r1, #8]
 8004c38:	4658      	mov	r0, fp
 8004c3a:	f000 fedf 	bl	80059fc <_Bfree>
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	1e2b      	subs	r3, r5, #0
 8004c48:	bfaf      	iteee	ge
 8004c4a:	2300      	movge	r3, #0
 8004c4c:	2201      	movlt	r2, #1
 8004c4e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004c52:	9303      	strlt	r3, [sp, #12]
 8004c54:	bfa8      	it	ge
 8004c56:	6033      	strge	r3, [r6, #0]
 8004c58:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004c5c:	4b98      	ldr	r3, [pc, #608]	@ (8004ec0 <_dtoa_r+0x2d0>)
 8004c5e:	bfb8      	it	lt
 8004c60:	6032      	strlt	r2, [r6, #0]
 8004c62:	ea33 0308 	bics.w	r3, r3, r8
 8004c66:	d112      	bne.n	8004c8e <_dtoa_r+0x9e>
 8004c68:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004c6c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004c74:	4323      	orrs	r3, r4
 8004c76:	f000 8550 	beq.w	800571a <_dtoa_r+0xb2a>
 8004c7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c7c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004ec4 <_dtoa_r+0x2d4>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8552 	beq.w	800572a <_dtoa_r+0xb3a>
 8004c86:	f10a 0303 	add.w	r3, sl, #3
 8004c8a:	f000 bd4c 	b.w	8005726 <_dtoa_r+0xb36>
 8004c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c92:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004c96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f7fb fe93 	bl	80009c8 <__aeabi_dcmpeq>
 8004ca2:	4607      	mov	r7, r0
 8004ca4:	b158      	cbz	r0, 8004cbe <_dtoa_r+0xce>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004cae:	b113      	cbz	r3, 8004cb6 <_dtoa_r+0xc6>
 8004cb0:	4b85      	ldr	r3, [pc, #532]	@ (8004ec8 <_dtoa_r+0x2d8>)
 8004cb2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004ecc <_dtoa_r+0x2dc>
 8004cba:	f000 bd36 	b.w	800572a <_dtoa_r+0xb3a>
 8004cbe:	ab14      	add	r3, sp, #80	@ 0x50
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	ab15      	add	r3, sp, #84	@ 0x54
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	4658      	mov	r0, fp
 8004cc8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004ccc:	f001 f97e 	bl	8005fcc <__d2b>
 8004cd0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004cd4:	4681      	mov	r9, r0
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	d077      	beq.n	8004dca <_dtoa_r+0x1da>
 8004cda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004cde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ce0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ce8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004cec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004cf0:	9712      	str	r7, [sp, #72]	@ 0x48
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4b76      	ldr	r3, [pc, #472]	@ (8004ed0 <_dtoa_r+0x2e0>)
 8004cf8:	f7fb fa46 	bl	8000188 <__aeabi_dsub>
 8004cfc:	a368      	add	r3, pc, #416	@ (adr r3, 8004ea0 <_dtoa_r+0x2b0>)
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	f7fb fbf9 	bl	80004f8 <__aeabi_dmul>
 8004d06:	a368      	add	r3, pc, #416	@ (adr r3, 8004ea8 <_dtoa_r+0x2b8>)
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f7fb fa3e 	bl	800018c <__adddf3>
 8004d10:	4604      	mov	r4, r0
 8004d12:	4630      	mov	r0, r6
 8004d14:	460d      	mov	r5, r1
 8004d16:	f7fb fb85 	bl	8000424 <__aeabi_i2d>
 8004d1a:	a365      	add	r3, pc, #404	@ (adr r3, 8004eb0 <_dtoa_r+0x2c0>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f7fb fbea 	bl	80004f8 <__aeabi_dmul>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4620      	mov	r0, r4
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	f7fb fa2e 	bl	800018c <__adddf3>
 8004d30:	4604      	mov	r4, r0
 8004d32:	460d      	mov	r5, r1
 8004d34:	f7fb fe90 	bl	8000a58 <__aeabi_d2iz>
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4607      	mov	r7, r0
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4620      	mov	r0, r4
 8004d40:	4629      	mov	r1, r5
 8004d42:	f7fb fe4b 	bl	80009dc <__aeabi_dcmplt>
 8004d46:	b140      	cbz	r0, 8004d5a <_dtoa_r+0x16a>
 8004d48:	4638      	mov	r0, r7
 8004d4a:	f7fb fb6b 	bl	8000424 <__aeabi_i2d>
 8004d4e:	4622      	mov	r2, r4
 8004d50:	462b      	mov	r3, r5
 8004d52:	f7fb fe39 	bl	80009c8 <__aeabi_dcmpeq>
 8004d56:	b900      	cbnz	r0, 8004d5a <_dtoa_r+0x16a>
 8004d58:	3f01      	subs	r7, #1
 8004d5a:	2f16      	cmp	r7, #22
 8004d5c:	d853      	bhi.n	8004e06 <_dtoa_r+0x216>
 8004d5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d62:	4b5c      	ldr	r3, [pc, #368]	@ (8004ed4 <_dtoa_r+0x2e4>)
 8004d64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb fe36 	bl	80009dc <__aeabi_dcmplt>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d04a      	beq.n	8004e0a <_dtoa_r+0x21a>
 8004d74:	2300      	movs	r3, #0
 8004d76:	3f01      	subs	r7, #1
 8004d78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d7c:	1b9b      	subs	r3, r3, r6
 8004d7e:	1e5a      	subs	r2, r3, #1
 8004d80:	bf46      	itte	mi
 8004d82:	f1c3 0801 	rsbmi	r8, r3, #1
 8004d86:	2300      	movmi	r3, #0
 8004d88:	f04f 0800 	movpl.w	r8, #0
 8004d8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d8e:	bf48      	it	mi
 8004d90:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004d92:	2f00      	cmp	r7, #0
 8004d94:	db3b      	blt.n	8004e0e <_dtoa_r+0x21e>
 8004d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d98:	970e      	str	r7, [sp, #56]	@ 0x38
 8004d9a:	443b      	add	r3, r7
 8004d9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d9e:	2300      	movs	r3, #0
 8004da0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004da2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004da4:	2b09      	cmp	r3, #9
 8004da6:	d866      	bhi.n	8004e76 <_dtoa_r+0x286>
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	bfc4      	itt	gt
 8004dac:	3b04      	subgt	r3, #4
 8004dae:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004db0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004db2:	bfc8      	it	gt
 8004db4:	2400      	movgt	r4, #0
 8004db6:	f1a3 0302 	sub.w	r3, r3, #2
 8004dba:	bfd8      	it	le
 8004dbc:	2401      	movle	r4, #1
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d864      	bhi.n	8004e8c <_dtoa_r+0x29c>
 8004dc2:	e8df f003 	tbb	[pc, r3]
 8004dc6:	382b      	.short	0x382b
 8004dc8:	5636      	.short	0x5636
 8004dca:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004dce:	441e      	add	r6, r3
 8004dd0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	bfc1      	itttt	gt
 8004dd8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004ddc:	fa08 f803 	lslgt.w	r8, r8, r3
 8004de0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004de4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004de8:	bfd6      	itet	le
 8004dea:	f1c3 0320 	rsble	r3, r3, #32
 8004dee:	ea48 0003 	orrgt.w	r0, r8, r3
 8004df2:	fa04 f003 	lslle.w	r0, r4, r3
 8004df6:	f7fb fb05 	bl	8000404 <__aeabi_ui2d>
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004e00:	3e01      	subs	r6, #1
 8004e02:	9212      	str	r2, [sp, #72]	@ 0x48
 8004e04:	e775      	b.n	8004cf2 <_dtoa_r+0x102>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e7b6      	b.n	8004d78 <_dtoa_r+0x188>
 8004e0a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004e0c:	e7b5      	b.n	8004d7a <_dtoa_r+0x18a>
 8004e0e:	427b      	negs	r3, r7
 8004e10:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e12:	2300      	movs	r3, #0
 8004e14:	eba8 0807 	sub.w	r8, r8, r7
 8004e18:	930e      	str	r3, [sp, #56]	@ 0x38
 8004e1a:	e7c2      	b.n	8004da2 <_dtoa_r+0x1b2>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	dc35      	bgt.n	8004e92 <_dtoa_r+0x2a2>
 8004e26:	2301      	movs	r3, #1
 8004e28:	461a      	mov	r2, r3
 8004e2a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e2e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004e30:	e00b      	b.n	8004e4a <_dtoa_r+0x25a>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e7f3      	b.n	8004e1e <_dtoa_r+0x22e>
 8004e36:	2300      	movs	r3, #0
 8004e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	9308      	str	r3, [sp, #32]
 8004e40:	3301      	adds	r3, #1
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	9307      	str	r3, [sp, #28]
 8004e46:	bfb8      	it	lt
 8004e48:	2301      	movlt	r3, #1
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004e52:	f102 0514 	add.w	r5, r2, #20
 8004e56:	429d      	cmp	r5, r3
 8004e58:	d91f      	bls.n	8004e9a <_dtoa_r+0x2aa>
 8004e5a:	6041      	str	r1, [r0, #4]
 8004e5c:	4658      	mov	r0, fp
 8004e5e:	f000 fd8d 	bl	800597c <_Balloc>
 8004e62:	4682      	mov	sl, r0
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d139      	bne.n	8004edc <_dtoa_r+0x2ec>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8004e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <_dtoa_r+0x2e8>)
 8004e70:	e6d2      	b.n	8004c18 <_dtoa_r+0x28>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e7e0      	b.n	8004e38 <_dtoa_r+0x248>
 8004e76:	2401      	movs	r4, #1
 8004e78:	2300      	movs	r3, #0
 8004e7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004e7c:	9320      	str	r3, [sp, #128]	@ 0x80
 8004e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e82:	2200      	movs	r2, #0
 8004e84:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e88:	2312      	movs	r3, #18
 8004e8a:	e7d0      	b.n	8004e2e <_dtoa_r+0x23e>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e90:	e7f5      	b.n	8004e7e <_dtoa_r+0x28e>
 8004e92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e98:	e7d7      	b.n	8004e4a <_dtoa_r+0x25a>
 8004e9a:	3101      	adds	r1, #1
 8004e9c:	0052      	lsls	r2, r2, #1
 8004e9e:	e7d8      	b.n	8004e52 <_dtoa_r+0x262>
 8004ea0:	636f4361 	.word	0x636f4361
 8004ea4:	3fd287a7 	.word	0x3fd287a7
 8004ea8:	8b60c8b3 	.word	0x8b60c8b3
 8004eac:	3fc68a28 	.word	0x3fc68a28
 8004eb0:	509f79fb 	.word	0x509f79fb
 8004eb4:	3fd34413 	.word	0x3fd34413
 8004eb8:	08006878 	.word	0x08006878
 8004ebc:	0800688f 	.word	0x0800688f
 8004ec0:	7ff00000 	.word	0x7ff00000
 8004ec4:	08006874 	.word	0x08006874
 8004ec8:	08006848 	.word	0x08006848
 8004ecc:	08006847 	.word	0x08006847
 8004ed0:	3ff80000 	.word	0x3ff80000
 8004ed4:	08006988 	.word	0x08006988
 8004ed8:	080068e7 	.word	0x080068e7
 8004edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ee0:	6018      	str	r0, [r3, #0]
 8004ee2:	9b07      	ldr	r3, [sp, #28]
 8004ee4:	2b0e      	cmp	r3, #14
 8004ee6:	f200 80a4 	bhi.w	8005032 <_dtoa_r+0x442>
 8004eea:	2c00      	cmp	r4, #0
 8004eec:	f000 80a1 	beq.w	8005032 <_dtoa_r+0x442>
 8004ef0:	2f00      	cmp	r7, #0
 8004ef2:	dd33      	ble.n	8004f5c <_dtoa_r+0x36c>
 8004ef4:	4b86      	ldr	r3, [pc, #536]	@ (8005110 <_dtoa_r+0x520>)
 8004ef6:	f007 020f 	and.w	r2, r7, #15
 8004efa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004efe:	05f8      	lsls	r0, r7, #23
 8004f00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004f0c:	d516      	bpl.n	8004f3c <_dtoa_r+0x34c>
 8004f0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f12:	4b80      	ldr	r3, [pc, #512]	@ (8005114 <_dtoa_r+0x524>)
 8004f14:	2603      	movs	r6, #3
 8004f16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f1a:	f7fb fc17 	bl	800074c <__aeabi_ddiv>
 8004f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f22:	f004 040f 	and.w	r4, r4, #15
 8004f26:	4d7b      	ldr	r5, [pc, #492]	@ (8005114 <_dtoa_r+0x524>)
 8004f28:	b954      	cbnz	r4, 8004f40 <_dtoa_r+0x350>
 8004f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f32:	f7fb fc0b 	bl	800074c <__aeabi_ddiv>
 8004f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f3a:	e028      	b.n	8004f8e <_dtoa_r+0x39e>
 8004f3c:	2602      	movs	r6, #2
 8004f3e:	e7f2      	b.n	8004f26 <_dtoa_r+0x336>
 8004f40:	07e1      	lsls	r1, r4, #31
 8004f42:	d508      	bpl.n	8004f56 <_dtoa_r+0x366>
 8004f44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f4c:	f7fb fad4 	bl	80004f8 <__aeabi_dmul>
 8004f50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f54:	3601      	adds	r6, #1
 8004f56:	1064      	asrs	r4, r4, #1
 8004f58:	3508      	adds	r5, #8
 8004f5a:	e7e5      	b.n	8004f28 <_dtoa_r+0x338>
 8004f5c:	f000 80d2 	beq.w	8005104 <_dtoa_r+0x514>
 8004f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f64:	427c      	negs	r4, r7
 8004f66:	4b6a      	ldr	r3, [pc, #424]	@ (8005110 <_dtoa_r+0x520>)
 8004f68:	f004 020f 	and.w	r2, r4, #15
 8004f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	f7fb fac0 	bl	80004f8 <__aeabi_dmul>
 8004f78:	2602      	movs	r6, #2
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f80:	4d64      	ldr	r5, [pc, #400]	@ (8005114 <_dtoa_r+0x524>)
 8004f82:	1124      	asrs	r4, r4, #4
 8004f84:	2c00      	cmp	r4, #0
 8004f86:	f040 80b2 	bne.w	80050ee <_dtoa_r+0x4fe>
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1d3      	bne.n	8004f36 <_dtoa_r+0x346>
 8004f8e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004f92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80b7 	beq.w	8005108 <_dtoa_r+0x518>
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	4b5d      	ldr	r3, [pc, #372]	@ (8005118 <_dtoa_r+0x528>)
 8004fa2:	f7fb fd1b 	bl	80009dc <__aeabi_dcmplt>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f000 80ae 	beq.w	8005108 <_dtoa_r+0x518>
 8004fac:	9b07      	ldr	r3, [sp, #28]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80aa 	beq.w	8005108 <_dtoa_r+0x518>
 8004fb4:	9b08      	ldr	r3, [sp, #32]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	dd37      	ble.n	800502a <_dtoa_r+0x43a>
 8004fba:	1e7b      	subs	r3, r7, #1
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	9304      	str	r3, [sp, #16]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	4b55      	ldr	r3, [pc, #340]	@ (800511c <_dtoa_r+0x52c>)
 8004fc6:	f7fb fa97 	bl	80004f8 <__aeabi_dmul>
 8004fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fce:	9c08      	ldr	r4, [sp, #32]
 8004fd0:	3601      	adds	r6, #1
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f7fb fa26 	bl	8000424 <__aeabi_i2d>
 8004fd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fdc:	f7fb fa8c 	bl	80004f8 <__aeabi_dmul>
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8005120 <_dtoa_r+0x530>)
 8004fe4:	f7fb f8d2 	bl	800018c <__adddf3>
 8004fe8:	4605      	mov	r5, r0
 8004fea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004fee:	2c00      	cmp	r4, #0
 8004ff0:	f040 809a 	bne.w	8005128 <_dtoa_r+0x538>
 8004ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8005124 <_dtoa_r+0x534>)
 8004ffc:	f7fb f8c4 	bl	8000188 <__aeabi_dsub>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005008:	462a      	mov	r2, r5
 800500a:	4633      	mov	r3, r6
 800500c:	f7fb fd04 	bl	8000a18 <__aeabi_dcmpgt>
 8005010:	2800      	cmp	r0, #0
 8005012:	f040 828e 	bne.w	8005532 <_dtoa_r+0x942>
 8005016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800501a:	462a      	mov	r2, r5
 800501c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005020:	f7fb fcdc 	bl	80009dc <__aeabi_dcmplt>
 8005024:	2800      	cmp	r0, #0
 8005026:	f040 8127 	bne.w	8005278 <_dtoa_r+0x688>
 800502a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800502e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005032:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005034:	2b00      	cmp	r3, #0
 8005036:	f2c0 8163 	blt.w	8005300 <_dtoa_r+0x710>
 800503a:	2f0e      	cmp	r7, #14
 800503c:	f300 8160 	bgt.w	8005300 <_dtoa_r+0x710>
 8005040:	4b33      	ldr	r3, [pc, #204]	@ (8005110 <_dtoa_r+0x520>)
 8005042:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005046:	e9d3 3400 	ldrd	r3, r4, [r3]
 800504a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800504e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005050:	2b00      	cmp	r3, #0
 8005052:	da03      	bge.n	800505c <_dtoa_r+0x46c>
 8005054:	9b07      	ldr	r3, [sp, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f340 8100 	ble.w	800525c <_dtoa_r+0x66c>
 800505c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005060:	4656      	mov	r6, sl
 8005062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005066:	4620      	mov	r0, r4
 8005068:	4629      	mov	r1, r5
 800506a:	f7fb fb6f 	bl	800074c <__aeabi_ddiv>
 800506e:	f7fb fcf3 	bl	8000a58 <__aeabi_d2iz>
 8005072:	4680      	mov	r8, r0
 8005074:	f7fb f9d6 	bl	8000424 <__aeabi_i2d>
 8005078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800507c:	f7fb fa3c 	bl	80004f8 <__aeabi_dmul>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4620      	mov	r0, r4
 8005086:	4629      	mov	r1, r5
 8005088:	f7fb f87e 	bl	8000188 <__aeabi_dsub>
 800508c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005090:	9d07      	ldr	r5, [sp, #28]
 8005092:	f806 4b01 	strb.w	r4, [r6], #1
 8005096:	eba6 040a 	sub.w	r4, r6, sl
 800509a:	42a5      	cmp	r5, r4
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	f040 8116 	bne.w	80052d0 <_dtoa_r+0x6e0>
 80050a4:	f7fb f872 	bl	800018c <__adddf3>
 80050a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ac:	4604      	mov	r4, r0
 80050ae:	460d      	mov	r5, r1
 80050b0:	f7fb fcb2 	bl	8000a18 <__aeabi_dcmpgt>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	f040 80f8 	bne.w	80052aa <_dtoa_r+0x6ba>
 80050ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050be:	4620      	mov	r0, r4
 80050c0:	4629      	mov	r1, r5
 80050c2:	f7fb fc81 	bl	80009c8 <__aeabi_dcmpeq>
 80050c6:	b118      	cbz	r0, 80050d0 <_dtoa_r+0x4e0>
 80050c8:	f018 0f01 	tst.w	r8, #1
 80050cc:	f040 80ed 	bne.w	80052aa <_dtoa_r+0x6ba>
 80050d0:	4649      	mov	r1, r9
 80050d2:	4658      	mov	r0, fp
 80050d4:	f000 fc92 	bl	80059fc <_Bfree>
 80050d8:	2300      	movs	r3, #0
 80050da:	7033      	strb	r3, [r6, #0]
 80050dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80050de:	3701      	adds	r7, #1
 80050e0:	601f      	str	r7, [r3, #0]
 80050e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8320 	beq.w	800572a <_dtoa_r+0xb3a>
 80050ea:	601e      	str	r6, [r3, #0]
 80050ec:	e31d      	b.n	800572a <_dtoa_r+0xb3a>
 80050ee:	07e2      	lsls	r2, r4, #31
 80050f0:	d505      	bpl.n	80050fe <_dtoa_r+0x50e>
 80050f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050f6:	f7fb f9ff 	bl	80004f8 <__aeabi_dmul>
 80050fa:	2301      	movs	r3, #1
 80050fc:	3601      	adds	r6, #1
 80050fe:	1064      	asrs	r4, r4, #1
 8005100:	3508      	adds	r5, #8
 8005102:	e73f      	b.n	8004f84 <_dtoa_r+0x394>
 8005104:	2602      	movs	r6, #2
 8005106:	e742      	b.n	8004f8e <_dtoa_r+0x39e>
 8005108:	9c07      	ldr	r4, [sp, #28]
 800510a:	9704      	str	r7, [sp, #16]
 800510c:	e761      	b.n	8004fd2 <_dtoa_r+0x3e2>
 800510e:	bf00      	nop
 8005110:	08006988 	.word	0x08006988
 8005114:	08006960 	.word	0x08006960
 8005118:	3ff00000 	.word	0x3ff00000
 800511c:	40240000 	.word	0x40240000
 8005120:	401c0000 	.word	0x401c0000
 8005124:	40140000 	.word	0x40140000
 8005128:	4b70      	ldr	r3, [pc, #448]	@ (80052ec <_dtoa_r+0x6fc>)
 800512a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800512c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005130:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005134:	4454      	add	r4, sl
 8005136:	2900      	cmp	r1, #0
 8005138:	d045      	beq.n	80051c6 <_dtoa_r+0x5d6>
 800513a:	2000      	movs	r0, #0
 800513c:	496c      	ldr	r1, [pc, #432]	@ (80052f0 <_dtoa_r+0x700>)
 800513e:	f7fb fb05 	bl	800074c <__aeabi_ddiv>
 8005142:	4633      	mov	r3, r6
 8005144:	462a      	mov	r2, r5
 8005146:	f7fb f81f 	bl	8000188 <__aeabi_dsub>
 800514a:	4656      	mov	r6, sl
 800514c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005154:	f7fb fc80 	bl	8000a58 <__aeabi_d2iz>
 8005158:	4605      	mov	r5, r0
 800515a:	f7fb f963 	bl	8000424 <__aeabi_i2d>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005166:	f7fb f80f 	bl	8000188 <__aeabi_dsub>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	3530      	adds	r5, #48	@ 0x30
 8005170:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005174:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005178:	f806 5b01 	strb.w	r5, [r6], #1
 800517c:	f7fb fc2e 	bl	80009dc <__aeabi_dcmplt>
 8005180:	2800      	cmp	r0, #0
 8005182:	d163      	bne.n	800524c <_dtoa_r+0x65c>
 8005184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005188:	2000      	movs	r0, #0
 800518a:	495a      	ldr	r1, [pc, #360]	@ (80052f4 <_dtoa_r+0x704>)
 800518c:	f7fa fffc 	bl	8000188 <__aeabi_dsub>
 8005190:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005194:	f7fb fc22 	bl	80009dc <__aeabi_dcmplt>
 8005198:	2800      	cmp	r0, #0
 800519a:	f040 8087 	bne.w	80052ac <_dtoa_r+0x6bc>
 800519e:	42a6      	cmp	r6, r4
 80051a0:	f43f af43 	beq.w	800502a <_dtoa_r+0x43a>
 80051a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80051a8:	2200      	movs	r2, #0
 80051aa:	4b53      	ldr	r3, [pc, #332]	@ (80052f8 <_dtoa_r+0x708>)
 80051ac:	f7fb f9a4 	bl	80004f8 <__aeabi_dmul>
 80051b0:	2200      	movs	r2, #0
 80051b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051ba:	4b4f      	ldr	r3, [pc, #316]	@ (80052f8 <_dtoa_r+0x708>)
 80051bc:	f7fb f99c 	bl	80004f8 <__aeabi_dmul>
 80051c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c4:	e7c4      	b.n	8005150 <_dtoa_r+0x560>
 80051c6:	4631      	mov	r1, r6
 80051c8:	4628      	mov	r0, r5
 80051ca:	f7fb f995 	bl	80004f8 <__aeabi_dmul>
 80051ce:	4656      	mov	r6, sl
 80051d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051d4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80051d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051da:	f7fb fc3d 	bl	8000a58 <__aeabi_d2iz>
 80051de:	4605      	mov	r5, r0
 80051e0:	f7fb f920 	bl	8000424 <__aeabi_i2d>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051ec:	f7fa ffcc 	bl	8000188 <__aeabi_dsub>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	3530      	adds	r5, #48	@ 0x30
 80051f6:	f806 5b01 	strb.w	r5, [r6], #1
 80051fa:	42a6      	cmp	r6, r4
 80051fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	d124      	bne.n	8005250 <_dtoa_r+0x660>
 8005206:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800520a:	4b39      	ldr	r3, [pc, #228]	@ (80052f0 <_dtoa_r+0x700>)
 800520c:	f7fa ffbe 	bl	800018c <__adddf3>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005218:	f7fb fbfe 	bl	8000a18 <__aeabi_dcmpgt>
 800521c:	2800      	cmp	r0, #0
 800521e:	d145      	bne.n	80052ac <_dtoa_r+0x6bc>
 8005220:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005224:	2000      	movs	r0, #0
 8005226:	4932      	ldr	r1, [pc, #200]	@ (80052f0 <_dtoa_r+0x700>)
 8005228:	f7fa ffae 	bl	8000188 <__aeabi_dsub>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005234:	f7fb fbd2 	bl	80009dc <__aeabi_dcmplt>
 8005238:	2800      	cmp	r0, #0
 800523a:	f43f aef6 	beq.w	800502a <_dtoa_r+0x43a>
 800523e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005240:	1e73      	subs	r3, r6, #1
 8005242:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005244:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005248:	2b30      	cmp	r3, #48	@ 0x30
 800524a:	d0f8      	beq.n	800523e <_dtoa_r+0x64e>
 800524c:	9f04      	ldr	r7, [sp, #16]
 800524e:	e73f      	b.n	80050d0 <_dtoa_r+0x4e0>
 8005250:	4b29      	ldr	r3, [pc, #164]	@ (80052f8 <_dtoa_r+0x708>)
 8005252:	f7fb f951 	bl	80004f8 <__aeabi_dmul>
 8005256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800525a:	e7bc      	b.n	80051d6 <_dtoa_r+0x5e6>
 800525c:	d10c      	bne.n	8005278 <_dtoa_r+0x688>
 800525e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005262:	2200      	movs	r2, #0
 8005264:	4b25      	ldr	r3, [pc, #148]	@ (80052fc <_dtoa_r+0x70c>)
 8005266:	f7fb f947 	bl	80004f8 <__aeabi_dmul>
 800526a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800526e:	f7fb fbc9 	bl	8000a04 <__aeabi_dcmpge>
 8005272:	2800      	cmp	r0, #0
 8005274:	f000 815b 	beq.w	800552e <_dtoa_r+0x93e>
 8005278:	2400      	movs	r4, #0
 800527a:	4625      	mov	r5, r4
 800527c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800527e:	4656      	mov	r6, sl
 8005280:	43db      	mvns	r3, r3
 8005282:	9304      	str	r3, [sp, #16]
 8005284:	2700      	movs	r7, #0
 8005286:	4621      	mov	r1, r4
 8005288:	4658      	mov	r0, fp
 800528a:	f000 fbb7 	bl	80059fc <_Bfree>
 800528e:	2d00      	cmp	r5, #0
 8005290:	d0dc      	beq.n	800524c <_dtoa_r+0x65c>
 8005292:	b12f      	cbz	r7, 80052a0 <_dtoa_r+0x6b0>
 8005294:	42af      	cmp	r7, r5
 8005296:	d003      	beq.n	80052a0 <_dtoa_r+0x6b0>
 8005298:	4639      	mov	r1, r7
 800529a:	4658      	mov	r0, fp
 800529c:	f000 fbae 	bl	80059fc <_Bfree>
 80052a0:	4629      	mov	r1, r5
 80052a2:	4658      	mov	r0, fp
 80052a4:	f000 fbaa 	bl	80059fc <_Bfree>
 80052a8:	e7d0      	b.n	800524c <_dtoa_r+0x65c>
 80052aa:	9704      	str	r7, [sp, #16]
 80052ac:	4633      	mov	r3, r6
 80052ae:	461e      	mov	r6, r3
 80052b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052b4:	2a39      	cmp	r2, #57	@ 0x39
 80052b6:	d107      	bne.n	80052c8 <_dtoa_r+0x6d8>
 80052b8:	459a      	cmp	sl, r3
 80052ba:	d1f8      	bne.n	80052ae <_dtoa_r+0x6be>
 80052bc:	9a04      	ldr	r2, [sp, #16]
 80052be:	3201      	adds	r2, #1
 80052c0:	9204      	str	r2, [sp, #16]
 80052c2:	2230      	movs	r2, #48	@ 0x30
 80052c4:	f88a 2000 	strb.w	r2, [sl]
 80052c8:	781a      	ldrb	r2, [r3, #0]
 80052ca:	3201      	adds	r2, #1
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	e7bd      	b.n	800524c <_dtoa_r+0x65c>
 80052d0:	2200      	movs	r2, #0
 80052d2:	4b09      	ldr	r3, [pc, #36]	@ (80052f8 <_dtoa_r+0x708>)
 80052d4:	f7fb f910 	bl	80004f8 <__aeabi_dmul>
 80052d8:	2200      	movs	r2, #0
 80052da:	2300      	movs	r3, #0
 80052dc:	4604      	mov	r4, r0
 80052de:	460d      	mov	r5, r1
 80052e0:	f7fb fb72 	bl	80009c8 <__aeabi_dcmpeq>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	f43f aebc 	beq.w	8005062 <_dtoa_r+0x472>
 80052ea:	e6f1      	b.n	80050d0 <_dtoa_r+0x4e0>
 80052ec:	08006988 	.word	0x08006988
 80052f0:	3fe00000 	.word	0x3fe00000
 80052f4:	3ff00000 	.word	0x3ff00000
 80052f8:	40240000 	.word	0x40240000
 80052fc:	40140000 	.word	0x40140000
 8005300:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005302:	2a00      	cmp	r2, #0
 8005304:	f000 80db 	beq.w	80054be <_dtoa_r+0x8ce>
 8005308:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800530a:	2a01      	cmp	r2, #1
 800530c:	f300 80bf 	bgt.w	800548e <_dtoa_r+0x89e>
 8005310:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005312:	2a00      	cmp	r2, #0
 8005314:	f000 80b7 	beq.w	8005486 <_dtoa_r+0x896>
 8005318:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800531c:	4646      	mov	r6, r8
 800531e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005320:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005322:	2101      	movs	r1, #1
 8005324:	441a      	add	r2, r3
 8005326:	4658      	mov	r0, fp
 8005328:	4498      	add	r8, r3
 800532a:	9209      	str	r2, [sp, #36]	@ 0x24
 800532c:	f000 fc1a 	bl	8005b64 <__i2b>
 8005330:	4605      	mov	r5, r0
 8005332:	b15e      	cbz	r6, 800534c <_dtoa_r+0x75c>
 8005334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	dd08      	ble.n	800534c <_dtoa_r+0x75c>
 800533a:	42b3      	cmp	r3, r6
 800533c:	bfa8      	it	ge
 800533e:	4633      	movge	r3, r6
 8005340:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005342:	eba8 0803 	sub.w	r8, r8, r3
 8005346:	1af6      	subs	r6, r6, r3
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	9309      	str	r3, [sp, #36]	@ 0x24
 800534c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800534e:	b1f3      	cbz	r3, 800538e <_dtoa_r+0x79e>
 8005350:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 80b7 	beq.w	80054c6 <_dtoa_r+0x8d6>
 8005358:	b18c      	cbz	r4, 800537e <_dtoa_r+0x78e>
 800535a:	4629      	mov	r1, r5
 800535c:	4622      	mov	r2, r4
 800535e:	4658      	mov	r0, fp
 8005360:	f000 fcbe 	bl	8005ce0 <__pow5mult>
 8005364:	464a      	mov	r2, r9
 8005366:	4601      	mov	r1, r0
 8005368:	4605      	mov	r5, r0
 800536a:	4658      	mov	r0, fp
 800536c:	f000 fc10 	bl	8005b90 <__multiply>
 8005370:	4649      	mov	r1, r9
 8005372:	9004      	str	r0, [sp, #16]
 8005374:	4658      	mov	r0, fp
 8005376:	f000 fb41 	bl	80059fc <_Bfree>
 800537a:	9b04      	ldr	r3, [sp, #16]
 800537c:	4699      	mov	r9, r3
 800537e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005380:	1b1a      	subs	r2, r3, r4
 8005382:	d004      	beq.n	800538e <_dtoa_r+0x79e>
 8005384:	4649      	mov	r1, r9
 8005386:	4658      	mov	r0, fp
 8005388:	f000 fcaa 	bl	8005ce0 <__pow5mult>
 800538c:	4681      	mov	r9, r0
 800538e:	2101      	movs	r1, #1
 8005390:	4658      	mov	r0, fp
 8005392:	f000 fbe7 	bl	8005b64 <__i2b>
 8005396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005398:	4604      	mov	r4, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 81c9 	beq.w	8005732 <_dtoa_r+0xb42>
 80053a0:	461a      	mov	r2, r3
 80053a2:	4601      	mov	r1, r0
 80053a4:	4658      	mov	r0, fp
 80053a6:	f000 fc9b 	bl	8005ce0 <__pow5mult>
 80053aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053ac:	4604      	mov	r4, r0
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	f300 808f 	bgt.w	80054d2 <_dtoa_r+0x8e2>
 80053b4:	9b02      	ldr	r3, [sp, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f040 8087 	bne.w	80054ca <_dtoa_r+0x8da>
 80053bc:	9b03      	ldr	r3, [sp, #12]
 80053be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f040 8083 	bne.w	80054ce <_dtoa_r+0x8de>
 80053c8:	9b03      	ldr	r3, [sp, #12]
 80053ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053ce:	0d1b      	lsrs	r3, r3, #20
 80053d0:	051b      	lsls	r3, r3, #20
 80053d2:	b12b      	cbz	r3, 80053e0 <_dtoa_r+0x7f0>
 80053d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053d6:	f108 0801 	add.w	r8, r8, #1
 80053da:	3301      	adds	r3, #1
 80053dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80053de:	2301      	movs	r3, #1
 80053e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80053e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 81aa 	beq.w	800573e <_dtoa_r+0xb4e>
 80053ea:	6923      	ldr	r3, [r4, #16]
 80053ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80053f0:	6918      	ldr	r0, [r3, #16]
 80053f2:	f000 fb6b 	bl	8005acc <__hi0bits>
 80053f6:	f1c0 0020 	rsb	r0, r0, #32
 80053fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053fc:	4418      	add	r0, r3
 80053fe:	f010 001f 	ands.w	r0, r0, #31
 8005402:	d071      	beq.n	80054e8 <_dtoa_r+0x8f8>
 8005404:	f1c0 0320 	rsb	r3, r0, #32
 8005408:	2b04      	cmp	r3, #4
 800540a:	dd65      	ble.n	80054d8 <_dtoa_r+0x8e8>
 800540c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800540e:	f1c0 001c 	rsb	r0, r0, #28
 8005412:	4403      	add	r3, r0
 8005414:	4480      	add	r8, r0
 8005416:	4406      	add	r6, r0
 8005418:	9309      	str	r3, [sp, #36]	@ 0x24
 800541a:	f1b8 0f00 	cmp.w	r8, #0
 800541e:	dd05      	ble.n	800542c <_dtoa_r+0x83c>
 8005420:	4649      	mov	r1, r9
 8005422:	4642      	mov	r2, r8
 8005424:	4658      	mov	r0, fp
 8005426:	f000 fcb5 	bl	8005d94 <__lshift>
 800542a:	4681      	mov	r9, r0
 800542c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	dd05      	ble.n	800543e <_dtoa_r+0x84e>
 8005432:	4621      	mov	r1, r4
 8005434:	461a      	mov	r2, r3
 8005436:	4658      	mov	r0, fp
 8005438:	f000 fcac 	bl	8005d94 <__lshift>
 800543c:	4604      	mov	r4, r0
 800543e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d053      	beq.n	80054ec <_dtoa_r+0x8fc>
 8005444:	4621      	mov	r1, r4
 8005446:	4648      	mov	r0, r9
 8005448:	f000 fd10 	bl	8005e6c <__mcmp>
 800544c:	2800      	cmp	r0, #0
 800544e:	da4d      	bge.n	80054ec <_dtoa_r+0x8fc>
 8005450:	1e7b      	subs	r3, r7, #1
 8005452:	4649      	mov	r1, r9
 8005454:	9304      	str	r3, [sp, #16]
 8005456:	220a      	movs	r2, #10
 8005458:	2300      	movs	r3, #0
 800545a:	4658      	mov	r0, fp
 800545c:	f000 faf0 	bl	8005a40 <__multadd>
 8005460:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005462:	4681      	mov	r9, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 816c 	beq.w	8005742 <_dtoa_r+0xb52>
 800546a:	2300      	movs	r3, #0
 800546c:	4629      	mov	r1, r5
 800546e:	220a      	movs	r2, #10
 8005470:	4658      	mov	r0, fp
 8005472:	f000 fae5 	bl	8005a40 <__multadd>
 8005476:	9b08      	ldr	r3, [sp, #32]
 8005478:	4605      	mov	r5, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	dc61      	bgt.n	8005542 <_dtoa_r+0x952>
 800547e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005480:	2b02      	cmp	r3, #2
 8005482:	dc3b      	bgt.n	80054fc <_dtoa_r+0x90c>
 8005484:	e05d      	b.n	8005542 <_dtoa_r+0x952>
 8005486:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005488:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800548c:	e746      	b.n	800531c <_dtoa_r+0x72c>
 800548e:	9b07      	ldr	r3, [sp, #28]
 8005490:	1e5c      	subs	r4, r3, #1
 8005492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005494:	42a3      	cmp	r3, r4
 8005496:	bfbf      	itttt	lt
 8005498:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800549a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800549c:	1ae3      	sublt	r3, r4, r3
 800549e:	18d2      	addlt	r2, r2, r3
 80054a0:	bfa8      	it	ge
 80054a2:	1b1c      	subge	r4, r3, r4
 80054a4:	9b07      	ldr	r3, [sp, #28]
 80054a6:	bfbe      	ittt	lt
 80054a8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80054aa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80054ac:	2400      	movlt	r4, #0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	bfb5      	itete	lt
 80054b2:	eba8 0603 	sublt.w	r6, r8, r3
 80054b6:	4646      	movge	r6, r8
 80054b8:	2300      	movlt	r3, #0
 80054ba:	9b07      	ldrge	r3, [sp, #28]
 80054bc:	e730      	b.n	8005320 <_dtoa_r+0x730>
 80054be:	4646      	mov	r6, r8
 80054c0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80054c2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80054c4:	e735      	b.n	8005332 <_dtoa_r+0x742>
 80054c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054c8:	e75c      	b.n	8005384 <_dtoa_r+0x794>
 80054ca:	2300      	movs	r3, #0
 80054cc:	e788      	b.n	80053e0 <_dtoa_r+0x7f0>
 80054ce:	9b02      	ldr	r3, [sp, #8]
 80054d0:	e786      	b.n	80053e0 <_dtoa_r+0x7f0>
 80054d2:	2300      	movs	r3, #0
 80054d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80054d6:	e788      	b.n	80053ea <_dtoa_r+0x7fa>
 80054d8:	d09f      	beq.n	800541a <_dtoa_r+0x82a>
 80054da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054dc:	331c      	adds	r3, #28
 80054de:	441a      	add	r2, r3
 80054e0:	4498      	add	r8, r3
 80054e2:	441e      	add	r6, r3
 80054e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80054e6:	e798      	b.n	800541a <_dtoa_r+0x82a>
 80054e8:	4603      	mov	r3, r0
 80054ea:	e7f6      	b.n	80054da <_dtoa_r+0x8ea>
 80054ec:	9b07      	ldr	r3, [sp, #28]
 80054ee:	9704      	str	r7, [sp, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	dc20      	bgt.n	8005536 <_dtoa_r+0x946>
 80054f4:	9308      	str	r3, [sp, #32]
 80054f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	dd1e      	ble.n	800553a <_dtoa_r+0x94a>
 80054fc:	9b08      	ldr	r3, [sp, #32]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f47f aebc 	bne.w	800527c <_dtoa_r+0x68c>
 8005504:	4621      	mov	r1, r4
 8005506:	2205      	movs	r2, #5
 8005508:	4658      	mov	r0, fp
 800550a:	f000 fa99 	bl	8005a40 <__multadd>
 800550e:	4601      	mov	r1, r0
 8005510:	4604      	mov	r4, r0
 8005512:	4648      	mov	r0, r9
 8005514:	f000 fcaa 	bl	8005e6c <__mcmp>
 8005518:	2800      	cmp	r0, #0
 800551a:	f77f aeaf 	ble.w	800527c <_dtoa_r+0x68c>
 800551e:	2331      	movs	r3, #49	@ 0x31
 8005520:	4656      	mov	r6, sl
 8005522:	f806 3b01 	strb.w	r3, [r6], #1
 8005526:	9b04      	ldr	r3, [sp, #16]
 8005528:	3301      	adds	r3, #1
 800552a:	9304      	str	r3, [sp, #16]
 800552c:	e6aa      	b.n	8005284 <_dtoa_r+0x694>
 800552e:	9c07      	ldr	r4, [sp, #28]
 8005530:	9704      	str	r7, [sp, #16]
 8005532:	4625      	mov	r5, r4
 8005534:	e7f3      	b.n	800551e <_dtoa_r+0x92e>
 8005536:	9b07      	ldr	r3, [sp, #28]
 8005538:	9308      	str	r3, [sp, #32]
 800553a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8104 	beq.w	800574a <_dtoa_r+0xb5a>
 8005542:	2e00      	cmp	r6, #0
 8005544:	dd05      	ble.n	8005552 <_dtoa_r+0x962>
 8005546:	4629      	mov	r1, r5
 8005548:	4632      	mov	r2, r6
 800554a:	4658      	mov	r0, fp
 800554c:	f000 fc22 	bl	8005d94 <__lshift>
 8005550:	4605      	mov	r5, r0
 8005552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005554:	2b00      	cmp	r3, #0
 8005556:	d05a      	beq.n	800560e <_dtoa_r+0xa1e>
 8005558:	4658      	mov	r0, fp
 800555a:	6869      	ldr	r1, [r5, #4]
 800555c:	f000 fa0e 	bl	800597c <_Balloc>
 8005560:	4606      	mov	r6, r0
 8005562:	b928      	cbnz	r0, 8005570 <_dtoa_r+0x980>
 8005564:	4602      	mov	r2, r0
 8005566:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800556a:	4b83      	ldr	r3, [pc, #524]	@ (8005778 <_dtoa_r+0xb88>)
 800556c:	f7ff bb54 	b.w	8004c18 <_dtoa_r+0x28>
 8005570:	692a      	ldr	r2, [r5, #16]
 8005572:	f105 010c 	add.w	r1, r5, #12
 8005576:	3202      	adds	r2, #2
 8005578:	0092      	lsls	r2, r2, #2
 800557a:	300c      	adds	r0, #12
 800557c:	f7ff faa1 	bl	8004ac2 <memcpy>
 8005580:	2201      	movs	r2, #1
 8005582:	4631      	mov	r1, r6
 8005584:	4658      	mov	r0, fp
 8005586:	f000 fc05 	bl	8005d94 <__lshift>
 800558a:	462f      	mov	r7, r5
 800558c:	4605      	mov	r5, r0
 800558e:	f10a 0301 	add.w	r3, sl, #1
 8005592:	9307      	str	r3, [sp, #28]
 8005594:	9b08      	ldr	r3, [sp, #32]
 8005596:	4453      	add	r3, sl
 8005598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800559a:	9b02      	ldr	r3, [sp, #8]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80055a2:	9b07      	ldr	r3, [sp, #28]
 80055a4:	4621      	mov	r1, r4
 80055a6:	3b01      	subs	r3, #1
 80055a8:	4648      	mov	r0, r9
 80055aa:	9302      	str	r3, [sp, #8]
 80055ac:	f7ff fa97 	bl	8004ade <quorem>
 80055b0:	4639      	mov	r1, r7
 80055b2:	9008      	str	r0, [sp, #32]
 80055b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80055b8:	4648      	mov	r0, r9
 80055ba:	f000 fc57 	bl	8005e6c <__mcmp>
 80055be:	462a      	mov	r2, r5
 80055c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80055c2:	4621      	mov	r1, r4
 80055c4:	4658      	mov	r0, fp
 80055c6:	f000 fc6d 	bl	8005ea4 <__mdiff>
 80055ca:	68c2      	ldr	r2, [r0, #12]
 80055cc:	4606      	mov	r6, r0
 80055ce:	bb02      	cbnz	r2, 8005612 <_dtoa_r+0xa22>
 80055d0:	4601      	mov	r1, r0
 80055d2:	4648      	mov	r0, r9
 80055d4:	f000 fc4a 	bl	8005e6c <__mcmp>
 80055d8:	4602      	mov	r2, r0
 80055da:	4631      	mov	r1, r6
 80055dc:	4658      	mov	r0, fp
 80055de:	920c      	str	r2, [sp, #48]	@ 0x30
 80055e0:	f000 fa0c 	bl	80059fc <_Bfree>
 80055e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80055e8:	9e07      	ldr	r6, [sp, #28]
 80055ea:	ea43 0102 	orr.w	r1, r3, r2
 80055ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055f0:	4319      	orrs	r1, r3
 80055f2:	d110      	bne.n	8005616 <_dtoa_r+0xa26>
 80055f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80055f8:	d029      	beq.n	800564e <_dtoa_r+0xa5e>
 80055fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	dd02      	ble.n	8005606 <_dtoa_r+0xa16>
 8005600:	9b08      	ldr	r3, [sp, #32]
 8005602:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005606:	9b02      	ldr	r3, [sp, #8]
 8005608:	f883 8000 	strb.w	r8, [r3]
 800560c:	e63b      	b.n	8005286 <_dtoa_r+0x696>
 800560e:	4628      	mov	r0, r5
 8005610:	e7bb      	b.n	800558a <_dtoa_r+0x99a>
 8005612:	2201      	movs	r2, #1
 8005614:	e7e1      	b.n	80055da <_dtoa_r+0x9ea>
 8005616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	db04      	blt.n	8005626 <_dtoa_r+0xa36>
 800561c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800561e:	430b      	orrs	r3, r1
 8005620:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005622:	430b      	orrs	r3, r1
 8005624:	d120      	bne.n	8005668 <_dtoa_r+0xa78>
 8005626:	2a00      	cmp	r2, #0
 8005628:	dded      	ble.n	8005606 <_dtoa_r+0xa16>
 800562a:	4649      	mov	r1, r9
 800562c:	2201      	movs	r2, #1
 800562e:	4658      	mov	r0, fp
 8005630:	f000 fbb0 	bl	8005d94 <__lshift>
 8005634:	4621      	mov	r1, r4
 8005636:	4681      	mov	r9, r0
 8005638:	f000 fc18 	bl	8005e6c <__mcmp>
 800563c:	2800      	cmp	r0, #0
 800563e:	dc03      	bgt.n	8005648 <_dtoa_r+0xa58>
 8005640:	d1e1      	bne.n	8005606 <_dtoa_r+0xa16>
 8005642:	f018 0f01 	tst.w	r8, #1
 8005646:	d0de      	beq.n	8005606 <_dtoa_r+0xa16>
 8005648:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800564c:	d1d8      	bne.n	8005600 <_dtoa_r+0xa10>
 800564e:	2339      	movs	r3, #57	@ 0x39
 8005650:	9a02      	ldr	r2, [sp, #8]
 8005652:	7013      	strb	r3, [r2, #0]
 8005654:	4633      	mov	r3, r6
 8005656:	461e      	mov	r6, r3
 8005658:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800565c:	3b01      	subs	r3, #1
 800565e:	2a39      	cmp	r2, #57	@ 0x39
 8005660:	d052      	beq.n	8005708 <_dtoa_r+0xb18>
 8005662:	3201      	adds	r2, #1
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	e60e      	b.n	8005286 <_dtoa_r+0x696>
 8005668:	2a00      	cmp	r2, #0
 800566a:	dd07      	ble.n	800567c <_dtoa_r+0xa8c>
 800566c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005670:	d0ed      	beq.n	800564e <_dtoa_r+0xa5e>
 8005672:	9a02      	ldr	r2, [sp, #8]
 8005674:	f108 0301 	add.w	r3, r8, #1
 8005678:	7013      	strb	r3, [r2, #0]
 800567a:	e604      	b.n	8005286 <_dtoa_r+0x696>
 800567c:	9b07      	ldr	r3, [sp, #28]
 800567e:	9a07      	ldr	r2, [sp, #28]
 8005680:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005686:	4293      	cmp	r3, r2
 8005688:	d028      	beq.n	80056dc <_dtoa_r+0xaec>
 800568a:	4649      	mov	r1, r9
 800568c:	2300      	movs	r3, #0
 800568e:	220a      	movs	r2, #10
 8005690:	4658      	mov	r0, fp
 8005692:	f000 f9d5 	bl	8005a40 <__multadd>
 8005696:	42af      	cmp	r7, r5
 8005698:	4681      	mov	r9, r0
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	f04f 020a 	mov.w	r2, #10
 80056a2:	4639      	mov	r1, r7
 80056a4:	4658      	mov	r0, fp
 80056a6:	d107      	bne.n	80056b8 <_dtoa_r+0xac8>
 80056a8:	f000 f9ca 	bl	8005a40 <__multadd>
 80056ac:	4607      	mov	r7, r0
 80056ae:	4605      	mov	r5, r0
 80056b0:	9b07      	ldr	r3, [sp, #28]
 80056b2:	3301      	adds	r3, #1
 80056b4:	9307      	str	r3, [sp, #28]
 80056b6:	e774      	b.n	80055a2 <_dtoa_r+0x9b2>
 80056b8:	f000 f9c2 	bl	8005a40 <__multadd>
 80056bc:	4629      	mov	r1, r5
 80056be:	4607      	mov	r7, r0
 80056c0:	2300      	movs	r3, #0
 80056c2:	220a      	movs	r2, #10
 80056c4:	4658      	mov	r0, fp
 80056c6:	f000 f9bb 	bl	8005a40 <__multadd>
 80056ca:	4605      	mov	r5, r0
 80056cc:	e7f0      	b.n	80056b0 <_dtoa_r+0xac0>
 80056ce:	9b08      	ldr	r3, [sp, #32]
 80056d0:	2700      	movs	r7, #0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bfcc      	ite	gt
 80056d6:	461e      	movgt	r6, r3
 80056d8:	2601      	movle	r6, #1
 80056da:	4456      	add	r6, sl
 80056dc:	4649      	mov	r1, r9
 80056de:	2201      	movs	r2, #1
 80056e0:	4658      	mov	r0, fp
 80056e2:	f000 fb57 	bl	8005d94 <__lshift>
 80056e6:	4621      	mov	r1, r4
 80056e8:	4681      	mov	r9, r0
 80056ea:	f000 fbbf 	bl	8005e6c <__mcmp>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	dcb0      	bgt.n	8005654 <_dtoa_r+0xa64>
 80056f2:	d102      	bne.n	80056fa <_dtoa_r+0xb0a>
 80056f4:	f018 0f01 	tst.w	r8, #1
 80056f8:	d1ac      	bne.n	8005654 <_dtoa_r+0xa64>
 80056fa:	4633      	mov	r3, r6
 80056fc:	461e      	mov	r6, r3
 80056fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005702:	2a30      	cmp	r2, #48	@ 0x30
 8005704:	d0fa      	beq.n	80056fc <_dtoa_r+0xb0c>
 8005706:	e5be      	b.n	8005286 <_dtoa_r+0x696>
 8005708:	459a      	cmp	sl, r3
 800570a:	d1a4      	bne.n	8005656 <_dtoa_r+0xa66>
 800570c:	9b04      	ldr	r3, [sp, #16]
 800570e:	3301      	adds	r3, #1
 8005710:	9304      	str	r3, [sp, #16]
 8005712:	2331      	movs	r3, #49	@ 0x31
 8005714:	f88a 3000 	strb.w	r3, [sl]
 8005718:	e5b5      	b.n	8005286 <_dtoa_r+0x696>
 800571a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800571c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800577c <_dtoa_r+0xb8c>
 8005720:	b11b      	cbz	r3, 800572a <_dtoa_r+0xb3a>
 8005722:	f10a 0308 	add.w	r3, sl, #8
 8005726:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	4650      	mov	r0, sl
 800572c:	b017      	add	sp, #92	@ 0x5c
 800572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005732:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005734:	2b01      	cmp	r3, #1
 8005736:	f77f ae3d 	ble.w	80053b4 <_dtoa_r+0x7c4>
 800573a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800573c:	930a      	str	r3, [sp, #40]	@ 0x28
 800573e:	2001      	movs	r0, #1
 8005740:	e65b      	b.n	80053fa <_dtoa_r+0x80a>
 8005742:	9b08      	ldr	r3, [sp, #32]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f77f aed6 	ble.w	80054f6 <_dtoa_r+0x906>
 800574a:	4656      	mov	r6, sl
 800574c:	4621      	mov	r1, r4
 800574e:	4648      	mov	r0, r9
 8005750:	f7ff f9c5 	bl	8004ade <quorem>
 8005754:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005758:	9b08      	ldr	r3, [sp, #32]
 800575a:	f806 8b01 	strb.w	r8, [r6], #1
 800575e:	eba6 020a 	sub.w	r2, r6, sl
 8005762:	4293      	cmp	r3, r2
 8005764:	ddb3      	ble.n	80056ce <_dtoa_r+0xade>
 8005766:	4649      	mov	r1, r9
 8005768:	2300      	movs	r3, #0
 800576a:	220a      	movs	r2, #10
 800576c:	4658      	mov	r0, fp
 800576e:	f000 f967 	bl	8005a40 <__multadd>
 8005772:	4681      	mov	r9, r0
 8005774:	e7ea      	b.n	800574c <_dtoa_r+0xb5c>
 8005776:	bf00      	nop
 8005778:	080068e7 	.word	0x080068e7
 800577c:	0800686b 	.word	0x0800686b

08005780 <_free_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4605      	mov	r5, r0
 8005784:	2900      	cmp	r1, #0
 8005786:	d040      	beq.n	800580a <_free_r+0x8a>
 8005788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800578c:	1f0c      	subs	r4, r1, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	bfb8      	it	lt
 8005792:	18e4      	addlt	r4, r4, r3
 8005794:	f000 f8e6 	bl	8005964 <__malloc_lock>
 8005798:	4a1c      	ldr	r2, [pc, #112]	@ (800580c <_free_r+0x8c>)
 800579a:	6813      	ldr	r3, [r2, #0]
 800579c:	b933      	cbnz	r3, 80057ac <_free_r+0x2c>
 800579e:	6063      	str	r3, [r4, #4]
 80057a0:	6014      	str	r4, [r2, #0]
 80057a2:	4628      	mov	r0, r5
 80057a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a8:	f000 b8e2 	b.w	8005970 <__malloc_unlock>
 80057ac:	42a3      	cmp	r3, r4
 80057ae:	d908      	bls.n	80057c2 <_free_r+0x42>
 80057b0:	6820      	ldr	r0, [r4, #0]
 80057b2:	1821      	adds	r1, r4, r0
 80057b4:	428b      	cmp	r3, r1
 80057b6:	bf01      	itttt	eq
 80057b8:	6819      	ldreq	r1, [r3, #0]
 80057ba:	685b      	ldreq	r3, [r3, #4]
 80057bc:	1809      	addeq	r1, r1, r0
 80057be:	6021      	streq	r1, [r4, #0]
 80057c0:	e7ed      	b.n	800579e <_free_r+0x1e>
 80057c2:	461a      	mov	r2, r3
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	b10b      	cbz	r3, 80057cc <_free_r+0x4c>
 80057c8:	42a3      	cmp	r3, r4
 80057ca:	d9fa      	bls.n	80057c2 <_free_r+0x42>
 80057cc:	6811      	ldr	r1, [r2, #0]
 80057ce:	1850      	adds	r0, r2, r1
 80057d0:	42a0      	cmp	r0, r4
 80057d2:	d10b      	bne.n	80057ec <_free_r+0x6c>
 80057d4:	6820      	ldr	r0, [r4, #0]
 80057d6:	4401      	add	r1, r0
 80057d8:	1850      	adds	r0, r2, r1
 80057da:	4283      	cmp	r3, r0
 80057dc:	6011      	str	r1, [r2, #0]
 80057de:	d1e0      	bne.n	80057a2 <_free_r+0x22>
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4408      	add	r0, r1
 80057e6:	6010      	str	r0, [r2, #0]
 80057e8:	6053      	str	r3, [r2, #4]
 80057ea:	e7da      	b.n	80057a2 <_free_r+0x22>
 80057ec:	d902      	bls.n	80057f4 <_free_r+0x74>
 80057ee:	230c      	movs	r3, #12
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	e7d6      	b.n	80057a2 <_free_r+0x22>
 80057f4:	6820      	ldr	r0, [r4, #0]
 80057f6:	1821      	adds	r1, r4, r0
 80057f8:	428b      	cmp	r3, r1
 80057fa:	bf01      	itttt	eq
 80057fc:	6819      	ldreq	r1, [r3, #0]
 80057fe:	685b      	ldreq	r3, [r3, #4]
 8005800:	1809      	addeq	r1, r1, r0
 8005802:	6021      	streq	r1, [r4, #0]
 8005804:	6063      	str	r3, [r4, #4]
 8005806:	6054      	str	r4, [r2, #4]
 8005808:	e7cb      	b.n	80057a2 <_free_r+0x22>
 800580a:	bd38      	pop	{r3, r4, r5, pc}
 800580c:	2000051c 	.word	0x2000051c

08005810 <malloc>:
 8005810:	4b02      	ldr	r3, [pc, #8]	@ (800581c <malloc+0xc>)
 8005812:	4601      	mov	r1, r0
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	f000 b825 	b.w	8005864 <_malloc_r>
 800581a:	bf00      	nop
 800581c:	2000000c 	.word	0x2000000c

08005820 <sbrk_aligned>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	4e0f      	ldr	r6, [pc, #60]	@ (8005860 <sbrk_aligned+0x40>)
 8005824:	460c      	mov	r4, r1
 8005826:	6831      	ldr	r1, [r6, #0]
 8005828:	4605      	mov	r5, r0
 800582a:	b911      	cbnz	r1, 8005832 <sbrk_aligned+0x12>
 800582c:	f000 fcce 	bl	80061cc <_sbrk_r>
 8005830:	6030      	str	r0, [r6, #0]
 8005832:	4621      	mov	r1, r4
 8005834:	4628      	mov	r0, r5
 8005836:	f000 fcc9 	bl	80061cc <_sbrk_r>
 800583a:	1c43      	adds	r3, r0, #1
 800583c:	d103      	bne.n	8005846 <sbrk_aligned+0x26>
 800583e:	f04f 34ff 	mov.w	r4, #4294967295
 8005842:	4620      	mov	r0, r4
 8005844:	bd70      	pop	{r4, r5, r6, pc}
 8005846:	1cc4      	adds	r4, r0, #3
 8005848:	f024 0403 	bic.w	r4, r4, #3
 800584c:	42a0      	cmp	r0, r4
 800584e:	d0f8      	beq.n	8005842 <sbrk_aligned+0x22>
 8005850:	1a21      	subs	r1, r4, r0
 8005852:	4628      	mov	r0, r5
 8005854:	f000 fcba 	bl	80061cc <_sbrk_r>
 8005858:	3001      	adds	r0, #1
 800585a:	d1f2      	bne.n	8005842 <sbrk_aligned+0x22>
 800585c:	e7ef      	b.n	800583e <sbrk_aligned+0x1e>
 800585e:	bf00      	nop
 8005860:	20000518 	.word	0x20000518

08005864 <_malloc_r>:
 8005864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005868:	1ccd      	adds	r5, r1, #3
 800586a:	f025 0503 	bic.w	r5, r5, #3
 800586e:	3508      	adds	r5, #8
 8005870:	2d0c      	cmp	r5, #12
 8005872:	bf38      	it	cc
 8005874:	250c      	movcc	r5, #12
 8005876:	2d00      	cmp	r5, #0
 8005878:	4606      	mov	r6, r0
 800587a:	db01      	blt.n	8005880 <_malloc_r+0x1c>
 800587c:	42a9      	cmp	r1, r5
 800587e:	d904      	bls.n	800588a <_malloc_r+0x26>
 8005880:	230c      	movs	r3, #12
 8005882:	6033      	str	r3, [r6, #0]
 8005884:	2000      	movs	r0, #0
 8005886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800588a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005960 <_malloc_r+0xfc>
 800588e:	f000 f869 	bl	8005964 <__malloc_lock>
 8005892:	f8d8 3000 	ldr.w	r3, [r8]
 8005896:	461c      	mov	r4, r3
 8005898:	bb44      	cbnz	r4, 80058ec <_malloc_r+0x88>
 800589a:	4629      	mov	r1, r5
 800589c:	4630      	mov	r0, r6
 800589e:	f7ff ffbf 	bl	8005820 <sbrk_aligned>
 80058a2:	1c43      	adds	r3, r0, #1
 80058a4:	4604      	mov	r4, r0
 80058a6:	d158      	bne.n	800595a <_malloc_r+0xf6>
 80058a8:	f8d8 4000 	ldr.w	r4, [r8]
 80058ac:	4627      	mov	r7, r4
 80058ae:	2f00      	cmp	r7, #0
 80058b0:	d143      	bne.n	800593a <_malloc_r+0xd6>
 80058b2:	2c00      	cmp	r4, #0
 80058b4:	d04b      	beq.n	800594e <_malloc_r+0xea>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	4639      	mov	r1, r7
 80058ba:	4630      	mov	r0, r6
 80058bc:	eb04 0903 	add.w	r9, r4, r3
 80058c0:	f000 fc84 	bl	80061cc <_sbrk_r>
 80058c4:	4581      	cmp	r9, r0
 80058c6:	d142      	bne.n	800594e <_malloc_r+0xea>
 80058c8:	6821      	ldr	r1, [r4, #0]
 80058ca:	4630      	mov	r0, r6
 80058cc:	1a6d      	subs	r5, r5, r1
 80058ce:	4629      	mov	r1, r5
 80058d0:	f7ff ffa6 	bl	8005820 <sbrk_aligned>
 80058d4:	3001      	adds	r0, #1
 80058d6:	d03a      	beq.n	800594e <_malloc_r+0xea>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	442b      	add	r3, r5
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	f8d8 3000 	ldr.w	r3, [r8]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	bb62      	cbnz	r2, 8005940 <_malloc_r+0xdc>
 80058e6:	f8c8 7000 	str.w	r7, [r8]
 80058ea:	e00f      	b.n	800590c <_malloc_r+0xa8>
 80058ec:	6822      	ldr	r2, [r4, #0]
 80058ee:	1b52      	subs	r2, r2, r5
 80058f0:	d420      	bmi.n	8005934 <_malloc_r+0xd0>
 80058f2:	2a0b      	cmp	r2, #11
 80058f4:	d917      	bls.n	8005926 <_malloc_r+0xc2>
 80058f6:	1961      	adds	r1, r4, r5
 80058f8:	42a3      	cmp	r3, r4
 80058fa:	6025      	str	r5, [r4, #0]
 80058fc:	bf18      	it	ne
 80058fe:	6059      	strne	r1, [r3, #4]
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	bf08      	it	eq
 8005904:	f8c8 1000 	streq.w	r1, [r8]
 8005908:	5162      	str	r2, [r4, r5]
 800590a:	604b      	str	r3, [r1, #4]
 800590c:	4630      	mov	r0, r6
 800590e:	f000 f82f 	bl	8005970 <__malloc_unlock>
 8005912:	f104 000b 	add.w	r0, r4, #11
 8005916:	1d23      	adds	r3, r4, #4
 8005918:	f020 0007 	bic.w	r0, r0, #7
 800591c:	1ac2      	subs	r2, r0, r3
 800591e:	bf1c      	itt	ne
 8005920:	1a1b      	subne	r3, r3, r0
 8005922:	50a3      	strne	r3, [r4, r2]
 8005924:	e7af      	b.n	8005886 <_malloc_r+0x22>
 8005926:	6862      	ldr	r2, [r4, #4]
 8005928:	42a3      	cmp	r3, r4
 800592a:	bf0c      	ite	eq
 800592c:	f8c8 2000 	streq.w	r2, [r8]
 8005930:	605a      	strne	r2, [r3, #4]
 8005932:	e7eb      	b.n	800590c <_malloc_r+0xa8>
 8005934:	4623      	mov	r3, r4
 8005936:	6864      	ldr	r4, [r4, #4]
 8005938:	e7ae      	b.n	8005898 <_malloc_r+0x34>
 800593a:	463c      	mov	r4, r7
 800593c:	687f      	ldr	r7, [r7, #4]
 800593e:	e7b6      	b.n	80058ae <_malloc_r+0x4a>
 8005940:	461a      	mov	r2, r3
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	42a3      	cmp	r3, r4
 8005946:	d1fb      	bne.n	8005940 <_malloc_r+0xdc>
 8005948:	2300      	movs	r3, #0
 800594a:	6053      	str	r3, [r2, #4]
 800594c:	e7de      	b.n	800590c <_malloc_r+0xa8>
 800594e:	230c      	movs	r3, #12
 8005950:	4630      	mov	r0, r6
 8005952:	6033      	str	r3, [r6, #0]
 8005954:	f000 f80c 	bl	8005970 <__malloc_unlock>
 8005958:	e794      	b.n	8005884 <_malloc_r+0x20>
 800595a:	6005      	str	r5, [r0, #0]
 800595c:	e7d6      	b.n	800590c <_malloc_r+0xa8>
 800595e:	bf00      	nop
 8005960:	2000051c 	.word	0x2000051c

08005964 <__malloc_lock>:
 8005964:	4801      	ldr	r0, [pc, #4]	@ (800596c <__malloc_lock+0x8>)
 8005966:	f7ff b89c 	b.w	8004aa2 <__retarget_lock_acquire_recursive>
 800596a:	bf00      	nop
 800596c:	20000514 	.word	0x20000514

08005970 <__malloc_unlock>:
 8005970:	4801      	ldr	r0, [pc, #4]	@ (8005978 <__malloc_unlock+0x8>)
 8005972:	f7ff b897 	b.w	8004aa4 <__retarget_lock_release_recursive>
 8005976:	bf00      	nop
 8005978:	20000514 	.word	0x20000514

0800597c <_Balloc>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	69c6      	ldr	r6, [r0, #28]
 8005980:	4604      	mov	r4, r0
 8005982:	460d      	mov	r5, r1
 8005984:	b976      	cbnz	r6, 80059a4 <_Balloc+0x28>
 8005986:	2010      	movs	r0, #16
 8005988:	f7ff ff42 	bl	8005810 <malloc>
 800598c:	4602      	mov	r2, r0
 800598e:	61e0      	str	r0, [r4, #28]
 8005990:	b920      	cbnz	r0, 800599c <_Balloc+0x20>
 8005992:	216b      	movs	r1, #107	@ 0x6b
 8005994:	4b17      	ldr	r3, [pc, #92]	@ (80059f4 <_Balloc+0x78>)
 8005996:	4818      	ldr	r0, [pc, #96]	@ (80059f8 <_Balloc+0x7c>)
 8005998:	f000 fc28 	bl	80061ec <__assert_func>
 800599c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059a0:	6006      	str	r6, [r0, #0]
 80059a2:	60c6      	str	r6, [r0, #12]
 80059a4:	69e6      	ldr	r6, [r4, #28]
 80059a6:	68f3      	ldr	r3, [r6, #12]
 80059a8:	b183      	cbz	r3, 80059cc <_Balloc+0x50>
 80059aa:	69e3      	ldr	r3, [r4, #28]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059b2:	b9b8      	cbnz	r0, 80059e4 <_Balloc+0x68>
 80059b4:	2101      	movs	r1, #1
 80059b6:	fa01 f605 	lsl.w	r6, r1, r5
 80059ba:	1d72      	adds	r2, r6, #5
 80059bc:	4620      	mov	r0, r4
 80059be:	0092      	lsls	r2, r2, #2
 80059c0:	f000 fc32 	bl	8006228 <_calloc_r>
 80059c4:	b160      	cbz	r0, 80059e0 <_Balloc+0x64>
 80059c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059ca:	e00e      	b.n	80059ea <_Balloc+0x6e>
 80059cc:	2221      	movs	r2, #33	@ 0x21
 80059ce:	2104      	movs	r1, #4
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 fc29 	bl	8006228 <_calloc_r>
 80059d6:	69e3      	ldr	r3, [r4, #28]
 80059d8:	60f0      	str	r0, [r6, #12]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e4      	bne.n	80059aa <_Balloc+0x2e>
 80059e0:	2000      	movs	r0, #0
 80059e2:	bd70      	pop	{r4, r5, r6, pc}
 80059e4:	6802      	ldr	r2, [r0, #0]
 80059e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059ea:	2300      	movs	r3, #0
 80059ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059f0:	e7f7      	b.n	80059e2 <_Balloc+0x66>
 80059f2:	bf00      	nop
 80059f4:	08006878 	.word	0x08006878
 80059f8:	080068f8 	.word	0x080068f8

080059fc <_Bfree>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	69c6      	ldr	r6, [r0, #28]
 8005a00:	4605      	mov	r5, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	b976      	cbnz	r6, 8005a24 <_Bfree+0x28>
 8005a06:	2010      	movs	r0, #16
 8005a08:	f7ff ff02 	bl	8005810 <malloc>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	61e8      	str	r0, [r5, #28]
 8005a10:	b920      	cbnz	r0, 8005a1c <_Bfree+0x20>
 8005a12:	218f      	movs	r1, #143	@ 0x8f
 8005a14:	4b08      	ldr	r3, [pc, #32]	@ (8005a38 <_Bfree+0x3c>)
 8005a16:	4809      	ldr	r0, [pc, #36]	@ (8005a3c <_Bfree+0x40>)
 8005a18:	f000 fbe8 	bl	80061ec <__assert_func>
 8005a1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a20:	6006      	str	r6, [r0, #0]
 8005a22:	60c6      	str	r6, [r0, #12]
 8005a24:	b13c      	cbz	r4, 8005a36 <_Bfree+0x3a>
 8005a26:	69eb      	ldr	r3, [r5, #28]
 8005a28:	6862      	ldr	r2, [r4, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a30:	6021      	str	r1, [r4, #0]
 8005a32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a36:	bd70      	pop	{r4, r5, r6, pc}
 8005a38:	08006878 	.word	0x08006878
 8005a3c:	080068f8 	.word	0x080068f8

08005a40 <__multadd>:
 8005a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a44:	4607      	mov	r7, r0
 8005a46:	460c      	mov	r4, r1
 8005a48:	461e      	mov	r6, r3
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	690d      	ldr	r5, [r1, #16]
 8005a4e:	f101 0c14 	add.w	ip, r1, #20
 8005a52:	f8dc 3000 	ldr.w	r3, [ip]
 8005a56:	3001      	adds	r0, #1
 8005a58:	b299      	uxth	r1, r3
 8005a5a:	fb02 6101 	mla	r1, r2, r1, r6
 8005a5e:	0c1e      	lsrs	r6, r3, #16
 8005a60:	0c0b      	lsrs	r3, r1, #16
 8005a62:	fb02 3306 	mla	r3, r2, r6, r3
 8005a66:	b289      	uxth	r1, r1
 8005a68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a6c:	4285      	cmp	r5, r0
 8005a6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a72:	f84c 1b04 	str.w	r1, [ip], #4
 8005a76:	dcec      	bgt.n	8005a52 <__multadd+0x12>
 8005a78:	b30e      	cbz	r6, 8005abe <__multadd+0x7e>
 8005a7a:	68a3      	ldr	r3, [r4, #8]
 8005a7c:	42ab      	cmp	r3, r5
 8005a7e:	dc19      	bgt.n	8005ab4 <__multadd+0x74>
 8005a80:	6861      	ldr	r1, [r4, #4]
 8005a82:	4638      	mov	r0, r7
 8005a84:	3101      	adds	r1, #1
 8005a86:	f7ff ff79 	bl	800597c <_Balloc>
 8005a8a:	4680      	mov	r8, r0
 8005a8c:	b928      	cbnz	r0, 8005a9a <__multadd+0x5a>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	21ba      	movs	r1, #186	@ 0xba
 8005a92:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac4 <__multadd+0x84>)
 8005a94:	480c      	ldr	r0, [pc, #48]	@ (8005ac8 <__multadd+0x88>)
 8005a96:	f000 fba9 	bl	80061ec <__assert_func>
 8005a9a:	6922      	ldr	r2, [r4, #16]
 8005a9c:	f104 010c 	add.w	r1, r4, #12
 8005aa0:	3202      	adds	r2, #2
 8005aa2:	0092      	lsls	r2, r2, #2
 8005aa4:	300c      	adds	r0, #12
 8005aa6:	f7ff f80c 	bl	8004ac2 <memcpy>
 8005aaa:	4621      	mov	r1, r4
 8005aac:	4638      	mov	r0, r7
 8005aae:	f7ff ffa5 	bl	80059fc <_Bfree>
 8005ab2:	4644      	mov	r4, r8
 8005ab4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ab8:	3501      	adds	r5, #1
 8005aba:	615e      	str	r6, [r3, #20]
 8005abc:	6125      	str	r5, [r4, #16]
 8005abe:	4620      	mov	r0, r4
 8005ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac4:	080068e7 	.word	0x080068e7
 8005ac8:	080068f8 	.word	0x080068f8

08005acc <__hi0bits>:
 8005acc:	4603      	mov	r3, r0
 8005ace:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005ad2:	bf3a      	itte	cc
 8005ad4:	0403      	lslcc	r3, r0, #16
 8005ad6:	2010      	movcc	r0, #16
 8005ad8:	2000      	movcs	r0, #0
 8005ada:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ade:	bf3c      	itt	cc
 8005ae0:	021b      	lslcc	r3, r3, #8
 8005ae2:	3008      	addcc	r0, #8
 8005ae4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ae8:	bf3c      	itt	cc
 8005aea:	011b      	lslcc	r3, r3, #4
 8005aec:	3004      	addcc	r0, #4
 8005aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af2:	bf3c      	itt	cc
 8005af4:	009b      	lslcc	r3, r3, #2
 8005af6:	3002      	addcc	r0, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	db05      	blt.n	8005b08 <__hi0bits+0x3c>
 8005afc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005b00:	f100 0001 	add.w	r0, r0, #1
 8005b04:	bf08      	it	eq
 8005b06:	2020      	moveq	r0, #32
 8005b08:	4770      	bx	lr

08005b0a <__lo0bits>:
 8005b0a:	6803      	ldr	r3, [r0, #0]
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	f013 0007 	ands.w	r0, r3, #7
 8005b12:	d00b      	beq.n	8005b2c <__lo0bits+0x22>
 8005b14:	07d9      	lsls	r1, r3, #31
 8005b16:	d421      	bmi.n	8005b5c <__lo0bits+0x52>
 8005b18:	0798      	lsls	r0, r3, #30
 8005b1a:	bf49      	itett	mi
 8005b1c:	085b      	lsrmi	r3, r3, #1
 8005b1e:	089b      	lsrpl	r3, r3, #2
 8005b20:	2001      	movmi	r0, #1
 8005b22:	6013      	strmi	r3, [r2, #0]
 8005b24:	bf5c      	itt	pl
 8005b26:	2002      	movpl	r0, #2
 8005b28:	6013      	strpl	r3, [r2, #0]
 8005b2a:	4770      	bx	lr
 8005b2c:	b299      	uxth	r1, r3
 8005b2e:	b909      	cbnz	r1, 8005b34 <__lo0bits+0x2a>
 8005b30:	2010      	movs	r0, #16
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	b2d9      	uxtb	r1, r3
 8005b36:	b909      	cbnz	r1, 8005b3c <__lo0bits+0x32>
 8005b38:	3008      	adds	r0, #8
 8005b3a:	0a1b      	lsrs	r3, r3, #8
 8005b3c:	0719      	lsls	r1, r3, #28
 8005b3e:	bf04      	itt	eq
 8005b40:	091b      	lsreq	r3, r3, #4
 8005b42:	3004      	addeq	r0, #4
 8005b44:	0799      	lsls	r1, r3, #30
 8005b46:	bf04      	itt	eq
 8005b48:	089b      	lsreq	r3, r3, #2
 8005b4a:	3002      	addeq	r0, #2
 8005b4c:	07d9      	lsls	r1, r3, #31
 8005b4e:	d403      	bmi.n	8005b58 <__lo0bits+0x4e>
 8005b50:	085b      	lsrs	r3, r3, #1
 8005b52:	f100 0001 	add.w	r0, r0, #1
 8005b56:	d003      	beq.n	8005b60 <__lo0bits+0x56>
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	4770      	bx	lr
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	4770      	bx	lr
 8005b60:	2020      	movs	r0, #32
 8005b62:	4770      	bx	lr

08005b64 <__i2b>:
 8005b64:	b510      	push	{r4, lr}
 8005b66:	460c      	mov	r4, r1
 8005b68:	2101      	movs	r1, #1
 8005b6a:	f7ff ff07 	bl	800597c <_Balloc>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	b928      	cbnz	r0, 8005b7e <__i2b+0x1a>
 8005b72:	f240 1145 	movw	r1, #325	@ 0x145
 8005b76:	4b04      	ldr	r3, [pc, #16]	@ (8005b88 <__i2b+0x24>)
 8005b78:	4804      	ldr	r0, [pc, #16]	@ (8005b8c <__i2b+0x28>)
 8005b7a:	f000 fb37 	bl	80061ec <__assert_func>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	6144      	str	r4, [r0, #20]
 8005b82:	6103      	str	r3, [r0, #16]
 8005b84:	bd10      	pop	{r4, pc}
 8005b86:	bf00      	nop
 8005b88:	080068e7 	.word	0x080068e7
 8005b8c:	080068f8 	.word	0x080068f8

08005b90 <__multiply>:
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	4614      	mov	r4, r2
 8005b96:	690a      	ldr	r2, [r1, #16]
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	460f      	mov	r7, r1
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	bfa2      	ittt	ge
 8005ba0:	4623      	movge	r3, r4
 8005ba2:	460c      	movge	r4, r1
 8005ba4:	461f      	movge	r7, r3
 8005ba6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005baa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005bae:	68a3      	ldr	r3, [r4, #8]
 8005bb0:	6861      	ldr	r1, [r4, #4]
 8005bb2:	eb0a 0609 	add.w	r6, sl, r9
 8005bb6:	42b3      	cmp	r3, r6
 8005bb8:	b085      	sub	sp, #20
 8005bba:	bfb8      	it	lt
 8005bbc:	3101      	addlt	r1, #1
 8005bbe:	f7ff fedd 	bl	800597c <_Balloc>
 8005bc2:	b930      	cbnz	r0, 8005bd2 <__multiply+0x42>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005bca:	4b43      	ldr	r3, [pc, #268]	@ (8005cd8 <__multiply+0x148>)
 8005bcc:	4843      	ldr	r0, [pc, #268]	@ (8005cdc <__multiply+0x14c>)
 8005bce:	f000 fb0d 	bl	80061ec <__assert_func>
 8005bd2:	f100 0514 	add.w	r5, r0, #20
 8005bd6:	462b      	mov	r3, r5
 8005bd8:	2200      	movs	r2, #0
 8005bda:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005bde:	4543      	cmp	r3, r8
 8005be0:	d321      	bcc.n	8005c26 <__multiply+0x96>
 8005be2:	f107 0114 	add.w	r1, r7, #20
 8005be6:	f104 0214 	add.w	r2, r4, #20
 8005bea:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005bee:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005bf2:	9302      	str	r3, [sp, #8]
 8005bf4:	1b13      	subs	r3, r2, r4
 8005bf6:	3b15      	subs	r3, #21
 8005bf8:	f023 0303 	bic.w	r3, r3, #3
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	f104 0715 	add.w	r7, r4, #21
 8005c02:	42ba      	cmp	r2, r7
 8005c04:	bf38      	it	cc
 8005c06:	2304      	movcc	r3, #4
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	9b02      	ldr	r3, [sp, #8]
 8005c0c:	9103      	str	r1, [sp, #12]
 8005c0e:	428b      	cmp	r3, r1
 8005c10:	d80c      	bhi.n	8005c2c <__multiply+0x9c>
 8005c12:	2e00      	cmp	r6, #0
 8005c14:	dd03      	ble.n	8005c1e <__multiply+0x8e>
 8005c16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d05a      	beq.n	8005cd4 <__multiply+0x144>
 8005c1e:	6106      	str	r6, [r0, #16]
 8005c20:	b005      	add	sp, #20
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	f843 2b04 	str.w	r2, [r3], #4
 8005c2a:	e7d8      	b.n	8005bde <__multiply+0x4e>
 8005c2c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005c30:	f1ba 0f00 	cmp.w	sl, #0
 8005c34:	d023      	beq.n	8005c7e <__multiply+0xee>
 8005c36:	46a9      	mov	r9, r5
 8005c38:	f04f 0c00 	mov.w	ip, #0
 8005c3c:	f104 0e14 	add.w	lr, r4, #20
 8005c40:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005c44:	f8d9 3000 	ldr.w	r3, [r9]
 8005c48:	fa1f fb87 	uxth.w	fp, r7
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005c52:	4463      	add	r3, ip
 8005c54:	f8d9 c000 	ldr.w	ip, [r9]
 8005c58:	0c3f      	lsrs	r7, r7, #16
 8005c5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005c5e:	fb0a c707 	mla	r7, sl, r7, ip
 8005c62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005c6c:	4572      	cmp	r2, lr
 8005c6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005c72:	f849 3b04 	str.w	r3, [r9], #4
 8005c76:	d8e3      	bhi.n	8005c40 <__multiply+0xb0>
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	f845 c003 	str.w	ip, [r5, r3]
 8005c7e:	9b03      	ldr	r3, [sp, #12]
 8005c80:	3104      	adds	r1, #4
 8005c82:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005c86:	f1b9 0f00 	cmp.w	r9, #0
 8005c8a:	d021      	beq.n	8005cd0 <__multiply+0x140>
 8005c8c:	46ae      	mov	lr, r5
 8005c8e:	f04f 0a00 	mov.w	sl, #0
 8005c92:	682b      	ldr	r3, [r5, #0]
 8005c94:	f104 0c14 	add.w	ip, r4, #20
 8005c98:	f8bc b000 	ldrh.w	fp, [ip]
 8005c9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	fb09 770b 	mla	r7, r9, fp, r7
 8005ca6:	4457      	add	r7, sl
 8005ca8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005cac:	f84e 3b04 	str.w	r3, [lr], #4
 8005cb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005cb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cb8:	f8be 3000 	ldrh.w	r3, [lr]
 8005cbc:	4562      	cmp	r2, ip
 8005cbe:	fb09 330a 	mla	r3, r9, sl, r3
 8005cc2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005cc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cca:	d8e5      	bhi.n	8005c98 <__multiply+0x108>
 8005ccc:	9f01      	ldr	r7, [sp, #4]
 8005cce:	51eb      	str	r3, [r5, r7]
 8005cd0:	3504      	adds	r5, #4
 8005cd2:	e79a      	b.n	8005c0a <__multiply+0x7a>
 8005cd4:	3e01      	subs	r6, #1
 8005cd6:	e79c      	b.n	8005c12 <__multiply+0x82>
 8005cd8:	080068e7 	.word	0x080068e7
 8005cdc:	080068f8 	.word	0x080068f8

08005ce0 <__pow5mult>:
 8005ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce4:	4615      	mov	r5, r2
 8005ce6:	f012 0203 	ands.w	r2, r2, #3
 8005cea:	4607      	mov	r7, r0
 8005cec:	460e      	mov	r6, r1
 8005cee:	d007      	beq.n	8005d00 <__pow5mult+0x20>
 8005cf0:	4c25      	ldr	r4, [pc, #148]	@ (8005d88 <__pow5mult+0xa8>)
 8005cf2:	3a01      	subs	r2, #1
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cfa:	f7ff fea1 	bl	8005a40 <__multadd>
 8005cfe:	4606      	mov	r6, r0
 8005d00:	10ad      	asrs	r5, r5, #2
 8005d02:	d03d      	beq.n	8005d80 <__pow5mult+0xa0>
 8005d04:	69fc      	ldr	r4, [r7, #28]
 8005d06:	b97c      	cbnz	r4, 8005d28 <__pow5mult+0x48>
 8005d08:	2010      	movs	r0, #16
 8005d0a:	f7ff fd81 	bl	8005810 <malloc>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	61f8      	str	r0, [r7, #28]
 8005d12:	b928      	cbnz	r0, 8005d20 <__pow5mult+0x40>
 8005d14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005d18:	4b1c      	ldr	r3, [pc, #112]	@ (8005d8c <__pow5mult+0xac>)
 8005d1a:	481d      	ldr	r0, [pc, #116]	@ (8005d90 <__pow5mult+0xb0>)
 8005d1c:	f000 fa66 	bl	80061ec <__assert_func>
 8005d20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d24:	6004      	str	r4, [r0, #0]
 8005d26:	60c4      	str	r4, [r0, #12]
 8005d28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005d2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d30:	b94c      	cbnz	r4, 8005d46 <__pow5mult+0x66>
 8005d32:	f240 2171 	movw	r1, #625	@ 0x271
 8005d36:	4638      	mov	r0, r7
 8005d38:	f7ff ff14 	bl	8005b64 <__i2b>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4604      	mov	r4, r0
 8005d40:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d44:	6003      	str	r3, [r0, #0]
 8005d46:	f04f 0900 	mov.w	r9, #0
 8005d4a:	07eb      	lsls	r3, r5, #31
 8005d4c:	d50a      	bpl.n	8005d64 <__pow5mult+0x84>
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4622      	mov	r2, r4
 8005d52:	4638      	mov	r0, r7
 8005d54:	f7ff ff1c 	bl	8005b90 <__multiply>
 8005d58:	4680      	mov	r8, r0
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	f7ff fe4d 	bl	80059fc <_Bfree>
 8005d62:	4646      	mov	r6, r8
 8005d64:	106d      	asrs	r5, r5, #1
 8005d66:	d00b      	beq.n	8005d80 <__pow5mult+0xa0>
 8005d68:	6820      	ldr	r0, [r4, #0]
 8005d6a:	b938      	cbnz	r0, 8005d7c <__pow5mult+0x9c>
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4638      	mov	r0, r7
 8005d72:	f7ff ff0d 	bl	8005b90 <__multiply>
 8005d76:	6020      	str	r0, [r4, #0]
 8005d78:	f8c0 9000 	str.w	r9, [r0]
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	e7e4      	b.n	8005d4a <__pow5mult+0x6a>
 8005d80:	4630      	mov	r0, r6
 8005d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d86:	bf00      	nop
 8005d88:	08006954 	.word	0x08006954
 8005d8c:	08006878 	.word	0x08006878
 8005d90:	080068f8 	.word	0x080068f8

08005d94 <__lshift>:
 8005d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d98:	460c      	mov	r4, r1
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	4691      	mov	r9, r2
 8005d9e:	6923      	ldr	r3, [r4, #16]
 8005da0:	6849      	ldr	r1, [r1, #4]
 8005da2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005da6:	68a3      	ldr	r3, [r4, #8]
 8005da8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005dac:	f108 0601 	add.w	r6, r8, #1
 8005db0:	42b3      	cmp	r3, r6
 8005db2:	db0b      	blt.n	8005dcc <__lshift+0x38>
 8005db4:	4638      	mov	r0, r7
 8005db6:	f7ff fde1 	bl	800597c <_Balloc>
 8005dba:	4605      	mov	r5, r0
 8005dbc:	b948      	cbnz	r0, 8005dd2 <__lshift+0x3e>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005dc4:	4b27      	ldr	r3, [pc, #156]	@ (8005e64 <__lshift+0xd0>)
 8005dc6:	4828      	ldr	r0, [pc, #160]	@ (8005e68 <__lshift+0xd4>)
 8005dc8:	f000 fa10 	bl	80061ec <__assert_func>
 8005dcc:	3101      	adds	r1, #1
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	e7ee      	b.n	8005db0 <__lshift+0x1c>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f100 0114 	add.w	r1, r0, #20
 8005dd8:	f100 0210 	add.w	r2, r0, #16
 8005ddc:	4618      	mov	r0, r3
 8005dde:	4553      	cmp	r3, sl
 8005de0:	db33      	blt.n	8005e4a <__lshift+0xb6>
 8005de2:	6920      	ldr	r0, [r4, #16]
 8005de4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005de8:	f104 0314 	add.w	r3, r4, #20
 8005dec:	f019 091f 	ands.w	r9, r9, #31
 8005df0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005df4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005df8:	d02b      	beq.n	8005e52 <__lshift+0xbe>
 8005dfa:	468a      	mov	sl, r1
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f1c9 0e20 	rsb	lr, r9, #32
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	fa00 f009 	lsl.w	r0, r0, r9
 8005e08:	4310      	orrs	r0, r2
 8005e0a:	f84a 0b04 	str.w	r0, [sl], #4
 8005e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e12:	459c      	cmp	ip, r3
 8005e14:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e18:	d8f3      	bhi.n	8005e02 <__lshift+0x6e>
 8005e1a:	ebac 0304 	sub.w	r3, ip, r4
 8005e1e:	3b15      	subs	r3, #21
 8005e20:	f023 0303 	bic.w	r3, r3, #3
 8005e24:	3304      	adds	r3, #4
 8005e26:	f104 0015 	add.w	r0, r4, #21
 8005e2a:	4584      	cmp	ip, r0
 8005e2c:	bf38      	it	cc
 8005e2e:	2304      	movcc	r3, #4
 8005e30:	50ca      	str	r2, [r1, r3]
 8005e32:	b10a      	cbz	r2, 8005e38 <__lshift+0xa4>
 8005e34:	f108 0602 	add.w	r6, r8, #2
 8005e38:	3e01      	subs	r6, #1
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	612e      	str	r6, [r5, #16]
 8005e40:	f7ff fddc 	bl	80059fc <_Bfree>
 8005e44:	4628      	mov	r0, r5
 8005e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e4e:	3301      	adds	r3, #1
 8005e50:	e7c5      	b.n	8005dde <__lshift+0x4a>
 8005e52:	3904      	subs	r1, #4
 8005e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e58:	459c      	cmp	ip, r3
 8005e5a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e5e:	d8f9      	bhi.n	8005e54 <__lshift+0xc0>
 8005e60:	e7ea      	b.n	8005e38 <__lshift+0xa4>
 8005e62:	bf00      	nop
 8005e64:	080068e7 	.word	0x080068e7
 8005e68:	080068f8 	.word	0x080068f8

08005e6c <__mcmp>:
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	690a      	ldr	r2, [r1, #16]
 8005e70:	6900      	ldr	r0, [r0, #16]
 8005e72:	b530      	push	{r4, r5, lr}
 8005e74:	1a80      	subs	r0, r0, r2
 8005e76:	d10e      	bne.n	8005e96 <__mcmp+0x2a>
 8005e78:	3314      	adds	r3, #20
 8005e7a:	3114      	adds	r1, #20
 8005e7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e8c:	4295      	cmp	r5, r2
 8005e8e:	d003      	beq.n	8005e98 <__mcmp+0x2c>
 8005e90:	d205      	bcs.n	8005e9e <__mcmp+0x32>
 8005e92:	f04f 30ff 	mov.w	r0, #4294967295
 8005e96:	bd30      	pop	{r4, r5, pc}
 8005e98:	42a3      	cmp	r3, r4
 8005e9a:	d3f3      	bcc.n	8005e84 <__mcmp+0x18>
 8005e9c:	e7fb      	b.n	8005e96 <__mcmp+0x2a>
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	e7f9      	b.n	8005e96 <__mcmp+0x2a>
	...

08005ea4 <__mdiff>:
 8005ea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea8:	4689      	mov	r9, r1
 8005eaa:	4606      	mov	r6, r0
 8005eac:	4611      	mov	r1, r2
 8005eae:	4648      	mov	r0, r9
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	f7ff ffdb 	bl	8005e6c <__mcmp>
 8005eb6:	1e05      	subs	r5, r0, #0
 8005eb8:	d112      	bne.n	8005ee0 <__mdiff+0x3c>
 8005eba:	4629      	mov	r1, r5
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f7ff fd5d 	bl	800597c <_Balloc>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	b928      	cbnz	r0, 8005ed2 <__mdiff+0x2e>
 8005ec6:	f240 2137 	movw	r1, #567	@ 0x237
 8005eca:	4b3e      	ldr	r3, [pc, #248]	@ (8005fc4 <__mdiff+0x120>)
 8005ecc:	483e      	ldr	r0, [pc, #248]	@ (8005fc8 <__mdiff+0x124>)
 8005ece:	f000 f98d 	bl	80061ec <__assert_func>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ed8:	4610      	mov	r0, r2
 8005eda:	b003      	add	sp, #12
 8005edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee0:	bfbc      	itt	lt
 8005ee2:	464b      	movlt	r3, r9
 8005ee4:	46a1      	movlt	r9, r4
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005eec:	bfba      	itte	lt
 8005eee:	461c      	movlt	r4, r3
 8005ef0:	2501      	movlt	r5, #1
 8005ef2:	2500      	movge	r5, #0
 8005ef4:	f7ff fd42 	bl	800597c <_Balloc>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	b918      	cbnz	r0, 8005f04 <__mdiff+0x60>
 8005efc:	f240 2145 	movw	r1, #581	@ 0x245
 8005f00:	4b30      	ldr	r3, [pc, #192]	@ (8005fc4 <__mdiff+0x120>)
 8005f02:	e7e3      	b.n	8005ecc <__mdiff+0x28>
 8005f04:	f100 0b14 	add.w	fp, r0, #20
 8005f08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005f0c:	f109 0310 	add.w	r3, r9, #16
 8005f10:	60c5      	str	r5, [r0, #12]
 8005f12:	f04f 0c00 	mov.w	ip, #0
 8005f16:	f109 0514 	add.w	r5, r9, #20
 8005f1a:	46d9      	mov	r9, fp
 8005f1c:	6926      	ldr	r6, [r4, #16]
 8005f1e:	f104 0e14 	add.w	lr, r4, #20
 8005f22:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005f26:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	9b01      	ldr	r3, [sp, #4]
 8005f2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005f32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005f36:	b281      	uxth	r1, r0
 8005f38:	9301      	str	r3, [sp, #4]
 8005f3a:	fa1f f38a 	uxth.w	r3, sl
 8005f3e:	1a5b      	subs	r3, r3, r1
 8005f40:	0c00      	lsrs	r0, r0, #16
 8005f42:	4463      	add	r3, ip
 8005f44:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005f48:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005f52:	4576      	cmp	r6, lr
 8005f54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f58:	f849 3b04 	str.w	r3, [r9], #4
 8005f5c:	d8e6      	bhi.n	8005f2c <__mdiff+0x88>
 8005f5e:	1b33      	subs	r3, r6, r4
 8005f60:	3b15      	subs	r3, #21
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	3415      	adds	r4, #21
 8005f68:	3304      	adds	r3, #4
 8005f6a:	42a6      	cmp	r6, r4
 8005f6c:	bf38      	it	cc
 8005f6e:	2304      	movcc	r3, #4
 8005f70:	441d      	add	r5, r3
 8005f72:	445b      	add	r3, fp
 8005f74:	461e      	mov	r6, r3
 8005f76:	462c      	mov	r4, r5
 8005f78:	4544      	cmp	r4, r8
 8005f7a:	d30e      	bcc.n	8005f9a <__mdiff+0xf6>
 8005f7c:	f108 0103 	add.w	r1, r8, #3
 8005f80:	1b49      	subs	r1, r1, r5
 8005f82:	f021 0103 	bic.w	r1, r1, #3
 8005f86:	3d03      	subs	r5, #3
 8005f88:	45a8      	cmp	r8, r5
 8005f8a:	bf38      	it	cc
 8005f8c:	2100      	movcc	r1, #0
 8005f8e:	440b      	add	r3, r1
 8005f90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f94:	b199      	cbz	r1, 8005fbe <__mdiff+0x11a>
 8005f96:	6117      	str	r7, [r2, #16]
 8005f98:	e79e      	b.n	8005ed8 <__mdiff+0x34>
 8005f9a:	46e6      	mov	lr, ip
 8005f9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005fa0:	fa1f fc81 	uxth.w	ip, r1
 8005fa4:	44f4      	add	ip, lr
 8005fa6:	0c08      	lsrs	r0, r1, #16
 8005fa8:	4471      	add	r1, lr
 8005faa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005fae:	b289      	uxth	r1, r1
 8005fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005fb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005fb8:	f846 1b04 	str.w	r1, [r6], #4
 8005fbc:	e7dc      	b.n	8005f78 <__mdiff+0xd4>
 8005fbe:	3f01      	subs	r7, #1
 8005fc0:	e7e6      	b.n	8005f90 <__mdiff+0xec>
 8005fc2:	bf00      	nop
 8005fc4:	080068e7 	.word	0x080068e7
 8005fc8:	080068f8 	.word	0x080068f8

08005fcc <__d2b>:
 8005fcc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	4690      	mov	r8, r2
 8005fd4:	4699      	mov	r9, r3
 8005fd6:	9e08      	ldr	r6, [sp, #32]
 8005fd8:	f7ff fcd0 	bl	800597c <_Balloc>
 8005fdc:	4604      	mov	r4, r0
 8005fde:	b930      	cbnz	r0, 8005fee <__d2b+0x22>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	f240 310f 	movw	r1, #783	@ 0x30f
 8005fe6:	4b23      	ldr	r3, [pc, #140]	@ (8006074 <__d2b+0xa8>)
 8005fe8:	4823      	ldr	r0, [pc, #140]	@ (8006078 <__d2b+0xac>)
 8005fea:	f000 f8ff 	bl	80061ec <__assert_func>
 8005fee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ff2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ff6:	b10d      	cbz	r5, 8005ffc <__d2b+0x30>
 8005ff8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ffc:	9301      	str	r3, [sp, #4]
 8005ffe:	f1b8 0300 	subs.w	r3, r8, #0
 8006002:	d024      	beq.n	800604e <__d2b+0x82>
 8006004:	4668      	mov	r0, sp
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	f7ff fd7f 	bl	8005b0a <__lo0bits>
 800600c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006010:	b1d8      	cbz	r0, 800604a <__d2b+0x7e>
 8006012:	f1c0 0320 	rsb	r3, r0, #32
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	430b      	orrs	r3, r1
 800601c:	40c2      	lsrs	r2, r0
 800601e:	6163      	str	r3, [r4, #20]
 8006020:	9201      	str	r2, [sp, #4]
 8006022:	9b01      	ldr	r3, [sp, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	bf0c      	ite	eq
 8006028:	2201      	moveq	r2, #1
 800602a:	2202      	movne	r2, #2
 800602c:	61a3      	str	r3, [r4, #24]
 800602e:	6122      	str	r2, [r4, #16]
 8006030:	b1ad      	cbz	r5, 800605e <__d2b+0x92>
 8006032:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006036:	4405      	add	r5, r0
 8006038:	6035      	str	r5, [r6, #0]
 800603a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800603e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006040:	6018      	str	r0, [r3, #0]
 8006042:	4620      	mov	r0, r4
 8006044:	b002      	add	sp, #8
 8006046:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800604a:	6161      	str	r1, [r4, #20]
 800604c:	e7e9      	b.n	8006022 <__d2b+0x56>
 800604e:	a801      	add	r0, sp, #4
 8006050:	f7ff fd5b 	bl	8005b0a <__lo0bits>
 8006054:	9b01      	ldr	r3, [sp, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	6163      	str	r3, [r4, #20]
 800605a:	3020      	adds	r0, #32
 800605c:	e7e7      	b.n	800602e <__d2b+0x62>
 800605e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006062:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006066:	6030      	str	r0, [r6, #0]
 8006068:	6918      	ldr	r0, [r3, #16]
 800606a:	f7ff fd2f 	bl	8005acc <__hi0bits>
 800606e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006072:	e7e4      	b.n	800603e <__d2b+0x72>
 8006074:	080068e7 	.word	0x080068e7
 8006078:	080068f8 	.word	0x080068f8

0800607c <__sflush_r>:
 800607c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	0716      	lsls	r6, r2, #28
 8006084:	4605      	mov	r5, r0
 8006086:	460c      	mov	r4, r1
 8006088:	d454      	bmi.n	8006134 <__sflush_r+0xb8>
 800608a:	684b      	ldr	r3, [r1, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	dc02      	bgt.n	8006096 <__sflush_r+0x1a>
 8006090:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	dd48      	ble.n	8006128 <__sflush_r+0xac>
 8006096:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006098:	2e00      	cmp	r6, #0
 800609a:	d045      	beq.n	8006128 <__sflush_r+0xac>
 800609c:	2300      	movs	r3, #0
 800609e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80060a2:	682f      	ldr	r7, [r5, #0]
 80060a4:	6a21      	ldr	r1, [r4, #32]
 80060a6:	602b      	str	r3, [r5, #0]
 80060a8:	d030      	beq.n	800610c <__sflush_r+0x90>
 80060aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	0759      	lsls	r1, r3, #29
 80060b0:	d505      	bpl.n	80060be <__sflush_r+0x42>
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	1ad2      	subs	r2, r2, r3
 80060b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060b8:	b10b      	cbz	r3, 80060be <__sflush_r+0x42>
 80060ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060bc:	1ad2      	subs	r2, r2, r3
 80060be:	2300      	movs	r3, #0
 80060c0:	4628      	mov	r0, r5
 80060c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060c4:	6a21      	ldr	r1, [r4, #32]
 80060c6:	47b0      	blx	r6
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	d106      	bne.n	80060dc <__sflush_r+0x60>
 80060ce:	6829      	ldr	r1, [r5, #0]
 80060d0:	291d      	cmp	r1, #29
 80060d2:	d82b      	bhi.n	800612c <__sflush_r+0xb0>
 80060d4:	4a28      	ldr	r2, [pc, #160]	@ (8006178 <__sflush_r+0xfc>)
 80060d6:	410a      	asrs	r2, r1
 80060d8:	07d6      	lsls	r6, r2, #31
 80060da:	d427      	bmi.n	800612c <__sflush_r+0xb0>
 80060dc:	2200      	movs	r2, #0
 80060de:	6062      	str	r2, [r4, #4]
 80060e0:	6922      	ldr	r2, [r4, #16]
 80060e2:	04d9      	lsls	r1, r3, #19
 80060e4:	6022      	str	r2, [r4, #0]
 80060e6:	d504      	bpl.n	80060f2 <__sflush_r+0x76>
 80060e8:	1c42      	adds	r2, r0, #1
 80060ea:	d101      	bne.n	80060f0 <__sflush_r+0x74>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	b903      	cbnz	r3, 80060f2 <__sflush_r+0x76>
 80060f0:	6560      	str	r0, [r4, #84]	@ 0x54
 80060f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060f4:	602f      	str	r7, [r5, #0]
 80060f6:	b1b9      	cbz	r1, 8006128 <__sflush_r+0xac>
 80060f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060fc:	4299      	cmp	r1, r3
 80060fe:	d002      	beq.n	8006106 <__sflush_r+0x8a>
 8006100:	4628      	mov	r0, r5
 8006102:	f7ff fb3d 	bl	8005780 <_free_r>
 8006106:	2300      	movs	r3, #0
 8006108:	6363      	str	r3, [r4, #52]	@ 0x34
 800610a:	e00d      	b.n	8006128 <__sflush_r+0xac>
 800610c:	2301      	movs	r3, #1
 800610e:	4628      	mov	r0, r5
 8006110:	47b0      	blx	r6
 8006112:	4602      	mov	r2, r0
 8006114:	1c50      	adds	r0, r2, #1
 8006116:	d1c9      	bne.n	80060ac <__sflush_r+0x30>
 8006118:	682b      	ldr	r3, [r5, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0c6      	beq.n	80060ac <__sflush_r+0x30>
 800611e:	2b1d      	cmp	r3, #29
 8006120:	d001      	beq.n	8006126 <__sflush_r+0xaa>
 8006122:	2b16      	cmp	r3, #22
 8006124:	d11d      	bne.n	8006162 <__sflush_r+0xe6>
 8006126:	602f      	str	r7, [r5, #0]
 8006128:	2000      	movs	r0, #0
 800612a:	e021      	b.n	8006170 <__sflush_r+0xf4>
 800612c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006130:	b21b      	sxth	r3, r3
 8006132:	e01a      	b.n	800616a <__sflush_r+0xee>
 8006134:	690f      	ldr	r7, [r1, #16]
 8006136:	2f00      	cmp	r7, #0
 8006138:	d0f6      	beq.n	8006128 <__sflush_r+0xac>
 800613a:	0793      	lsls	r3, r2, #30
 800613c:	bf18      	it	ne
 800613e:	2300      	movne	r3, #0
 8006140:	680e      	ldr	r6, [r1, #0]
 8006142:	bf08      	it	eq
 8006144:	694b      	ldreq	r3, [r1, #20]
 8006146:	1bf6      	subs	r6, r6, r7
 8006148:	600f      	str	r7, [r1, #0]
 800614a:	608b      	str	r3, [r1, #8]
 800614c:	2e00      	cmp	r6, #0
 800614e:	ddeb      	ble.n	8006128 <__sflush_r+0xac>
 8006150:	4633      	mov	r3, r6
 8006152:	463a      	mov	r2, r7
 8006154:	4628      	mov	r0, r5
 8006156:	6a21      	ldr	r1, [r4, #32]
 8006158:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800615c:	47e0      	blx	ip
 800615e:	2800      	cmp	r0, #0
 8006160:	dc07      	bgt.n	8006172 <__sflush_r+0xf6>
 8006162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800616a:	f04f 30ff 	mov.w	r0, #4294967295
 800616e:	81a3      	strh	r3, [r4, #12]
 8006170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006172:	4407      	add	r7, r0
 8006174:	1a36      	subs	r6, r6, r0
 8006176:	e7e9      	b.n	800614c <__sflush_r+0xd0>
 8006178:	dfbffffe 	.word	0xdfbffffe

0800617c <_fflush_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	690b      	ldr	r3, [r1, #16]
 8006180:	4605      	mov	r5, r0
 8006182:	460c      	mov	r4, r1
 8006184:	b913      	cbnz	r3, 800618c <_fflush_r+0x10>
 8006186:	2500      	movs	r5, #0
 8006188:	4628      	mov	r0, r5
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	b118      	cbz	r0, 8006196 <_fflush_r+0x1a>
 800618e:	6a03      	ldr	r3, [r0, #32]
 8006190:	b90b      	cbnz	r3, 8006196 <_fflush_r+0x1a>
 8006192:	f7fe fb8f 	bl	80048b4 <__sinit>
 8006196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f3      	beq.n	8006186 <_fflush_r+0xa>
 800619e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061a0:	07d0      	lsls	r0, r2, #31
 80061a2:	d404      	bmi.n	80061ae <_fflush_r+0x32>
 80061a4:	0599      	lsls	r1, r3, #22
 80061a6:	d402      	bmi.n	80061ae <_fflush_r+0x32>
 80061a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061aa:	f7fe fc7a 	bl	8004aa2 <__retarget_lock_acquire_recursive>
 80061ae:	4628      	mov	r0, r5
 80061b0:	4621      	mov	r1, r4
 80061b2:	f7ff ff63 	bl	800607c <__sflush_r>
 80061b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061b8:	4605      	mov	r5, r0
 80061ba:	07da      	lsls	r2, r3, #31
 80061bc:	d4e4      	bmi.n	8006188 <_fflush_r+0xc>
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	059b      	lsls	r3, r3, #22
 80061c2:	d4e1      	bmi.n	8006188 <_fflush_r+0xc>
 80061c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061c6:	f7fe fc6d 	bl	8004aa4 <__retarget_lock_release_recursive>
 80061ca:	e7dd      	b.n	8006188 <_fflush_r+0xc>

080061cc <_sbrk_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	2300      	movs	r3, #0
 80061d0:	4d05      	ldr	r5, [pc, #20]	@ (80061e8 <_sbrk_r+0x1c>)
 80061d2:	4604      	mov	r4, r0
 80061d4:	4608      	mov	r0, r1
 80061d6:	602b      	str	r3, [r5, #0]
 80061d8:	f7fb fbf4 	bl	80019c4 <_sbrk>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_sbrk_r+0x1a>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_sbrk_r+0x1a>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	20000510 	.word	0x20000510

080061ec <__assert_func>:
 80061ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061ee:	4614      	mov	r4, r2
 80061f0:	461a      	mov	r2, r3
 80061f2:	4b09      	ldr	r3, [pc, #36]	@ (8006218 <__assert_func+0x2c>)
 80061f4:	4605      	mov	r5, r0
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68d8      	ldr	r0, [r3, #12]
 80061fa:	b954      	cbnz	r4, 8006212 <__assert_func+0x26>
 80061fc:	4b07      	ldr	r3, [pc, #28]	@ (800621c <__assert_func+0x30>)
 80061fe:	461c      	mov	r4, r3
 8006200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006204:	9100      	str	r1, [sp, #0]
 8006206:	462b      	mov	r3, r5
 8006208:	4905      	ldr	r1, [pc, #20]	@ (8006220 <__assert_func+0x34>)
 800620a:	f000 f841 	bl	8006290 <fiprintf>
 800620e:	f000 f851 	bl	80062b4 <abort>
 8006212:	4b04      	ldr	r3, [pc, #16]	@ (8006224 <__assert_func+0x38>)
 8006214:	e7f4      	b.n	8006200 <__assert_func+0x14>
 8006216:	bf00      	nop
 8006218:	2000000c 	.word	0x2000000c
 800621c:	08006a95 	.word	0x08006a95
 8006220:	08006a67 	.word	0x08006a67
 8006224:	08006a5a 	.word	0x08006a5a

08006228 <_calloc_r>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	fba1 5402 	umull	r5, r4, r1, r2
 800622e:	b93c      	cbnz	r4, 8006240 <_calloc_r+0x18>
 8006230:	4629      	mov	r1, r5
 8006232:	f7ff fb17 	bl	8005864 <_malloc_r>
 8006236:	4606      	mov	r6, r0
 8006238:	b928      	cbnz	r0, 8006246 <_calloc_r+0x1e>
 800623a:	2600      	movs	r6, #0
 800623c:	4630      	mov	r0, r6
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	220c      	movs	r2, #12
 8006242:	6002      	str	r2, [r0, #0]
 8006244:	e7f9      	b.n	800623a <_calloc_r+0x12>
 8006246:	462a      	mov	r2, r5
 8006248:	4621      	mov	r1, r4
 800624a:	f7fe fbac 	bl	80049a6 <memset>
 800624e:	e7f5      	b.n	800623c <_calloc_r+0x14>

08006250 <__ascii_mbtowc>:
 8006250:	b082      	sub	sp, #8
 8006252:	b901      	cbnz	r1, 8006256 <__ascii_mbtowc+0x6>
 8006254:	a901      	add	r1, sp, #4
 8006256:	b142      	cbz	r2, 800626a <__ascii_mbtowc+0x1a>
 8006258:	b14b      	cbz	r3, 800626e <__ascii_mbtowc+0x1e>
 800625a:	7813      	ldrb	r3, [r2, #0]
 800625c:	600b      	str	r3, [r1, #0]
 800625e:	7812      	ldrb	r2, [r2, #0]
 8006260:	1e10      	subs	r0, r2, #0
 8006262:	bf18      	it	ne
 8006264:	2001      	movne	r0, #1
 8006266:	b002      	add	sp, #8
 8006268:	4770      	bx	lr
 800626a:	4610      	mov	r0, r2
 800626c:	e7fb      	b.n	8006266 <__ascii_mbtowc+0x16>
 800626e:	f06f 0001 	mvn.w	r0, #1
 8006272:	e7f8      	b.n	8006266 <__ascii_mbtowc+0x16>

08006274 <__ascii_wctomb>:
 8006274:	4603      	mov	r3, r0
 8006276:	4608      	mov	r0, r1
 8006278:	b141      	cbz	r1, 800628c <__ascii_wctomb+0x18>
 800627a:	2aff      	cmp	r2, #255	@ 0xff
 800627c:	d904      	bls.n	8006288 <__ascii_wctomb+0x14>
 800627e:	228a      	movs	r2, #138	@ 0x8a
 8006280:	f04f 30ff 	mov.w	r0, #4294967295
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	4770      	bx	lr
 8006288:	2001      	movs	r0, #1
 800628a:	700a      	strb	r2, [r1, #0]
 800628c:	4770      	bx	lr
	...

08006290 <fiprintf>:
 8006290:	b40e      	push	{r1, r2, r3}
 8006292:	b503      	push	{r0, r1, lr}
 8006294:	4601      	mov	r1, r0
 8006296:	ab03      	add	r3, sp, #12
 8006298:	4805      	ldr	r0, [pc, #20]	@ (80062b0 <fiprintf+0x20>)
 800629a:	f853 2b04 	ldr.w	r2, [r3], #4
 800629e:	6800      	ldr	r0, [r0, #0]
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	f000 f835 	bl	8006310 <_vfiprintf_r>
 80062a6:	b002      	add	sp, #8
 80062a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80062ac:	b003      	add	sp, #12
 80062ae:	4770      	bx	lr
 80062b0:	2000000c 	.word	0x2000000c

080062b4 <abort>:
 80062b4:	2006      	movs	r0, #6
 80062b6:	b508      	push	{r3, lr}
 80062b8:	f000 f9fe 	bl	80066b8 <raise>
 80062bc:	2001      	movs	r0, #1
 80062be:	f7fb fb0d 	bl	80018dc <_exit>

080062c2 <__sfputc_r>:
 80062c2:	6893      	ldr	r3, [r2, #8]
 80062c4:	b410      	push	{r4}
 80062c6:	3b01      	subs	r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	6093      	str	r3, [r2, #8]
 80062cc:	da07      	bge.n	80062de <__sfputc_r+0x1c>
 80062ce:	6994      	ldr	r4, [r2, #24]
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	db01      	blt.n	80062d8 <__sfputc_r+0x16>
 80062d4:	290a      	cmp	r1, #10
 80062d6:	d102      	bne.n	80062de <__sfputc_r+0x1c>
 80062d8:	bc10      	pop	{r4}
 80062da:	f000 b931 	b.w	8006540 <__swbuf_r>
 80062de:	6813      	ldr	r3, [r2, #0]
 80062e0:	1c58      	adds	r0, r3, #1
 80062e2:	6010      	str	r0, [r2, #0]
 80062e4:	7019      	strb	r1, [r3, #0]
 80062e6:	4608      	mov	r0, r1
 80062e8:	bc10      	pop	{r4}
 80062ea:	4770      	bx	lr

080062ec <__sfputs_r>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	4606      	mov	r6, r0
 80062f0:	460f      	mov	r7, r1
 80062f2:	4614      	mov	r4, r2
 80062f4:	18d5      	adds	r5, r2, r3
 80062f6:	42ac      	cmp	r4, r5
 80062f8:	d101      	bne.n	80062fe <__sfputs_r+0x12>
 80062fa:	2000      	movs	r0, #0
 80062fc:	e007      	b.n	800630e <__sfputs_r+0x22>
 80062fe:	463a      	mov	r2, r7
 8006300:	4630      	mov	r0, r6
 8006302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006306:	f7ff ffdc 	bl	80062c2 <__sfputc_r>
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	d1f3      	bne.n	80062f6 <__sfputs_r+0xa>
 800630e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006310 <_vfiprintf_r>:
 8006310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	460d      	mov	r5, r1
 8006316:	4614      	mov	r4, r2
 8006318:	4698      	mov	r8, r3
 800631a:	4606      	mov	r6, r0
 800631c:	b09d      	sub	sp, #116	@ 0x74
 800631e:	b118      	cbz	r0, 8006328 <_vfiprintf_r+0x18>
 8006320:	6a03      	ldr	r3, [r0, #32]
 8006322:	b90b      	cbnz	r3, 8006328 <_vfiprintf_r+0x18>
 8006324:	f7fe fac6 	bl	80048b4 <__sinit>
 8006328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800632a:	07d9      	lsls	r1, r3, #31
 800632c:	d405      	bmi.n	800633a <_vfiprintf_r+0x2a>
 800632e:	89ab      	ldrh	r3, [r5, #12]
 8006330:	059a      	lsls	r2, r3, #22
 8006332:	d402      	bmi.n	800633a <_vfiprintf_r+0x2a>
 8006334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006336:	f7fe fbb4 	bl	8004aa2 <__retarget_lock_acquire_recursive>
 800633a:	89ab      	ldrh	r3, [r5, #12]
 800633c:	071b      	lsls	r3, r3, #28
 800633e:	d501      	bpl.n	8006344 <_vfiprintf_r+0x34>
 8006340:	692b      	ldr	r3, [r5, #16]
 8006342:	b99b      	cbnz	r3, 800636c <_vfiprintf_r+0x5c>
 8006344:	4629      	mov	r1, r5
 8006346:	4630      	mov	r0, r6
 8006348:	f000 f938 	bl	80065bc <__swsetup_r>
 800634c:	b170      	cbz	r0, 800636c <_vfiprintf_r+0x5c>
 800634e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006350:	07dc      	lsls	r4, r3, #31
 8006352:	d504      	bpl.n	800635e <_vfiprintf_r+0x4e>
 8006354:	f04f 30ff 	mov.w	r0, #4294967295
 8006358:	b01d      	add	sp, #116	@ 0x74
 800635a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635e:	89ab      	ldrh	r3, [r5, #12]
 8006360:	0598      	lsls	r0, r3, #22
 8006362:	d4f7      	bmi.n	8006354 <_vfiprintf_r+0x44>
 8006364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006366:	f7fe fb9d 	bl	8004aa4 <__retarget_lock_release_recursive>
 800636a:	e7f3      	b.n	8006354 <_vfiprintf_r+0x44>
 800636c:	2300      	movs	r3, #0
 800636e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006370:	2320      	movs	r3, #32
 8006372:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006376:	2330      	movs	r3, #48	@ 0x30
 8006378:	f04f 0901 	mov.w	r9, #1
 800637c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006380:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800652c <_vfiprintf_r+0x21c>
 8006384:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006388:	4623      	mov	r3, r4
 800638a:	469a      	mov	sl, r3
 800638c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006390:	b10a      	cbz	r2, 8006396 <_vfiprintf_r+0x86>
 8006392:	2a25      	cmp	r2, #37	@ 0x25
 8006394:	d1f9      	bne.n	800638a <_vfiprintf_r+0x7a>
 8006396:	ebba 0b04 	subs.w	fp, sl, r4
 800639a:	d00b      	beq.n	80063b4 <_vfiprintf_r+0xa4>
 800639c:	465b      	mov	r3, fp
 800639e:	4622      	mov	r2, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	4630      	mov	r0, r6
 80063a4:	f7ff ffa2 	bl	80062ec <__sfputs_r>
 80063a8:	3001      	adds	r0, #1
 80063aa:	f000 80a7 	beq.w	80064fc <_vfiprintf_r+0x1ec>
 80063ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063b0:	445a      	add	r2, fp
 80063b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80063b4:	f89a 3000 	ldrb.w	r3, [sl]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 809f 	beq.w	80064fc <_vfiprintf_r+0x1ec>
 80063be:	2300      	movs	r3, #0
 80063c0:	f04f 32ff 	mov.w	r2, #4294967295
 80063c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063c8:	f10a 0a01 	add.w	sl, sl, #1
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	9307      	str	r3, [sp, #28]
 80063d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80063d6:	4654      	mov	r4, sl
 80063d8:	2205      	movs	r2, #5
 80063da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063de:	4853      	ldr	r0, [pc, #332]	@ (800652c <_vfiprintf_r+0x21c>)
 80063e0:	f7fe fb61 	bl	8004aa6 <memchr>
 80063e4:	9a04      	ldr	r2, [sp, #16]
 80063e6:	b9d8      	cbnz	r0, 8006420 <_vfiprintf_r+0x110>
 80063e8:	06d1      	lsls	r1, r2, #27
 80063ea:	bf44      	itt	mi
 80063ec:	2320      	movmi	r3, #32
 80063ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063f2:	0713      	lsls	r3, r2, #28
 80063f4:	bf44      	itt	mi
 80063f6:	232b      	movmi	r3, #43	@ 0x2b
 80063f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006400:	2b2a      	cmp	r3, #42	@ 0x2a
 8006402:	d015      	beq.n	8006430 <_vfiprintf_r+0x120>
 8006404:	4654      	mov	r4, sl
 8006406:	2000      	movs	r0, #0
 8006408:	f04f 0c0a 	mov.w	ip, #10
 800640c:	9a07      	ldr	r2, [sp, #28]
 800640e:	4621      	mov	r1, r4
 8006410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006414:	3b30      	subs	r3, #48	@ 0x30
 8006416:	2b09      	cmp	r3, #9
 8006418:	d94b      	bls.n	80064b2 <_vfiprintf_r+0x1a2>
 800641a:	b1b0      	cbz	r0, 800644a <_vfiprintf_r+0x13a>
 800641c:	9207      	str	r2, [sp, #28]
 800641e:	e014      	b.n	800644a <_vfiprintf_r+0x13a>
 8006420:	eba0 0308 	sub.w	r3, r0, r8
 8006424:	fa09 f303 	lsl.w	r3, r9, r3
 8006428:	4313      	orrs	r3, r2
 800642a:	46a2      	mov	sl, r4
 800642c:	9304      	str	r3, [sp, #16]
 800642e:	e7d2      	b.n	80063d6 <_vfiprintf_r+0xc6>
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	1d19      	adds	r1, r3, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	9103      	str	r1, [sp, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	bfbb      	ittet	lt
 800643c:	425b      	neglt	r3, r3
 800643e:	f042 0202 	orrlt.w	r2, r2, #2
 8006442:	9307      	strge	r3, [sp, #28]
 8006444:	9307      	strlt	r3, [sp, #28]
 8006446:	bfb8      	it	lt
 8006448:	9204      	strlt	r2, [sp, #16]
 800644a:	7823      	ldrb	r3, [r4, #0]
 800644c:	2b2e      	cmp	r3, #46	@ 0x2e
 800644e:	d10a      	bne.n	8006466 <_vfiprintf_r+0x156>
 8006450:	7863      	ldrb	r3, [r4, #1]
 8006452:	2b2a      	cmp	r3, #42	@ 0x2a
 8006454:	d132      	bne.n	80064bc <_vfiprintf_r+0x1ac>
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	3402      	adds	r4, #2
 800645a:	1d1a      	adds	r2, r3, #4
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	9203      	str	r2, [sp, #12]
 8006460:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006464:	9305      	str	r3, [sp, #20]
 8006466:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006530 <_vfiprintf_r+0x220>
 800646a:	2203      	movs	r2, #3
 800646c:	4650      	mov	r0, sl
 800646e:	7821      	ldrb	r1, [r4, #0]
 8006470:	f7fe fb19 	bl	8004aa6 <memchr>
 8006474:	b138      	cbz	r0, 8006486 <_vfiprintf_r+0x176>
 8006476:	2240      	movs	r2, #64	@ 0x40
 8006478:	9b04      	ldr	r3, [sp, #16]
 800647a:	eba0 000a 	sub.w	r0, r0, sl
 800647e:	4082      	lsls	r2, r0
 8006480:	4313      	orrs	r3, r2
 8006482:	3401      	adds	r4, #1
 8006484:	9304      	str	r3, [sp, #16]
 8006486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648a:	2206      	movs	r2, #6
 800648c:	4829      	ldr	r0, [pc, #164]	@ (8006534 <_vfiprintf_r+0x224>)
 800648e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006492:	f7fe fb08 	bl	8004aa6 <memchr>
 8006496:	2800      	cmp	r0, #0
 8006498:	d03f      	beq.n	800651a <_vfiprintf_r+0x20a>
 800649a:	4b27      	ldr	r3, [pc, #156]	@ (8006538 <_vfiprintf_r+0x228>)
 800649c:	bb1b      	cbnz	r3, 80064e6 <_vfiprintf_r+0x1d6>
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	3307      	adds	r3, #7
 80064a2:	f023 0307 	bic.w	r3, r3, #7
 80064a6:	3308      	adds	r3, #8
 80064a8:	9303      	str	r3, [sp, #12]
 80064aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ac:	443b      	add	r3, r7
 80064ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80064b0:	e76a      	b.n	8006388 <_vfiprintf_r+0x78>
 80064b2:	460c      	mov	r4, r1
 80064b4:	2001      	movs	r0, #1
 80064b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ba:	e7a8      	b.n	800640e <_vfiprintf_r+0xfe>
 80064bc:	2300      	movs	r3, #0
 80064be:	f04f 0c0a 	mov.w	ip, #10
 80064c2:	4619      	mov	r1, r3
 80064c4:	3401      	adds	r4, #1
 80064c6:	9305      	str	r3, [sp, #20]
 80064c8:	4620      	mov	r0, r4
 80064ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064ce:	3a30      	subs	r2, #48	@ 0x30
 80064d0:	2a09      	cmp	r2, #9
 80064d2:	d903      	bls.n	80064dc <_vfiprintf_r+0x1cc>
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0c6      	beq.n	8006466 <_vfiprintf_r+0x156>
 80064d8:	9105      	str	r1, [sp, #20]
 80064da:	e7c4      	b.n	8006466 <_vfiprintf_r+0x156>
 80064dc:	4604      	mov	r4, r0
 80064de:	2301      	movs	r3, #1
 80064e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80064e4:	e7f0      	b.n	80064c8 <_vfiprintf_r+0x1b8>
 80064e6:	ab03      	add	r3, sp, #12
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	462a      	mov	r2, r5
 80064ec:	4630      	mov	r0, r6
 80064ee:	4b13      	ldr	r3, [pc, #76]	@ (800653c <_vfiprintf_r+0x22c>)
 80064f0:	a904      	add	r1, sp, #16
 80064f2:	f7fd fd95 	bl	8004020 <_printf_float>
 80064f6:	4607      	mov	r7, r0
 80064f8:	1c78      	adds	r0, r7, #1
 80064fa:	d1d6      	bne.n	80064aa <_vfiprintf_r+0x19a>
 80064fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064fe:	07d9      	lsls	r1, r3, #31
 8006500:	d405      	bmi.n	800650e <_vfiprintf_r+0x1fe>
 8006502:	89ab      	ldrh	r3, [r5, #12]
 8006504:	059a      	lsls	r2, r3, #22
 8006506:	d402      	bmi.n	800650e <_vfiprintf_r+0x1fe>
 8006508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800650a:	f7fe facb 	bl	8004aa4 <__retarget_lock_release_recursive>
 800650e:	89ab      	ldrh	r3, [r5, #12]
 8006510:	065b      	lsls	r3, r3, #25
 8006512:	f53f af1f 	bmi.w	8006354 <_vfiprintf_r+0x44>
 8006516:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006518:	e71e      	b.n	8006358 <_vfiprintf_r+0x48>
 800651a:	ab03      	add	r3, sp, #12
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	462a      	mov	r2, r5
 8006520:	4630      	mov	r0, r6
 8006522:	4b06      	ldr	r3, [pc, #24]	@ (800653c <_vfiprintf_r+0x22c>)
 8006524:	a904      	add	r1, sp, #16
 8006526:	f7fe f819 	bl	800455c <_printf_i>
 800652a:	e7e4      	b.n	80064f6 <_vfiprintf_r+0x1e6>
 800652c:	08006b97 	.word	0x08006b97
 8006530:	08006b9d 	.word	0x08006b9d
 8006534:	08006ba1 	.word	0x08006ba1
 8006538:	08004021 	.word	0x08004021
 800653c:	080062ed 	.word	0x080062ed

08006540 <__swbuf_r>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	460e      	mov	r6, r1
 8006544:	4614      	mov	r4, r2
 8006546:	4605      	mov	r5, r0
 8006548:	b118      	cbz	r0, 8006552 <__swbuf_r+0x12>
 800654a:	6a03      	ldr	r3, [r0, #32]
 800654c:	b90b      	cbnz	r3, 8006552 <__swbuf_r+0x12>
 800654e:	f7fe f9b1 	bl	80048b4 <__sinit>
 8006552:	69a3      	ldr	r3, [r4, #24]
 8006554:	60a3      	str	r3, [r4, #8]
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	071a      	lsls	r2, r3, #28
 800655a:	d501      	bpl.n	8006560 <__swbuf_r+0x20>
 800655c:	6923      	ldr	r3, [r4, #16]
 800655e:	b943      	cbnz	r3, 8006572 <__swbuf_r+0x32>
 8006560:	4621      	mov	r1, r4
 8006562:	4628      	mov	r0, r5
 8006564:	f000 f82a 	bl	80065bc <__swsetup_r>
 8006568:	b118      	cbz	r0, 8006572 <__swbuf_r+0x32>
 800656a:	f04f 37ff 	mov.w	r7, #4294967295
 800656e:	4638      	mov	r0, r7
 8006570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	6922      	ldr	r2, [r4, #16]
 8006576:	b2f6      	uxtb	r6, r6
 8006578:	1a98      	subs	r0, r3, r2
 800657a:	6963      	ldr	r3, [r4, #20]
 800657c:	4637      	mov	r7, r6
 800657e:	4283      	cmp	r3, r0
 8006580:	dc05      	bgt.n	800658e <__swbuf_r+0x4e>
 8006582:	4621      	mov	r1, r4
 8006584:	4628      	mov	r0, r5
 8006586:	f7ff fdf9 	bl	800617c <_fflush_r>
 800658a:	2800      	cmp	r0, #0
 800658c:	d1ed      	bne.n	800656a <__swbuf_r+0x2a>
 800658e:	68a3      	ldr	r3, [r4, #8]
 8006590:	3b01      	subs	r3, #1
 8006592:	60a3      	str	r3, [r4, #8]
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	6022      	str	r2, [r4, #0]
 800659a:	701e      	strb	r6, [r3, #0]
 800659c:	6962      	ldr	r2, [r4, #20]
 800659e:	1c43      	adds	r3, r0, #1
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d004      	beq.n	80065ae <__swbuf_r+0x6e>
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	07db      	lsls	r3, r3, #31
 80065a8:	d5e1      	bpl.n	800656e <__swbuf_r+0x2e>
 80065aa:	2e0a      	cmp	r6, #10
 80065ac:	d1df      	bne.n	800656e <__swbuf_r+0x2e>
 80065ae:	4621      	mov	r1, r4
 80065b0:	4628      	mov	r0, r5
 80065b2:	f7ff fde3 	bl	800617c <_fflush_r>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d0d9      	beq.n	800656e <__swbuf_r+0x2e>
 80065ba:	e7d6      	b.n	800656a <__swbuf_r+0x2a>

080065bc <__swsetup_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	4b29      	ldr	r3, [pc, #164]	@ (8006664 <__swsetup_r+0xa8>)
 80065c0:	4605      	mov	r5, r0
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	460c      	mov	r4, r1
 80065c6:	b118      	cbz	r0, 80065d0 <__swsetup_r+0x14>
 80065c8:	6a03      	ldr	r3, [r0, #32]
 80065ca:	b90b      	cbnz	r3, 80065d0 <__swsetup_r+0x14>
 80065cc:	f7fe f972 	bl	80048b4 <__sinit>
 80065d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065d4:	0719      	lsls	r1, r3, #28
 80065d6:	d422      	bmi.n	800661e <__swsetup_r+0x62>
 80065d8:	06da      	lsls	r2, r3, #27
 80065da:	d407      	bmi.n	80065ec <__swsetup_r+0x30>
 80065dc:	2209      	movs	r2, #9
 80065de:	602a      	str	r2, [r5, #0]
 80065e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	81a3      	strh	r3, [r4, #12]
 80065ea:	e033      	b.n	8006654 <__swsetup_r+0x98>
 80065ec:	0758      	lsls	r0, r3, #29
 80065ee:	d512      	bpl.n	8006616 <__swsetup_r+0x5a>
 80065f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065f2:	b141      	cbz	r1, 8006606 <__swsetup_r+0x4a>
 80065f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065f8:	4299      	cmp	r1, r3
 80065fa:	d002      	beq.n	8006602 <__swsetup_r+0x46>
 80065fc:	4628      	mov	r0, r5
 80065fe:	f7ff f8bf 	bl	8005780 <_free_r>
 8006602:	2300      	movs	r3, #0
 8006604:	6363      	str	r3, [r4, #52]	@ 0x34
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	2300      	movs	r3, #0
 8006610:	6063      	str	r3, [r4, #4]
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	f043 0308 	orr.w	r3, r3, #8
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	6923      	ldr	r3, [r4, #16]
 8006620:	b94b      	cbnz	r3, 8006636 <__swsetup_r+0x7a>
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800662c:	d003      	beq.n	8006636 <__swsetup_r+0x7a>
 800662e:	4621      	mov	r1, r4
 8006630:	4628      	mov	r0, r5
 8006632:	f000 f882 	bl	800673a <__smakebuf_r>
 8006636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800663a:	f013 0201 	ands.w	r2, r3, #1
 800663e:	d00a      	beq.n	8006656 <__swsetup_r+0x9a>
 8006640:	2200      	movs	r2, #0
 8006642:	60a2      	str	r2, [r4, #8]
 8006644:	6962      	ldr	r2, [r4, #20]
 8006646:	4252      	negs	r2, r2
 8006648:	61a2      	str	r2, [r4, #24]
 800664a:	6922      	ldr	r2, [r4, #16]
 800664c:	b942      	cbnz	r2, 8006660 <__swsetup_r+0xa4>
 800664e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006652:	d1c5      	bne.n	80065e0 <__swsetup_r+0x24>
 8006654:	bd38      	pop	{r3, r4, r5, pc}
 8006656:	0799      	lsls	r1, r3, #30
 8006658:	bf58      	it	pl
 800665a:	6962      	ldrpl	r2, [r4, #20]
 800665c:	60a2      	str	r2, [r4, #8]
 800665e:	e7f4      	b.n	800664a <__swsetup_r+0x8e>
 8006660:	2000      	movs	r0, #0
 8006662:	e7f7      	b.n	8006654 <__swsetup_r+0x98>
 8006664:	2000000c 	.word	0x2000000c

08006668 <_raise_r>:
 8006668:	291f      	cmp	r1, #31
 800666a:	b538      	push	{r3, r4, r5, lr}
 800666c:	4605      	mov	r5, r0
 800666e:	460c      	mov	r4, r1
 8006670:	d904      	bls.n	800667c <_raise_r+0x14>
 8006672:	2316      	movs	r3, #22
 8006674:	6003      	str	r3, [r0, #0]
 8006676:	f04f 30ff 	mov.w	r0, #4294967295
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800667e:	b112      	cbz	r2, 8006686 <_raise_r+0x1e>
 8006680:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006684:	b94b      	cbnz	r3, 800669a <_raise_r+0x32>
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f830 	bl	80066ec <_getpid_r>
 800668c:	4622      	mov	r2, r4
 800668e:	4601      	mov	r1, r0
 8006690:	4628      	mov	r0, r5
 8006692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006696:	f000 b817 	b.w	80066c8 <_kill_r>
 800669a:	2b01      	cmp	r3, #1
 800669c:	d00a      	beq.n	80066b4 <_raise_r+0x4c>
 800669e:	1c59      	adds	r1, r3, #1
 80066a0:	d103      	bne.n	80066aa <_raise_r+0x42>
 80066a2:	2316      	movs	r3, #22
 80066a4:	6003      	str	r3, [r0, #0]
 80066a6:	2001      	movs	r0, #1
 80066a8:	e7e7      	b.n	800667a <_raise_r+0x12>
 80066aa:	2100      	movs	r1, #0
 80066ac:	4620      	mov	r0, r4
 80066ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80066b2:	4798      	blx	r3
 80066b4:	2000      	movs	r0, #0
 80066b6:	e7e0      	b.n	800667a <_raise_r+0x12>

080066b8 <raise>:
 80066b8:	4b02      	ldr	r3, [pc, #8]	@ (80066c4 <raise+0xc>)
 80066ba:	4601      	mov	r1, r0
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	f7ff bfd3 	b.w	8006668 <_raise_r>
 80066c2:	bf00      	nop
 80066c4:	2000000c 	.word	0x2000000c

080066c8 <_kill_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	2300      	movs	r3, #0
 80066cc:	4d06      	ldr	r5, [pc, #24]	@ (80066e8 <_kill_r+0x20>)
 80066ce:	4604      	mov	r4, r0
 80066d0:	4608      	mov	r0, r1
 80066d2:	4611      	mov	r1, r2
 80066d4:	602b      	str	r3, [r5, #0]
 80066d6:	f7fb f8f1 	bl	80018bc <_kill>
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	d102      	bne.n	80066e4 <_kill_r+0x1c>
 80066de:	682b      	ldr	r3, [r5, #0]
 80066e0:	b103      	cbz	r3, 80066e4 <_kill_r+0x1c>
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	bd38      	pop	{r3, r4, r5, pc}
 80066e6:	bf00      	nop
 80066e8:	20000510 	.word	0x20000510

080066ec <_getpid_r>:
 80066ec:	f7fb b8df 	b.w	80018ae <_getpid>

080066f0 <__swhatbuf_r>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	460c      	mov	r4, r1
 80066f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f8:	4615      	mov	r5, r2
 80066fa:	2900      	cmp	r1, #0
 80066fc:	461e      	mov	r6, r3
 80066fe:	b096      	sub	sp, #88	@ 0x58
 8006700:	da0c      	bge.n	800671c <__swhatbuf_r+0x2c>
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	2100      	movs	r1, #0
 8006706:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800670a:	bf14      	ite	ne
 800670c:	2340      	movne	r3, #64	@ 0x40
 800670e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006712:	2000      	movs	r0, #0
 8006714:	6031      	str	r1, [r6, #0]
 8006716:	602b      	str	r3, [r5, #0]
 8006718:	b016      	add	sp, #88	@ 0x58
 800671a:	bd70      	pop	{r4, r5, r6, pc}
 800671c:	466a      	mov	r2, sp
 800671e:	f000 f849 	bl	80067b4 <_fstat_r>
 8006722:	2800      	cmp	r0, #0
 8006724:	dbed      	blt.n	8006702 <__swhatbuf_r+0x12>
 8006726:	9901      	ldr	r1, [sp, #4]
 8006728:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800672c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006730:	4259      	negs	r1, r3
 8006732:	4159      	adcs	r1, r3
 8006734:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006738:	e7eb      	b.n	8006712 <__swhatbuf_r+0x22>

0800673a <__smakebuf_r>:
 800673a:	898b      	ldrh	r3, [r1, #12]
 800673c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800673e:	079d      	lsls	r5, r3, #30
 8006740:	4606      	mov	r6, r0
 8006742:	460c      	mov	r4, r1
 8006744:	d507      	bpl.n	8006756 <__smakebuf_r+0x1c>
 8006746:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800674a:	6023      	str	r3, [r4, #0]
 800674c:	6123      	str	r3, [r4, #16]
 800674e:	2301      	movs	r3, #1
 8006750:	6163      	str	r3, [r4, #20]
 8006752:	b003      	add	sp, #12
 8006754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006756:	466a      	mov	r2, sp
 8006758:	ab01      	add	r3, sp, #4
 800675a:	f7ff ffc9 	bl	80066f0 <__swhatbuf_r>
 800675e:	9f00      	ldr	r7, [sp, #0]
 8006760:	4605      	mov	r5, r0
 8006762:	4639      	mov	r1, r7
 8006764:	4630      	mov	r0, r6
 8006766:	f7ff f87d 	bl	8005864 <_malloc_r>
 800676a:	b948      	cbnz	r0, 8006780 <__smakebuf_r+0x46>
 800676c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006770:	059a      	lsls	r2, r3, #22
 8006772:	d4ee      	bmi.n	8006752 <__smakebuf_r+0x18>
 8006774:	f023 0303 	bic.w	r3, r3, #3
 8006778:	f043 0302 	orr.w	r3, r3, #2
 800677c:	81a3      	strh	r3, [r4, #12]
 800677e:	e7e2      	b.n	8006746 <__smakebuf_r+0xc>
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800678a:	81a3      	strh	r3, [r4, #12]
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	6020      	str	r0, [r4, #0]
 8006790:	b15b      	cbz	r3, 80067aa <__smakebuf_r+0x70>
 8006792:	4630      	mov	r0, r6
 8006794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006798:	f000 f81e 	bl	80067d8 <_isatty_r>
 800679c:	b128      	cbz	r0, 80067aa <__smakebuf_r+0x70>
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	f023 0303 	bic.w	r3, r3, #3
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	81a3      	strh	r3, [r4, #12]
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	431d      	orrs	r5, r3
 80067ae:	81a5      	strh	r5, [r4, #12]
 80067b0:	e7cf      	b.n	8006752 <__smakebuf_r+0x18>
	...

080067b4 <_fstat_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	2300      	movs	r3, #0
 80067b8:	4d06      	ldr	r5, [pc, #24]	@ (80067d4 <_fstat_r+0x20>)
 80067ba:	4604      	mov	r4, r0
 80067bc:	4608      	mov	r0, r1
 80067be:	4611      	mov	r1, r2
 80067c0:	602b      	str	r3, [r5, #0]
 80067c2:	f7fb f8da 	bl	800197a <_fstat>
 80067c6:	1c43      	adds	r3, r0, #1
 80067c8:	d102      	bne.n	80067d0 <_fstat_r+0x1c>
 80067ca:	682b      	ldr	r3, [r5, #0]
 80067cc:	b103      	cbz	r3, 80067d0 <_fstat_r+0x1c>
 80067ce:	6023      	str	r3, [r4, #0]
 80067d0:	bd38      	pop	{r3, r4, r5, pc}
 80067d2:	bf00      	nop
 80067d4:	20000510 	.word	0x20000510

080067d8 <_isatty_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	2300      	movs	r3, #0
 80067dc:	4d05      	ldr	r5, [pc, #20]	@ (80067f4 <_isatty_r+0x1c>)
 80067de:	4604      	mov	r4, r0
 80067e0:	4608      	mov	r0, r1
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	f7fb f8d8 	bl	8001998 <_isatty>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_isatty_r+0x1a>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_isatty_r+0x1a>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	20000510 	.word	0x20000510

080067f8 <_init>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	bf00      	nop
 80067fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fe:	bc08      	pop	{r3}
 8006800:	469e      	mov	lr, r3
 8006802:	4770      	bx	lr

08006804 <_fini>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	bf00      	nop
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr

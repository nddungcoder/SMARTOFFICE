
SMARTOFFICE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c0c  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08006d40  08006d40  00007d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e8  080070e8  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  080070e8  080070e8  000080e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070f0  080070f0  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f0  080070f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070f4  080070f4  000080f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080070f8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001d4  080072cc  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  080072cc  00009524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007323  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002550  00000000  00000000  00010520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  00012a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000469  00000000  00000000  000130b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014261  00000000  00000000  00013519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfc3  00000000  00000000  0002777a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c2c8  00000000  00000000  0003373d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008fa05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c8  00000000  00000000  0008fa48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00092110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d4 	.word	0x200001d4
 800014c:	00000000 	.word	0x00000000
 8000150:	08006d24 	.word	0x08006d24

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001d8 	.word	0x200001d8
 800016c:	08006d24 	.word	0x08006d24

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_frsub>:
 8000aa8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aac:	e002      	b.n	8000ab4 <__addsf3>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_fsub>:
 8000ab0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ab4 <__addsf3>:
 8000ab4:	0042      	lsls	r2, r0, #1
 8000ab6:	bf1f      	itttt	ne
 8000ab8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000abc:	ea92 0f03 	teqne	r2, r3
 8000ac0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac8:	d06a      	beq.n	8000ba0 <__addsf3+0xec>
 8000aca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ace:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad2:	bfc1      	itttt	gt
 8000ad4:	18d2      	addgt	r2, r2, r3
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	4048      	eorgt	r0, r1
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	2b19      	cmp	r3, #25
 8000ae2:	bf88      	it	hi
 8000ae4:	4770      	bxhi	lr
 8000ae6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000afe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4249      	negne	r1, r1
 8000b06:	ea92 0f03 	teq	r2, r3
 8000b0a:	d03f      	beq.n	8000b8c <__addsf3+0xd8>
 8000b0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b10:	fa41 fc03 	asr.w	ip, r1, r3
 8000b14:	eb10 000c 	adds.w	r0, r0, ip
 8000b18:	f1c3 0320 	rsb	r3, r3, #32
 8000b1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b24:	d502      	bpl.n	8000b2c <__addsf3+0x78>
 8000b26:	4249      	negs	r1, r1
 8000b28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b30:	d313      	bcc.n	8000b5a <__addsf3+0xa6>
 8000b32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b36:	d306      	bcc.n	8000b46 <__addsf3+0x92>
 8000b38:	0840      	lsrs	r0, r0, #1
 8000b3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3e:	f102 0201 	add.w	r2, r2, #1
 8000b42:	2afe      	cmp	r2, #254	@ 0xfe
 8000b44:	d251      	bcs.n	8000bea <__addsf3+0x136>
 8000b46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4e:	bf08      	it	eq
 8000b50:	f020 0001 	biceq.w	r0, r0, #1
 8000b54:	ea40 0003 	orr.w	r0, r0, r3
 8000b58:	4770      	bx	lr
 8000b5a:	0049      	lsls	r1, r1, #1
 8000b5c:	eb40 0000 	adc.w	r0, r0, r0
 8000b60:	3a01      	subs	r2, #1
 8000b62:	bf28      	it	cs
 8000b64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b68:	d2ed      	bcs.n	8000b46 <__addsf3+0x92>
 8000b6a:	fab0 fc80 	clz	ip, r0
 8000b6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b72:	ebb2 020c 	subs.w	r2, r2, ip
 8000b76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7a:	bfaa      	itet	ge
 8000b7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b80:	4252      	neglt	r2, r2
 8000b82:	4318      	orrge	r0, r3
 8000b84:	bfbc      	itt	lt
 8000b86:	40d0      	lsrlt	r0, r2
 8000b88:	4318      	orrlt	r0, r3
 8000b8a:	4770      	bx	lr
 8000b8c:	f092 0f00 	teq	r2, #0
 8000b90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b94:	bf06      	itte	eq
 8000b96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b9a:	3201      	addeq	r2, #1
 8000b9c:	3b01      	subne	r3, #1
 8000b9e:	e7b5      	b.n	8000b0c <__addsf3+0x58>
 8000ba0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba8:	bf18      	it	ne
 8000baa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bae:	d021      	beq.n	8000bf4 <__addsf3+0x140>
 8000bb0:	ea92 0f03 	teq	r2, r3
 8000bb4:	d004      	beq.n	8000bc0 <__addsf3+0x10c>
 8000bb6:	f092 0f00 	teq	r2, #0
 8000bba:	bf08      	it	eq
 8000bbc:	4608      	moveq	r0, r1
 8000bbe:	4770      	bx	lr
 8000bc0:	ea90 0f01 	teq	r0, r1
 8000bc4:	bf1c      	itt	ne
 8000bc6:	2000      	movne	r0, #0
 8000bc8:	4770      	bxne	lr
 8000bca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bce:	d104      	bne.n	8000bda <__addsf3+0x126>
 8000bd0:	0040      	lsls	r0, r0, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bd8:	4770      	bx	lr
 8000bda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bde:	bf3c      	itt	cc
 8000be0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000be4:	4770      	bxcc	lr
 8000be6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf2:	4770      	bx	lr
 8000bf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf8:	bf16      	itet	ne
 8000bfa:	4608      	movne	r0, r1
 8000bfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c00:	4601      	movne	r1, r0
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	bf06      	itte	eq
 8000c06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0a:	ea90 0f01 	teqeq	r0, r1
 8000c0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_ui2f>:
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e004      	b.n	8000c24 <__aeabi_i2f+0x8>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_i2f>:
 8000c1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	bf48      	it	mi
 8000c22:	4240      	negmi	r0, r0
 8000c24:	ea5f 0c00 	movs.w	ip, r0
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c30:	4601      	mov	r1, r0
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	e01c      	b.n	8000c72 <__aeabi_l2f+0x2a>

08000c38 <__aeabi_ul2f>:
 8000c38:	ea50 0201 	orrs.w	r2, r0, r1
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e00a      	b.n	8000c5c <__aeabi_l2f+0x14>
 8000c46:	bf00      	nop

08000c48 <__aeabi_l2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__aeabi_l2f+0x14>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	ea5f 0c01 	movs.w	ip, r1
 8000c60:	bf02      	ittt	eq
 8000c62:	4684      	moveq	ip, r0
 8000c64:	4601      	moveq	r1, r0
 8000c66:	2000      	moveq	r0, #0
 8000c68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c6c:	bf08      	it	eq
 8000c6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c76:	fabc f28c 	clz	r2, ip
 8000c7a:	3a08      	subs	r2, #8
 8000c7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c80:	db10      	blt.n	8000ca4 <__aeabi_l2f+0x5c>
 8000c82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c86:	4463      	add	r3, ip
 8000c88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c94:	fa20 f202 	lsr.w	r2, r0, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ca2:	4770      	bx	lr
 8000ca4:	f102 0220 	add.w	r2, r2, #32
 8000ca8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_fmul>:
 8000cc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ccc:	bf1e      	ittt	ne
 8000cce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd2:	ea92 0f0c 	teqne	r2, ip
 8000cd6:	ea93 0f0c 	teqne	r3, ip
 8000cda:	d06f      	beq.n	8000dbc <__aeabi_fmul+0xf8>
 8000cdc:	441a      	add	r2, r3
 8000cde:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce2:	0240      	lsls	r0, r0, #9
 8000ce4:	bf18      	it	ne
 8000ce6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cea:	d01e      	beq.n	8000d2a <__aeabi_fmul+0x66>
 8000cec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cf0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cf8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d00:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d04:	bf3e      	ittt	cc
 8000d06:	0049      	lslcc	r1, r1, #1
 8000d08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	ea40 0001 	orr.w	r0, r0, r1
 8000d12:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d16:	2afd      	cmp	r2, #253	@ 0xfd
 8000d18:	d81d      	bhi.n	8000d56 <__aeabi_fmul+0x92>
 8000d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d22:	bf08      	it	eq
 8000d24:	f020 0001 	biceq.w	r0, r0, #1
 8000d28:	4770      	bx	lr
 8000d2a:	f090 0f00 	teq	r0, #0
 8000d2e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d32:	bf08      	it	eq
 8000d34:	0249      	lsleq	r1, r1, #9
 8000d36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d3e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d40:	bfc2      	ittt	gt
 8000d42:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4a:	4770      	bxgt	lr
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	3a01      	subs	r2, #1
 8000d56:	dc5d      	bgt.n	8000e14 <__aeabi_fmul+0x150>
 8000d58:	f112 0f19 	cmn.w	r2, #25
 8000d5c:	bfdc      	itt	le
 8000d5e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d62:	4770      	bxle	lr
 8000d64:	f1c2 0200 	rsb	r2, r2, #0
 8000d68:	0041      	lsls	r1, r0, #1
 8000d6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d6e:	f1c2 0220 	rsb	r2, r2, #32
 8000d72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7a:	f140 0000 	adc.w	r0, r0, #0
 8000d7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d82:	bf08      	it	eq
 8000d84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d88:	4770      	bx	lr
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fmul+0xce>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fmul+0xe6>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e78f      	b.n	8000cdc <__aeabi_fmul+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	bf18      	it	ne
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d00a      	beq.n	8000de2 <__aeabi_fmul+0x11e>
 8000dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dd0:	bf18      	it	ne
 8000dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dd6:	d1d8      	bne.n	8000d8a <__aeabi_fmul+0xc6>
 8000dd8:	ea80 0001 	eor.w	r0, r0, r1
 8000ddc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	bf17      	itett	ne
 8000de8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dec:	4608      	moveq	r0, r1
 8000dee:	f091 0f00 	teqne	r1, #0
 8000df2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000df6:	d014      	beq.n	8000e22 <__aeabi_fmul+0x15e>
 8000df8:	ea92 0f0c 	teq	r2, ip
 8000dfc:	d101      	bne.n	8000e02 <__aeabi_fmul+0x13e>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	d10f      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e02:	ea93 0f0c 	teq	r3, ip
 8000e06:	d103      	bne.n	8000e10 <__aeabi_fmul+0x14c>
 8000e08:	024b      	lsls	r3, r1, #9
 8000e0a:	bf18      	it	ne
 8000e0c:	4608      	movne	r0, r1
 8000e0e:	d108      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e10:	ea80 0001 	eor.w	r0, r0, r1
 8000e14:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e20:	4770      	bx	lr
 8000e22:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e26:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_fdiv>:
 8000e2c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e34:	bf1e      	ittt	ne
 8000e36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3a:	ea92 0f0c 	teqne	r2, ip
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d069      	beq.n	8000f18 <__aeabi_fdiv+0xec>
 8000e44:	eba2 0203 	sub.w	r2, r2, r3
 8000e48:	ea80 0c01 	eor.w	ip, r0, r1
 8000e4c:	0249      	lsls	r1, r1, #9
 8000e4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e52:	d037      	beq.n	8000ec4 <__aeabi_fdiv+0x98>
 8000e54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e64:	428b      	cmp	r3, r1
 8000e66:	bf38      	it	cc
 8000e68:	005b      	lslcc	r3, r3, #1
 8000e6a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e6e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e72:	428b      	cmp	r3, r1
 8000e74:	bf24      	itt	cs
 8000e76:	1a5b      	subcs	r3, r3, r1
 8000e78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e80:	bf24      	itt	cs
 8000e82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e8e:	bf24      	itt	cs
 8000e90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	bf18      	it	ne
 8000eaa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eae:	d1e0      	bne.n	8000e72 <__aeabi_fdiv+0x46>
 8000eb0:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb2:	f63f af50 	bhi.w	8000d56 <__aeabi_fmul+0x92>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ec8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ecc:	327f      	adds	r2, #127	@ 0x7f
 8000ece:	bfc2      	ittt	gt
 8000ed0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ed4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ed8:	4770      	bxgt	lr
 8000eda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	3a01      	subs	r2, #1
 8000ee4:	e737      	b.n	8000d56 <__aeabi_fmul+0x92>
 8000ee6:	f092 0f00 	teq	r2, #0
 8000eea:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000eee:	bf02      	ittt	eq
 8000ef0:	0040      	lsleq	r0, r0, #1
 8000ef2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ef6:	3a01      	subeq	r2, #1
 8000ef8:	d0f9      	beq.n	8000eee <__aeabi_fdiv+0xc2>
 8000efa:	ea40 000c 	orr.w	r0, r0, ip
 8000efe:	f093 0f00 	teq	r3, #0
 8000f02:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0049      	lsleq	r1, r1, #1
 8000f0a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f0e:	3b01      	subeq	r3, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fdiv+0xda>
 8000f12:	ea41 010c 	orr.w	r1, r1, ip
 8000f16:	e795      	b.n	8000e44 <__aeabi_fdiv+0x18>
 8000f18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d108      	bne.n	8000f34 <__aeabi_fdiv+0x108>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	f47f af7d 	bne.w	8000e22 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	f47f af70 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e776      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f34:	ea93 0f0c 	teq	r3, ip
 8000f38:	d104      	bne.n	8000f44 <__aeabi_fdiv+0x118>
 8000f3a:	024b      	lsls	r3, r1, #9
 8000f3c:	f43f af4c 	beq.w	8000dd8 <__aeabi_fmul+0x114>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e76e      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f44:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f48:	bf18      	it	ne
 8000f4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f4e:	d1ca      	bne.n	8000ee6 <__aeabi_fdiv+0xba>
 8000f50:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f54:	f47f af5c 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f58:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f5c:	f47f af3c 	bne.w	8000dd8 <__aeabi_fmul+0x114>
 8000f60:	e75f      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f62:	bf00      	nop

08000f64 <__gesf2>:
 8000f64:	f04f 3cff 	mov.w	ip, #4294967295
 8000f68:	e006      	b.n	8000f78 <__cmpsf2+0x4>
 8000f6a:	bf00      	nop

08000f6c <__lesf2>:
 8000f6c:	f04f 0c01 	mov.w	ip, #1
 8000f70:	e002      	b.n	8000f78 <__cmpsf2+0x4>
 8000f72:	bf00      	nop

08000f74 <__cmpsf2>:
 8000f74:	f04f 0c01 	mov.w	ip, #1
 8000f78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f88:	bf18      	it	ne
 8000f8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f8e:	d011      	beq.n	8000fb4 <__cmpsf2+0x40>
 8000f90:	b001      	add	sp, #4
 8000f92:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f96:	bf18      	it	ne
 8000f98:	ea90 0f01 	teqne	r0, r1
 8000f9c:	bf58      	it	pl
 8000f9e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fa2:	bf88      	it	hi
 8000fa4:	17c8      	asrhi	r0, r1, #31
 8000fa6:	bf38      	it	cc
 8000fa8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fac:	bf18      	it	ne
 8000fae:	f040 0001 	orrne.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	d102      	bne.n	8000fc0 <__cmpsf2+0x4c>
 8000fba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fbe:	d105      	bne.n	8000fcc <__cmpsf2+0x58>
 8000fc0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fc4:	d1e4      	bne.n	8000f90 <__cmpsf2+0x1c>
 8000fc6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fca:	d0e1      	beq.n	8000f90 <__cmpsf2+0x1c>
 8000fcc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_cfrcmple>:
 8000fd4:	4684      	mov	ip, r0
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	4661      	mov	r1, ip
 8000fda:	e7ff      	b.n	8000fdc <__aeabi_cfcmpeq>

08000fdc <__aeabi_cfcmpeq>:
 8000fdc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fde:	f7ff ffc9 	bl	8000f74 <__cmpsf2>
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	bf48      	it	mi
 8000fe6:	f110 0f00 	cmnmi.w	r0, #0
 8000fea:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fec <__aeabi_fcmpeq>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff fff4 	bl	8000fdc <__aeabi_cfcmpeq>
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2001      	moveq	r0, #1
 8000ff8:	2000      	movne	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmplt>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffea 	bl	8000fdc <__aeabi_cfcmpeq>
 8001008:	bf34      	ite	cc
 800100a:	2001      	movcc	r0, #1
 800100c:	2000      	movcs	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmple>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffe0 	bl	8000fdc <__aeabi_cfcmpeq>
 800101c:	bf94      	ite	ls
 800101e:	2001      	movls	r0, #1
 8001020:	2000      	movhi	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmpge>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffd2 	bl	8000fd4 <__aeabi_cfrcmple>
 8001030:	bf94      	ite	ls
 8001032:	2001      	movls	r0, #1
 8001034:	2000      	movhi	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmpgt>:
 800103c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001040:	f7ff ffc8 	bl	8000fd4 <__aeabi_cfrcmple>
 8001044:	bf34      	ite	cc
 8001046:	2001      	movcc	r0, #1
 8001048:	2000      	movcs	r0, #0
 800104a:	f85d fb08 	ldr.w	pc, [sp], #8
 800104e:	bf00      	nop

08001050 <__aeabi_fcmpun>:
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	d102      	bne.n	8001064 <__aeabi_fcmpun+0x14>
 800105e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001062:	d108      	bne.n	8001076 <__aeabi_fcmpun+0x26>
 8001064:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001068:	d102      	bne.n	8001070 <__aeabi_fcmpun+0x20>
 800106a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106e:	d102      	bne.n	8001076 <__aeabi_fcmpun+0x26>
 8001070:	f04f 0000 	mov.w	r0, #0
 8001074:	4770      	bx	lr
 8001076:	f04f 0001 	mov.w	r0, #1
 800107a:	4770      	bx	lr

0800107c <__aeabi_f2uiz>:
 800107c:	0042      	lsls	r2, r0, #1
 800107e:	d20e      	bcs.n	800109e <__aeabi_f2uiz+0x22>
 8001080:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001084:	d30b      	bcc.n	800109e <__aeabi_f2uiz+0x22>
 8001086:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800108a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800108e:	d409      	bmi.n	80010a4 <__aeabi_f2uiz+0x28>
 8001090:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001094:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001098:	fa23 f002 	lsr.w	r0, r3, r2
 800109c:	4770      	bx	lr
 800109e:	f04f 0000 	mov.w	r0, #0
 80010a2:	4770      	bx	lr
 80010a4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010a8:	d101      	bne.n	80010ae <__aeabi_f2uiz+0x32>
 80010aa:	0242      	lsls	r2, r0, #9
 80010ac:	d102      	bne.n	80010b4 <__aeabi_f2uiz+0x38>
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295
 80010b2:	4770      	bx	lr
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <SystemClock_Config>:

/**
 * @brief Cấu hình hệ thống clock STM32F1 sử dụng HSE + PLL để chạy ở 72 MHz.
 */
void SystemClock_Config(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
    // 1. Bật HSE
    RCC->CR |= RCC_CR_HSEON;
 80010c0:	4b34      	ldr	r3, [pc, #208]	@ (8001194 <SystemClock_Config+0xd8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a33      	ldr	r2, [pc, #204]	@ (8001194 <SystemClock_Config+0xd8>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ca:	6013      	str	r3, [r2, #0]

    // 2. Chờ HSE ổn định
    while (!(RCC->CR & RCC_CR_HSERDY))
 80010cc:	bf00      	nop
 80010ce:	4b31      	ldr	r3, [pc, #196]	@ (8001194 <SystemClock_Config+0xd8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f9      	beq.n	80010ce <SystemClock_Config+0x12>
        ;

    // 3. Cấu hình Flash: 2 wait states (để hoạt động 72MHz)
    FLASH->ACR |= FLASH_ACR_PRFTBE; // Enable prefetch buffer
 80010da:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <SystemClock_Config+0xdc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a2e      	ldr	r2, [pc, #184]	@ (8001198 <SystemClock_Config+0xdc>)
 80010e0:	f043 0310 	orr.w	r3, r3, #16
 80010e4:	6013      	str	r3, [r2, #0]
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80010e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001198 <SystemClock_Config+0xdc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001198 <SystemClock_Config+0xdc>)
 80010ec:	f023 0307 	bic.w	r3, r3, #7
 80010f0:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_LATENCY_2; // 2 wait states
 80010f2:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <SystemClock_Config+0xdc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a28      	ldr	r2, [pc, #160]	@ (8001198 <SystemClock_Config+0xdc>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6013      	str	r3, [r2, #0]

    // 4. Cấu hình PLL: nguồn HSE, nhân 9 => 8MHz x 9 = 72MHz
    RCC->CFGR &= ~RCC_CFGR_PLLSRC; // Clear PLL source
 80010fe:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <SystemClock_Config+0xd8>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4a24      	ldr	r2, [pc, #144]	@ (8001194 <SystemClock_Config+0xd8>)
 8001104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001108:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLSRC;  // PLL source = HSE
 800110a:	4b22      	ldr	r3, [pc, #136]	@ (8001194 <SystemClock_Config+0xd8>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a21      	ldr	r2, [pc, #132]	@ (8001194 <SystemClock_Config+0xd8>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001114:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= ~RCC_CFGR_PLLMULL;
 8001116:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <SystemClock_Config+0xd8>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4a1e      	ldr	r2, [pc, #120]	@ (8001194 <SystemClock_Config+0xd8>)
 800111c:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8001120:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLMULL9; // PLL x9
 8001122:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <SystemClock_Config+0xd8>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4a1b      	ldr	r2, [pc, #108]	@ (8001194 <SystemClock_Config+0xd8>)
 8001128:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 800112c:	6053      	str	r3, [r2, #4]

    // 5. Cấu hình bus
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;  // AHB = SYSCLK
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <SystemClock_Config+0xd8>)
 8001130:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <SystemClock_Config+0xd8>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; // APB1 = HCLK/2 (max 36MHz)
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <SystemClock_Config+0xd8>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a16      	ldr	r2, [pc, #88]	@ (8001194 <SystemClock_Config+0xd8>)
 800113c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001140:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; // APB2 = HCLK
 8001142:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <SystemClock_Config+0xd8>)
 8001144:	4a13      	ldr	r2, [pc, #76]	@ (8001194 <SystemClock_Config+0xd8>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	6053      	str	r3, [r2, #4]

    // 6. Bật PLL
    RCC->CR |= RCC_CR_PLLON;
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <SystemClock_Config+0xd8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a11      	ldr	r2, [pc, #68]	@ (8001194 <SystemClock_Config+0xd8>)
 8001150:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001154:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY))
 8001156:	bf00      	nop
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <SystemClock_Config+0xd8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f9      	beq.n	8001158 <SystemClock_Config+0x9c>
        ;

    // 7. Chọn PLL làm hệ thống clock
    RCC->CFGR &= ~RCC_CFGR_SW;
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <SystemClock_Config+0xd8>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <SystemClock_Config+0xd8>)
 800116a:	f023 0303 	bic.w	r3, r3, #3
 800116e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <SystemClock_Config+0xd8>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <SystemClock_Config+0xd8>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 800117c:	bf00      	nop
 800117e:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <SystemClock_Config+0xd8>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b08      	cmp	r3, #8
 8001188:	d1f9      	bne.n	800117e <SystemClock_Config+0xc2>
        ;
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40021000 	.word	0x40021000
 8001198:	40022000 	.word	0x40022000

0800119c <App_Init>:

void App_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
    SystemClock_Config();
 80011a0:	f7ff ff8c 	bl	80010bc <SystemClock_Config>
    USART1_Init(115200);
 80011a4:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80011a8:	f001 fae0 	bl	800276c <USART1_Init>
    Timer_Init();
 80011ac:	f002 fc06 	bl	80039bc <Timer_Init>
    Queue_init(&g_uartQueue);
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <App_Init+0x2c>)
 80011b2:	f002 fb00 	bl	80037b6 <Queue_init>
    device_init();
 80011b6:	f001 ffb9 	bl	800312c <device_init>
    DUNGX_UART_Receive_IT(&huart1, uart_rx_buffer, 2);
 80011ba:	2202      	movs	r2, #2
 80011bc:	4903      	ldr	r1, [pc, #12]	@ (80011cc <App_Init+0x30>)
 80011be:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <App_Init+0x34>)
 80011c0:	f001 fb1e 	bl	8002800 <DUNGX_UART_Receive_IT>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000022c 	.word	0x2000022c
 80011cc:	20000300 	.word	0x20000300
 80011d0:	200001f0 	.word	0x200001f0

080011d4 <App_Loop>:

void App_Loop(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
     DeviceManager_UpdateData();
 80011d8:	f001 ffe6 	bl	80031a8 <DeviceManager_UpdateData>
    if (sys.mode == AUTO_MODE)
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <App_Loop+0x2c>)
 80011de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <App_Loop+0x18>
    {

        Auto_Process();
 80011e6:	f000 f80d 	bl	8001204 <Auto_Process>
    else if (sys.mode == MANUAL_MODE)
    {
        Manual_Process();
    }

}
 80011ea:	e006      	b.n	80011fa <App_Loop+0x26>
    else if (sys.mode == MANUAL_MODE)
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <App_Loop+0x2c>)
 80011ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <App_Loop+0x26>
        Manual_Process();
 80011f6:	f000 f903 	bl	8001400 <Manual_Process>
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000030c 	.word	0x2000030c

08001204 <Auto_Process>:
#include "led_rgb.h"
#include "motor.h"
#include "siren.h"

void Auto_Process(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
    if (sys.mode == AUTO_MODE)
 800120a:	4b74      	ldr	r3, [pc, #464]	@ (80013dc <Auto_Process+0x1d8>)
 800120c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001210:	2b00      	cmp	r3, #0
 8001212:	f040 80df 	bne.w	80013d4 <Auto_Process+0x1d0>
    {
        if (sys.temperature > 35.0f || sys.humidity < 30.0f || sys.gas_level > 300.0f)
 8001216:	4b71      	ldr	r3, [pc, #452]	@ (80013dc <Auto_Process+0x1d8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4971      	ldr	r1, [pc, #452]	@ (80013e0 <Auto_Process+0x1dc>)
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff0d 	bl	800103c <__aeabi_fcmpgt>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d111      	bne.n	800124c <Auto_Process+0x48>
 8001228:	4b6c      	ldr	r3, [pc, #432]	@ (80013dc <Auto_Process+0x1d8>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	496d      	ldr	r1, [pc, #436]	@ (80013e4 <Auto_Process+0x1e0>)
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fee6 	bl	8001000 <__aeabi_fcmplt>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d108      	bne.n	800124c <Auto_Process+0x48>
 800123a:	4b68      	ldr	r3, [pc, #416]	@ (80013dc <Auto_Process+0x1d8>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	496a      	ldr	r1, [pc, #424]	@ (80013e8 <Auto_Process+0x1e4>)
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fefb 	bl	800103c <__aeabi_fcmpgt>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00d      	beq.n	8001268 <Auto_Process+0x64>
        {
            Siren_On();
 800124c:	f001 ff56 	bl	80030fc <Siren_On>
            sys.siren_on = 1.0f;
 8001250:	4b62      	ldr	r3, [pc, #392]	@ (80013dc <Auto_Process+0x1d8>)
 8001252:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001256:	61da      	str	r2, [r3, #28]

            LED_RGB_SetState(LED_RED);
 8001258:	2004      	movs	r0, #4
 800125a:	f001 fe0b 	bl	8002e74 <LED_RGB_SetState>
            sys.led_state = LED_RED;
 800125e:	4b5f      	ldr	r3, [pc, #380]	@ (80013dc <Auto_Process+0x1d8>)
 8001260:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001264:	611a      	str	r2, [r3, #16]
            return;
 8001266:	e0b5      	b.n	80013d4 <Auto_Process+0x1d0>
        }

        if (sys.lux < 300.0f)
 8001268:	4b5c      	ldr	r3, [pc, #368]	@ (80013dc <Auto_Process+0x1d8>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	495e      	ldr	r1, [pc, #376]	@ (80013e8 <Auto_Process+0x1e4>)
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fec6 	bl	8001000 <__aeabi_fcmplt>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <Auto_Process+0x7e>
        {
            LED_RGB_SetState(LED_WHITE_100);
 800127a:	2002      	movs	r0, #2
 800127c:	f001 fdfa 	bl	8002e74 <LED_RGB_SetState>
 8001280:	e024      	b.n	80012cc <Auto_Process+0xc8>
        }
        else if (sys.lux >= 300.0f && sys.lux < 600.0f)
 8001282:	4b56      	ldr	r3, [pc, #344]	@ (80013dc <Auto_Process+0x1d8>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	4958      	ldr	r1, [pc, #352]	@ (80013e8 <Auto_Process+0x1e4>)
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fecd 	bl	8001028 <__aeabi_fcmpge>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00c      	beq.n	80012ae <Auto_Process+0xaa>
 8001294:	4b51      	ldr	r3, [pc, #324]	@ (80013dc <Auto_Process+0x1d8>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4954      	ldr	r1, [pc, #336]	@ (80013ec <Auto_Process+0x1e8>)
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff feb0 	bl	8001000 <__aeabi_fcmplt>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <Auto_Process+0xaa>
        {
            LED_RGB_SetState(LED_WHITE_50);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f001 fde4 	bl	8002e74 <LED_RGB_SetState>
 80012ac:	e00e      	b.n	80012cc <Auto_Process+0xc8>
        }
        else if (sys.lux >= 600.0f)
 80012ae:	4b4b      	ldr	r3, [pc, #300]	@ (80013dc <Auto_Process+0x1d8>)
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	494e      	ldr	r1, [pc, #312]	@ (80013ec <Auto_Process+0x1e8>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff feb7 	bl	8001028 <__aeabi_fcmpge>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <Auto_Process+0xc4>
        {
            LED_RGB_SetState(LED_OFF);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f001 fdd7 	bl	8002e74 <LED_RGB_SetState>
 80012c6:	e001      	b.n	80012cc <Auto_Process+0xc8>
        }
        else
        {

            LED_RGB_Off();
 80012c8:	f001 fdbe 	bl	8002e48 <LED_RGB_Off>
        }

        if (sys.temperature > 30.0f)
 80012cc:	4b43      	ldr	r3, [pc, #268]	@ (80013dc <Auto_Process+0x1d8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4944      	ldr	r1, [pc, #272]	@ (80013e4 <Auto_Process+0x1e0>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff feb2 	bl	800103c <__aeabi_fcmpgt>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00a      	beq.n	80012f4 <Auto_Process+0xf0>
        {
            Motor_SetLevel(3);
 80012de:	2003      	movs	r0, #3
 80012e0:	f001 feba 	bl	8003058 <Motor_SetLevel>
            sys.motor_level = 3.0f;
 80012e4:	4b3d      	ldr	r3, [pc, #244]	@ (80013dc <Auto_Process+0x1d8>)
 80012e6:	4a42      	ldr	r2, [pc, #264]	@ (80013f0 <Auto_Process+0x1ec>)
 80012e8:	615a      	str	r2, [r3, #20]

            sys.motor_dir = 0.0f;
 80012ea:	4b3c      	ldr	r3, [pc, #240]	@ (80013dc <Auto_Process+0x1d8>)
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
 80012f2:	e064      	b.n	80013be <Auto_Process+0x1ba>
        }
        else if (sys.temperature <= 30.0f && sys.temperature > 25.0f)
 80012f4:	4b39      	ldr	r3, [pc, #228]	@ (80013dc <Auto_Process+0x1d8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	493a      	ldr	r1, [pc, #232]	@ (80013e4 <Auto_Process+0x1e0>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe8a 	bl	8001014 <__aeabi_fcmple>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d010      	beq.n	8001328 <Auto_Process+0x124>
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <Auto_Process+0x1d8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	493a      	ldr	r1, [pc, #232]	@ (80013f4 <Auto_Process+0x1f0>)
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe95 	bl	800103c <__aeabi_fcmpgt>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d007      	beq.n	8001328 <Auto_Process+0x124>
        {
            Motor_SetLevel(2);
 8001318:	2002      	movs	r0, #2
 800131a:	f001 fe9d 	bl	8003058 <Motor_SetLevel>
            sys.motor_level = 2.0f;
 800131e:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <Auto_Process+0x1d8>)
 8001320:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001324:	615a      	str	r2, [r3, #20]
 8001326:	e020      	b.n	800136a <Auto_Process+0x166>
        }
        else if (sys.temperature <= 25.0f && sys.temperature > 20.0f)
 8001328:	4b2c      	ldr	r3, [pc, #176]	@ (80013dc <Auto_Process+0x1d8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4931      	ldr	r1, [pc, #196]	@ (80013f4 <Auto_Process+0x1f0>)
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fe70 	bl	8001014 <__aeabi_fcmple>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d010      	beq.n	800135c <Auto_Process+0x158>
 800133a:	4b28      	ldr	r3, [pc, #160]	@ (80013dc <Auto_Process+0x1d8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	492e      	ldr	r1, [pc, #184]	@ (80013f8 <Auto_Process+0x1f4>)
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fe7b 	bl	800103c <__aeabi_fcmpgt>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <Auto_Process+0x158>
        {
            Motor_SetLevel(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f001 fe83 	bl	8003058 <Motor_SetLevel>
            sys.motor_level = 1.0f;
 8001352:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <Auto_Process+0x1d8>)
 8001354:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001358:	615a      	str	r2, [r3, #20]
 800135a:	e006      	b.n	800136a <Auto_Process+0x166>
        }
        else
        {
            Motor_SetLevel(0);
 800135c:	2000      	movs	r0, #0
 800135e:	f001 fe7b 	bl	8003058 <Motor_SetLevel>
            sys.motor_level = 0.0f;
 8001362:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <Auto_Process+0x1d8>)
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
        }

        while (!empty(&g_uartQueue))
 800136a:	e028      	b.n	80013be <Auto_Process+0x1ba>
        {

            message_t *message = front(&g_uartQueue);
 800136c:	4823      	ldr	r0, [pc, #140]	@ (80013fc <Auto_Process+0x1f8>)
 800136e:	f002 fac5 	bl	80038fc <front>
 8001372:	6078      	str	r0, [r7, #4]

            if (message == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d02b      	beq.n	80013d2 <Auto_Process+0x1ce>
            {
                return;
            }

            if (message->header[0] == COMMAND && message->header[2] == 4 && message->header[1] == AUTO)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	785b      	ldrb	r3, [r3, #1]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d11a      	bne.n	80013b8 <Auto_Process+0x1b4>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	78db      	ldrb	r3, [r3, #3]
 8001386:	2b04      	cmp	r3, #4
 8001388:	d116      	bne.n	80013b8 <Auto_Process+0x1b4>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	789b      	ldrb	r3, [r3, #2]
 800138e:	2b20      	cmp	r3, #32
 8001390:	d112      	bne.n	80013b8 <Auto_Process+0x1b4>
            {
                sys.mode = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7918      	ldrb	r0, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7959      	ldrb	r1, [r3, #5]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	799a      	ldrb	r2, [r3, #6]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	79db      	ldrb	r3, [r3, #7]
 80013a2:	f002 f8ab 	bl	80034fc <Convert_Bytes_To_Float>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe67 	bl	800107c <__aeabi_f2uiz>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <Auto_Process+0x1d8>)
 80013b4:	f883 2020 	strb.w	r2, [r3, #32]
            }

            pop(&g_uartQueue);
 80013b8:	4810      	ldr	r0, [pc, #64]	@ (80013fc <Auto_Process+0x1f8>)
 80013ba:	f002 fa73 	bl	80038a4 <pop>
        while (!empty(&g_uartQueue))
 80013be:	480f      	ldr	r0, [pc, #60]	@ (80013fc <Auto_Process+0x1f8>)
 80013c0:	f002 fa0f 	bl	80037e2 <empty>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f083 0301 	eor.w	r3, r3, #1
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1cd      	bne.n	800136c <Auto_Process+0x168>
 80013d0:	e000      	b.n	80013d4 <Auto_Process+0x1d0>
                return;
 80013d2:	bf00      	nop
        }
    }
}
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000030c 	.word	0x2000030c
 80013e0:	420c0000 	.word	0x420c0000
 80013e4:	41f00000 	.word	0x41f00000
 80013e8:	43960000 	.word	0x43960000
 80013ec:	44160000 	.word	0x44160000
 80013f0:	40400000 	.word	0x40400000
 80013f4:	41c80000 	.word	0x41c80000
 80013f8:	41a00000 	.word	0x41a00000
 80013fc:	2000022c 	.word	0x2000022c

08001400 <Manual_Process>:
#include "led_rgb.h"
#include "motor.h"
#include "siren.h"

void Manual_Process(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
    while (!empty(&g_uartQueue) && (sys.mode == MANUAL_MODE))
 8001406:	e09f      	b.n	8001548 <Manual_Process+0x148>
    {
        message_t *message = front(&g_uartQueue);
 8001408:	4859      	ldr	r0, [pc, #356]	@ (8001570 <Manual_Process+0x170>)
 800140a:	f002 fa77 	bl	80038fc <front>
 800140e:	6078      	str	r0, [r7, #4]
        if (message == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80a8 	beq.w	8001568 <Manual_Process+0x168>
        {
            return;
        }
        // Xử lý gói tin trong chế độ Manual
        if (message->header[0] == COMMAND && message->header[2] == 4)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	785b      	ldrb	r3, [r3, #1]
 800141c:	2b01      	cmp	r3, #1
 800141e:	f040 8090 	bne.w	8001542 <Manual_Process+0x142>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	78db      	ldrb	r3, [r3, #3]
 8001426:	2b04      	cmp	r3, #4
 8001428:	f040 808b 	bne.w	8001542 <Manual_Process+0x142>
        {
            switch (message->header[1])
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	789b      	ldrb	r3, [r3, #2]
 8001430:	3b11      	subs	r3, #17
 8001432:	2b0f      	cmp	r3, #15
 8001434:	f200 8085 	bhi.w	8001542 <Manual_Process+0x142>
 8001438:	a201      	add	r2, pc, #4	@ (adr r2, 8001440 <Manual_Process+0x40>)
 800143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143e:	bf00      	nop
 8001440:	08001481 	.word	0x08001481
 8001444:	080014b1 	.word	0x080014b1
 8001448:	080014e1 	.word	0x080014e1
 800144c:	08001543 	.word	0x08001543
 8001450:	08001543 	.word	0x08001543
 8001454:	08001543 	.word	0x08001543
 8001458:	08001543 	.word	0x08001543
 800145c:	08001543 	.word	0x08001543
 8001460:	08001543 	.word	0x08001543
 8001464:	08001543 	.word	0x08001543
 8001468:	08001543 	.word	0x08001543
 800146c:	08001543 	.word	0x08001543
 8001470:	08001543 	.word	0x08001543
 8001474:	08001543 	.word	0x08001543
 8001478:	08001543 	.word	0x08001543
 800147c:	0800151b 	.word	0x0800151b
            {
            case LED:
                sys.led_state = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7918      	ldrb	r0, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7959      	ldrb	r1, [r3, #5]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	799a      	ldrb	r2, [r3, #6]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	79db      	ldrb	r3, [r3, #7]
 8001490:	f002 f834 	bl	80034fc <Convert_Bytes_To_Float>
 8001494:	4603      	mov	r3, r0
 8001496:	4a37      	ldr	r2, [pc, #220]	@ (8001574 <Manual_Process+0x174>)
 8001498:	6113      	str	r3, [r2, #16]
                LED_RGB_SetState(sys.led_state);
 800149a:	4b36      	ldr	r3, [pc, #216]	@ (8001574 <Manual_Process+0x174>)
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fdec 	bl	800107c <__aeabi_f2uiz>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fce3 	bl	8002e74 <LED_RGB_SetState>
                break;
 80014ae:	e048      	b.n	8001542 <Manual_Process+0x142>
            case MOTOR:
                sys.motor_level = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7918      	ldrb	r0, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7959      	ldrb	r1, [r3, #5]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	799a      	ldrb	r2, [r3, #6]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	79db      	ldrb	r3, [r3, #7]
 80014c0:	f002 f81c 	bl	80034fc <Convert_Bytes_To_Float>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001574 <Manual_Process+0x174>)
 80014c8:	6153      	str	r3, [r2, #20]
                Motor_SetLevel(sys.motor_level);
 80014ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <Manual_Process+0x174>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fdd4 	bl	800107c <__aeabi_f2uiz>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 fdbd 	bl	8003058 <Motor_SetLevel>

                break;
 80014de:	e030      	b.n	8001542 <Manual_Process+0x142>
            case SIREN:
                sys.siren_on = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7918      	ldrb	r0, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7959      	ldrb	r1, [r3, #5]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	799a      	ldrb	r2, [r3, #6]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	79db      	ldrb	r3, [r3, #7]
 80014f0:	f002 f804 	bl	80034fc <Convert_Bytes_To_Float>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001574 <Manual_Process+0x174>)
 80014f8:	61d3      	str	r3, [r2, #28]
                if (sys.siren_on > 0)
 80014fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <Manual_Process+0x174>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f04f 0100 	mov.w	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd9a 	bl	800103c <__aeabi_fcmpgt>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <Manual_Process+0x114>
                {
                    Siren_On();
 800150e:	f001 fdf5 	bl	80030fc <Siren_On>
                }
                else
                {
                    Siren_Off();
                }
                break;
 8001512:	e016      	b.n	8001542 <Manual_Process+0x142>
                    Siren_Off();
 8001514:	f001 fdfe 	bl	8003114 <Siren_Off>
                break;
 8001518:	e013      	b.n	8001542 <Manual_Process+0x142>
            case AUTO:
                sys.mode = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7918      	ldrb	r0, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7959      	ldrb	r1, [r3, #5]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	799a      	ldrb	r2, [r3, #6]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	79db      	ldrb	r3, [r3, #7]
 800152a:	f001 ffe7 	bl	80034fc <Convert_Bytes_To_Float>
 800152e:	4603      	mov	r3, r0
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fda3 	bl	800107c <__aeabi_f2uiz>
 8001536:	4603      	mov	r3, r0
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <Manual_Process+0x174>)
 800153c:	f883 2020 	strb.w	r2, [r3, #32]
                // TODO
                break;
 8001540:	bf00      	nop
            }
        }
        pop(&g_uartQueue);
 8001542:	480b      	ldr	r0, [pc, #44]	@ (8001570 <Manual_Process+0x170>)
 8001544:	f002 f9ae 	bl	80038a4 <pop>
    while (!empty(&g_uartQueue) && (sys.mode == MANUAL_MODE))
 8001548:	4809      	ldr	r0, [pc, #36]	@ (8001570 <Manual_Process+0x170>)
 800154a:	f002 f94a 	bl	80037e2 <empty>
 800154e:	4603      	mov	r3, r0
 8001550:	f083 0301 	eor.w	r3, r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <Manual_Process+0x16a>
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <Manual_Process+0x174>)
 800155c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001560:	2b01      	cmp	r3, #1
 8001562:	f43f af51 	beq.w	8001408 <Manual_Process+0x8>
 8001566:	e000      	b.n	800156a <Manual_Process+0x16a>
            return;
 8001568:	bf00      	nop
    }
}
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000022c 	.word	0x2000022c
 8001574:	2000030c 	.word	0x2000030c

08001578 <main>:
 */

#include "app_main.h"

int main(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    App_Init();
 800157c:	f7ff fe0e 	bl	800119c <App_Init>
    while (1)
    {
        App_Loop();
 8001580:	f7ff fe28 	bl	80011d4 <App_Loop>
 8001584:	e7fc      	b.n	8001580 <main+0x8>

08001586 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  return 1;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <_kill>:

int _kill(int pid, int sig)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800159e:	f003 f857 	bl	8004650 <__errno>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2216      	movs	r2, #22
 80015a6:	601a      	str	r2, [r3, #0]
  return -1;
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_exit>:

void _exit (int status)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ffe7 	bl	8001594 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015c6:	bf00      	nop
 80015c8:	e7fd      	b.n	80015c6 <_exit+0x12>

080015ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e00a      	b.n	80015f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015dc:	f3af 8000 	nop.w
 80015e0:	4601      	mov	r1, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	60ba      	str	r2, [r7, #8]
 80015e8:	b2ca      	uxtb	r2, r1
 80015ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3301      	adds	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	dbf0      	blt.n	80015dc <_read+0x12>
  }

  return len;
 80015fa:	687b      	ldr	r3, [r7, #4]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e009      	b.n	800162a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	60ba      	str	r2, [r7, #8]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3301      	adds	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	dbf1      	blt.n	8001616 <_write+0x12>
  }
  return len;
 8001632:	687b      	ldr	r3, [r7, #4]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_close>:

int _close(int file)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001662:	605a      	str	r2, [r3, #4]
  return 0;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <_isatty>:

int _isatty(int file)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	@ (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f002 ffc0 	bl	8004650 <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20002800 	.word	0x20002800
 80016fc:	00000400 	.word	0x00000400
 8001700:	20000330 	.word	0x20000330
 8001704:	20000528 	.word	0x20000528

08001708 <ADC_Init>:
/* stm32_adc.c - Minimal ADC Driver for STM32F103C6T6 */

#include "stm32_adc.h"

StatusTypeDef ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    if (hadc == NULL || hadc->Instance != ADC1) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d004      	beq.n	8001720 <ADC_Init+0x18>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a3a      	ldr	r2, [pc, #232]	@ (8001804 <ADC_Init+0xfc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d001      	beq.n	8001724 <ADC_Init+0x1c>
        return DUNGX_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e069      	b.n	80017f8 <ADC_Init+0xf0>
    }

    // Enable ADC1 clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001724:	4b38      	ldr	r3, [pc, #224]	@ (8001808 <ADC_Init+0x100>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a37      	ldr	r2, [pc, #220]	@ (8001808 <ADC_Init+0x100>)
 800172a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800172e:	6193      	str	r3, [r2, #24]

    // Reset CR1 and CR2
    hadc->Instance->CR1 = 0;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR2 = 0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]

    // Set scan mode
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001748:	d107      	bne.n	800175a <ADC_Init+0x52>
        hadc->Instance->CR1 |= ADC_SCAN_ENABLE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001758:	605a      	str	r2, [r3, #4]
    }

    // Set data alignment
    if (hadc->Init.DataAlign == ADC_DATAALIGN_LEFT) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001762:	d107      	bne.n	8001774 <ADC_Init+0x6c>
        hadc->Instance->CR2 |= ADC_DATAALIGN_LEFT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001772:	609a      	str	r2, [r3, #8]
    }

    // Set continuous conversion
    if (hadc->Init.ContinuousConvMode == ENABLE) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7b1b      	ldrb	r3, [r3, #12]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d107      	bne.n	800178c <ADC_Init+0x84>
        hadc->Instance->CR2 |= ADC_CR2_CONT;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0202 	orr.w	r2, r2, #2
 800178a:	609a      	str	r2, [r3, #8]
    }

    // Set number of conversions
    hadc->Instance->SQR1 &= ~ADC_SQR1_L;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800179a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= (hadc->Init.NbrOfConversion - 1) << 20;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	051a      	lsls	r2, r3, #20
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable ADC
    ADC_ENABLE(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0201 	orr.w	r2, r2, #1
 80017c0:	609a      	str	r2, [r3, #8]

    // Short delay before calibration
    for (volatile int i = 0; i < 1000; ++i);
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	e002      	b.n	80017ce <ADC_Init+0xc6>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3301      	adds	r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017d4:	dbf8      	blt.n	80017c8 <ADC_Init+0xc0>

    // Calibration
    hadc->Instance->CR2 |= ADC_CR2_CAL;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0204 	orr.w	r2, r2, #4
 80017e4:	609a      	str	r2, [r3, #8]
    while (hadc->Instance->CR2 & ADC_CR2_CAL);
 80017e6:	bf00      	nop
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f8      	bne.n	80017e8 <ADC_Init+0xe0>

    return DUNGX_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40012400 	.word	0x40012400
 8001808:	40021000 	.word	0x40021000

0800180c <ADC_ConfigChannel>:

StatusTypeDef ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    if (hadc == NULL || sConfig == NULL) {
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <ADC_ConfigChannel+0x16>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <ADC_ConfigChannel+0x1a>
        return DUNGX_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e022      	b.n	800186c <ADC_ConfigChannel+0x60>
    }

    // Configure channel rank in regular sequence
    hadc->Instance->SQR3 &= ~ADC_SQR3_SQ1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 021f 	bic.w	r2, r2, #31
 8001834:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= sConfig->Channel;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	635a      	str	r2, [r3, #52]	@ 0x34

    // Configure sample time (only SMP0 used here for simplicity)
    hadc->Instance->SMPR2 &= ~ADC_SMPR2_SMP0;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0207 	bic.w	r2, r2, #7
 8001856:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= sConfig->SamplingTime;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6919      	ldr	r1, [r3, #16]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	611a      	str	r2, [r3, #16]

    return DUNGX_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <ADC_Start>:

StatusTypeDef ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
    if (hadc == NULL) {
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <ADC_Start+0x12>
        return DUNGX_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e010      	b.n	80018aa <ADC_Start+0x34>
    }

    // Start conversion
    hadc->Instance->CR2 |= ADC_CR2_ADON;  // First write to ADON turns ADC on
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_ADON;  // Second write starts conversion
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	609a      	str	r2, [r3, #8]

    return DUNGX_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <ADC_PollForConversion>:

StatusTypeDef ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
    if (hadc == NULL) {
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d108      	bne.n	80018d6 <ADC_PollForConversion+0x22>
        return DUNGX_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e00e      	b.n	80018e6 <ADC_PollForConversion+0x32>
    }

    while (!(hadc->Instance->SR & ADC_SR_EOC)) {
        if (Timeout-- == 0) return DUNGX_TIMEOUT;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	1e5a      	subs	r2, r3, #1
 80018cc:	603a      	str	r2, [r7, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <ADC_PollForConversion+0x22>
 80018d2:	2303      	movs	r3, #3
 80018d4:	e007      	b.n	80018e6 <ADC_PollForConversion+0x32>
    while (!(hadc->Instance->SR & ADC_SR_EOC)) {
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f1      	beq.n	80018c8 <ADC_PollForConversion+0x14>
    }

    return DUNGX_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <ADC_GetValue>:

uint32_t ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    if (hadc == NULL) return 0;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <ADC_GetValue+0x12>
 80018fe:	2300      	movs	r3, #0
 8001900:	e002      	b.n	8001908 <ADC_GetValue+0x18>
    return hadc->Instance->DR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
	...

08001914 <GPIO_Init>:
/* stm32_gpio.c - Minimal GPIO HAL Implementation for STM32F103C6T6 with EXTI */

#include "stm32_gpio.h"

void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	@ 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
    uint32_t pos = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    while ((GPIO_Init->Pin >> pos) != 0x00u)
 8001922:	e108      	b.n	8001b36 <GPIO_Init+0x222>
    {
        if ((GPIO_Init->Pin & (1u << pos)) != 0)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80fc 	beq.w	8001b30 <GPIO_Init+0x21c>
        {
            uint32_t shift = (pos % 8) * 4;
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	613b      	str	r3, [r7, #16]
            __IO uint32_t *reg = (pos < 8) ? &GPIOx->CRL : &GPIOx->CRH;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	2b07      	cmp	r3, #7
 8001946:	d801      	bhi.n	800194c <GPIO_Init+0x38>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	e001      	b.n	8001950 <GPIO_Init+0x3c>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3304      	adds	r3, #4
 8001950:	60fb      	str	r3, [r7, #12]

            *reg &= ~(0xFu << shift);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	210f      	movs	r1, #15
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	401a      	ands	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	601a      	str	r2, [r3, #0]

            if (GPIO_Init->Mode == GPIO_MODE_INPUT)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d12f      	bne.n	80019ce <GPIO_Init+0xba>
            {
                if (GPIO_Init->Pull == GPIO_PULLUP)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10e      	bne.n	8001994 <GPIO_Init+0x80>
                {
                    *reg |= (0x08u << shift); // CNF = 10 input PU/PD
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2108      	movs	r1, #8
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	431a      	orrs	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	601a      	str	r2, [r3, #0]
                    GPIOx->BSRR = (1u << pos);
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	409a      	lsls	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]
 8001992:	e05f      	b.n	8001a54 <GPIO_Init+0x140>
                }
                else if (GPIO_Init->Pull == GPIO_PULLDOWN)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d10e      	bne.n	80019ba <GPIO_Init+0xa6>
                {
                    *reg |= (0x08u << shift); // CNF = 10 input PU/PD
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2108      	movs	r1, #8
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	431a      	orrs	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	601a      	str	r2, [r3, #0]
                    GPIOx->BRR = (1u << pos);
 80019ae:	2201      	movs	r2, #1
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	409a      	lsls	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	e04c      	b.n	8001a54 <GPIO_Init+0x140>
                }
                else
                {
                    *reg |= (0x04u << shift); // CNF = 01 floating
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2104      	movs	r1, #4
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	431a      	orrs	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e042      	b.n	8001a54 <GPIO_Init+0x140>
                }
            }
            else if (GPIO_Init->Mode == GPIO_MODE_ANALOG)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d104      	bne.n	80019e0 <GPIO_Init+0xcc>
            {
                *reg |= (0x00u << shift); // CNF = 00 analog
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e039      	b.n	8001a54 <GPIO_Init+0x140>
            }
            else // Output or AF
            {
                uint32_t mode = 0x00u;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
                if (GPIO_Init->Speed == GPIO_SPEED_LOW) mode = 0x02;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <GPIO_Init+0xde>
 80019ec:	2302      	movs	r3, #2
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	e008      	b.n	8001a04 <GPIO_Init+0xf0>
                else if (GPIO_Init->Speed == GPIO_SPEED_MEDIUM) mode = 0x01;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d102      	bne.n	8001a00 <GPIO_Init+0xec>
 80019fa:	2301      	movs	r3, #1
 80019fc:	61bb      	str	r3, [r7, #24]
 80019fe:	e001      	b.n	8001a04 <GPIO_Init+0xf0>
                else mode = 0x03;
 8001a00:	2303      	movs	r3, #3
 8001a02:	61bb      	str	r3, [r7, #24]

                uint32_t cnf = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
                if (GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) cnf = 0x00;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d102      	bne.n	8001a16 <GPIO_Init+0x102>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e013      	b.n	8001a3e <GPIO_Init+0x12a>
                else if (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) cnf = 0x04;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b11      	cmp	r3, #17
 8001a1c:	d102      	bne.n	8001a24 <GPIO_Init+0x110>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e00c      	b.n	8001a3e <GPIO_Init+0x12a>
                else if (GPIO_Init->Mode == GPIO_MODE_AF_PP) cnf = 0x08;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d102      	bne.n	8001a32 <GPIO_Init+0x11e>
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e005      	b.n	8001a3e <GPIO_Init+0x12a>
                else if (GPIO_Init->Mode == GPIO_MODE_AF_OD) cnf = 0x0C;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b12      	cmp	r3, #18
 8001a38:	d101      	bne.n	8001a3e <GPIO_Init+0x12a>
 8001a3a:	230c      	movs	r3, #12
 8001a3c:	617b      	str	r3, [r7, #20]

                *reg |= ((mode | cnf) << shift);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	4319      	orrs	r1, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	601a      	str	r2, [r3, #0]
            }

            // EXTI configuration if needed
            if ((GPIO_Init->Mode & 0x10000000u) != 0)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d067      	beq.n	8001b30 <GPIO_Init+0x21c>
            {
                uint32_t exti_line = 1u << pos;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	60bb      	str	r3, [r7, #8]
                AFIO->EXTICR[pos >> 2] &= ~(0xFu << (4 * (pos & 0x03)));
 8001a6a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b54 <GPIO_Init+0x240>)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	220f      	movs	r2, #15
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43da      	mvns	r2, r3
 8001a86:	4833      	ldr	r0, [pc, #204]	@ (8001b54 <GPIO_Init+0x240>)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                AFIO->EXTICR[pos >> 2] |= ((GPIOx == GPIOA ? 0 : (GPIOx == GPIOB ? 1 : 2)) << (4 * (pos & 0x03)));
 8001a94:	4a2f      	ldr	r2, [pc, #188]	@ (8001b54 <GPIO_Init+0x240>)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	492d      	ldr	r1, [pc, #180]	@ (8001b58 <GPIO_Init+0x244>)
 8001aa4:	428b      	cmp	r3, r1
 8001aa6:	d007      	beq.n	8001ab8 <GPIO_Init+0x1a4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	492c      	ldr	r1, [pc, #176]	@ (8001b5c <GPIO_Init+0x248>)
 8001aac:	428b      	cmp	r3, r1
 8001aae:	d101      	bne.n	8001ab4 <GPIO_Init+0x1a0>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e002      	b.n	8001aba <GPIO_Init+0x1a6>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e000      	b.n	8001aba <GPIO_Init+0x1a6>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	69f9      	ldr	r1, [r7, #28]
 8001abc:	f001 0103 	and.w	r1, r1, #3
 8001ac0:	0089      	lsls	r1, r1, #2
 8001ac2:	408b      	lsls	r3, r1
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	4923      	ldr	r1, [pc, #140]	@ (8001b54 <GPIO_Init+0x240>)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	4302      	orrs	r2, r0
 8001ace:	3302      	adds	r3, #2
 8001ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (GPIO_Init->Mode & 0x00100000u) EXTI->RTSR |= exti_line; else EXTI->RTSR &= ~exti_line;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <GPIO_Init+0x1da>
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b60 <GPIO_Init+0x24c>)
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	491e      	ldr	r1, [pc, #120]	@ (8001b60 <GPIO_Init+0x24c>)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]
 8001aec:	e006      	b.n	8001afc <GPIO_Init+0x1e8>
 8001aee:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <GPIO_Init+0x24c>)
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	491a      	ldr	r1, [pc, #104]	@ (8001b60 <GPIO_Init+0x24c>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]
                if (GPIO_Init->Mode & 0x00200000u) EXTI->FTSR |= exti_line; else EXTI->FTSR &= ~exti_line;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <GPIO_Init+0x202>
 8001b08:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <GPIO_Init+0x24c>)
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	4914      	ldr	r1, [pc, #80]	@ (8001b60 <GPIO_Init+0x24c>)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60cb      	str	r3, [r1, #12]
 8001b14:	e006      	b.n	8001b24 <GPIO_Init+0x210>
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <GPIO_Init+0x24c>)
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4910      	ldr	r1, [pc, #64]	@ (8001b60 <GPIO_Init+0x24c>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	60cb      	str	r3, [r1, #12]

                EXTI->IMR |= exti_line;
 8001b24:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <GPIO_Init+0x24c>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	490d      	ldr	r1, [pc, #52]	@ (8001b60 <GPIO_Init+0x24c>)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
            }
        }
        pos++;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	3301      	adds	r3, #1
 8001b34:	61fb      	str	r3, [r7, #28]
    while ((GPIO_Init->Pin >> pos) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f47f aeef 	bne.w	8001924 <GPIO_Init+0x10>
    }
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	3724      	adds	r7, #36	@ 0x24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40010000 	.word	0x40010000
 8001b58:	40010800 	.word	0x40010800
 8001b5c:	40010c00 	.word	0x40010c00
 8001b60:	40010400 	.word	0x40010400

08001b64 <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
 8001b70:	4613      	mov	r3, r2
 8001b72:	707b      	strb	r3, [r7, #1]
    if (PinState != GPIO_PIN_RESET)
 8001b74:	787b      	ldrb	r3, [r7, #1]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <GPIO_WritePin+0x1e>
        GPIOx->BSRR = GPIO_Pin;
 8001b7a:	887a      	ldrh	r2, [r7, #2]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	611a      	str	r2, [r3, #16]
    else
        GPIOx->BRR = GPIO_Pin;
}
 8001b80:	e002      	b.n	8001b88 <GPIO_WritePin+0x24>
        GPIOx->BRR = GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	615a      	str	r2, [r3, #20]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
	...

08001b94 <TIM_Base_Init>:
/* stm32_tim.c - Minimal Timer HAL Implementation for STM32F103C6T6 */

#include "stm32_tim.h"

StatusTypeDef TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    if (htim == NULL || htim->Instance == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <TIM_Base_Init+0x16>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <TIM_Base_Init+0x1a>
        return DUNGX_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e041      	b.n	8001c32 <TIM_Base_Init+0x9e>

    // Enable timer clock
    if (htim->Instance == TIM1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a22      	ldr	r2, [pc, #136]	@ (8001c3c <TIM_Base_Init+0xa8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d106      	bne.n	8001bc6 <TIM_Base_Init+0x32>
        RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001bb8:	4b21      	ldr	r3, [pc, #132]	@ (8001c40 <TIM_Base_Init+0xac>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a20      	ldr	r2, [pc, #128]	@ (8001c40 <TIM_Base_Init+0xac>)
 8001bbe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	e016      	b.n	8001bf4 <TIM_Base_Init+0x60>
    else if (htim->Instance == TIM2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bce:	d106      	bne.n	8001bde <TIM_Base_Init+0x4a>
        RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <TIM_Base_Init+0xac>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c40 <TIM_Base_Init+0xac>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	61d3      	str	r3, [r2, #28]
 8001bdc:	e00a      	b.n	8001bf4 <TIM_Base_Init+0x60>
    else if (htim->Instance == TIM3)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a18      	ldr	r2, [pc, #96]	@ (8001c44 <TIM_Base_Init+0xb0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d105      	bne.n	8001bf4 <TIM_Base_Init+0x60>
        RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001be8:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <TIM_Base_Init+0xac>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <TIM_Base_Init+0xac>)
 8001bee:	f043 0302 	orr.w	r3, r3, #2
 8001bf2:	61d3      	str	r3, [r2, #28]

    // Cấu hình prescaler và ARR
    htim->Instance->PSC = htim->Init.Prescaler;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6852      	ldr	r2, [r2, #4]
 8001bfc:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = htim->Init.Period;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68d2      	ldr	r2, [r2, #12]
 8001c06:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Giữ lại các bit khác, chỉ thay thế mode và division
    htim->Instance->CR1 &= ~(TIM_CR1_CMS | TIM_CR1_DIR | TIM_CR1_CKD);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 725c 	bic.w	r2, r2, #880	@ 0x370
 8001c16:	601a      	str	r2, [r3, #0]
    htim->Instance->CR1 |= htim->Init.CounterMode | htim->Init.ClockDivision;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6819      	ldr	r1, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]

    return DUNGX_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40000400 	.word	0x40000400

08001c48 <TIM_PWM_Init>:

StatusTypeDef TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
    return TIM_Base_Init(htim); // For simplicity, PWM init is same as base init
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff9f 	bl	8001b94 <TIM_Base_Init>
 8001c56:	4603      	mov	r3, r0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <TIM_PWM_ConfigChannel>:

StatusTypeDef TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
    if (htim == NULL || sConfig == NULL)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <TIM_PWM_ConfigChannel+0x18>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <TIM_PWM_ConfigChannel+0x1c>
        return DUNGX_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0ea      	b.n	8001e52 <TIM_PWM_ConfigChannel+0x1f2>

    // Set mode and polarity
    switch (Channel)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	f200 80e4 	bhi.w	8001e4c <TIM_PWM_ConfigChannel+0x1ec>
 8001c84:	a201      	add	r2, pc, #4	@ (adr r2, 8001c8c <TIM_PWM_ConfigChannel+0x2c>)
 8001c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8a:	bf00      	nop
 8001c8c:	08001cc1 	.word	0x08001cc1
 8001c90:	08001e4d 	.word	0x08001e4d
 8001c94:	08001e4d 	.word	0x08001e4d
 8001c98:	08001e4d 	.word	0x08001e4d
 8001c9c:	08001d41 	.word	0x08001d41
 8001ca0:	08001e4d 	.word	0x08001e4d
 8001ca4:	08001e4d 	.word	0x08001e4d
 8001ca8:	08001e4d 	.word	0x08001e4d
 8001cac:	08001d9b 	.word	0x08001d9b
 8001cb0:	08001e4d 	.word	0x08001e4d
 8001cb4:	08001e4d 	.word	0x08001e4d
 8001cb8:	08001e4d 	.word	0x08001e4d
 8001cbc:	08001df3 	.word	0x08001df3
    {
    case TIM_CHANNEL_1:
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1M;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001cce:	619a      	str	r2, [r3, #24]
        htim->Instance->CCMR1 |= sConfig->OCMode;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6999      	ldr	r1, [r3, #24]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	619a      	str	r2, [r3, #24]
        htim->Instance->CCR1 = sConfig->Pulse;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	6852      	ldr	r2, [r2, #4]
 8001cea:	635a      	str	r2, [r3, #52]	@ 0x34

        htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0208 	orr.w	r2, r2, #8
 8001cfa:	619a      	str	r2, [r3, #24]
        if (sConfig->OCFastMode == TIM_OCFAST_DISABLE)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <TIM_PWM_ConfigChannel+0xb4>
            htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0204 	bic.w	r2, r2, #4
 8001d12:	619a      	str	r2, [r3, #24]
        if (sConfig->OCPolarity == TIM_OCPOLARITY_LOW)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d108      	bne.n	8001d2e <TIM_PWM_ConfigChannel+0xce>
            htim->Instance->CCER |= TIM_CCER_CC1P;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6a1a      	ldr	r2, [r3, #32]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0202 	orr.w	r2, r2, #2
 8001d2a:	621a      	str	r2, [r3, #32]
        else
            htim->Instance->CCER &= ~TIM_CCER_CC1P;
        break;
 8001d2c:	e090      	b.n	8001e50 <TIM_PWM_ConfigChannel+0x1f0>
            htim->Instance->CCER &= ~TIM_CCER_CC1P;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6a1a      	ldr	r2, [r3, #32]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0202 	bic.w	r2, r2, #2
 8001d3c:	621a      	str	r2, [r3, #32]
        break;
 8001d3e:	e087      	b.n	8001e50 <TIM_PWM_ConfigChannel+0x1f0>
    case TIM_CHANNEL_2:
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2M;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001d4e:	619a      	str	r2, [r3, #24]
        htim->Instance->CCMR1 |= (sConfig->OCMode << 8);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6999      	ldr	r1, [r3, #24]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	021a      	lsls	r2, r3, #8
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	619a      	str	r2, [r3, #24]
        htim->Instance->CCR2 = sConfig->Pulse;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	6852      	ldr	r2, [r2, #4]
 8001d6c:	639a      	str	r2, [r3, #56]	@ 0x38
        if (sConfig->OCPolarity == TIM_OCPOLARITY_LOW)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d108      	bne.n	8001d88 <TIM_PWM_ConfigChannel+0x128>
            htim->Instance->CCER |= TIM_CCER_CC2P;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a1a      	ldr	r2, [r3, #32]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0220 	orr.w	r2, r2, #32
 8001d84:	621a      	str	r2, [r3, #32]
        else
            htim->Instance->CCER &= ~TIM_CCER_CC2P;
        break;
 8001d86:	e063      	b.n	8001e50 <TIM_PWM_ConfigChannel+0x1f0>
            htim->Instance->CCER &= ~TIM_CCER_CC2P;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6a1a      	ldr	r2, [r3, #32]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0220 	bic.w	r2, r2, #32
 8001d96:	621a      	str	r2, [r3, #32]
        break;
 8001d98:	e05a      	b.n	8001e50 <TIM_PWM_ConfigChannel+0x1f0>
    case TIM_CHANNEL_3:
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3M;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001da8:	61da      	str	r2, [r3, #28]
        htim->Instance->CCMR2 |= sConfig->OCMode;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	69d9      	ldr	r1, [r3, #28]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	61da      	str	r2, [r3, #28]
        htim->Instance->CCR3 = sConfig->Pulse;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	6852      	ldr	r2, [r2, #4]
 8001dc4:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (sConfig->OCPolarity == TIM_OCPOLARITY_LOW)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d108      	bne.n	8001de0 <TIM_PWM_ConfigChannel+0x180>
            htim->Instance->CCER |= TIM_CCER_CC3P;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6a1a      	ldr	r2, [r3, #32]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ddc:	621a      	str	r2, [r3, #32]
        else
            htim->Instance->CCER &= ~TIM_CCER_CC3P;
        break;
 8001dde:	e037      	b.n	8001e50 <TIM_PWM_ConfigChannel+0x1f0>
            htim->Instance->CCER &= ~TIM_CCER_CC3P;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6a1a      	ldr	r2, [r3, #32]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001dee:	621a      	str	r2, [r3, #32]
        break;
 8001df0:	e02e      	b.n	8001e50 <TIM_PWM_ConfigChannel+0x1f0>
    case TIM_CHANNEL_4:
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4M;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69da      	ldr	r2, [r3, #28]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001e00:	61da      	str	r2, [r3, #28]
        htim->Instance->CCMR2 |= (sConfig->OCMode << 8);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	69d9      	ldr	r1, [r3, #28]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	021a      	lsls	r2, r3, #8
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	61da      	str	r2, [r3, #28]
        htim->Instance->CCR4 = sConfig->Pulse;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	6852      	ldr	r2, [r2, #4]
 8001e1e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (sConfig->OCPolarity == TIM_OCPOLARITY_LOW)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d108      	bne.n	8001e3a <TIM_PWM_ConfigChannel+0x1da>
            htim->Instance->CCER |= TIM_CCER_CC4P;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6a1a      	ldr	r2, [r3, #32]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e36:	621a      	str	r2, [r3, #32]
        else
            htim->Instance->CCER &= ~TIM_CCER_CC4P;
        break;
 8001e38:	e00a      	b.n	8001e50 <TIM_PWM_ConfigChannel+0x1f0>
            htim->Instance->CCER &= ~TIM_CCER_CC4P;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6a1a      	ldr	r2, [r3, #32]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e48:	621a      	str	r2, [r3, #32]
        break;
 8001e4a:	e001      	b.n	8001e50 <TIM_PWM_ConfigChannel+0x1f0>
    default:
        return DUNGX_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <TIM_PWM_ConfigChannel+0x1f2>
    }

    return DUNGX_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <TIM_PWM_Start>:

StatusTypeDef TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    switch (Channel)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b0c      	cmp	r3, #12
 8001e6a:	d841      	bhi.n	8001ef0 <TIM_PWM_Start+0x94>
 8001e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e74 <TIM_PWM_Start+0x18>)
 8001e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e72:	bf00      	nop
 8001e74:	08001ea9 	.word	0x08001ea9
 8001e78:	08001ef1 	.word	0x08001ef1
 8001e7c:	08001ef1 	.word	0x08001ef1
 8001e80:	08001ef1 	.word	0x08001ef1
 8001e84:	08001ebb 	.word	0x08001ebb
 8001e88:	08001ef1 	.word	0x08001ef1
 8001e8c:	08001ef1 	.word	0x08001ef1
 8001e90:	08001ef1 	.word	0x08001ef1
 8001e94:	08001ecd 	.word	0x08001ecd
 8001e98:	08001ef1 	.word	0x08001ef1
 8001e9c:	08001ef1 	.word	0x08001ef1
 8001ea0:	08001ef1 	.word	0x08001ef1
 8001ea4:	08001edf 	.word	0x08001edf
    {
    case TIM_CHANNEL_1:
        htim->Instance->CCER |= TIM_CCER_CC1E;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6a1a      	ldr	r2, [r3, #32]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	621a      	str	r2, [r3, #32]
        break;
 8001eb8:	e01c      	b.n	8001ef4 <TIM_PWM_Start+0x98>
    case TIM_CHANNEL_2:
        htim->Instance->CCER |= TIM_CCER_CC2E;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6a1a      	ldr	r2, [r3, #32]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0210 	orr.w	r2, r2, #16
 8001ec8:	621a      	str	r2, [r3, #32]
        break;
 8001eca:	e013      	b.n	8001ef4 <TIM_PWM_Start+0x98>
    case TIM_CHANNEL_3:
        htim->Instance->CCER |= TIM_CCER_CC3E;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eda:	621a      	str	r2, [r3, #32]
        break;
 8001edc:	e00a      	b.n	8001ef4 <TIM_PWM_Start+0x98>
    case TIM_CHANNEL_4:
        htim->Instance->CCER |= TIM_CCER_CC4E;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6a1a      	ldr	r2, [r3, #32]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001eec:	621a      	str	r2, [r3, #32]
        break;
 8001eee:	e001      	b.n	8001ef4 <TIM_PWM_Start+0x98>
    default:
        return DUNGX_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e01d      	b.n	8001f30 <TIM_PWM_Start+0xd4>
    }

    if (htim->Instance == TIM1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a10      	ldr	r2, [pc, #64]	@ (8001f3c <TIM_PWM_Start+0xe0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d10f      	bne.n	8001f1e <TIM_PWM_Start+0xc2>
    {
        htim->Instance->BDTR |= TIM_BDTR_MOE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f0c:	645a      	str	r2, [r3, #68]	@ 0x44
        htim->Instance->CR1 |= TIM_CR1_ARPE; // Auto-reload preload enable
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f1c:	601a      	str	r2, [r3, #0]
    }

    TIM_ENABLE(htim);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
    return DUNGX_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40012c00 	.word	0x40012c00

08001f40 <TIM_SetCompare>:
    TIM_DISABLE(htim);
    return DUNGX_OK;
}

void TIM_SetCompare(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t Compare)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
    if (htim == NULL)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d034      	beq.n	8001fbc <TIM_SetCompare+0x7c>
        return;

    switch (Channel)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b0c      	cmp	r3, #12
 8001f56:	d833      	bhi.n	8001fc0 <TIM_SetCompare+0x80>
 8001f58:	a201      	add	r2, pc, #4	@ (adr r2, 8001f60 <TIM_SetCompare+0x20>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	08001f95 	.word	0x08001f95
 8001f64:	08001fc1 	.word	0x08001fc1
 8001f68:	08001fc1 	.word	0x08001fc1
 8001f6c:	08001fc1 	.word	0x08001fc1
 8001f70:	08001f9f 	.word	0x08001f9f
 8001f74:	08001fc1 	.word	0x08001fc1
 8001f78:	08001fc1 	.word	0x08001fc1
 8001f7c:	08001fc1 	.word	0x08001fc1
 8001f80:	08001fa9 	.word	0x08001fa9
 8001f84:	08001fc1 	.word	0x08001fc1
 8001f88:	08001fc1 	.word	0x08001fc1
 8001f8c:	08001fc1 	.word	0x08001fc1
 8001f90:	08001fb3 	.word	0x08001fb3
    {
    case TIM_CHANNEL_1:
        htim->Instance->CCR1 = Compare;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8001f9c:	e011      	b.n	8001fc2 <TIM_SetCompare+0x82>
    case TIM_CHANNEL_2:
        htim->Instance->CCR2 = Compare;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8001fa6:	e00c      	b.n	8001fc2 <TIM_SetCompare+0x82>
    case TIM_CHANNEL_3:
        htim->Instance->CCR3 = Compare;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8001fb0:	e007      	b.n	8001fc2 <TIM_SetCompare+0x82>
    case TIM_CHANNEL_4:
        htim->Instance->CCR4 = Compare;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8001fba:	e002      	b.n	8001fc2 <TIM_SetCompare+0x82>
        return;
 8001fbc:	bf00      	nop
 8001fbe:	e000      	b.n	8001fc2 <TIM_SetCompare+0x82>
    default:
        break;
 8001fc0:	bf00      	nop
    }
}
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db0b      	blt.n	8001ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4906      	ldr	r1, [pc, #24]	@ (8002000 <__NVIC_EnableIRQ+0x34>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2001      	movs	r0, #1
 8001fee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	@ (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	@ (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <UART_Init>:
static StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
static StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);


StatusTypeDef UART_Init(UART_HandleTypeDef *huart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
    if (huart == NULL || huart->Instance == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <UART_Init+0x16>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <UART_Init+0x1a>
        return DUNGX_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0ca      	b.n	8002208 <UART_Init+0x1b0>

    // Enable clock for USART1 and GPIOA
    if (huart->Instance == USART1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a66      	ldr	r2, [pc, #408]	@ (8002210 <UART_Init+0x1b8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d107      	bne.n	800208c <UART_Init+0x34>
    {
        RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPAEN;
 800207c:	4b65      	ldr	r3, [pc, #404]	@ (8002214 <UART_Init+0x1bc>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a64      	ldr	r2, [pc, #400]	@ (8002214 <UART_Init+0x1bc>)
 8002082:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	6193      	str	r3, [r2, #24]
    }

    if (huart->Instance == USART1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a5f      	ldr	r2, [pc, #380]	@ (8002210 <UART_Init+0x1b8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12b      	bne.n	80020ee <UART_Init+0x96>
    {
        RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002096:	4b5f      	ldr	r3, [pc, #380]	@ (8002214 <UART_Init+0x1bc>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	4a5e      	ldr	r2, [pc, #376]	@ (8002214 <UART_Init+0x1bc>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6193      	str	r3, [r2, #24]

        // PA9 - TX
        GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 80020a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002218 <UART_Init+0x1c0>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002218 <UART_Init+0x1c0>)
 80020a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020ac:	6053      	str	r3, [r2, #4]
        GPIOA->CRH |= GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0;
 80020ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002218 <UART_Init+0x1c0>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4a59      	ldr	r2, [pc, #356]	@ (8002218 <UART_Init+0x1c0>)
 80020b4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80020b8:	6053      	str	r3, [r2, #4]
        GPIOA->CRH |= GPIO_CRH_CNF9_1;
 80020ba:	4b57      	ldr	r3, [pc, #348]	@ (8002218 <UART_Init+0x1c0>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4a56      	ldr	r2, [pc, #344]	@ (8002218 <UART_Init+0x1c0>)
 80020c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020c4:	6053      	str	r3, [r2, #4]

        // PA10 - RX
        GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 80020c6:	4b54      	ldr	r3, [pc, #336]	@ (8002218 <UART_Init+0x1c0>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4a53      	ldr	r2, [pc, #332]	@ (8002218 <UART_Init+0x1c0>)
 80020cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020d0:	6053      	str	r3, [r2, #4]
        GPIOA->CRH |= GPIO_CRH_CNF10_0; // Input floating
 80020d2:	4b51      	ldr	r3, [pc, #324]	@ (8002218 <UART_Init+0x1c0>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a50      	ldr	r2, [pc, #320]	@ (8002218 <UART_Init+0x1c0>)
 80020d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020dc:	6053      	str	r3, [r2, #4]

        NVIC_EnableIRQ(USART1_IRQn);
 80020de:	2025      	movs	r0, #37	@ 0x25
 80020e0:	f7ff ff74 	bl	8001fcc <__NVIC_EnableIRQ>
        NVIC_SetPriority(USART1_IRQn, 1);
 80020e4:	2101      	movs	r1, #1
 80020e6:	2025      	movs	r0, #37	@ 0x25
 80020e8:	f7ff ff8c 	bl	8002004 <__NVIC_SetPriority>
 80020ec:	e02f      	b.n	800214e <UART_Init+0xf6>
    }

    else if (huart->Instance == USART2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a4a      	ldr	r2, [pc, #296]	@ (800221c <UART_Init+0x1c4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d12a      	bne.n	800214e <UART_Init+0xf6>
    {
        RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80020f8:	4b46      	ldr	r3, [pc, #280]	@ (8002214 <UART_Init+0x1bc>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a45      	ldr	r2, [pc, #276]	@ (8002214 <UART_Init+0x1bc>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6193      	str	r3, [r2, #24]

        // PA2 - TX
        GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 8002104:	4b44      	ldr	r3, [pc, #272]	@ (8002218 <UART_Init+0x1c0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a43      	ldr	r2, [pc, #268]	@ (8002218 <UART_Init+0x1c0>)
 800210a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800210e:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_MODE2_1 | GPIO_CRL_MODE2_0;
 8002110:	4b41      	ldr	r3, [pc, #260]	@ (8002218 <UART_Init+0x1c0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a40      	ldr	r2, [pc, #256]	@ (8002218 <UART_Init+0x1c0>)
 8002116:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800211a:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_CNF2_1;
 800211c:	4b3e      	ldr	r3, [pc, #248]	@ (8002218 <UART_Init+0x1c0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a3d      	ldr	r2, [pc, #244]	@ (8002218 <UART_Init+0x1c0>)
 8002122:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002126:	6013      	str	r3, [r2, #0]

        // PA3 – RX – input floating
        GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 8002128:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <UART_Init+0x1c0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3a      	ldr	r2, [pc, #232]	@ (8002218 <UART_Init+0x1c0>)
 800212e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002132:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_CNF3_0; // Input floating (01)
 8002134:	4b38      	ldr	r3, [pc, #224]	@ (8002218 <UART_Init+0x1c0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a37      	ldr	r2, [pc, #220]	@ (8002218 <UART_Init+0x1c0>)
 800213a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800213e:	6013      	str	r3, [r2, #0]

        NVIC_EnableIRQ(USART2_IRQn);
 8002140:	2026      	movs	r0, #38	@ 0x26
 8002142:	f7ff ff43 	bl	8001fcc <__NVIC_EnableIRQ>
        NVIC_SetPriority(USART2_IRQn, 1);
 8002146:	2101      	movs	r1, #1
 8002148:	2026      	movs	r0, #38	@ 0x26
 800214a:	f7ff ff5b 	bl	8002004 <__NVIC_SetPriority>
    }
    // Configure baud rate
    uint32_t pclk = 72000000;
 800214e:	4b34      	ldr	r3, [pc, #208]	@ (8002220 <UART_Init+0x1c8>)
 8002150:	60fb      	str	r3, [r7, #12]
    huart->Instance->BRR = (pclk + huart->Init.BaudRate / 2) / huart->Init.BaudRate;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	085a      	lsrs	r2, r3, #1
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	18d1      	adds	r1, r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fbb1 f2f2 	udiv	r2, r1, r2
 8002168:	609a      	str	r2, [r3, #8]

    // Clear relevant bits, then set
    huart->Instance->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002178:	f023 030c 	bic.w	r3, r3, #12
 800217c:	60d3      	str	r3, [r2, #12]
    huart->Instance->CR1 |= huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68d9      	ldr	r1, [r3, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	60da      	str	r2, [r3, #12]

    // ========================
    // CR2 - Stop bits
    // ========================
    huart->Instance->CR2 &= ~(USART_CR2_STOP);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80021aa:	611a      	str	r2, [r3, #16]
    huart->Instance->CR2 |= huart->Init.StopBits;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6919      	ldr	r1, [r3, #16]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	611a      	str	r2, [r3, #16]

    // ========================
    // CR3 - Hardware flow control
    // ========================
    huart->Instance->CR3 &= ~(USART_CR3_CTSE | USART_CR3_RTSE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80021cc:	615a      	str	r2, [r3, #20]
    huart->Instance->CR3 |= huart->Init.HwFlowCtl;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6959      	ldr	r1, [r3, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	615a      	str	r2, [r3, #20]

    // Enable USART
    huart->Instance->CR1 |= USART_CR1_UE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021ee:	60da      	str	r2, [r3, #12]

    // Set internal state
    huart->gState = UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    huart->RxState = UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    huart->ErrorCode = UART_ERROR_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	639a      	str	r2, [r3, #56]	@ 0x38

    return DUNGX_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40013800 	.word	0x40013800
 8002214:	40021000 	.word	0x40021000
 8002218:	40010800 	.word	0x40010800
 800221c:	40004400 	.word	0x40004400
 8002220:	044aa200 	.word	0x044aa200

08002224 <UART_Transmit>:

StatusTypeDef UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	80fb      	strh	r3, [r7, #6]
    if (huart == NULL || pData == NULL || Size == 0)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <UART_Transmit+0x22>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <UART_Transmit+0x22>
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d116      	bne.n	8002274 <UART_Transmit+0x50>
        return DUNGX_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e029      	b.n	800229e <UART_Transmit+0x7a>
    while (Size--)
    {
        // Wait until TXE (Transmit Data Register Empty)
        while (!(huart->Instance->SR & USART_SR_TXE))
        {
            if (Timeout-- == 0)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	603a      	str	r2, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <UART_Transmit+0x34>
                return DUNGX_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e022      	b.n	800229e <UART_Transmit+0x7a>
        while (!(huart->Instance->SR & USART_SR_TXE))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f1      	beq.n	800224a <UART_Transmit+0x26>
        }

        huart->Instance->DR = (*pData++ & 0xFF);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	60ba      	str	r2, [r7, #8]
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
    while (Size--)
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	1e5a      	subs	r2, r3, #1
 8002278:	80fa      	strh	r2, [r7, #6]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ec      	bne.n	8002258 <UART_Transmit+0x34>
    }

    // Wait for TC (Transmission Complete)
    while (!(huart->Instance->SR & USART_SR_TC))
 800227e:	e006      	b.n	800228e <UART_Transmit+0x6a>
    {
        if (Timeout-- == 0)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	1e5a      	subs	r2, r3, #1
 8002284:	603a      	str	r2, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <UART_Transmit+0x6a>
            return DUNGX_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e007      	b.n	800229e <UART_Transmit+0x7a>
    while (!(huart->Instance->SR & USART_SR_TC))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f1      	beq.n	8002280 <UART_Transmit+0x5c>
    }

    return DUNGX_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <UART_IRQHandler>:

    return DUNGX_OK;
}

void UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    uint32_t isrflags = huart->Instance->SR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]
    uint32_t cr1its = huart->Instance->CR1;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	60bb      	str	r3, [r7, #8]

    /* Check for RXNE (data received) */
    if ((isrflags & USART_SR_RXNE) && (cr1its & USART_CR1_RXNEIE))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <UART_IRQHandler+0x34>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <UART_IRQHandler+0x34>
    {
        UART_Receive_IT(huart); // Gọi hàm xử lý nhận IT
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f847 	bl	8002368 <UART_Receive_IT>
        return;
 80022da:	e042      	b.n	8002362 <UART_IRQHandler+0xba>
    }

    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <UART_IRQHandler+0x50>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <UART_IRQHandler+0x50>
      {
        UART_Transmit_IT(huart);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f8a3 	bl	800243c <UART_Transmit_IT>
        return;
 80022f6:	e034      	b.n	8002362 <UART_IRQHandler+0xba>
      }


    /* Check for errors */
    if ((isrflags & (USART_SR_PE | USART_SR_FE | USART_SR_NE | USART_SR_ORE)) != 0)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d02f      	beq.n	8002362 <UART_IRQHandler+0xba>
    {
        if (isrflags & USART_SR_PE)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <UART_IRQHandler+0x70>
            huart->ErrorCode |= UART_ERROR_PE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	639a      	str	r2, [r3, #56]	@ 0x38
        if (isrflags & USART_SR_FE)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <UART_IRQHandler+0x86>
            huart->ErrorCode |= UART_ERROR_FE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002326:	f043 0204 	orr.w	r2, r3, #4
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	639a      	str	r2, [r3, #56]	@ 0x38
        if (isrflags & USART_SR_NE)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <UART_IRQHandler+0x9c>
            huart->ErrorCode |= UART_ERROR_NE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233c:	f043 0202 	orr.w	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	639a      	str	r2, [r3, #56]	@ 0x38
        if (isrflags & USART_SR_ORE)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <UART_IRQHandler+0xb2>
            huart->ErrorCode |= UART_ERROR_ORE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002352:	f043 0208 	orr.w	r2, r3, #8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	639a      	str	r2, [r3, #56]	@ 0x38

        huart->gState = UART_STATE_ERROR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	22e0      	movs	r2, #224	@ 0xe0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
}
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <UART_Receive_IT>:

static StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
    if (huart->RxState != UART_STATE_BUSY_RX)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b22      	cmp	r3, #34	@ 0x22
 800237a:	d001      	beq.n	8002380 <UART_Receive_IT+0x18>
        return DUNGX_BUSY;
 800237c:	2302      	movs	r3, #2
 800237e:	e059      	b.n	8002434 <UART_Receive_IT+0xcc>

    uint8_t *pdata8bits;
    uint16_t *pdata16bits;

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002388:	d115      	bne.n	80023b6 <UART_Receive_IT+0x4e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d111      	bne.n	80023b6 <UART_Receive_IT+0x4e>
    {
        pdata16bits = (uint16_t *)huart->pRxBuffPtr;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002396:	60fb      	str	r3, [r7, #12]
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	1c9a      	adds	r2, r3, #2
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80023b4:	e024      	b.n	8002400 <UART_Receive_IT+0x98>
    }
    else
    {
        pdata8bits = (uint8_t *)huart->pRxBuffPtr;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ba:	60bb      	str	r3, [r7, #8]

        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) ||
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023c4:	d007      	beq.n	80023d6 <UART_Receive_IT+0x6e>
            ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) ||
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10a      	bne.n	80023e4 <UART_Receive_IT+0x7c>
            ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <UART_Receive_IT+0x7c>
        {
            *pdata8bits = (uint8_t)(huart->Instance->DR & 0xFF);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	e008      	b.n	80023f6 <UART_Receive_IT+0x8e>
        }
        else
        {
            *pdata8bits = (uint8_t)(huart->Instance->DR & 0x7F);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	701a      	strb	r2, [r3, #0]
        }
        huart->pRxBuffPtr += 1U;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29b      	uxth	r3, r3
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4619      	mov	r1, r3
 800240e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10e      	bne.n	8002432 <UART_Receive_IT+0xca>
    {
        // Tắt ngắt RXNE
        huart->Instance->CR1 &= ~USART_CR1_RXNEIE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0220 	bic.w	r2, r2, #32
 8002422:	60da      	str	r2, [r3, #12]

        // Cập nhật trạng thái
        huart->RxState = UART_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        // Gọi callback
        UART_RxCpltCallback(huart);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 ffb9 	bl	80033a4 <UART_RxCpltCallback>
    }

    return DUNGX_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <UART_Transmit_IT>:

static StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
    {
        const uint16_t *tmp;

        /* Check that a Tx process is ongoing */
        if (huart->gState == UART_STATE_BUSY_TX)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b21      	cmp	r3, #33	@ 0x21
 800244e:	d13e      	bne.n	80024ce <UART_Transmit_IT+0x92>
        {
            if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002458:	d114      	bne.n	8002484 <UART_Transmit_IT+0x48>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d110      	bne.n	8002484 <UART_Transmit_IT+0x48>
            {
                tmp = (const uint16_t *)huart->pTxBuffPtr;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	60fb      	str	r3, [r7, #12]
                huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002476:	605a      	str	r2, [r3, #4]
                huart->pTxBuffPtr += 2U;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	1c9a      	adds	r2, r3, #2
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	621a      	str	r2, [r3, #32]
 8002482:	e008      	b.n	8002496 <UART_Transmit_IT+0x5a>
            }
            else
            {
                huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	1c59      	adds	r1, r3, #1
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6211      	str	r1, [r2, #32]
 800248e:	781a      	ldrb	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
            }

            if (--huart->TxXferCount == 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29b      	uxth	r3, r3
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	4619      	mov	r1, r3
 80024a4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10f      	bne.n	80024ca <UART_Transmit_IT+0x8e>
            {
                /* Disable the UART Transmit Data Register Empty Interrupt */
                UART_DISABLE_IT(huart, UART_IT_TXE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024b8:	615a      	str	r2, [r3, #20]

                /* Enable the UART Transmit Complete Interrupt */
                UART_ENABLE_IT(huart, UART_IT_TC);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024c8:	615a      	str	r2, [r3, #20]
            }
            return DUNGX_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <UART_Transmit_IT+0x94>
        }
        else
        {
            return DUNGX_BUSY;
 80024ce:	2302      	movs	r3, #2
        }
    }
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <Clear_All_State_Fsm>:
 *
 * Hàm này sẽ xóa bộ đếm, cờ trạng thái, dữ liệu đang lưu tạm, và đưa FSM
 * về trạng thái sẵn sàng nhận frame mới từ đầu.
 */
void Clear_All_State_Fsm(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
    fsm_state = FSM_STATE_START;
 80024e0:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <Clear_All_State_Fsm+0x24>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
    byte_count = 0;
 80024e6:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <Clear_All_State_Fsm+0x28>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
    expected_payload_length = 0;
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <Clear_All_State_Fsm+0x2c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
    flag_fsm_new_message = 0;
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <Clear_All_State_Fsm+0x30>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	20000334 	.word	0x20000334
 8002504:	20000335 	.word	0x20000335
 8002508:	20000336 	.word	0x20000336
 800250c:	20000337 	.word	0x20000337

08002510 <Fsm_Get_Message>:
 *
 * Nếu frame hợp lệ và đủ, dữ liệu sẽ được sao chép vào dataout và
 * FSM sẽ chuyển về trạng thái chờ frame mới.
 */
void Fsm_Get_Message(uint8_t datain, uint8_t dataout[])
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	71fb      	strb	r3, [r7, #7]
    if (flag_fsm_new_message)
 800251c:	4b89      	ldr	r3, [pc, #548]	@ (8002744 <Fsm_Get_Message+0x234>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	f040 8102 	bne.w	800272a <Fsm_Get_Message+0x21a>
        return;

    switch (fsm_state)
 8002526:	4b88      	ldr	r3, [pc, #544]	@ (8002748 <Fsm_Get_Message+0x238>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b03      	cmp	r3, #3
 800252c:	f200 8106 	bhi.w	800273c <Fsm_Get_Message+0x22c>
 8002530:	a201      	add	r2, pc, #4	@ (adr r2, 8002538 <Fsm_Get_Message+0x28>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002549 	.word	0x08002549
 800253c:	08002585 	.word	0x08002585
 8002540:	0800265d 	.word	0x0800265d
 8002544:	080026a3 	.word	0x080026a3
    {
    case FSM_STATE_START:

        dataout[byte_count] = datain;
 8002548:	4b80      	ldr	r3, [pc, #512]	@ (800274c <Fsm_Get_Message+0x23c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	4413      	add	r3, r2
 8002552:	79fa      	ldrb	r2, [r7, #7]
 8002554:	701a      	strb	r2, [r3, #0]

        if (byte_count == 0)
 8002556:	4b7d      	ldr	r3, [pc, #500]	@ (800274c <Fsm_Get_Message+0x23c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 80e7 	bne.w	800272e <Fsm_Get_Message+0x21e>
        {

            if (datain == START_BYTE)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	2baa      	cmp	r3, #170	@ 0xaa
 8002564:	d10b      	bne.n	800257e <Fsm_Get_Message+0x6e>
            {


                Clear_All_State_Fsm();
 8002566:	f7ff ffb9 	bl	80024dc <Clear_All_State_Fsm>
                fsm_state = FSM_STATE_HEADER;
 800256a:	4b77      	ldr	r3, [pc, #476]	@ (8002748 <Fsm_Get_Message+0x238>)
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
                byte_count++;
 8002570:	4b76      	ldr	r3, [pc, #472]	@ (800274c <Fsm_Get_Message+0x23c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	b2da      	uxtb	r2, r3
 8002578:	4b74      	ldr	r3, [pc, #464]	@ (800274c <Fsm_Get_Message+0x23c>)
 800257a:	701a      	strb	r2, [r3, #0]
            {
                // Nếu byte nhận không phải START_BYTE, reset FSM
                Clear_All_State_Fsm();
            }
        }
        break;
 800257c:	e0d7      	b.n	800272e <Fsm_Get_Message+0x21e>
                Clear_All_State_Fsm();
 800257e:	f7ff ffad 	bl	80024dc <Clear_All_State_Fsm>
        break;
 8002582:	e0d4      	b.n	800272e <Fsm_Get_Message+0x21e>

    case FSM_STATE_HEADER:
        dataout[byte_count] = datain;
 8002584:	4b71      	ldr	r3, [pc, #452]	@ (800274c <Fsm_Get_Message+0x23c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	4413      	add	r3, r2
 800258e:	79fa      	ldrb	r2, [r7, #7]
 8002590:	701a      	strb	r2, [r3, #0]
        byte_count++;
 8002592:	4b6e      	ldr	r3, [pc, #440]	@ (800274c <Fsm_Get_Message+0x23c>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b6c      	ldr	r3, [pc, #432]	@ (800274c <Fsm_Get_Message+0x23c>)
 800259c:	701a      	strb	r2, [r3, #0]
        // Check Group
        if (byte_count == 2)
 800259e:	4b6b      	ldr	r3, [pc, #428]	@ (800274c <Fsm_Get_Message+0x23c>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d106      	bne.n	80025b4 <Fsm_Get_Message+0xa4>
        {

            if (datain != COMMAND)
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	f000 80c2 	beq.w	8002732 <Fsm_Get_Message+0x222>
            {
                Clear_All_State_Fsm();
 80025ae:	f7ff ff95 	bl	80024dc <Clear_All_State_Fsm>
            {

                fsm_state = FSM_STATE_PAYLOAD;
            }
        }
        break;
 80025b2:	e0be      	b.n	8002732 <Fsm_Get_Message+0x222>
        else if (byte_count == 3)
 80025b4:	4b65      	ldr	r3, [pc, #404]	@ (800274c <Fsm_Get_Message+0x23c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d13d      	bne.n	8002638 <Fsm_Get_Message+0x128>
            if (dataout[2] != CDS && dataout[2] != IR && dataout[2] != MQ2 && dataout[2] != DHT11_HUMI && dataout[2] != DHT11_TEMP &&
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	3302      	adds	r3, #2
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	f000 80b5 	beq.w	8002732 <Fsm_Get_Message+0x222>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	3302      	adds	r3, #2
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	f000 80af 	beq.w	8002732 <Fsm_Get_Message+0x222>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	3302      	adds	r3, #2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	f000 80a9 	beq.w	8002732 <Fsm_Get_Message+0x222>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	3302      	adds	r3, #2
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	f000 80a3 	beq.w	8002732 <Fsm_Get_Message+0x222>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	3302      	adds	r3, #2
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b05      	cmp	r3, #5
 80025f4:	f000 809d 	beq.w	8002732 <Fsm_Get_Message+0x222>
                dataout[2] != LED && dataout[2] != MOTOR && dataout[2] != SIREN && dataout[2] != AUTO && dataout[2] != UNKNOWN)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	3302      	adds	r3, #2
 80025fc:	781b      	ldrb	r3, [r3, #0]
            if (dataout[2] != CDS && dataout[2] != IR && dataout[2] != MQ2 && dataout[2] != DHT11_HUMI && dataout[2] != DHT11_TEMP &&
 80025fe:	2b11      	cmp	r3, #17
 8002600:	f000 8097 	beq.w	8002732 <Fsm_Get_Message+0x222>
                dataout[2] != LED && dataout[2] != MOTOR && dataout[2] != SIREN && dataout[2] != AUTO && dataout[2] != UNKNOWN)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	3302      	adds	r3, #2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b12      	cmp	r3, #18
 800260c:	f000 8091 	beq.w	8002732 <Fsm_Get_Message+0x222>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	3302      	adds	r3, #2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b13      	cmp	r3, #19
 8002618:	f000 808b 	beq.w	8002732 <Fsm_Get_Message+0x222>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	3302      	adds	r3, #2
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b20      	cmp	r3, #32
 8002624:	f000 8085 	beq.w	8002732 <Fsm_Get_Message+0x222>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	3302      	adds	r3, #2
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2bff      	cmp	r3, #255	@ 0xff
 8002630:	d07f      	beq.n	8002732 <Fsm_Get_Message+0x222>
                Clear_All_State_Fsm();
 8002632:	f7ff ff53 	bl	80024dc <Clear_All_State_Fsm>
        break;
 8002636:	e07c      	b.n	8002732 <Fsm_Get_Message+0x222>
        else if (byte_count == 4)
 8002638:	4b44      	ldr	r3, [pc, #272]	@ (800274c <Fsm_Get_Message+0x23c>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b04      	cmp	r3, #4
 800263e:	d178      	bne.n	8002732 <Fsm_Get_Message+0x222>
            expected_payload_length = datain;
 8002640:	4a43      	ldr	r2, [pc, #268]	@ (8002750 <Fsm_Get_Message+0x240>)
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	7013      	strb	r3, [r2, #0]
            if (expected_payload_length > PAYLOAD_SIZE)
 8002646:	4b42      	ldr	r3, [pc, #264]	@ (8002750 <Fsm_Get_Message+0x240>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b04      	cmp	r3, #4
 800264c:	d902      	bls.n	8002654 <Fsm_Get_Message+0x144>
                Clear_All_State_Fsm();
 800264e:	f7ff ff45 	bl	80024dc <Clear_All_State_Fsm>
        break;
 8002652:	e06e      	b.n	8002732 <Fsm_Get_Message+0x222>
                fsm_state = FSM_STATE_PAYLOAD;
 8002654:	4b3c      	ldr	r3, [pc, #240]	@ (8002748 <Fsm_Get_Message+0x238>)
 8002656:	2202      	movs	r2, #2
 8002658:	701a      	strb	r2, [r3, #0]
        break;
 800265a:	e06a      	b.n	8002732 <Fsm_Get_Message+0x222>

    case FSM_STATE_PAYLOAD:
        dataout[byte_count] = datain;
 800265c:	4b3b      	ldr	r3, [pc, #236]	@ (800274c <Fsm_Get_Message+0x23c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	4413      	add	r3, r2
 8002666:	79fa      	ldrb	r2, [r7, #7]
 8002668:	701a      	strb	r2, [r3, #0]
        byte_count++;
 800266a:	4b38      	ldr	r3, [pc, #224]	@ (800274c <Fsm_Get_Message+0x23c>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	3301      	adds	r3, #1
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b36      	ldr	r3, [pc, #216]	@ (800274c <Fsm_Get_Message+0x23c>)
 8002674:	701a      	strb	r2, [r3, #0]
        if (byte_count == 4 + expected_payload_length)
 8002676:	4b35      	ldr	r3, [pc, #212]	@ (800274c <Fsm_Get_Message+0x23c>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	4b34      	ldr	r3, [pc, #208]	@ (8002750 <Fsm_Get_Message+0x240>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	3304      	adds	r3, #4
 8002682:	429a      	cmp	r2, r3
 8002684:	d103      	bne.n	800268e <Fsm_Get_Message+0x17e>
        {

            fsm_state = FSM_STATE_CHECKSUM;
 8002686:	4b30      	ldr	r3, [pc, #192]	@ (8002748 <Fsm_Get_Message+0x238>)
 8002688:	2203      	movs	r2, #3
 800268a:	701a      	strb	r2, [r3, #0]
        else if (byte_count - 4 > expected_payload_length)
        {
            // Nếu nhận quá payload, reset FSM
            Clear_All_State_Fsm();
        }
        break;
 800268c:	e053      	b.n	8002736 <Fsm_Get_Message+0x226>
        else if (byte_count - 4 > expected_payload_length)
 800268e:	4b2f      	ldr	r3, [pc, #188]	@ (800274c <Fsm_Get_Message+0x23c>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	3b04      	subs	r3, #4
 8002694:	4a2e      	ldr	r2, [pc, #184]	@ (8002750 <Fsm_Get_Message+0x240>)
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	4293      	cmp	r3, r2
 800269a:	dd4c      	ble.n	8002736 <Fsm_Get_Message+0x226>
            Clear_All_State_Fsm();
 800269c:	f7ff ff1e 	bl	80024dc <Clear_All_State_Fsm>
        break;
 80026a0:	e049      	b.n	8002736 <Fsm_Get_Message+0x226>

    case FSM_STATE_CHECKSUM:
        dataout[byte_count] = datain;
 80026a2:	4b2a      	ldr	r3, [pc, #168]	@ (800274c <Fsm_Get_Message+0x23c>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	79fa      	ldrb	r2, [r7, #7]
 80026ae:	701a      	strb	r2, [r3, #0]

        byte_count++;
 80026b0:	4b26      	ldr	r3, [pc, #152]	@ (800274c <Fsm_Get_Message+0x23c>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b24      	ldr	r3, [pc, #144]	@ (800274c <Fsm_Get_Message+0x23c>)
 80026ba:	701a      	strb	r2, [r3, #0]

        if (byte_count == 1 + HEADER_SIZE + expected_payload_length + CHECKSUM_SIZE)
 80026bc:	4b23      	ldr	r3, [pc, #140]	@ (800274c <Fsm_Get_Message+0x23c>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <Fsm_Get_Message+0x240>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	3306      	adds	r3, #6
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d136      	bne.n	800273a <Fsm_Get_Message+0x22a>
        {

            uint16_t received_checksum = Convert_Bytes_To_Uint16(
                dataout[byte_count - 2], dataout[byte_count - 1]);
 80026cc:	4b1f      	ldr	r3, [pc, #124]	@ (800274c <Fsm_Get_Message+0x23c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	3b02      	subs	r3, #2
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	4413      	add	r3, r2
            uint16_t received_checksum = Convert_Bytes_To_Uint16(
 80026d6:	7818      	ldrb	r0, [r3, #0]
                dataout[byte_count - 2], dataout[byte_count - 1]);
 80026d8:	4b1c      	ldr	r3, [pc, #112]	@ (800274c <Fsm_Get_Message+0x23c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	3b01      	subs	r3, #1
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4413      	add	r3, r2
            uint16_t received_checksum = Convert_Bytes_To_Uint16(
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	f000 ff26 	bl	8003536 <Convert_Bytes_To_Uint16>
 80026ea:	4603      	mov	r3, r0
 80026ec:	81fb      	strh	r3, [r7, #14]

            uint16_t calculated_checksum = Message_Calculate_Checksum(
 80026ee:	4b17      	ldr	r3, [pc, #92]	@ (800274c <Fsm_Get_Message+0x23c>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	3b02      	subs	r3, #2
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	4619      	mov	r1, r3
 80026f8:	6838      	ldr	r0, [r7, #0]
 80026fa:	f000 ff2e 	bl	800355a <Message_Calculate_Checksum>
 80026fe:	4603      	mov	r3, r0
 8002700:	81bb      	strh	r3, [r7, #12]
                dataout, byte_count - CHECKSUM_SIZE);

            if (received_checksum == calculated_checksum)
 8002702:	89fa      	ldrh	r2, [r7, #14]
 8002704:	89bb      	ldrh	r3, [r7, #12]
 8002706:	429a      	cmp	r2, r3
 8002708:	d109      	bne.n	800271e <Fsm_Get_Message+0x20e>
            {
            	GPIOA->ODR |= (1 << 5);
 800270a:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <Fsm_Get_Message+0x244>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	4a11      	ldr	r2, [pc, #68]	@ (8002754 <Fsm_Get_Message+0x244>)
 8002710:	f043 0320 	orr.w	r3, r3, #32
 8002714:	60d3      	str	r3, [r2, #12]
                flag_fsm_new_message = 1;
 8002716:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <Fsm_Get_Message+0x234>)
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e001      	b.n	8002722 <Fsm_Get_Message+0x212>
            }
            else
            {
                // Nếu checksum không hợp lệ, reset FSM
                Clear_All_State_Fsm();
 800271e:	f7ff fedd 	bl	80024dc <Clear_All_State_Fsm>
            }

            fsm_state = FSM_STATE_START;
 8002722:	4b09      	ldr	r3, [pc, #36]	@ (8002748 <Fsm_Get_Message+0x238>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002728:	e007      	b.n	800273a <Fsm_Get_Message+0x22a>
        return;
 800272a:	bf00      	nop
 800272c:	e006      	b.n	800273c <Fsm_Get_Message+0x22c>
        break;
 800272e:	bf00      	nop
 8002730:	e004      	b.n	800273c <Fsm_Get_Message+0x22c>
        break;
 8002732:	bf00      	nop
 8002734:	e002      	b.n	800273c <Fsm_Get_Message+0x22c>
        break;
 8002736:	bf00      	nop
 8002738:	e000      	b.n	800273c <Fsm_Get_Message+0x22c>
        break;
 800273a:	bf00      	nop
    }
}
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000337 	.word	0x20000337
 8002748:	20000334 	.word	0x20000334
 800274c:	20000335 	.word	0x20000335
 8002750:	20000336 	.word	0x20000336
 8002754:	40010800 	.word	0x40010800

08002758 <Check_Fsm_Flag_New_Message>:
 * @brief Kiểm tra xem đã nhận được một frame hoàn chỉnh và hợp lệ chưa.
 *
 * @return 1 nếu đã nhận đúng và đủ frame; 0 nếu chưa đủ hoặc không hợp lệ.
 */
uint8_t Check_Fsm_Flag_New_Message(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
    return flag_fsm_new_message;
 800275c:	4b02      	ldr	r3, [pc, #8]	@ (8002768 <Check_Fsm_Flag_New_Message+0x10>)
 800275e:	781b      	ldrb	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	20000337 	.word	0x20000337

0800276c <USART1_Init>:

/**
 * @brief Khởi tạo USART1 với tốc độ baud được chỉ định.
 */
void USART1_Init(uint32_t baud_rate)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
    huart1.Instance = USART1;
 8002774:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <USART1_Init+0x40>)
 8002776:	4a0e      	ldr	r2, [pc, #56]	@ (80027b0 <USART1_Init+0x44>)
 8002778:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = baud_rate;
 800277a:	4a0c      	ldr	r2, [pc, #48]	@ (80027ac <USART1_Init+0x40>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6053      	str	r3, [r2, #4]
    // Word length 8-bit => M = 0 (bit 12 clear)
    huart1.Init.WordLength = 0;
 8002780:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <USART1_Init+0x40>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]

    huart1.Init.StopBits = 0;                            // 1 stop bit (mặc định)
 8002786:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <USART1_Init+0x40>)
 8002788:	2200      	movs	r2, #0
 800278a:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = USART_CR1_PCE & ~USART_CR1_PCE; // No parity
 800278c:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <USART1_Init+0x40>)
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;                  // TX + RX
 8002792:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <USART1_Init+0x40>)
 8002794:	220c      	movs	r2, #12
 8002796:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;         // Không sử dụng điều khiển luồng phần cứng
 8002798:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <USART1_Init+0x40>)
 800279a:	2200      	movs	r2, #0
 800279c:	619a      	str	r2, [r3, #24]

    UART_Init(&huart1); // Gọi hàm từ stm32_uart.c
 800279e:	4803      	ldr	r0, [pc, #12]	@ (80027ac <USART1_Init+0x40>)
 80027a0:	f7ff fc5a 	bl	8002058 <UART_Init>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	200001f0 	.word	0x200001f0
 80027b0:	40013800 	.word	0x40013800

080027b4 <USART1_Send_Data>:

/**
 * @brief Gửi một mảng dữ liệu qua USART1.
 */
void USART1_Send_Data(uint8_t *data, uint8_t length)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	70fb      	strb	r3, [r7, #3]
    if (data != NULL && length > 0)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <USART1_Send_Data+0x26>
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d006      	beq.n	80027da <USART1_Send_Data+0x26>
    {
        UART_Transmit(&huart1, data, length, 1000000);
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <USART1_Send_Data+0x30>)
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4804      	ldr	r0, [pc, #16]	@ (80027e8 <USART1_Send_Data+0x34>)
 80027d6:	f7ff fd25 	bl	8002224 <UART_Transmit>
    }
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	000f4240 	.word	0x000f4240
 80027e8:	200001f0 	.word	0x200001f0

080027ec <USART1_IRQHandler>:
/**
 * @brief Xử lý ngắt nhận dữ liệu từ USART1.
 * @note Hàm này sẽ được gọi tự động khi có dữ liệu đến USART1.
 */
void USART1_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
    UART_IRQHandler(&huart1);
 80027f0:	4802      	ldr	r0, [pc, #8]	@ (80027fc <USART1_IRQHandler+0x10>)
 80027f2:	f7ff fd59 	bl	80022a8 <UART_IRQHandler>
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200001f0 	.word	0x200001f0

08002800 <DUNGX_UART_Receive_IT>:

StatusTypeDef DUNGX_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint8_t Size)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	4613      	mov	r3, r2
 800280c:	71fb      	strb	r3, [r7, #7]

    // Kiểm tra UART đã sẵn sàng nhận chưa
    if (huart->RxState == UART_STATE_READY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b20      	cmp	r3, #32
 8002818:	d126      	bne.n	8002868 <DUNGX_UART_Receive_IT+0x68>
    {

        if ((pData == NULL) || (Size == 0))
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <DUNGX_UART_Receive_IT+0x26>
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <DUNGX_UART_Receive_IT+0x2a>
        {
            return DUNGX_ERROR; // Lỗi dữ liệu
 8002826:	2301      	movs	r3, #1
 8002828:	e01f      	b.n	800286a <DUNGX_UART_Receive_IT+0x6a>
        }

        // Cập nhật trạng thái và buffer nhận
        huart->RxState = UART_STATE_BUSY_RX;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2222      	movs	r2, #34	@ 0x22
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        huart->ErrorCode = UART_ERROR_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	639a      	str	r2, [r3, #56]	@ 0x38
        huart->RxXferSize = Size;
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	859a      	strh	r2, [r3, #44]	@ 0x2c
        huart->RxXferCount = Size;
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	85da      	strh	r2, [r3, #46]	@ 0x2e
        huart->pRxBuffPtr = pData;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	629a      	str	r2, [r3, #40]	@ 0x28

        (void)huart1.Instance->DR; // Clear RXNE flag
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <DUNGX_UART_Receive_IT+0x74>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]

        // Bật ngắt RXNE (nhận dữ liệu)
        huart->Instance->CR1 |= USART_CR1_RXNEIE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0220 	orr.w	r2, r2, #32
 8002862:	60da      	str	r2, [r3, #12]

        return DUNGX_OK; // Thành công
 8002864:	2300      	movs	r3, #0
 8002866:	e000      	b.n	800286a <DUNGX_UART_Receive_IT+0x6a>
    }
    else
    {
        return DUNGX_BUSY; // UART đang bận
 8002868:	2302      	movs	r3, #2
    }
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	200001f0 	.word	0x200001f0

08002878 <CDS_Init>:
#define CDS_ADC_SAMPLING ADC_SAMPLETIME_71CYCLES_5

static ADC_HandleTypeDef hadc_cds;

void CDS_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
    // 1. Enable peripheral clocks (GPIOA, ADC1)
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800287e:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <CDS_Init+0x80>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4a1d      	ldr	r2, [pc, #116]	@ (80028f8 <CDS_Init+0x80>)
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800288a:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <CDS_Init+0x80>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	4a1a      	ldr	r2, [pc, #104]	@ (80028f8 <CDS_Init+0x80>)
 8002890:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002894:	6193      	str	r3, [r2, #24]

    // 2. Configure PA0 as analog input
    GPIO_InitTypeDef gpio_init = {
 8002896:	f107 0310 	add.w	r3, r7, #16
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	2301      	movs	r3, #1
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	2303      	movs	r3, #3
 80028aa:	617b      	str	r3, [r7, #20]
        .Pin = CDS_GPIO_PIN,
        .Mode = GPIO_MODE_ANALOG};
    GPIO_Init(CDS_GPIO_PORT, &gpio_init);
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	4619      	mov	r1, r3
 80028b2:	4812      	ldr	r0, [pc, #72]	@ (80028fc <CDS_Init+0x84>)
 80028b4:	f7ff f82e 	bl	8001914 <GPIO_Init>

    // 3. Configure ADC1
    hadc_cds.Instance = ADC1;
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <CDS_Init+0x88>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <CDS_Init+0x8c>)
 80028bc:	601a      	str	r2, [r3, #0]
    hadc_cds.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <CDS_Init+0x88>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	605a      	str	r2, [r3, #4]
    hadc_cds.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80028c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <CDS_Init+0x88>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
    hadc_cds.Init.ContinuousConvMode = DISABLE;
 80028ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002900 <CDS_Init+0x88>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	731a      	strb	r2, [r3, #12]
    hadc_cds.Init.NbrOfConversion = 1;
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <CDS_Init+0x88>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	611a      	str	r2, [r3, #16]
    ADC_Init(&hadc_cds);
 80028d6:	480a      	ldr	r0, [pc, #40]	@ (8002900 <CDS_Init+0x88>)
 80028d8:	f7fe ff16 	bl	8001708 <ADC_Init>

    // 4. Configure ADC channel (Channel 0 = PA0)
    ADC_ChannelConfTypeDef ch_config = {
 80028dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002908 <CDS_Init+0x90>)
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        .Channel = CDS_ADC_CHANNEL,
        .Rank = ADC_REGULAR_RANK_1,
        .SamplingTime = CDS_ADC_SAMPLING};
    ADC_ConfigChannel(&hadc_cds, &ch_config);
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	4619      	mov	r1, r3
 80028ea:	4805      	ldr	r0, [pc, #20]	@ (8002900 <CDS_Init+0x88>)
 80028ec:	f7fe ff8e 	bl	800180c <ADC_ConfigChannel>
}
 80028f0:	bf00      	nop
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40010800 	.word	0x40010800
 8002900:	20000338 	.word	0x20000338
 8002904:	40012400 	.word	0x40012400
 8002908:	08006d40 	.word	0x08006d40

0800290c <CDS_ReadRaw>:

uint16_t CDS_ReadRaw(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
    ADC_Start(&hadc_cds);
 8002910:	4809      	ldr	r0, [pc, #36]	@ (8002938 <CDS_ReadRaw+0x2c>)
 8002912:	f7fe ffb0 	bl	8001876 <ADC_Start>
    if (ADC_PollForConversion(&hadc_cds, 1000) != DUNGX_OK)
 8002916:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800291a:	4807      	ldr	r0, [pc, #28]	@ (8002938 <CDS_ReadRaw+0x2c>)
 800291c:	f7fe ffca 	bl	80018b4 <ADC_PollForConversion>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <CDS_ReadRaw+0x1e>
        return 0; // Timeout or error
 8002926:	2300      	movs	r3, #0
 8002928:	e004      	b.n	8002934 <CDS_ReadRaw+0x28>
    return (uint16_t)ADC_GetValue(&hadc_cds);
 800292a:	4803      	ldr	r0, [pc, #12]	@ (8002938 <CDS_ReadRaw+0x2c>)
 800292c:	f7fe ffe0 	bl	80018f0 <ADC_GetValue>
 8002930:	4603      	mov	r3, r0
 8002932:	b29b      	uxth	r3, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000338 	.word	0x20000338

0800293c <CDS_ReadLux>:

float CDS_ReadLux(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
    uint16_t raw = CDS_ReadRaw();
 8002942:	f7ff ffe3 	bl	800290c <CDS_ReadRaw>
 8002946:	4603      	mov	r3, r0
 8002948:	80fb      	strh	r3, [r7, #6]

    // Convert raw ADC value to lux
    float lux = (float)(4095 - raw) * 2000.0f / 4095.0f;
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8002950:	330f      	adds	r3, #15
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe f962 	bl	8000c1c <__aeabi_i2f>
 8002958:	4603      	mov	r3, r0
 800295a:	4908      	ldr	r1, [pc, #32]	@ (800297c <CDS_ReadLux+0x40>)
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe f9b1 	bl	8000cc4 <__aeabi_fmul>
 8002962:	4603      	mov	r3, r0
 8002964:	4906      	ldr	r1, [pc, #24]	@ (8002980 <CDS_ReadLux+0x44>)
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fa60 	bl	8000e2c <__aeabi_fdiv>
 800296c:	4603      	mov	r3, r0
 800296e:	603b      	str	r3, [r7, #0]
    return lux;
 8002970:	683b      	ldr	r3, [r7, #0]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	44fa0000 	.word	0x44fa0000
 8002980:	457ff000 	.word	0x457ff000

08002984 <DHT_SetPinOutput>:

#define DHT11_PORT GPIOA
#define DHT11_PIN (1U << 2) // PA2

static void DHT_SetPinOutput(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio = {
 800298a:	463b      	mov	r3, r7
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	2304      	movs	r3, #4
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	2311      	movs	r3, #17
 800299c:	607b      	str	r3, [r7, #4]
        .Pin = DHT11_PIN,
        .Mode = GPIO_MODE_OUTPUT_OD,
        .Speed = GPIO_SPEED_LOW,
    };
    GPIO_Init(DHT11_PORT, &gpio);
 800299e:	463b      	mov	r3, r7
 80029a0:	4619      	mov	r1, r3
 80029a2:	4803      	ldr	r0, [pc, #12]	@ (80029b0 <DHT_SetPinOutput+0x2c>)
 80029a4:	f7fe ffb6 	bl	8001914 <GPIO_Init>
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40010800 	.word	0x40010800

080029b4 <DHT_SetPinInput>:

static void DHT_SetPinInput(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio = {
 80029ba:	463b      	mov	r3, r7
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	2304      	movs	r3, #4
 80029c8:	603b      	str	r3, [r7, #0]
        .Pin = DHT11_PIN,
        .Mode = GPIO_MODE_INPUT,
        .Pull = GPIO_NOPULL};
    GPIO_Init(DHT11_PORT, &gpio);
 80029ca:	463b      	mov	r3, r7
 80029cc:	4619      	mov	r1, r3
 80029ce:	4803      	ldr	r0, [pc, #12]	@ (80029dc <DHT_SetPinInput+0x28>)
 80029d0:	f7fe ffa0 	bl	8001914 <GPIO_Init>
}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40010800 	.word	0x40010800

080029e0 <DHT_ReadPin>:

static uint8_t DHT_ReadPin(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
    return (DHT11_PORT->IDR & DHT11_PIN) ? 1 : 0;
 80029e4:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <DHT_ReadPin+0x20>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40010800 	.word	0x40010800

08002a04 <DHT11_Init>:

void DHT11_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002a08:	4b07      	ldr	r3, [pc, #28]	@ (8002a28 <DHT11_Init+0x24>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4a06      	ldr	r2, [pc, #24]	@ (8002a28 <DHT11_Init+0x24>)
 8002a0e:	f043 0304 	orr.w	r3, r3, #4
 8002a12:	6193      	str	r3, [r2, #24]
    DHT_SetPinOutput();
 8002a14:	f7ff ffb6 	bl	8002984 <DHT_SetPinOutput>
    GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8002a18:	2201      	movs	r2, #1
 8002a1a:	2104      	movs	r1, #4
 8002a1c:	4803      	ldr	r0, [pc, #12]	@ (8002a2c <DHT11_Init+0x28>)
 8002a1e:	f7ff f8a1 	bl	8001b64 <GPIO_WritePin>
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40010800 	.word	0x40010800

08002a30 <DHT11_Start>:

static void DHT11_Start(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
    DHT_SetPinOutput();
 8002a34:	f7ff ffa6 	bl	8002984 <DHT_SetPinOutput>
    GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	4808      	ldr	r0, [pc, #32]	@ (8002a60 <DHT11_Start+0x30>)
 8002a3e:	f7ff f891 	bl	8001b64 <GPIO_WritePin>
    Delay_ms(20); // Kéo thấp ≥ 18ms
 8002a42:	2014      	movs	r0, #20
 8002a44:	f001 f80c 	bl	8003a60 <Delay_ms>
    GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2104      	movs	r1, #4
 8002a4c:	4804      	ldr	r0, [pc, #16]	@ (8002a60 <DHT11_Start+0x30>)
 8002a4e:	f7ff f889 	bl	8001b64 <GPIO_WritePin>
    Delay_us(30);
 8002a52:	201e      	movs	r0, #30
 8002a54:	f001 f81a 	bl	8003a8c <Delay_us>
    DHT_SetPinInput();
 8002a58:	f7ff ffac 	bl	80029b4 <DHT_SetPinInput>
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40010800 	.word	0x40010800

08002a64 <DHT_ReadBit>:

static uint8_t DHT_ReadBit(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
    while (DHT_ReadPin() == 0)
 8002a68:	bf00      	nop
 8002a6a:	f7ff ffb9 	bl	80029e0 <DHT_ReadPin>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0fa      	beq.n	8002a6a <DHT_ReadBit+0x6>
        ;                 // Chờ đầu 0
    Delay_us(30);         // Sau 30us kiểm tra
 8002a74:	201e      	movs	r0, #30
 8002a76:	f001 f809 	bl	8003a8c <Delay_us>
    return DHT_ReadPin(); // HIGH → 1, LOW → 0
 8002a7a:	f7ff ffb1 	bl	80029e0 <DHT_ReadPin>
 8002a7e:	4603      	mov	r3, r0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <DHT_ReadByte>:

static uint8_t DHT_ReadByte(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
    uint8_t i, byte = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	71fb      	strb	r3, [r7, #7]
 8002a92:	e012      	b.n	8002aba <DHT_ReadByte+0x36>
    {
        byte <<= 1;
 8002a94:	79bb      	ldrb	r3, [r7, #6]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	71bb      	strb	r3, [r7, #6]
        byte |= DHT_ReadBit();
 8002a9a:	f7ff ffe3 	bl	8002a64 <DHT_ReadBit>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	79bb      	ldrb	r3, [r7, #6]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	71bb      	strb	r3, [r7, #6]
        while (DHT_ReadPin())
 8002aa8:	bf00      	nop
 8002aaa:	f7ff ff99 	bl	80029e0 <DHT_ReadPin>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1fa      	bne.n	8002aaa <DHT_ReadByte+0x26>
    for (i = 0; i < 8; i++)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	71fb      	strb	r3, [r7, #7]
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b07      	cmp	r3, #7
 8002abe:	d9e9      	bls.n	8002a94 <DHT_ReadByte+0x10>
            ; // Chờ kết thúc bit
    }
    return byte;
 8002ac0:	79bb      	ldrb	r3, [r7, #6]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <DHT11_Read>:

bool DHT11_Read(uint8_t *humi_int, uint8_t *humi_dec, uint8_t *temp_int, uint8_t *temp_dec)
{
 8002aca:	b590      	push	{r4, r7, lr}
 8002acc:	b089      	sub	sp, #36	@ 0x24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]
    uint8_t data[5] = {0};
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	2300      	movs	r3, #0
 8002ade:	763b      	strb	r3, [r7, #24]

    DHT11_Start();
 8002ae0:	f7ff ffa6 	bl	8002a30 <DHT11_Start>

    // Chờ phản hồi từ DHT11
    uint32_t timeout = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
    while (DHT_ReadPin())
 8002ae8:	e008      	b.n	8002afc <DHT11_Read+0x32>
        if (++timeout > 1000)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3301      	adds	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002af6:	d901      	bls.n	8002afc <DHT11_Read+0x32>
            return false;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e053      	b.n	8002ba4 <DHT11_Read+0xda>
    while (DHT_ReadPin())
 8002afc:	f7ff ff70 	bl	80029e0 <DHT_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f1      	bne.n	8002aea <DHT11_Read+0x20>
    timeout = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
    while (!DHT_ReadPin())
 8002b0a:	e008      	b.n	8002b1e <DHT11_Read+0x54>
        if (++timeout > 1000)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b18:	d901      	bls.n	8002b1e <DHT11_Read+0x54>
            return false;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e042      	b.n	8002ba4 <DHT11_Read+0xda>
    while (!DHT_ReadPin())
 8002b1e:	f7ff ff5f 	bl	80029e0 <DHT_ReadPin>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f1      	beq.n	8002b0c <DHT11_Read+0x42>
    timeout = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
    while (DHT_ReadPin())
 8002b2c:	e008      	b.n	8002b40 <DHT11_Read+0x76>
        if (++timeout > 1000)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3301      	adds	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b3a:	d901      	bls.n	8002b40 <DHT11_Read+0x76>
            return false;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e031      	b.n	8002ba4 <DHT11_Read+0xda>
    while (DHT_ReadPin())
 8002b40:	f7ff ff4e 	bl	80029e0 <DHT_ReadPin>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f1      	bne.n	8002b2e <DHT11_Read+0x64>

    // Đọc 5 byte
    for (uint8_t i = 0; i < 5; i++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	76fb      	strb	r3, [r7, #27]
 8002b4e:	e00c      	b.n	8002b6a <DHT11_Read+0xa0>
        data[i] = DHT_ReadByte();
 8002b50:	7efc      	ldrb	r4, [r7, #27]
 8002b52:	f7ff ff97 	bl	8002a84 <DHT_ReadByte>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f104 0320 	add.w	r3, r4, #32
 8002b5e:	443b      	add	r3, r7
 8002b60:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 5; i++)
 8002b64:	7efb      	ldrb	r3, [r7, #27]
 8002b66:	3301      	adds	r3, #1
 8002b68:	76fb      	strb	r3, [r7, #27]
 8002b6a:	7efb      	ldrb	r3, [r7, #27]
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d9ef      	bls.n	8002b50 <DHT11_Read+0x86>

    // Kiểm tra checksum
    if ((data[0] + data[1] + data[2] + data[3]) != data[4])
 8002b70:	7d3b      	ldrb	r3, [r7, #20]
 8002b72:	461a      	mov	r2, r3
 8002b74:	7d7b      	ldrb	r3, [r7, #21]
 8002b76:	4413      	add	r3, r2
 8002b78:	7dba      	ldrb	r2, [r7, #22]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	7dfa      	ldrb	r2, [r7, #23]
 8002b7e:	4413      	add	r3, r2
 8002b80:	7e3a      	ldrb	r2, [r7, #24]
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d001      	beq.n	8002b8a <DHT11_Read+0xc0>
        return false;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e00c      	b.n	8002ba4 <DHT11_Read+0xda>

    *humi_int = data[0];
 8002b8a:	7d3a      	ldrb	r2, [r7, #20]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	701a      	strb	r2, [r3, #0]
    *humi_dec = data[1];
 8002b90:	7d7a      	ldrb	r2, [r7, #21]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	701a      	strb	r2, [r3, #0]
    *temp_int = data[2];
 8002b96:	7dba      	ldrb	r2, [r7, #22]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	701a      	strb	r2, [r3, #0]
    *temp_dec = data[3];
 8002b9c:	7dfa      	ldrb	r2, [r7, #23]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	701a      	strb	r2, [r3, #0]
    return true;
 8002ba2:	2301      	movs	r3, #1
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3724      	adds	r7, #36	@ 0x24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}

08002bac <MQ2_Init>:

static ADC_HandleTypeDef hadc_mq2;
static float Ro = 10.0f; // Giá trị mặc định Ro

void MQ2_Init(float ro_clean_air)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	@ 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
    Ro = ro_clean_air;
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c34 <MQ2_Init+0x88>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6013      	str	r3, [r2, #0]

    // Bật clock GPIOA nếu chưa bật
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002bba:	4b1f      	ldr	r3, [pc, #124]	@ (8002c38 <MQ2_Init+0x8c>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002c38 <MQ2_Init+0x8c>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6193      	str	r3, [r2, #24]

    // Cấu hình chân analog (ví dụ PA1)
    GPIO_InitTypeDef GPIO_InitStruct = {
 8002bc6:	f107 0318 	add.w	r3, r7, #24
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	2303      	movs	r3, #3
 8002bda:	61fb      	str	r3, [r7, #28]
        .Pin = MQ2_PIN,
        .Mode = GPIO_MODE_ANALOG};
    GPIO_Init(MQ2_PORT, &GPIO_InitStruct);
 8002bdc:	f107 0318 	add.w	r3, r7, #24
 8002be0:	4619      	mov	r1, r3
 8002be2:	4816      	ldr	r0, [pc, #88]	@ (8002c3c <MQ2_Init+0x90>)
 8002be4:	f7fe fe96 	bl	8001914 <GPIO_Init>

    // Cấu hình ADC
    hadc_mq2.Instance = ADC1;
 8002be8:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <MQ2_Init+0x94>)
 8002bea:	4a16      	ldr	r2, [pc, #88]	@ (8002c44 <MQ2_Init+0x98>)
 8002bec:	601a      	str	r2, [r3, #0]
    hadc_mq2.Init.ContinuousConvMode = DISABLE;
 8002bee:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <MQ2_Init+0x94>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	731a      	strb	r2, [r3, #12]
    hadc_mq2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bf4:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <MQ2_Init+0x94>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	605a      	str	r2, [r3, #4]
    hadc_mq2.Init.NbrOfConversion = 1;
 8002bfa:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <MQ2_Init+0x94>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	611a      	str	r2, [r3, #16]
    hadc_mq2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <MQ2_Init+0x94>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]

    ADC_Init(&hadc_mq2);
 8002c06:	480e      	ldr	r0, [pc, #56]	@ (8002c40 <MQ2_Init+0x94>)
 8002c08:	f7fe fd7e 	bl	8001708 <ADC_Init>

    ADC_ChannelConfTypeDef sConfig = {
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	2301      	movs	r3, #1
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	2306      	movs	r3, #6
 8002c1e:	617b      	str	r3, [r7, #20]
        .Channel = 1, // ADC1_IN1 nếu dùng PA1
        .SamplingTime = ADC_SAMPLETIME_71CYCLES_5};
    ADC_ConfigChannel(&hadc_mq2, &sConfig);
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	4619      	mov	r1, r3
 8002c26:	4806      	ldr	r0, [pc, #24]	@ (8002c40 <MQ2_Init+0x94>)
 8002c28:	f7fe fdf0 	bl	800180c <ADC_ConfigChannel>
}
 8002c2c:	bf00      	nop
 8002c2e:	3728      	adds	r7, #40	@ 0x28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000000 	.word	0x20000000
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40010800 	.word	0x40010800
 8002c40:	20000354 	.word	0x20000354
 8002c44:	40012400 	.word	0x40012400

08002c48 <MQ2_ReadRaw>:

static uint16_t MQ2_ReadRaw(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
    ADC_Start(&hadc_mq2);
 8002c4c:	4807      	ldr	r0, [pc, #28]	@ (8002c6c <MQ2_ReadRaw+0x24>)
 8002c4e:	f7fe fe12 	bl	8001876 <ADC_Start>
    ADC_PollForConversion(&hadc_mq2, 1000);
 8002c52:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c56:	4805      	ldr	r0, [pc, #20]	@ (8002c6c <MQ2_ReadRaw+0x24>)
 8002c58:	f7fe fe2c 	bl	80018b4 <ADC_PollForConversion>
    return (uint16_t)ADC_GetValue(&hadc_mq2);
 8002c5c:	4803      	ldr	r0, [pc, #12]	@ (8002c6c <MQ2_ReadRaw+0x24>)
 8002c5e:	f7fe fe47 	bl	80018f0 <ADC_GetValue>
 8002c62:	4603      	mov	r3, r0
 8002c64:	b29b      	uxth	r3, r3
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000354 	.word	0x20000354

08002c70 <MQ2_ReadRs>:

static float MQ2_ReadRs(void)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
    uint16_t adc_val = MQ2_ReadRaw();
 8002c76:	f7ff ffe7 	bl	8002c48 <MQ2_ReadRaw>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	80fb      	strh	r3, [r7, #6]
    float voltage_ratio = (ADC_MAX - adc_val) / (float)adc_val;
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd ffcb 	bl	8000c1c <__aeabi_i2f>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4619      	mov	r1, r3
 8002c8a:	480c      	ldr	r0, [pc, #48]	@ (8002cbc <MQ2_ReadRs+0x4c>)
 8002c8c:	f7fd ff10 	bl	8000ab0 <__aeabi_fsub>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461c      	mov	r4, r3
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd ffbc 	bl	8000c14 <__aeabi_ui2f>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f7fe f8c3 	bl	8000e2c <__aeabi_fdiv>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	603b      	str	r3, [r7, #0]
    return RL_VALUE * voltage_ratio;
 8002caa:	4905      	ldr	r1, [pc, #20]	@ (8002cc0 <MQ2_ReadRs+0x50>)
 8002cac:	6838      	ldr	r0, [r7, #0]
 8002cae:	f7fe f809 	bl	8000cc4 <__aeabi_fmul>
 8002cb2:	4603      	mov	r3, r0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	457ff000 	.word	0x457ff000
 8002cc0:	41200000 	.word	0x41200000

08002cc4 <MQ2_ReadAirQuality>:
/**
 * @brief Đọc nồng độ khí tổng quát (Smoke) đại diện cho chất lượng không khí
 * @return ppm
 */
float MQ2_ReadAirQuality(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
    float rs = MQ2_ReadRs();
 8002cca:	f7ff ffd1 	bl	8002c70 <MQ2_ReadRs>
 8002cce:	6078      	str	r0, [r7, #4]
    float ratio = rs / Ro;
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <MQ2_ReadAirQuality+0x38>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe f8a8 	bl	8000e2c <__aeabi_fdiv>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	603b      	str	r3, [r7, #0]
    return SMOKE_A * powf(ratio, SMOKE_B);
 8002ce0:	4907      	ldr	r1, [pc, #28]	@ (8002d00 <MQ2_ReadAirQuality+0x3c>)
 8002ce2:	6838      	ldr	r0, [r7, #0]
 8002ce4:	f003 fb8c 	bl	8006400 <powf>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4906      	ldr	r1, [pc, #24]	@ (8002d04 <MQ2_ReadAirQuality+0x40>)
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd ffe9 	bl	8000cc4 <__aeabi_fmul>
 8002cf2:	4603      	mov	r3, r0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	bfcccccd 	.word	0xbfcccccd
 8002d04:	42c80000 	.word	0x42c80000

08002d08 <LED_RGB_Init>:
    [LED_RED]       = {255, 0,   0   }
};


void LED_RGB_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
    // 1. Cấu hình các chân PWM: PA6, PA7, PB0 (AF_PP)
    GPIO_InitTypeDef gpio;

    gpio.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	617b      	str	r3, [r7, #20]
    gpio.Speed = GPIO_SPEED_HIGH;
 8002d12:	2302      	movs	r3, #2
 8002d14:	61fb      	str	r3, [r7, #28]

    gpio.Pin = LED_R_PIN;
 8002d16:	2340      	movs	r3, #64	@ 0x40
 8002d18:	613b      	str	r3, [r7, #16]
    GPIO_Init(LED_R_PORT, &gpio);
 8002d1a:	f107 0310 	add.w	r3, r7, #16
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4827      	ldr	r0, [pc, #156]	@ (8002dc0 <LED_RGB_Init+0xb8>)
 8002d22:	f7fe fdf7 	bl	8001914 <GPIO_Init>

    gpio.Pin = LED_G_PIN;
 8002d26:	2380      	movs	r3, #128	@ 0x80
 8002d28:	613b      	str	r3, [r7, #16]
    GPIO_Init(LED_G_PORT, &gpio);
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4823      	ldr	r0, [pc, #140]	@ (8002dc0 <LED_RGB_Init+0xb8>)
 8002d32:	f7fe fdef 	bl	8001914 <GPIO_Init>

    gpio.Pin = LED_B_PIN;
 8002d36:	2301      	movs	r3, #1
 8002d38:	613b      	str	r3, [r7, #16]
    GPIO_Init(LED_B_PORT, &gpio);
 8002d3a:	f107 0310 	add.w	r3, r7, #16
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4820      	ldr	r0, [pc, #128]	@ (8002dc4 <LED_RGB_Init+0xbc>)
 8002d42:	f7fe fde7 	bl	8001914 <GPIO_Init>

    // 2. Cấu hình timer TIM3
    htim3.Instance = TIM3;
 8002d46:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <LED_RGB_Init+0xc0>)
 8002d48:	4a20      	ldr	r2, [pc, #128]	@ (8002dcc <LED_RGB_Init+0xc4>)
 8002d4a:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 71;           // 72 MHz / (71+1) = 1 MHz
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <LED_RGB_Init+0xc0>)
 8002d4e:	2247      	movs	r2, #71	@ 0x47
 8002d50:	605a      	str	r2, [r3, #4]
    htim3.Init.Period = 999;             // PWM tần số = 1 kHz
 8002d52:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <LED_RGB_Init+0xc0>)
 8002d54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d58:	60da      	str	r2, [r3, #12]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <LED_RGB_Init+0xc0>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	609a      	str	r2, [r3, #8]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d60:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <LED_RGB_Init+0xc0>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	611a      	str	r2, [r3, #16]
    TIM_PWM_Init(&htim3);
 8002d66:	4818      	ldr	r0, [pc, #96]	@ (8002dc8 <LED_RGB_Init+0xc0>)
 8002d68:	f7fe ff6e 	bl	8001c48 <TIM_PWM_Init>

    // 3. Cấu hình từng kênh PWM (CH1–CH3)
    TIM_OC_InitTypeDef sConfigOC = {
 8002d6c:	2360      	movs	r3, #96	@ 0x60
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	2300      	movs	r3, #0
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	2300      	movs	r3, #0
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
        .Pulse = 0,
        .OCPolarity = TIM_OCPOLARITY_HIGH,
        .OCFastMode = TIM_OCFAST_DISABLE
    };

    TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1); // RED
 8002d7c:	463b      	mov	r3, r7
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4619      	mov	r1, r3
 8002d82:	4811      	ldr	r0, [pc, #68]	@ (8002dc8 <LED_RGB_Init+0xc0>)
 8002d84:	f7fe ff6c 	bl	8001c60 <TIM_PWM_ConfigChannel>
    TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2); // GREEN
 8002d88:	463b      	mov	r3, r7
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	480e      	ldr	r0, [pc, #56]	@ (8002dc8 <LED_RGB_Init+0xc0>)
 8002d90:	f7fe ff66 	bl	8001c60 <TIM_PWM_ConfigChannel>
    TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3); // BLUE
 8002d94:	463b      	mov	r3, r7
 8002d96:	2208      	movs	r2, #8
 8002d98:	4619      	mov	r1, r3
 8002d9a:	480b      	ldr	r0, [pc, #44]	@ (8002dc8 <LED_RGB_Init+0xc0>)
 8002d9c:	f7fe ff60 	bl	8001c60 <TIM_PWM_ConfigChannel>

    TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002da0:	2100      	movs	r1, #0
 8002da2:	4809      	ldr	r0, [pc, #36]	@ (8002dc8 <LED_RGB_Init+0xc0>)
 8002da4:	f7ff f85a 	bl	8001e5c <TIM_PWM_Start>
    TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002da8:	2104      	movs	r1, #4
 8002daa:	4807      	ldr	r0, [pc, #28]	@ (8002dc8 <LED_RGB_Init+0xc0>)
 8002dac:	f7ff f856 	bl	8001e5c <TIM_PWM_Start>
    TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002db0:	2108      	movs	r1, #8
 8002db2:	4805      	ldr	r0, [pc, #20]	@ (8002dc8 <LED_RGB_Init+0xc0>)
 8002db4:	f7ff f852 	bl	8001e5c <TIM_PWM_Start>
}
 8002db8:	bf00      	nop
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40010800 	.word	0x40010800
 8002dc4:	40010c00 	.word	0x40010c00
 8002dc8:	20000370 	.word	0x20000370
 8002dcc:	40000400 	.word	0x40000400

08002dd0 <LED_RGB_Set>:

void LED_RGB_Set(uint8_t r_percent, uint8_t g_percent, uint8_t b_percent)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	71bb      	strb	r3, [r7, #6]
 8002dde:	4613      	mov	r3, r2
 8002de0:	717b      	strb	r3, [r7, #5]
    uint32_t period = htim3.Init.Period + 1;
 8002de2:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <LED_RGB_Set+0x70>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	3301      	adds	r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]

    TIM_SetCompare(&htim3, TIM_CHANNEL_1, (r_percent * period) / 255);
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	4a14      	ldr	r2, [pc, #80]	@ (8002e44 <LED_RGB_Set+0x74>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	09db      	lsrs	r3, r3, #7
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4810      	ldr	r0, [pc, #64]	@ (8002e40 <LED_RGB_Set+0x70>)
 8002e00:	f7ff f89e 	bl	8001f40 <TIM_SetCompare>
    TIM_SetCompare(&htim3, TIM_CHANNEL_2, (g_percent * period) / 255);
 8002e04:	79bb      	ldrb	r3, [r7, #6]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e44 <LED_RGB_Set+0x74>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	09db      	lsrs	r3, r3, #7
 8002e14:	461a      	mov	r2, r3
 8002e16:	2104      	movs	r1, #4
 8002e18:	4809      	ldr	r0, [pc, #36]	@ (8002e40 <LED_RGB_Set+0x70>)
 8002e1a:	f7ff f891 	bl	8001f40 <TIM_SetCompare>
    TIM_SetCompare(&htim3, TIM_CHANNEL_3, (b_percent * period) / 255);
 8002e1e:	797b      	ldrb	r3, [r7, #5]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	4a07      	ldr	r2, [pc, #28]	@ (8002e44 <LED_RGB_Set+0x74>)
 8002e28:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2c:	09db      	lsrs	r3, r3, #7
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2108      	movs	r1, #8
 8002e32:	4803      	ldr	r0, [pc, #12]	@ (8002e40 <LED_RGB_Set+0x70>)
 8002e34:	f7ff f884 	bl	8001f40 <TIM_SetCompare>
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000370 	.word	0x20000370
 8002e44:	80808081 	.word	0x80808081

08002e48 <LED_RGB_Off>:

void LED_RGB_Off(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
    TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4807      	ldr	r0, [pc, #28]	@ (8002e70 <LED_RGB_Off+0x28>)
 8002e52:	f7ff f875 	bl	8001f40 <TIM_SetCompare>
    TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 8002e56:	2200      	movs	r2, #0
 8002e58:	2104      	movs	r1, #4
 8002e5a:	4805      	ldr	r0, [pc, #20]	@ (8002e70 <LED_RGB_Off+0x28>)
 8002e5c:	f7ff f870 	bl	8001f40 <TIM_SetCompare>
    TIM_SetCompare(&htim3, TIM_CHANNEL_3, 0);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2108      	movs	r1, #8
 8002e64:	4802      	ldr	r0, [pc, #8]	@ (8002e70 <LED_RGB_Off+0x28>)
 8002e66:	f7ff f86b 	bl	8001f40 <TIM_SetCompare>
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000370 	.word	0x20000370

08002e74 <LED_RGB_SetState>:
    *g_percent = (htim3.Instance->CCR2 * 255) / period;
    *b_percent = (htim3.Instance->CCR3 * 255) / period;
}


void LED_RGB_SetState(LED_State_t state){
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
    if (state < LED_OFF || state > LED_RED) {
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d812      	bhi.n	8002eaa <LED_RGB_SetState+0x36>
        return; // Invalid state
    }

    RGB_Color_t color = led_color_table[state];
 8002e84:	79fa      	ldrb	r2, [r7, #7]
 8002e86:	490b      	ldr	r1, [pc, #44]	@ (8002eb4 <LED_RGB_SetState+0x40>)
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	18ca      	adds	r2, r1, r3
 8002e90:	f107 030c 	add.w	r3, r7, #12
 8002e94:	8811      	ldrh	r1, [r2, #0]
 8002e96:	7892      	ldrb	r2, [r2, #2]
 8002e98:	8019      	strh	r1, [r3, #0]
 8002e9a:	709a      	strb	r2, [r3, #2]
    LED_RGB_Set(color.R, color.G, color.B);
 8002e9c:	7b3b      	ldrb	r3, [r7, #12]
 8002e9e:	7b79      	ldrb	r1, [r7, #13]
 8002ea0:	7bba      	ldrb	r2, [r7, #14]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff94 	bl	8002dd0 <LED_RGB_Set>
 8002ea8:	e000      	b.n	8002eac <LED_RGB_SetState+0x38>
        return; // Invalid state
 8002eaa:	bf00      	nop
}
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	08006d4c 	.word	0x08006d4c

08002eb8 <Motor_Init>:
#define MOTOR_IN1_PIN (1U << 15) // PB15 - IN1 pin
#define MOTOR_IN2_PORT GPIOB
#define MOTOR_IN2_PIN (1U << 14) // PB14 - IN2 pin

void Motor_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b090      	sub	sp, #64	@ 0x40
 8002ebc:	af00      	add	r7, sp, #0
    // 1. Clock enable
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_TIM1EN;
 8002ebe:	4b34      	ldr	r3, [pc, #208]	@ (8002f90 <Motor_Init+0xd8>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	4a33      	ldr	r2, [pc, #204]	@ (8002f90 <Motor_Init+0xd8>)
 8002ec4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ec8:	f043 030c 	orr.w	r3, r3, #12
 8002ecc:	6193      	str	r3, [r2, #24]

    // 2. Init PA8: TIM1_CH1 (AF_PP)
    GPIO_InitTypeDef gpio_pwm = {
 8002ece:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	609a      	str	r2, [r3, #8]
 8002eda:	60da      	str	r2, [r3, #12]
 8002edc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        .Pin = (MOTOR_PWM_PIN),
        .Mode = GPIO_MODE_AF_PP,
        .Speed = GPIO_SPEED_HIGH};
    GPIO_Init(MOTOR_PWM_PORT, &gpio_pwm);
 8002eea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4828      	ldr	r0, [pc, #160]	@ (8002f94 <Motor_Init+0xdc>)
 8002ef2:	f7fe fd0f 	bl	8001914 <GPIO_Init>

    // 3. Init PB15: IN1 pin (output push-pull)
    GPIO_InitTypeDef gpio_in1 = {
 8002ef6:	f107 0320 	add.w	r3, r7, #32
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f08:	623b      	str	r3, [r7, #32]
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
        .Pin = (MOTOR_IN1_PIN),
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Speed = GPIO_SPEED_LOW};
    GPIO_Init(MOTOR_IN1_PORT, &gpio_in1);
 8002f0e:	f107 0320 	add.w	r3, r7, #32
 8002f12:	4619      	mov	r1, r3
 8002f14:	4820      	ldr	r0, [pc, #128]	@ (8002f98 <Motor_Init+0xe0>)
 8002f16:	f7fe fcfd 	bl	8001914 <GPIO_Init>

    // 4. Init PB14: IN2 pin (output push-pull)
    GPIO_InitTypeDef gpio_in2 = {
 8002f1a:	f107 0310 	add.w	r3, r7, #16
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	2301      	movs	r3, #1
 8002f30:	617b      	str	r3, [r7, #20]
        .Pin = (MOTOR_IN2_PIN),
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Speed = GPIO_SPEED_LOW};
    GPIO_Init(MOTOR_IN2_PORT, &gpio_in2);
 8002f32:	f107 0310 	add.w	r3, r7, #16
 8002f36:	4619      	mov	r1, r3
 8002f38:	4817      	ldr	r0, [pc, #92]	@ (8002f98 <Motor_Init+0xe0>)
 8002f3a:	f7fe fceb 	bl	8001914 <GPIO_Init>

    // 4. Timer config
    htim1.Instance = TIM1;
 8002f3e:	4b17      	ldr	r3, [pc, #92]	@ (8002f9c <Motor_Init+0xe4>)
 8002f40:	4a17      	ldr	r2, [pc, #92]	@ (8002fa0 <Motor_Init+0xe8>)
 8002f42:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 71; // 72MHz / (71+1) = 1MHz
 8002f44:	4b15      	ldr	r3, [pc, #84]	@ (8002f9c <Motor_Init+0xe4>)
 8002f46:	2247      	movs	r2, #71	@ 0x47
 8002f48:	605a      	str	r2, [r3, #4]
    htim1.Init.Period = 200;    // 1MHz / (49+1) = 20kHz PWM
 8002f4a:	4b14      	ldr	r3, [pc, #80]	@ (8002f9c <Motor_Init+0xe4>)
 8002f4c:	22c8      	movs	r2, #200	@ 0xc8
 8002f4e:	60da      	str	r2, [r3, #12]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f50:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <Motor_Init+0xe4>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f56:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <Motor_Init+0xe4>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]

    TIM_PWM_Init(&htim1);
 8002f5c:	480f      	ldr	r0, [pc, #60]	@ (8002f9c <Motor_Init+0xe4>)
 8002f5e:	f7fe fe73 	bl	8001c48 <TIM_PWM_Init>

    // 5. PWM channel config
    TIM_OC_InitTypeDef oc = {
 8002f62:	2360      	movs	r3, #96	@ 0x60
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	2300      	movs	r3, #0
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
        .OCMode = TIM_OCMODE_PWM1,
        .Pulse = 0,
        .OCPolarity = TIM_OCPOLARITY_HIGH,
        .OCFastMode = TIM_OCFAST_DISABLE};

    TIM_PWM_ConfigChannel(&htim1, &oc, TIM_CHANNEL_1);
 8002f72:	463b      	mov	r3, r7
 8002f74:	2200      	movs	r2, #0
 8002f76:	4619      	mov	r1, r3
 8002f78:	4808      	ldr	r0, [pc, #32]	@ (8002f9c <Motor_Init+0xe4>)
 8002f7a:	f7fe fe71 	bl	8001c60 <TIM_PWM_ConfigChannel>
    TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4806      	ldr	r0, [pc, #24]	@ (8002f9c <Motor_Init+0xe4>)
 8002f82:	f7fe ff6b 	bl	8001e5c <TIM_PWM_Start>

}
 8002f86:	bf00      	nop
 8002f88:	3740      	adds	r7, #64	@ 0x40
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40010800 	.word	0x40010800
 8002f98:	40010c00 	.word	0x40010c00
 8002f9c:	20000388 	.word	0x20000388
 8002fa0:	40012c00 	.word	0x40012c00

08002fa4 <Motor_SetSpeed>:

void Motor_SetSpeed(int8_t speed_percent)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	71fb      	strb	r3, [r7, #7]

    if (speed_percent > 100)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	2b64      	cmp	r3, #100	@ 0x64
 8002fb4:	dd01      	ble.n	8002fba <Motor_SetSpeed+0x16>
        speed_percent = 100;
 8002fb6:	2364      	movs	r3, #100	@ 0x64
 8002fb8:	71fb      	strb	r3, [r7, #7]
    if (speed_percent < -100)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002fc2:	da01      	bge.n	8002fc8 <Motor_SetSpeed+0x24>
        speed_percent = -100;
 8002fc4:	239c      	movs	r3, #156	@ 0x9c
 8002fc6:	71fb      	strb	r3, [r7, #7]

    if (speed_percent >= 0){
 8002fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	db0c      	blt.n	8002fea <Motor_SetSpeed+0x46>
        GPIO_WritePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, GPIO_PIN_SET);
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fd6:	4817      	ldr	r0, [pc, #92]	@ (8003034 <Motor_SetSpeed+0x90>)
 8002fd8:	f7fe fdc4 	bl	8001b64 <GPIO_WritePin>
        GPIO_WritePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, GPIO_PIN_RESET);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002fe2:	4814      	ldr	r0, [pc, #80]	@ (8003034 <Motor_SetSpeed+0x90>)
 8002fe4:	f7fe fdbe 	bl	8001b64 <GPIO_WritePin>
 8002fe8:	e00f      	b.n	800300a <Motor_SetSpeed+0x66>
    }
    else
    {
        GPIO_WritePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, GPIO_PIN_RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ff0:	4810      	ldr	r0, [pc, #64]	@ (8003034 <Motor_SetSpeed+0x90>)
 8002ff2:	f7fe fdb7 	bl	8001b64 <GPIO_WritePin>
        GPIO_WritePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, GPIO_PIN_SET);
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ffc:	480d      	ldr	r0, [pc, #52]	@ (8003034 <Motor_SetSpeed+0x90>)
 8002ffe:	f7fe fdb1 	bl	8001b64 <GPIO_WritePin>
        speed_percent = -speed_percent;
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	425b      	negs	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	71fb      	strb	r3, [r7, #7]
    }

    uint32_t compare = ((htim1.Init.Period + 1) * speed_percent) / 100;
 800300a:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <Motor_SetSpeed+0x94>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	3301      	adds	r3, #1
 8003010:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003014:	fb02 f303 	mul.w	r3, r2, r3
 8003018:	4a08      	ldr	r2, [pc, #32]	@ (800303c <Motor_SetSpeed+0x98>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	60fb      	str	r3, [r7, #12]

    TIM_SetCompare(&htim1, MOTOR_PWM_CHANNEL, compare);
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	2100      	movs	r1, #0
 8003026:	4804      	ldr	r0, [pc, #16]	@ (8003038 <Motor_SetSpeed+0x94>)
 8003028:	f7fe ff8a 	bl	8001f40 <TIM_SetCompare>
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40010c00 	.word	0x40010c00
 8003038:	20000388 	.word	0x20000388
 800303c:	51eb851f 	.word	0x51eb851f

08003040 <Motor_Stop>:

void Motor_Stop(void){
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
    TIM_SetCompare(&htim1, MOTOR_PWM_CHANNEL, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	2100      	movs	r1, #0
 8003048:	4802      	ldr	r0, [pc, #8]	@ (8003054 <Motor_Stop+0x14>)
 800304a:	f7fe ff79 	bl	8001f40 <TIM_SetCompare>
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000388 	.word	0x20000388

08003058 <Motor_SetLevel>:

void Motor_SetLevel(uint8_t state)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
    if (state == 0)
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10e      	bne.n	8003086 <Motor_SetLevel+0x2e>
    {
        Motor_Stop();
 8003068:	f7ff ffea 	bl	8003040 <Motor_Stop>
        GPIO_WritePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, GPIO_PIN_RESET);
 800306c:	2200      	movs	r2, #0
 800306e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003072:	4811      	ldr	r0, [pc, #68]	@ (80030b8 <Motor_SetLevel+0x60>)
 8003074:	f7fe fd76 	bl	8001b64 <GPIO_WritePin>
        GPIO_WritePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, GPIO_PIN_RESET);
 8003078:	2200      	movs	r2, #0
 800307a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800307e:	480e      	ldr	r0, [pc, #56]	@ (80030b8 <Motor_SetLevel+0x60>)
 8003080:	f7fe fd70 	bl	8001b64 <GPIO_WritePin>
    }
    else if (state == 3)
    {
        Motor_SetSpeed(100); // High speed
    }
}
 8003084:	e013      	b.n	80030ae <Motor_SetLevel+0x56>
    else if (state == 1)
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d103      	bne.n	8003094 <Motor_SetLevel+0x3c>
        Motor_SetSpeed(50); // Low speed
 800308c:	2032      	movs	r0, #50	@ 0x32
 800308e:	f7ff ff89 	bl	8002fa4 <Motor_SetSpeed>
}
 8003092:	e00c      	b.n	80030ae <Motor_SetLevel+0x56>
    else if (state == 2)
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d103      	bne.n	80030a2 <Motor_SetLevel+0x4a>
        Motor_SetSpeed(75); // Medium speed
 800309a:	204b      	movs	r0, #75	@ 0x4b
 800309c:	f7ff ff82 	bl	8002fa4 <Motor_SetSpeed>
}
 80030a0:	e005      	b.n	80030ae <Motor_SetLevel+0x56>
    else if (state == 3)
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d102      	bne.n	80030ae <Motor_SetLevel+0x56>
        Motor_SetSpeed(100); // High speed
 80030a8:	2064      	movs	r0, #100	@ 0x64
 80030aa:	f7ff ff7b 	bl	8002fa4 <Motor_SetSpeed>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40010c00 	.word	0x40010c00

080030bc <Siren_Init>:

#define SIREN_GPIO_PORT GPIOA
#define SIREN_GPIO_PIN (1U << 3) // PA3

void Siren_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio = {
 80030c2:	463b      	mov	r3, r7
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	2308      	movs	r3, #8
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	2301      	movs	r3, #1
 80030d4:	607b      	str	r3, [r7, #4]
 80030d6:	2302      	movs	r3, #2
 80030d8:	60fb      	str	r3, [r7, #12]
        .Pin = SIREN_GPIO_PIN,
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Speed = GPIO_SPEED_HIGH};
    GPIO_Init(SIREN_GPIO_PORT, &gpio);
 80030da:	463b      	mov	r3, r7
 80030dc:	4619      	mov	r1, r3
 80030de:	4806      	ldr	r0, [pc, #24]	@ (80030f8 <Siren_Init+0x3c>)
 80030e0:	f7fe fc18 	bl	8001914 <GPIO_Init>
    GPIO_WritePin(SIREN_GPIO_PORT, SIREN_GPIO_PIN, GPIO_PIN_RESET);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2108      	movs	r1, #8
 80030e8:	4803      	ldr	r0, [pc, #12]	@ (80030f8 <Siren_Init+0x3c>)
 80030ea:	f7fe fd3b 	bl	8001b64 <GPIO_WritePin>
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40010800 	.word	0x40010800

080030fc <Siren_On>:

void Siren_On(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
    GPIO_WritePin(SIREN_GPIO_PORT, SIREN_GPIO_PIN, GPIO_PIN_SET);
 8003100:	2201      	movs	r2, #1
 8003102:	2108      	movs	r1, #8
 8003104:	4802      	ldr	r0, [pc, #8]	@ (8003110 <Siren_On+0x14>)
 8003106:	f7fe fd2d 	bl	8001b64 <GPIO_WritePin>
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40010800 	.word	0x40010800

08003114 <Siren_Off>:

void Siren_Off(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
    GPIO_WritePin(SIREN_GPIO_PORT, SIREN_GPIO_PIN, GPIO_PIN_RESET);
 8003118:	2200      	movs	r2, #0
 800311a:	2108      	movs	r1, #8
 800311c:	4802      	ldr	r0, [pc, #8]	@ (8003128 <Siren_Off+0x14>)
 800311e:	f7fe fd21 	bl	8001b64 <GPIO_WritePin>
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40010800 	.word	0x40010800

0800312c <device_init>:
#include "led_rgb.h"
#include "motor.h"
#include "siren.h"

void device_init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0

    DHT11_Init();
 8003130:	f7ff fc68 	bl	8002a04 <DHT11_Init>
    CDS_Init();
 8003134:	f7ff fba0 	bl	8002878 <CDS_Init>
    MQ2_Init(10.0f);
 8003138:	4815      	ldr	r0, [pc, #84]	@ (8003190 <device_init+0x64>)
 800313a:	f7ff fd37 	bl	8002bac <MQ2_Init>
    LED_RGB_Init();
 800313e:	f7ff fde3 	bl	8002d08 <LED_RGB_Init>
    Siren_Init();
 8003142:	f7ff ffbb 	bl	80030bc <Siren_Init>
    Motor_Init();
 8003146:	f7ff feb7 	bl	8002eb8 <Motor_Init>

    sys.temperature = 25.0f;
 800314a:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <device_init+0x68>)
 800314c:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <device_init+0x6c>)
 800314e:	601a      	str	r2, [r3, #0]
    sys.humidity = 50.0f;
 8003150:	4b10      	ldr	r3, [pc, #64]	@ (8003194 <device_init+0x68>)
 8003152:	4a12      	ldr	r2, [pc, #72]	@ (800319c <device_init+0x70>)
 8003154:	605a      	str	r2, [r3, #4]
    sys.gas_level = 200.0f;
 8003156:	4b0f      	ldr	r3, [pc, #60]	@ (8003194 <device_init+0x68>)
 8003158:	4a11      	ldr	r2, [pc, #68]	@ (80031a0 <device_init+0x74>)
 800315a:	609a      	str	r2, [r3, #8]
    sys.lux = 500.0f;
 800315c:	4b0d      	ldr	r3, [pc, #52]	@ (8003194 <device_init+0x68>)
 800315e:	4a11      	ldr	r2, [pc, #68]	@ (80031a4 <device_init+0x78>)
 8003160:	60da      	str	r2, [r3, #12]
    sys.led_state = 0.0f;   // 0: off, 1: WHITE, 2: SOFT WHITE, 3: GREEN, 4: RED
 8003162:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <device_init+0x68>)
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	611a      	str	r2, [r3, #16]
    sys.motor_level = 2.0f; // 0: off, 1: low, 2: medium, 3: high
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <device_init+0x68>)
 800316c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003170:	615a      	str	r2, [r3, #20]
    sys.motor_dir = 0.0f;   // 0: forward, 1: backward
 8003172:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <device_init+0x68>)
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	619a      	str	r2, [r3, #24]
    sys.siren_on = 0.0f;    // 0: off, 1: on
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <device_init+0x68>)
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
    sys.mode = 0.0f;        // 0: auto, 1: manual
 8003182:	4b04      	ldr	r3, [pc, #16]	@ (8003194 <device_init+0x68>)
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2020 	strb.w	r2, [r3, #32]
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	41200000 	.word	0x41200000
 8003194:	2000030c 	.word	0x2000030c
 8003198:	41c80000 	.word	0x41c80000
 800319c:	42480000 	.word	0x42480000
 80031a0:	43480000 	.word	0x43480000
 80031a4:	43fa0000 	.word	0x43fa0000

080031a8 <DeviceManager_UpdateData>:

void DeviceManager_UpdateData(void)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b08d      	sub	sp, #52	@ 0x34
 80031ac:	af00      	add	r7, sp, #0
    uint8_t data[20];
    uint8_t length;

    // ======= DHT11 =======
    uint8_t h, h_d, t, t_d;
    if (DHT11_Read(&h, &h_d, &t, &t_d))
 80031ae:	1d3b      	adds	r3, r7, #4
 80031b0:	1d7a      	adds	r2, r7, #5
 80031b2:	1db9      	adds	r1, r7, #6
 80031b4:	1df8      	adds	r0, r7, #7
 80031b6:	f7ff fc88 	bl	8002aca <DHT11_Read>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d067      	beq.n	8003290 <DeviceManager_UpdateData+0xe8>
    {
        float humidity = h + h_d / 10.0f;
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd fd2a 	bl	8000c1c <__aeabi_i2f>
 80031c8:	4604      	mov	r4, r0
 80031ca:	79bb      	ldrb	r3, [r7, #6]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd fd25 	bl	8000c1c <__aeabi_i2f>
 80031d2:	4603      	mov	r3, r0
 80031d4:	4971      	ldr	r1, [pc, #452]	@ (800339c <DeviceManager_UpdateData+0x1f4>)
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd fe28 	bl	8000e2c <__aeabi_fdiv>
 80031dc:	4603      	mov	r3, r0
 80031de:	4619      	mov	r1, r3
 80031e0:	4620      	mov	r0, r4
 80031e2:	f7fd fc67 	bl	8000ab4 <__addsf3>
 80031e6:	4603      	mov	r3, r0
 80031e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        float temperature = t + t_d / 10.0f;
 80031ea:	797b      	ldrb	r3, [r7, #5]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd fd15 	bl	8000c1c <__aeabi_i2f>
 80031f2:	4604      	mov	r4, r0
 80031f4:	793b      	ldrb	r3, [r7, #4]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd fd10 	bl	8000c1c <__aeabi_i2f>
 80031fc:	4603      	mov	r3, r0
 80031fe:	4967      	ldr	r1, [pc, #412]	@ (800339c <DeviceManager_UpdateData+0x1f4>)
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd fe13 	bl	8000e2c <__aeabi_fdiv>
 8003206:	4603      	mov	r3, r0
 8003208:	4619      	mov	r1, r3
 800320a:	4620      	mov	r0, r4
 800320c:	f7fd fc52 	bl	8000ab4 <__addsf3>
 8003210:	4603      	mov	r3, r0
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (humidity != sys.humidity)
 8003214:	4b62      	ldr	r3, [pc, #392]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4619      	mov	r1, r3
 800321a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800321c:	f7fd fee6 	bl	8000fec <__aeabi_fcmpeq>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d115      	bne.n	8003252 <DeviceManager_UpdateData+0xaa>
        {
            sys.humidity = humidity;
 8003226:	4a5e      	ldr	r2, [pc, #376]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 8003228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800322a:	6053      	str	r3, [r2, #4]

            length = Create_Message_Notify(DHT11_HUMI, sys.humidity, data);
 800322c:	4b5c      	ldr	r3, [pc, #368]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f107 0208 	add.w	r2, r7, #8
 8003234:	4619      	mov	r1, r3
 8003236:	2004      	movs	r0, #4
 8003238:	f000 f99c 	bl	8003574 <Create_Message_Notify>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            USART1_Send_Data(data, length);
 8003242:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003246:	f107 0308 	add.w	r3, r7, #8
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fab1 	bl	80027b4 <USART1_Send_Data>
        }

        if (temperature != sys.temperature)
 8003252:	4b53      	ldr	r3, [pc, #332]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4619      	mov	r1, r3
 8003258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800325a:	f7fd fec7 	bl	8000fec <__aeabi_fcmpeq>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d115      	bne.n	8003290 <DeviceManager_UpdateData+0xe8>
        {
            sys.temperature = temperature;
 8003264:	4a4e      	ldr	r2, [pc, #312]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 8003266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003268:	6013      	str	r3, [r2, #0]

            length = Create_Message_Notify(DHT11_TEMP, sys.temperature, data);
 800326a:	4b4d      	ldr	r3, [pc, #308]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f107 0208 	add.w	r2, r7, #8
 8003272:	4619      	mov	r1, r3
 8003274:	2005      	movs	r0, #5
 8003276:	f000 f97d 	bl	8003574 <Create_Message_Notify>
 800327a:	4603      	mov	r3, r0
 800327c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            USART1_Send_Data(data, length);
 8003280:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003284:	f107 0308 	add.w	r3, r7, #8
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fa92 	bl	80027b4 <USART1_Send_Data>
        }
    }

    // ======= CDS =======
    float lux = CDS_ReadLux();
 8003290:	f7ff fb54 	bl	800293c <CDS_ReadLux>
 8003294:	6238      	str	r0, [r7, #32]
    if (lux != sys.lux)
 8003296:	4b42      	ldr	r3, [pc, #264]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4619      	mov	r1, r3
 800329c:	6a38      	ldr	r0, [r7, #32]
 800329e:	f7fd fea5 	bl	8000fec <__aeabi_fcmpeq>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d115      	bne.n	80032d4 <DeviceManager_UpdateData+0x12c>
    {
        sys.lux = lux;
 80032a8:	4a3d      	ldr	r2, [pc, #244]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	60d3      	str	r3, [r2, #12]

        length = Create_Message_Notify(CDS, sys.lux, data);
 80032ae:	4b3c      	ldr	r3, [pc, #240]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f107 0208 	add.w	r2, r7, #8
 80032b6:	4619      	mov	r1, r3
 80032b8:	2001      	movs	r0, #1
 80032ba:	f000 f95b 	bl	8003574 <Create_Message_Notify>
 80032be:	4603      	mov	r3, r0
 80032c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        USART1_Send_Data(data, length);
 80032c4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80032c8:	f107 0308 	add.w	r3, r7, #8
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fa70 	bl	80027b4 <USART1_Send_Data>
    }

    // ======= MQ2 =======
    float gas = MQ2_ReadAirQuality();
 80032d4:	f7ff fcf6 	bl	8002cc4 <MQ2_ReadAirQuality>
 80032d8:	61f8      	str	r0, [r7, #28]
    if (gas != sys.gas_level)
 80032da:	4b31      	ldr	r3, [pc, #196]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	4619      	mov	r1, r3
 80032e0:	69f8      	ldr	r0, [r7, #28]
 80032e2:	f7fd fe83 	bl	8000fec <__aeabi_fcmpeq>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d115      	bne.n	8003318 <DeviceManager_UpdateData+0x170>
    {
        sys.gas_level = gas;
 80032ec:	4a2c      	ldr	r2, [pc, #176]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	6093      	str	r3, [r2, #8]

        length = Create_Message_Notify(MQ2, sys.gas_level, data);
 80032f2:	4b2b      	ldr	r3, [pc, #172]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f107 0208 	add.w	r2, r7, #8
 80032fa:	4619      	mov	r1, r3
 80032fc:	2003      	movs	r0, #3
 80032fe:	f000 f939 	bl	8003574 <Create_Message_Notify>
 8003302:	4603      	mov	r3, r0
 8003304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        USART1_Send_Data(data, length);
 8003308:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800330c:	f107 0308 	add.w	r3, r7, #8
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fa4e 	bl	80027b4 <USART1_Send_Data>
    }

    // ======= actuator =======
    if (sys.mode == AUTO_MODE)
 8003318:	4b21      	ldr	r3, [pc, #132]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 800331a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d138      	bne.n	8003394 <DeviceManager_UpdateData+0x1ec>
    {
        length = Create_Message_Notify(LED, sys.led_state, data);
 8003322:	4b1f      	ldr	r3, [pc, #124]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f107 0208 	add.w	r2, r7, #8
 800332a:	4619      	mov	r1, r3
 800332c:	2011      	movs	r0, #17
 800332e:	f000 f921 	bl	8003574 <Create_Message_Notify>
 8003332:	4603      	mov	r3, r0
 8003334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        USART1_Send_Data(data, length);
 8003338:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800333c:	f107 0308 	add.w	r3, r7, #8
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fa36 	bl	80027b4 <USART1_Send_Data>

        length = Create_Message_Notify(MOTOR, sys.motor_level, data);
 8003348:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f107 0208 	add.w	r2, r7, #8
 8003350:	4619      	mov	r1, r3
 8003352:	2012      	movs	r0, #18
 8003354:	f000 f90e 	bl	8003574 <Create_Message_Notify>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        USART1_Send_Data(data, length);
 800335e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003362:	f107 0308 	add.w	r3, r7, #8
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fa23 	bl	80027b4 <USART1_Send_Data>

        length = Create_Message_Notify(SIREN, sys.siren_on, data);
 800336e:	4b0c      	ldr	r3, [pc, #48]	@ (80033a0 <DeviceManager_UpdateData+0x1f8>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f107 0208 	add.w	r2, r7, #8
 8003376:	4619      	mov	r1, r3
 8003378:	2013      	movs	r0, #19
 800337a:	f000 f8fb 	bl	8003574 <Create_Message_Notify>
 800337e:	4603      	mov	r3, r0
 8003380:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        USART1_Send_Data(data, length);
 8003384:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003388:	f107 0308 	add.w	r3, r7, #8
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fa10 	bl	80027b4 <USART1_Send_Data>
    }
}
 8003394:	bf00      	nop
 8003396:	3734      	adds	r7, #52	@ 0x34
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}
 800339c:	41200000 	.word	0x41200000
 80033a0:	2000030c 	.word	0x2000030c

080033a4 <UART_RxCpltCallback>:
static message_t message;

uint8_t buffer[FRAME_SIZE];

void UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	@ 0x30
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a2e      	ldr	r2, [pc, #184]	@ (800346c <UART_RxCpltCallback+0xc8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d155      	bne.n	8003462 <UART_RxCpltCallback+0xbe>
    {
    	for(int i = 0;i<2;i++){
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ba:	e04a      	b.n	8003452 <UART_RxCpltCallback+0xae>
            Fsm_Get_Message(uart_rx_buffer[i], buffer);
 80033bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003470 <UART_RxCpltCallback+0xcc>)
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	4413      	add	r3, r2
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	492b      	ldr	r1, [pc, #172]	@ (8003474 <UART_RxCpltCallback+0xd0>)
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff f8a2 	bl	8002510 <Fsm_Get_Message>

            if (Check_Fsm_Flag_New_Message())
 80033cc:	f7ff f9c4 	bl	8002758 <Check_Fsm_Flag_New_Message>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d03a      	beq.n	800344c <UART_RxCpltCallback+0xa8>
            {

                if (Message_Decode(buffer, &message))
 80033d6:	4928      	ldr	r1, [pc, #160]	@ (8003478 <UART_RxCpltCallback+0xd4>)
 80033d8:	4826      	ldr	r0, [pc, #152]	@ (8003474 <UART_RxCpltCallback+0xd0>)
 80033da:	f000 f988 	bl	80036ee <Message_Decode>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d019      	beq.n	8003418 <UART_RxCpltCallback+0x74>
                {


                    push(&g_uartQueue, message, FRAME_SIZE);
 80033e4:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <UART_RxCpltCallback+0xd4>)
 80033e6:	220a      	movs	r2, #10
 80033e8:	9200      	str	r2, [sp, #0]
 80033ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ec:	4823      	ldr	r0, [pc, #140]	@ (800347c <UART_RxCpltCallback+0xd8>)
 80033ee:	f000 fa1b 	bl	8003828 <push>

                    // Gửi ACK
                    uint8_t data[FRAME_SIZE];
                    uint8_t len = Create_Message_RESPONSE(UNKNOWN, RESPONSE_ACK, data);
 80033f2:	f107 0318 	add.w	r3, r7, #24
 80033f6:	461a      	mov	r2, r3
 80033f8:	2101      	movs	r1, #1
 80033fa:	20ff      	movs	r0, #255	@ 0xff
 80033fc:	f000 f920 	bl	8003640 <Create_Message_RESPONSE>
 8003400:	4603      	mov	r3, r0
 8003402:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                    USART1_Send_Data(data, len);
 8003406:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800340a:	f107 0318 	add.w	r3, r7, #24
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff f9cf 	bl	80027b4 <USART1_Send_Data>
 8003416:	e017      	b.n	8003448 <UART_RxCpltCallback+0xa4>
                }
                else
                {
                	GPIOA->ODR |= (1 << 5);
 8003418:	4b19      	ldr	r3, [pc, #100]	@ (8003480 <UART_RxCpltCallback+0xdc>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a18      	ldr	r2, [pc, #96]	@ (8003480 <UART_RxCpltCallback+0xdc>)
 800341e:	f043 0320 	orr.w	r3, r3, #32
 8003422:	60d3      	str	r3, [r2, #12]
                    // Gửi NACK
                    uint8_t data[FRAME_SIZE];
                    uint8_t len = Create_Message_RESPONSE(UNKNOWN, RESPONSE_NACK, data);
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	461a      	mov	r2, r3
 800342a:	2102      	movs	r1, #2
 800342c:	20ff      	movs	r0, #255	@ 0xff
 800342e:	f000 f907 	bl	8003640 <Create_Message_RESPONSE>
 8003432:	4603      	mov	r3, r0
 8003434:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    USART1_Send_Data(data, len);
 8003438:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff f9b6 	bl	80027b4 <USART1_Send_Data>
                }

                Clear_All_State_Fsm(); // Reset để nhận frame mới
 8003448:	f7ff f848 	bl	80024dc <Clear_All_State_Fsm>
    	for(int i = 0;i<2;i++){
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	3301      	adds	r3, #1
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	2b01      	cmp	r3, #1
 8003456:	ddb1      	ble.n	80033bc <UART_RxCpltCallback+0x18>
            }
    	}

        // Nhận byte tiếp theo
        DUNGX_UART_Receive_IT(&huart1, uart_rx_buffer, 2);
 8003458:	2202      	movs	r2, #2
 800345a:	4905      	ldr	r1, [pc, #20]	@ (8003470 <UART_RxCpltCallback+0xcc>)
 800345c:	4809      	ldr	r0, [pc, #36]	@ (8003484 <UART_RxCpltCallback+0xe0>)
 800345e:	f7ff f9cf 	bl	8002800 <DUNGX_UART_Receive_IT>
	}
}
 8003462:	bf00      	nop
 8003464:	3728      	adds	r7, #40	@ 0x28
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40013800 	.word	0x40013800
 8003470:	20000300 	.word	0x20000300
 8003474:	200003ac 	.word	0x200003ac
 8003478:	200003a0 	.word	0x200003a0
 800347c:	2000022c 	.word	0x2000022c
 8003480:	40010800 	.word	0x40010800
 8003484:	200001f0 	.word	0x200001f0

08003488 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003488:	480d      	ldr	r0, [pc, #52]	@ (80034c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800348a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800348c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003490:	480c      	ldr	r0, [pc, #48]	@ (80034c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003492:	490d      	ldr	r1, [pc, #52]	@ (80034c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003494:	4a0d      	ldr	r2, [pc, #52]	@ (80034cc <LoopForever+0xe>)
  movs r3, #0
 8003496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003498:	e002      	b.n	80034a0 <LoopCopyDataInit>

0800349a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800349a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800349c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800349e:	3304      	adds	r3, #4

080034a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a4:	d3f9      	bcc.n	800349a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034a6:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034a8:	4c0a      	ldr	r4, [pc, #40]	@ (80034d4 <LoopForever+0x16>)
  movs r3, #0
 80034aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034ac:	e001      	b.n	80034b2 <LoopFillZerobss>

080034ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034b0:	3204      	adds	r2, #4

080034b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b4:	d3fb      	bcc.n	80034ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80034b6:	f001 f8d1 	bl	800465c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034ba:	f7fe f85d 	bl	8001578 <main>

080034be <LoopForever>:

LoopForever:
  b LoopForever
 80034be:	e7fe      	b.n	80034be <LoopForever>
  ldr   r0, =_estack
 80034c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80034c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80034cc:	080070f8 	.word	0x080070f8
  ldr r2, =_sbss
 80034d0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80034d4:	20000524 	.word	0x20000524

080034d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034d8:	e7fe      	b.n	80034d8 <ADC1_2_IRQHandler>
	...

080034dc <Convert_Float_To_Bytes>:
 * @brief: Chuyển đổi một biến float sang dạng mảng byte (4 byte).
 * @param data: Biến kiểu float cần chuyển đổi.
 * @return: Con trỏ trỏ đến mảng byte tương ứng.
 */
uint8_t *Convert_Float_To_Bytes(float data)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
    static data_convert_float_and_bytes input;
    input.data_float = data;
 80034e4:	4a04      	ldr	r2, [pc, #16]	@ (80034f8 <Convert_Float_To_Bytes+0x1c>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6013      	str	r3, [r2, #0]
    return input.data_bytes;
 80034ea:	4b03      	ldr	r3, [pc, #12]	@ (80034f8 <Convert_Float_To_Bytes+0x1c>)
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	200003b8 	.word	0x200003b8

080034fc <Convert_Bytes_To_Float>:
 * @param data3: Byte thứ ba.
 * @param data4: Byte thứ tư.
 * @return: Biến float sau khi ghép.
 */
float Convert_Bytes_To_Float(uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
 80034fc:	b490      	push	{r4, r7}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	4604      	mov	r4, r0
 8003504:	4608      	mov	r0, r1
 8003506:	4611      	mov	r1, r2
 8003508:	461a      	mov	r2, r3
 800350a:	4623      	mov	r3, r4
 800350c:	71fb      	strb	r3, [r7, #7]
 800350e:	4603      	mov	r3, r0
 8003510:	71bb      	strb	r3, [r7, #6]
 8003512:	460b      	mov	r3, r1
 8003514:	717b      	strb	r3, [r7, #5]
 8003516:	4613      	mov	r3, r2
 8003518:	713b      	strb	r3, [r7, #4]
    data_convert_float_and_bytes input;
    input.data_bytes[0] = data1;
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	733b      	strb	r3, [r7, #12]
    input.data_bytes[1] = data2;
 800351e:	79bb      	ldrb	r3, [r7, #6]
 8003520:	737b      	strb	r3, [r7, #13]
    input.data_bytes[2] = data3;
 8003522:	797b      	ldrb	r3, [r7, #5]
 8003524:	73bb      	strb	r3, [r7, #14]
    input.data_bytes[3] = data4;
 8003526:	793b      	ldrb	r3, [r7, #4]
 8003528:	73fb      	strb	r3, [r7, #15]
    return input.data_float;
 800352a:	68fb      	ldr	r3, [r7, #12]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bc90      	pop	{r4, r7}
 8003534:	4770      	bx	lr

08003536 <Convert_Bytes_To_Uint16>:
 * @param data1: Byte thứ nhất.
 * @param data2: Byte thứ hai.
 * @return: Biến uint16_t sau khi ghép từ 2 byte.
 */
uint16_t Convert_Bytes_To_Uint16(uint8_t data1, uint8_t data2)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	460a      	mov	r2, r1
 8003540:	71fb      	strb	r3, [r7, #7]
 8003542:	4613      	mov	r3, r2
 8003544:	71bb      	strb	r3, [r7, #6]
    data_convert_uint16_and_bytes input;
    input.data_bytes[0] = data1;
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	733b      	strb	r3, [r7, #12]
    input.data_bytes[1] = data2;
 800354a:	79bb      	ldrb	r3, [r7, #6]
 800354c:	737b      	strb	r3, [r7, #13]
    return input.data_uint16;
 800354e:	89bb      	ldrh	r3, [r7, #12]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <Message_Calculate_Checksum>:

/**
 * @brief Kiểm tra dữ liệu
 */
uint16_t Message_Calculate_Checksum(const uint8_t *buf, uint8_t len)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	460b      	mov	r3, r1
 8003564:	70fb      	strb	r3, [r7, #3]
    return 0xFFFF; // Todo: Implement checksum calculation
 8003566:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <Create_Message_Notify>:

/**
 * @brief Tạo frame bản tin NOTIFY (truyền dữ liệu float từ cảm biến)
 */
uint8_t Create_Message_Notify(ID_t id, float value, uint8_t *dataout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	73fb      	strb	r3, [r7, #15]
    if (dataout == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <Create_Message_Notify+0x18>
        return 0;
 8003588:	2300      	movs	r3, #0
 800358a:	e055      	b.n	8003638 <Create_Message_Notify+0xc4>

    uint8_t count = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	77fb      	strb	r3, [r7, #31]

    dataout[count++] = START_BYTE;
 8003590:	7ffb      	ldrb	r3, [r7, #31]
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	77fa      	strb	r2, [r7, #31]
 8003596:	461a      	mov	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4413      	add	r3, r2
 800359c:	22aa      	movs	r2, #170	@ 0xaa
 800359e:	701a      	strb	r2, [r3, #0]
    dataout[count++] = NOTIFY; // Group: NOTIFY
 80035a0:	7ffb      	ldrb	r3, [r7, #31]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	77fa      	strb	r2, [r7, #31]
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4413      	add	r3, r2
 80035ac:	2203      	movs	r2, #3
 80035ae:	701a      	strb	r2, [r3, #0]
    dataout[count++] = id;     // ID thiết bị cảm biến (tùy chỉnh nếu cần)
 80035b0:	7ffb      	ldrb	r3, [r7, #31]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	77fa      	strb	r2, [r7, #31]
 80035b6:	461a      	mov	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	701a      	strb	r2, [r3, #0]
    dataout[count++] = 4;      // Payload: 4 byte float
 80035c0:	7ffb      	ldrb	r3, [r7, #31]
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	77fa      	strb	r2, [r7, #31]
 80035c6:	461a      	mov	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4413      	add	r3, r2
 80035cc:	2204      	movs	r2, #4
 80035ce:	701a      	strb	r2, [r3, #0]

    // Chuyển float thành 4 byte Big-Endian
    uint8_t *pval = Convert_Float_To_Bytes(value);
 80035d0:	68b8      	ldr	r0, [r7, #8]
 80035d2:	f7ff ff83 	bl	80034dc <Convert_Float_To_Bytes>
 80035d6:	6178      	str	r0, [r7, #20]
    // Reverse byte order for Big-Endian
    for (int i = 0; i <= 3; i++)
 80035d8:	2300      	movs	r3, #0
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	e00d      	b.n	80035fa <Create_Message_Notify+0x86>
    {
        dataout[count++] = pval[i];
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	441a      	add	r2, r3
 80035e4:	7ffb      	ldrb	r3, [r7, #31]
 80035e6:	1c59      	adds	r1, r3, #1
 80035e8:	77f9      	strb	r1, [r7, #31]
 80035ea:	4619      	mov	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	440b      	add	r3, r1
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i <= 3; i++)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	3301      	adds	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	ddee      	ble.n	80035de <Create_Message_Notify+0x6a>
    }

    // Calculate checksum
    uint16_t checksum = Message_Calculate_Checksum(dataout, count);
 8003600:	7ffb      	ldrb	r3, [r7, #31]
 8003602:	4619      	mov	r1, r3
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ffa8 	bl	800355a <Message_Calculate_Checksum>
 800360a:	4603      	mov	r3, r0
 800360c:	827b      	strh	r3, [r7, #18]

    // Write checksum in Big-Endian
    dataout[count++] = (checksum >> 8) & 0xFF; // High byte
 800360e:	8a7b      	ldrh	r3, [r7, #18]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	b29a      	uxth	r2, r3
 8003614:	7ffb      	ldrb	r3, [r7, #31]
 8003616:	1c59      	adds	r1, r3, #1
 8003618:	77f9      	strb	r1, [r7, #31]
 800361a:	4619      	mov	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	440b      	add	r3, r1
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]
    dataout[count++] = checksum & 0xFF;        // Low byte
 8003624:	7ffb      	ldrb	r3, [r7, #31]
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	77fa      	strb	r2, [r7, #31]
 800362a:	461a      	mov	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4413      	add	r3, r2
 8003630:	8a7a      	ldrh	r2, [r7, #18]
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

    return count; // Trả về độ dài của Message
 8003636:	7ffb      	ldrb	r3, [r7, #31]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <Create_Message_RESPONSE>:

/**
 * @brief Tạo bản tin phản hồi (RESPONSE)
 */
uint8_t Create_Message_RESPONSE(ID_t id, RESPONSE_t r, uint8_t *dataout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	603a      	str	r2, [r7, #0]
 800364a:	71fb      	strb	r3, [r7, #7]
 800364c:	460b      	mov	r3, r1
 800364e:	71bb      	strb	r3, [r7, #6]
    if (dataout == NULL)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <Create_Message_RESPONSE+0x1a>
        return 0;
 8003656:	2300      	movs	r3, #0
 8003658:	e045      	b.n	80036e6 <Create_Message_RESPONSE+0xa6>

    uint8_t count = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
    dataout[count++] = START_BYTE;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	73fa      	strb	r2, [r7, #15]
 8003664:	461a      	mov	r2, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	4413      	add	r3, r2
 800366a:	22aa      	movs	r2, #170	@ 0xaa
 800366c:	701a      	strb	r2, [r3, #0]
    dataout[count++] = RESPONSE;   // Group: RESPONSE
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	73fa      	strb	r2, [r7, #15]
 8003674:	461a      	mov	r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	4413      	add	r3, r2
 800367a:	2202      	movs	r2, #2
 800367c:	701a      	strb	r2, [r3, #0]
    dataout[count++] = id;         // ID thiết bị phản hồi (tùy chỉnh nếu cần)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	73fa      	strb	r2, [r7, #15]
 8003684:	461a      	mov	r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	4413      	add	r3, r2
 800368a:	79fa      	ldrb	r2, [r7, #7]
 800368c:	701a      	strb	r2, [r3, #0]
    dataout[count++] = 1;          // Payload chỉ 1 byte phản hồi
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	73fa      	strb	r2, [r7, #15]
 8003694:	461a      	mov	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	4413      	add	r3, r2
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
    dataout[count++] = (uint8_t)r; // Phản hồi
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	73fa      	strb	r2, [r7, #15]
 80036a4:	461a      	mov	r2, r3
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	4413      	add	r3, r2
 80036aa:	79ba      	ldrb	r2, [r7, #6]
 80036ac:	701a      	strb	r2, [r3, #0]
    // Calculate checksum
    uint16_t checksum = Message_Calculate_Checksum(dataout, count);
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	4619      	mov	r1, r3
 80036b2:	6838      	ldr	r0, [r7, #0]
 80036b4:	f7ff ff51 	bl	800355a <Message_Calculate_Checksum>
 80036b8:	4603      	mov	r3, r0
 80036ba:	81bb      	strh	r3, [r7, #12]
    // Write checksum in Big-Endian
    dataout[count++] = (checksum >> 8) & 0xFF; // High byte
 80036bc:	89bb      	ldrh	r3, [r7, #12]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	1c59      	adds	r1, r3, #1
 80036c6:	73f9      	strb	r1, [r7, #15]
 80036c8:	4619      	mov	r1, r3
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	440b      	add	r3, r1
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]
    dataout[count++] = checksum & 0xFF;        // Low byte
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	73fa      	strb	r2, [r7, #15]
 80036d8:	461a      	mov	r2, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	4413      	add	r3, r2
 80036de:	89ba      	ldrh	r2, [r7, #12]
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]
    return count;                              // Trả về độ dài của Message
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <Message_Decode>:

/**
 * @brief Giải mã frame nhận được
 */
bool Message_Decode(const uint8_t *buffer, message_t *frame_out)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b086      	sub	sp, #24
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
    if (buffer == NULL || frame_out == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <Message_Decode+0x16>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <Message_Decode+0x1a>
        return false;
 8003704:	2300      	movs	r3, #0
 8003706:	e052      	b.n	80037ae <Message_Decode+0xc0>

    if (buffer[0] != START_BYTE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2baa      	cmp	r3, #170	@ 0xaa
 800370e:	d001      	beq.n	8003714 <Message_Decode+0x26>
        return false;
 8003710:	2300      	movs	r3, #0
 8003712:	e04c      	b.n	80037ae <Message_Decode+0xc0>

    frame_out->start = buffer[0];
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	701a      	strb	r2, [r3, #0]
    memcpy(frame_out->header, &buffer[1], HEADER_SIZE);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	1c58      	adds	r0, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3301      	adds	r3, #1
 8003724:	2203      	movs	r2, #3
 8003726:	4619      	mov	r1, r3
 8003728:	f000 ffcd 	bl	80046c6 <memcpy>
    uint8_t payload_len = frame_out->header[2];
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	78db      	ldrb	r3, [r3, #3]
 8003730:	75fb      	strb	r3, [r7, #23]

    if (payload_len > PAYLOAD_SIZE)
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	2b04      	cmp	r3, #4
 8003736:	d901      	bls.n	800373c <Message_Decode+0x4e>
        return false;
 8003738:	2300      	movs	r3, #0
 800373a:	e038      	b.n	80037ae <Message_Decode+0xc0>

    memcpy(frame_out->payload, &buffer[1 + HEADER_SIZE], payload_len);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	1d18      	adds	r0, r3, #4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	7dfa      	ldrb	r2, [r7, #23]
 8003746:	4619      	mov	r1, r3
 8003748:	f000 ffbd 	bl	80046c6 <memcpy>

    uint8_t temp[HEADER_SIZE + PAYLOAD_SIZE];
    memcpy(temp, frame_out->header, HEADER_SIZE);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	1c59      	adds	r1, r3, #1
 8003750:	f107 0308 	add.w	r3, r7, #8
 8003754:	2203      	movs	r2, #3
 8003756:	4618      	mov	r0, r3
 8003758:	f000 ffb5 	bl	80046c6 <memcpy>
    memcpy(temp + HEADER_SIZE, frame_out->payload, payload_len);
 800375c:	f107 0308 	add.w	r3, r7, #8
 8003760:	3303      	adds	r3, #3
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	1d11      	adds	r1, r2, #4
 8003766:	7dfa      	ldrb	r2, [r7, #23]
 8003768:	4618      	mov	r0, r3
 800376a:	f000 ffac 	bl	80046c6 <memcpy>

    uint16_t received_checksum = buffer[1 + HEADER_SIZE + payload_len] |
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	3304      	adds	r3, #4
 8003772:	461a      	mov	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	b21a      	sxth	r2, r3
                                 (buffer[1 + HEADER_SIZE + payload_len + 1] << 8);
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	3305      	adds	r3, #5
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	440b      	add	r3, r1
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	021b      	lsls	r3, r3, #8
    uint16_t received_checksum = buffer[1 + HEADER_SIZE + payload_len] |
 8003788:	b21b      	sxth	r3, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	b21b      	sxth	r3, r3
 800378e:	82bb      	strh	r3, [r7, #20]
    uint16_t calc_checksum = Message_Calculate_Checksum(temp, HEADER_SIZE + payload_len);
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	3303      	adds	r3, #3
 8003794:	b2da      	uxtb	r2, r3
 8003796:	f107 0308 	add.w	r3, r7, #8
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fedc 	bl	800355a <Message_Calculate_Checksum>
 80037a2:	4603      	mov	r3, r0
 80037a4:	827b      	strh	r3, [r7, #18]

    // if (received_checksum != calc_checksum) return false;

    frame_out->checksum = received_checksum;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	8aba      	ldrh	r2, [r7, #20]
 80037aa:	811a      	strh	r2, [r3, #8]
    return true;
 80037ac:	2301      	movs	r3, #1
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <Queue_init>:
#include "queue.h"
#include <string.h>

void Queue_init(FrameQueue *q) {
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
    q->front = 0;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    q->rear = -1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f04f 32ff 	mov.w	r2, #4294967295
 80037cc:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    q->size = 0;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <empty>:

bool empty(const FrameQueue *q) {
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
    return q->size == 0;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <full>:

bool full(const FrameQueue *q) {
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
    return q->size == FRAME_QUEUE_CAPACITY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003812:	2b14      	cmp	r3, #20
 8003814:	bf0c      	ite	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	2300      	movne	r3, #0
 800381a:	b2db      	uxtb	r3, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
	...

08003828 <push>:

int size(const FrameQueue *q) {
    return q->size;
}

bool push(FrameQueue *q, const message_t f, uint8_t length) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	4638      	mov	r0, r7
 8003832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (full(q)) return false;
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f7ff ffe4 	bl	8003804 <full>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <push+0x1e>
 8003842:	2300      	movs	r3, #0
 8003844:	e027      	b.n	8003896 <push+0x6e>

    q->rear = (q->rear + 1) % FRAME_QUEUE_CAPACITY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800384c:	1c59      	adds	r1, r3, #1
 800384e:	4b14      	ldr	r3, [pc, #80]	@ (80038a0 <push+0x78>)
 8003850:	fb83 2301 	smull	r2, r3, r3, r1
 8003854:	10da      	asrs	r2, r3, #3
 8003856:	17cb      	asrs	r3, r1, #31
 8003858:	1ad2      	subs	r2, r2, r3
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	1aca      	subs	r2, r1, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    memcpy(&q->buffer[q->rear], &f, length);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	7e3a      	ldrb	r2, [r7, #24]
 800387e:	4639      	mov	r1, r7
 8003880:	4618      	mov	r0, r3
 8003882:	f000 ff20 	bl	80046c6 <memcpy>
    q->size++;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    return true;
 8003894:	2301      	movs	r3, #1
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	66666667 	.word	0x66666667

080038a4 <pop>:

bool pop(FrameQueue *q) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
    if (empty(q)) return false;
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff98 	bl	80037e2 <empty>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <pop+0x18>
 80038b8:	2300      	movs	r3, #0
 80038ba:	e019      	b.n	80038f0 <pop+0x4c>

    q->front = (q->front + 1) % FRAME_QUEUE_CAPACITY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80038c2:	1c59      	adds	r1, r3, #1
 80038c4:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <pop+0x54>)
 80038c6:	fb83 2301 	smull	r2, r3, r3, r1
 80038ca:	10da      	asrs	r2, r3, #3
 80038cc:	17cb      	asrs	r3, r1, #31
 80038ce:	1ad2      	subs	r2, r2, r3
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	1aca      	subs	r2, r1, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    q->size--;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80038e6:	1e5a      	subs	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    return true;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	66666667 	.word	0x66666667

080038fc <front>:

message_t* front(const FrameQueue *q) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
    if (empty(q)) return NULL;
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff6c 	bl	80037e2 <empty>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <front+0x18>
 8003910:	2300      	movs	r3, #0
 8003912:	e008      	b.n	8003926 <front+0x2a>
    return (message_t*)&q->buffer[q->front];
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4413      	add	r3, r2
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <__NVIC_EnableIRQ>:
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	2b00      	cmp	r3, #0
 8003940:	db0b      	blt.n	800395a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	f003 021f 	and.w	r2, r3, #31
 8003948:	4906      	ldr	r1, [pc, #24]	@ (8003964 <__NVIC_EnableIRQ+0x34>)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2001      	movs	r0, #1
 8003952:	fa00 f202 	lsl.w	r2, r0, r2
 8003956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	2b00      	cmp	r3, #0
 800397a:	db0a      	blt.n	8003992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	490c      	ldr	r1, [pc, #48]	@ (80039b4 <__NVIC_SetPriority+0x4c>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	0112      	lsls	r2, r2, #4
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	440b      	add	r3, r1
 800398c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003990:	e00a      	b.n	80039a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4908      	ldr	r1, [pc, #32]	@ (80039b8 <__NVIC_SetPriority+0x50>)
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	3b04      	subs	r3, #4
 80039a0:	0112      	lsls	r2, r2, #4
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	440b      	add	r3, r1
 80039a6:	761a      	strb	r2, [r3, #24]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	e000e100 	.word	0xe000e100
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <Timer_Init>:
static volatile uint32_t tick_ms = 0; // Bộ đếm ms

static TIM_HandleTypeDef htim2;

void Timer_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
	 RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80039c0:	4b19      	ldr	r3, [pc, #100]	@ (8003a28 <Timer_Init+0x6c>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	4a18      	ldr	r2, [pc, #96]	@ (8003a28 <Timer_Init+0x6c>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	61d3      	str	r3, [r2, #28]

    // Cấu hình TIM2 cho 1ms (SystemCoreClock = 72MHz)
    htim2.Instance = TIM2;
 80039cc:	4b17      	ldr	r3, [pc, #92]	@ (8003a2c <Timer_Init+0x70>)
 80039ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039d2:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 72 - 1;     // 1 MHz (1 tick = 1us)
 80039d4:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <Timer_Init+0x70>)
 80039d6:	2247      	movs	r2, #71	@ 0x47
 80039d8:	605a      	str	r2, [r3, #4]
    htim2.Init.Period = 1000 - 1;      // 1000 ticks = 1ms
 80039da:	4b14      	ldr	r3, [pc, #80]	@ (8003a2c <Timer_Init+0x70>)
 80039dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80039e0:	60da      	str	r2, [r3, #12]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e2:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <Timer_Init+0x70>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	609a      	str	r2, [r3, #8]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039e8:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <Timer_Init+0x70>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	611a      	str	r2, [r3, #16]

    TIM_Base_Init(&htim2);
 80039ee:	480f      	ldr	r0, [pc, #60]	@ (8003a2c <Timer_Init+0x70>)
 80039f0:	f7fe f8d0 	bl	8001b94 <TIM_Base_Init>

    // Bật update interrupt
    htim2.Instance->DIER |= TIM_DIER_UIE;
 80039f4:	4b0d      	ldr	r3, [pc, #52]	@ (8003a2c <Timer_Init+0x70>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	4b0c      	ldr	r3, [pc, #48]	@ (8003a2c <Timer_Init+0x70>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	60da      	str	r2, [r3, #12]

    // Bật timer
    TIM_ENABLE(&htim2);
 8003a04:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <Timer_Init+0x70>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <Timer_Init+0x70>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

    // Bật ngắt TIM2 trong NVIC
    NVIC_SetPriority(TIM2_IRQn, 1);
 8003a14:	2101      	movs	r1, #1
 8003a16:	201c      	movs	r0, #28
 8003a18:	f7ff ffa6 	bl	8003968 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8003a1c:	201c      	movs	r0, #28
 8003a1e:	f7ff ff87 	bl	8003930 <__NVIC_EnableIRQ>
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	200003c0 	.word	0x200003c0

08003a30 <IncTick>:

// Gọi trong TIM2_IRQHandler
void IncTick(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
    tick_ms++;
 8003a34:	4b04      	ldr	r3, [pc, #16]	@ (8003a48 <IncTick+0x18>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	4a03      	ldr	r2, [pc, #12]	@ (8003a48 <IncTick+0x18>)
 8003a3c:	6013      	str	r3, [r2, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	200003bc 	.word	0x200003bc

08003a4c <GetTick>:

uint32_t GetTick(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
    return tick_ms;
 8003a50:	4b02      	ldr	r3, [pc, #8]	@ (8003a5c <GetTick+0x10>)
 8003a52:	681b      	ldr	r3, [r3, #0]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	200003bc 	.word	0x200003bc

08003a60 <Delay_ms>:

void Delay_ms(uint32_t ms)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
    uint32_t start = GetTick();
 8003a68:	f7ff fff0 	bl	8003a4c <GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]
    while ((GetTick() - start) < ms);
 8003a6e:	bf00      	nop
 8003a70:	f7ff ffec 	bl	8003a4c <GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d8f7      	bhi.n	8003a70 <Delay_ms+0x10>
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <Delay_us>:

void Delay_us(uint32_t us)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
    // Đếm bằng TIM2 trực tiếp, độ phân giải 1us
    htim2.Instance->CNT = 0;
 8003a94:	4b08      	ldr	r3, [pc, #32]	@ (8003ab8 <Delay_us+0x2c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	625a      	str	r2, [r3, #36]	@ 0x24
    while (htim2.Instance->CNT < us);
 8003a9c:	bf00      	nop
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <Delay_us+0x2c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d8f9      	bhi.n	8003a9e <Delay_us+0x12>
}
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	200003c0 	.word	0x200003c0

08003abc <TIM2_IRQHandler>:

// Handler gọi từ startup file
void TIM2_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 8003ac0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <TIM2_IRQHandler+0x26>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 8003ace:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	6113      	str	r3, [r2, #16]
        IncTick();
 8003ade:	f7ff ffa7 	bl	8003a30 <IncTick>
    }
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <__cvt>:
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aec:	461d      	mov	r5, r3
 8003aee:	bfbb      	ittet	lt
 8003af0:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003af4:	461d      	movlt	r5, r3
 8003af6:	2300      	movge	r3, #0
 8003af8:	232d      	movlt	r3, #45	@ 0x2d
 8003afa:	b088      	sub	sp, #32
 8003afc:	4614      	mov	r4, r2
 8003afe:	bfb8      	it	lt
 8003b00:	4614      	movlt	r4, r2
 8003b02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003b04:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003b06:	7013      	strb	r3, [r2, #0]
 8003b08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003b0a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003b0e:	f023 0820 	bic.w	r8, r3, #32
 8003b12:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b16:	d005      	beq.n	8003b24 <__cvt+0x3e>
 8003b18:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003b1c:	d100      	bne.n	8003b20 <__cvt+0x3a>
 8003b1e:	3601      	adds	r6, #1
 8003b20:	2302      	movs	r3, #2
 8003b22:	e000      	b.n	8003b26 <__cvt+0x40>
 8003b24:	2303      	movs	r3, #3
 8003b26:	aa07      	add	r2, sp, #28
 8003b28:	9204      	str	r2, [sp, #16]
 8003b2a:	aa06      	add	r2, sp, #24
 8003b2c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003b30:	e9cd 3600 	strd	r3, r6, [sp]
 8003b34:	4622      	mov	r2, r4
 8003b36:	462b      	mov	r3, r5
 8003b38:	f000 fe5e 	bl	80047f8 <_dtoa_r>
 8003b3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003b40:	4607      	mov	r7, r0
 8003b42:	d119      	bne.n	8003b78 <__cvt+0x92>
 8003b44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003b46:	07db      	lsls	r3, r3, #31
 8003b48:	d50e      	bpl.n	8003b68 <__cvt+0x82>
 8003b4a:	eb00 0906 	add.w	r9, r0, r6
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2300      	movs	r3, #0
 8003b52:	4620      	mov	r0, r4
 8003b54:	4629      	mov	r1, r5
 8003b56:	f7fc ff37 	bl	80009c8 <__aeabi_dcmpeq>
 8003b5a:	b108      	cbz	r0, 8003b60 <__cvt+0x7a>
 8003b5c:	f8cd 901c 	str.w	r9, [sp, #28]
 8003b60:	2230      	movs	r2, #48	@ 0x30
 8003b62:	9b07      	ldr	r3, [sp, #28]
 8003b64:	454b      	cmp	r3, r9
 8003b66:	d31e      	bcc.n	8003ba6 <__cvt+0xc0>
 8003b68:	4638      	mov	r0, r7
 8003b6a:	9b07      	ldr	r3, [sp, #28]
 8003b6c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003b6e:	1bdb      	subs	r3, r3, r7
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	b008      	add	sp, #32
 8003b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b7c:	eb00 0906 	add.w	r9, r0, r6
 8003b80:	d1e5      	bne.n	8003b4e <__cvt+0x68>
 8003b82:	7803      	ldrb	r3, [r0, #0]
 8003b84:	2b30      	cmp	r3, #48	@ 0x30
 8003b86:	d10a      	bne.n	8003b9e <__cvt+0xb8>
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	4629      	mov	r1, r5
 8003b90:	f7fc ff1a 	bl	80009c8 <__aeabi_dcmpeq>
 8003b94:	b918      	cbnz	r0, 8003b9e <__cvt+0xb8>
 8003b96:	f1c6 0601 	rsb	r6, r6, #1
 8003b9a:	f8ca 6000 	str.w	r6, [sl]
 8003b9e:	f8da 3000 	ldr.w	r3, [sl]
 8003ba2:	4499      	add	r9, r3
 8003ba4:	e7d3      	b.n	8003b4e <__cvt+0x68>
 8003ba6:	1c59      	adds	r1, r3, #1
 8003ba8:	9107      	str	r1, [sp, #28]
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	e7d9      	b.n	8003b62 <__cvt+0x7c>

08003bae <__exponent>:
 8003bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bb0:	2900      	cmp	r1, #0
 8003bb2:	bfb6      	itet	lt
 8003bb4:	232d      	movlt	r3, #45	@ 0x2d
 8003bb6:	232b      	movge	r3, #43	@ 0x2b
 8003bb8:	4249      	neglt	r1, r1
 8003bba:	2909      	cmp	r1, #9
 8003bbc:	7002      	strb	r2, [r0, #0]
 8003bbe:	7043      	strb	r3, [r0, #1]
 8003bc0:	dd29      	ble.n	8003c16 <__exponent+0x68>
 8003bc2:	f10d 0307 	add.w	r3, sp, #7
 8003bc6:	461d      	mov	r5, r3
 8003bc8:	270a      	movs	r7, #10
 8003bca:	fbb1 f6f7 	udiv	r6, r1, r7
 8003bce:	461a      	mov	r2, r3
 8003bd0:	fb07 1416 	mls	r4, r7, r6, r1
 8003bd4:	3430      	adds	r4, #48	@ 0x30
 8003bd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003bda:	460c      	mov	r4, r1
 8003bdc:	2c63      	cmp	r4, #99	@ 0x63
 8003bde:	4631      	mov	r1, r6
 8003be0:	f103 33ff 	add.w	r3, r3, #4294967295
 8003be4:	dcf1      	bgt.n	8003bca <__exponent+0x1c>
 8003be6:	3130      	adds	r1, #48	@ 0x30
 8003be8:	1e94      	subs	r4, r2, #2
 8003bea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003bee:	4623      	mov	r3, r4
 8003bf0:	1c41      	adds	r1, r0, #1
 8003bf2:	42ab      	cmp	r3, r5
 8003bf4:	d30a      	bcc.n	8003c0c <__exponent+0x5e>
 8003bf6:	f10d 0309 	add.w	r3, sp, #9
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	42ac      	cmp	r4, r5
 8003bfe:	bf88      	it	hi
 8003c00:	2300      	movhi	r3, #0
 8003c02:	3302      	adds	r3, #2
 8003c04:	4403      	add	r3, r0
 8003c06:	1a18      	subs	r0, r3, r0
 8003c08:	b003      	add	sp, #12
 8003c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003c10:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003c14:	e7ed      	b.n	8003bf2 <__exponent+0x44>
 8003c16:	2330      	movs	r3, #48	@ 0x30
 8003c18:	3130      	adds	r1, #48	@ 0x30
 8003c1a:	7083      	strb	r3, [r0, #2]
 8003c1c:	70c1      	strb	r1, [r0, #3]
 8003c1e:	1d03      	adds	r3, r0, #4
 8003c20:	e7f1      	b.n	8003c06 <__exponent+0x58>
	...

08003c24 <_printf_float>:
 8003c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c28:	b091      	sub	sp, #68	@ 0x44
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003c30:	4616      	mov	r6, r2
 8003c32:	461f      	mov	r7, r3
 8003c34:	4605      	mov	r5, r0
 8003c36:	f000 fcc1 	bl	80045bc <_localeconv_r>
 8003c3a:	6803      	ldr	r3, [r0, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	9308      	str	r3, [sp, #32]
 8003c40:	f7fc fa96 	bl	8000170 <strlen>
 8003c44:	2300      	movs	r3, #0
 8003c46:	930e      	str	r3, [sp, #56]	@ 0x38
 8003c48:	f8d8 3000 	ldr.w	r3, [r8]
 8003c4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8003c4e:	3307      	adds	r3, #7
 8003c50:	f023 0307 	bic.w	r3, r3, #7
 8003c54:	f103 0208 	add.w	r2, r3, #8
 8003c58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003c5c:	f8d4 b000 	ldr.w	fp, [r4]
 8003c60:	f8c8 2000 	str.w	r2, [r8]
 8003c64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003c6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c6e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003c72:	f04f 32ff 	mov.w	r2, #4294967295
 8003c76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003c7e:	4b9c      	ldr	r3, [pc, #624]	@ (8003ef0 <_printf_float+0x2cc>)
 8003c80:	f7fc fed4 	bl	8000a2c <__aeabi_dcmpun>
 8003c84:	bb70      	cbnz	r0, 8003ce4 <_printf_float+0xc0>
 8003c86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8e:	4b98      	ldr	r3, [pc, #608]	@ (8003ef0 <_printf_float+0x2cc>)
 8003c90:	f7fc feae 	bl	80009f0 <__aeabi_dcmple>
 8003c94:	bb30      	cbnz	r0, 8003ce4 <_printf_float+0xc0>
 8003c96:	2200      	movs	r2, #0
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4640      	mov	r0, r8
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	f7fc fe9d 	bl	80009dc <__aeabi_dcmplt>
 8003ca2:	b110      	cbz	r0, 8003caa <_printf_float+0x86>
 8003ca4:	232d      	movs	r3, #45	@ 0x2d
 8003ca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003caa:	4a92      	ldr	r2, [pc, #584]	@ (8003ef4 <_printf_float+0x2d0>)
 8003cac:	4b92      	ldr	r3, [pc, #584]	@ (8003ef8 <_printf_float+0x2d4>)
 8003cae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003cb2:	bf94      	ite	ls
 8003cb4:	4690      	movls	r8, r2
 8003cb6:	4698      	movhi	r8, r3
 8003cb8:	2303      	movs	r3, #3
 8003cba:	f04f 0900 	mov.w	r9, #0
 8003cbe:	6123      	str	r3, [r4, #16]
 8003cc0:	f02b 0304 	bic.w	r3, fp, #4
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	4633      	mov	r3, r6
 8003cc8:	4621      	mov	r1, r4
 8003cca:	4628      	mov	r0, r5
 8003ccc:	9700      	str	r7, [sp, #0]
 8003cce:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003cd0:	f000 f9d4 	bl	800407c <_printf_common>
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	f040 8090 	bne.w	8003dfa <_printf_float+0x1d6>
 8003cda:	f04f 30ff 	mov.w	r0, #4294967295
 8003cde:	b011      	add	sp, #68	@ 0x44
 8003ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce4:	4642      	mov	r2, r8
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	4640      	mov	r0, r8
 8003cea:	4649      	mov	r1, r9
 8003cec:	f7fc fe9e 	bl	8000a2c <__aeabi_dcmpun>
 8003cf0:	b148      	cbz	r0, 8003d06 <_printf_float+0xe2>
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bfb8      	it	lt
 8003cf8:	232d      	movlt	r3, #45	@ 0x2d
 8003cfa:	4a80      	ldr	r2, [pc, #512]	@ (8003efc <_printf_float+0x2d8>)
 8003cfc:	bfb8      	it	lt
 8003cfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003d02:	4b7f      	ldr	r3, [pc, #508]	@ (8003f00 <_printf_float+0x2dc>)
 8003d04:	e7d3      	b.n	8003cae <_printf_float+0x8a>
 8003d06:	6863      	ldr	r3, [r4, #4]
 8003d08:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	d13f      	bne.n	8003d90 <_printf_float+0x16c>
 8003d10:	2306      	movs	r3, #6
 8003d12:	6063      	str	r3, [r4, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003d1a:	6023      	str	r3, [r4, #0]
 8003d1c:	9206      	str	r2, [sp, #24]
 8003d1e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003d20:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003d24:	aa0d      	add	r2, sp, #52	@ 0x34
 8003d26:	9203      	str	r2, [sp, #12]
 8003d28:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003d2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d30:	6863      	ldr	r3, [r4, #4]
 8003d32:	4642      	mov	r2, r8
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	4628      	mov	r0, r5
 8003d38:	464b      	mov	r3, r9
 8003d3a:	910a      	str	r1, [sp, #40]	@ 0x28
 8003d3c:	f7ff fed3 	bl	8003ae6 <__cvt>
 8003d40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003d42:	4680      	mov	r8, r0
 8003d44:	2947      	cmp	r1, #71	@ 0x47
 8003d46:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003d48:	d128      	bne.n	8003d9c <_printf_float+0x178>
 8003d4a:	1cc8      	adds	r0, r1, #3
 8003d4c:	db02      	blt.n	8003d54 <_printf_float+0x130>
 8003d4e:	6863      	ldr	r3, [r4, #4]
 8003d50:	4299      	cmp	r1, r3
 8003d52:	dd40      	ble.n	8003dd6 <_printf_float+0x1b2>
 8003d54:	f1aa 0a02 	sub.w	sl, sl, #2
 8003d58:	fa5f fa8a 	uxtb.w	sl, sl
 8003d5c:	4652      	mov	r2, sl
 8003d5e:	3901      	subs	r1, #1
 8003d60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003d64:	910d      	str	r1, [sp, #52]	@ 0x34
 8003d66:	f7ff ff22 	bl	8003bae <__exponent>
 8003d6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d6c:	4681      	mov	r9, r0
 8003d6e:	1813      	adds	r3, r2, r0
 8003d70:	2a01      	cmp	r2, #1
 8003d72:	6123      	str	r3, [r4, #16]
 8003d74:	dc02      	bgt.n	8003d7c <_printf_float+0x158>
 8003d76:	6822      	ldr	r2, [r4, #0]
 8003d78:	07d2      	lsls	r2, r2, #31
 8003d7a:	d501      	bpl.n	8003d80 <_printf_float+0x15c>
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	6123      	str	r3, [r4, #16]
 8003d80:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d09e      	beq.n	8003cc6 <_printf_float+0xa2>
 8003d88:	232d      	movs	r3, #45	@ 0x2d
 8003d8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d8e:	e79a      	b.n	8003cc6 <_printf_float+0xa2>
 8003d90:	2947      	cmp	r1, #71	@ 0x47
 8003d92:	d1bf      	bne.n	8003d14 <_printf_float+0xf0>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1bd      	bne.n	8003d14 <_printf_float+0xf0>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e7ba      	b.n	8003d12 <_printf_float+0xee>
 8003d9c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003da0:	d9dc      	bls.n	8003d5c <_printf_float+0x138>
 8003da2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003da6:	d118      	bne.n	8003dda <_printf_float+0x1b6>
 8003da8:	2900      	cmp	r1, #0
 8003daa:	6863      	ldr	r3, [r4, #4]
 8003dac:	dd0b      	ble.n	8003dc6 <_printf_float+0x1a2>
 8003dae:	6121      	str	r1, [r4, #16]
 8003db0:	b913      	cbnz	r3, 8003db8 <_printf_float+0x194>
 8003db2:	6822      	ldr	r2, [r4, #0]
 8003db4:	07d0      	lsls	r0, r2, #31
 8003db6:	d502      	bpl.n	8003dbe <_printf_float+0x19a>
 8003db8:	3301      	adds	r3, #1
 8003dba:	440b      	add	r3, r1
 8003dbc:	6123      	str	r3, [r4, #16]
 8003dbe:	f04f 0900 	mov.w	r9, #0
 8003dc2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003dc4:	e7dc      	b.n	8003d80 <_printf_float+0x15c>
 8003dc6:	b913      	cbnz	r3, 8003dce <_printf_float+0x1aa>
 8003dc8:	6822      	ldr	r2, [r4, #0]
 8003dca:	07d2      	lsls	r2, r2, #31
 8003dcc:	d501      	bpl.n	8003dd2 <_printf_float+0x1ae>
 8003dce:	3302      	adds	r3, #2
 8003dd0:	e7f4      	b.n	8003dbc <_printf_float+0x198>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e7f2      	b.n	8003dbc <_printf_float+0x198>
 8003dd6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003dda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003ddc:	4299      	cmp	r1, r3
 8003dde:	db05      	blt.n	8003dec <_printf_float+0x1c8>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	6121      	str	r1, [r4, #16]
 8003de4:	07d8      	lsls	r0, r3, #31
 8003de6:	d5ea      	bpl.n	8003dbe <_printf_float+0x19a>
 8003de8:	1c4b      	adds	r3, r1, #1
 8003dea:	e7e7      	b.n	8003dbc <_printf_float+0x198>
 8003dec:	2900      	cmp	r1, #0
 8003dee:	bfcc      	ite	gt
 8003df0:	2201      	movgt	r2, #1
 8003df2:	f1c1 0202 	rsble	r2, r1, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	e7e0      	b.n	8003dbc <_printf_float+0x198>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	055a      	lsls	r2, r3, #21
 8003dfe:	d407      	bmi.n	8003e10 <_printf_float+0x1ec>
 8003e00:	6923      	ldr	r3, [r4, #16]
 8003e02:	4642      	mov	r2, r8
 8003e04:	4631      	mov	r1, r6
 8003e06:	4628      	mov	r0, r5
 8003e08:	47b8      	blx	r7
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d12b      	bne.n	8003e66 <_printf_float+0x242>
 8003e0e:	e764      	b.n	8003cda <_printf_float+0xb6>
 8003e10:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e14:	f240 80dc 	bls.w	8003fd0 <_printf_float+0x3ac>
 8003e18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f7fc fdd2 	bl	80009c8 <__aeabi_dcmpeq>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	d033      	beq.n	8003e90 <_printf_float+0x26c>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	4a35      	ldr	r2, [pc, #212]	@ (8003f04 <_printf_float+0x2e0>)
 8003e30:	47b8      	blx	r7
 8003e32:	3001      	adds	r0, #1
 8003e34:	f43f af51 	beq.w	8003cda <_printf_float+0xb6>
 8003e38:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003e3c:	4543      	cmp	r3, r8
 8003e3e:	db02      	blt.n	8003e46 <_printf_float+0x222>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	07d8      	lsls	r0, r3, #31
 8003e44:	d50f      	bpl.n	8003e66 <_printf_float+0x242>
 8003e46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e4a:	4631      	mov	r1, r6
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	47b8      	blx	r7
 8003e50:	3001      	adds	r0, #1
 8003e52:	f43f af42 	beq.w	8003cda <_printf_float+0xb6>
 8003e56:	f04f 0900 	mov.w	r9, #0
 8003e5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003e5e:	f104 0a1a 	add.w	sl, r4, #26
 8003e62:	45c8      	cmp	r8, r9
 8003e64:	dc09      	bgt.n	8003e7a <_printf_float+0x256>
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	079b      	lsls	r3, r3, #30
 8003e6a:	f100 8102 	bmi.w	8004072 <_printf_float+0x44e>
 8003e6e:	68e0      	ldr	r0, [r4, #12]
 8003e70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003e72:	4298      	cmp	r0, r3
 8003e74:	bfb8      	it	lt
 8003e76:	4618      	movlt	r0, r3
 8003e78:	e731      	b.n	8003cde <_printf_float+0xba>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	4652      	mov	r2, sl
 8003e7e:	4631      	mov	r1, r6
 8003e80:	4628      	mov	r0, r5
 8003e82:	47b8      	blx	r7
 8003e84:	3001      	adds	r0, #1
 8003e86:	f43f af28 	beq.w	8003cda <_printf_float+0xb6>
 8003e8a:	f109 0901 	add.w	r9, r9, #1
 8003e8e:	e7e8      	b.n	8003e62 <_printf_float+0x23e>
 8003e90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	dc38      	bgt.n	8003f08 <_printf_float+0x2e4>
 8003e96:	2301      	movs	r3, #1
 8003e98:	4631      	mov	r1, r6
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	4a19      	ldr	r2, [pc, #100]	@ (8003f04 <_printf_float+0x2e0>)
 8003e9e:	47b8      	blx	r7
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	f43f af1a 	beq.w	8003cda <_printf_float+0xb6>
 8003ea6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003eaa:	ea59 0303 	orrs.w	r3, r9, r3
 8003eae:	d102      	bne.n	8003eb6 <_printf_float+0x292>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	07d9      	lsls	r1, r3, #31
 8003eb4:	d5d7      	bpl.n	8003e66 <_printf_float+0x242>
 8003eb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003eba:	4631      	mov	r1, r6
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	47b8      	blx	r7
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	f43f af0a 	beq.w	8003cda <_printf_float+0xb6>
 8003ec6:	f04f 0a00 	mov.w	sl, #0
 8003eca:	f104 0b1a 	add.w	fp, r4, #26
 8003ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ed0:	425b      	negs	r3, r3
 8003ed2:	4553      	cmp	r3, sl
 8003ed4:	dc01      	bgt.n	8003eda <_printf_float+0x2b6>
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	e793      	b.n	8003e02 <_printf_float+0x1de>
 8003eda:	2301      	movs	r3, #1
 8003edc:	465a      	mov	r2, fp
 8003ede:	4631      	mov	r1, r6
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	47b8      	blx	r7
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	f43f aef8 	beq.w	8003cda <_printf_float+0xb6>
 8003eea:	f10a 0a01 	add.w	sl, sl, #1
 8003eee:	e7ee      	b.n	8003ece <_printf_float+0x2aa>
 8003ef0:	7fefffff 	.word	0x7fefffff
 8003ef4:	08006d5b 	.word	0x08006d5b
 8003ef8:	08006d5f 	.word	0x08006d5f
 8003efc:	08006d63 	.word	0x08006d63
 8003f00:	08006d67 	.word	0x08006d67
 8003f04:	08006d6b 	.word	0x08006d6b
 8003f08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f0a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f0e:	4553      	cmp	r3, sl
 8003f10:	bfa8      	it	ge
 8003f12:	4653      	movge	r3, sl
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	4699      	mov	r9, r3
 8003f18:	dc36      	bgt.n	8003f88 <_printf_float+0x364>
 8003f1a:	f04f 0b00 	mov.w	fp, #0
 8003f1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f22:	f104 021a 	add.w	r2, r4, #26
 8003f26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f28:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f2a:	eba3 0309 	sub.w	r3, r3, r9
 8003f2e:	455b      	cmp	r3, fp
 8003f30:	dc31      	bgt.n	8003f96 <_printf_float+0x372>
 8003f32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f34:	459a      	cmp	sl, r3
 8003f36:	dc3a      	bgt.n	8003fae <_printf_float+0x38a>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	07da      	lsls	r2, r3, #31
 8003f3c:	d437      	bmi.n	8003fae <_printf_float+0x38a>
 8003f3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f40:	ebaa 0903 	sub.w	r9, sl, r3
 8003f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f46:	ebaa 0303 	sub.w	r3, sl, r3
 8003f4a:	4599      	cmp	r9, r3
 8003f4c:	bfa8      	it	ge
 8003f4e:	4699      	movge	r9, r3
 8003f50:	f1b9 0f00 	cmp.w	r9, #0
 8003f54:	dc33      	bgt.n	8003fbe <_printf_float+0x39a>
 8003f56:	f04f 0800 	mov.w	r8, #0
 8003f5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f5e:	f104 0b1a 	add.w	fp, r4, #26
 8003f62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f64:	ebaa 0303 	sub.w	r3, sl, r3
 8003f68:	eba3 0309 	sub.w	r3, r3, r9
 8003f6c:	4543      	cmp	r3, r8
 8003f6e:	f77f af7a 	ble.w	8003e66 <_printf_float+0x242>
 8003f72:	2301      	movs	r3, #1
 8003f74:	465a      	mov	r2, fp
 8003f76:	4631      	mov	r1, r6
 8003f78:	4628      	mov	r0, r5
 8003f7a:	47b8      	blx	r7
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	f43f aeac 	beq.w	8003cda <_printf_float+0xb6>
 8003f82:	f108 0801 	add.w	r8, r8, #1
 8003f86:	e7ec      	b.n	8003f62 <_printf_float+0x33e>
 8003f88:	4642      	mov	r2, r8
 8003f8a:	4631      	mov	r1, r6
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	47b8      	blx	r7
 8003f90:	3001      	adds	r0, #1
 8003f92:	d1c2      	bne.n	8003f1a <_printf_float+0x2f6>
 8003f94:	e6a1      	b.n	8003cda <_printf_float+0xb6>
 8003f96:	2301      	movs	r3, #1
 8003f98:	4631      	mov	r1, r6
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	920a      	str	r2, [sp, #40]	@ 0x28
 8003f9e:	47b8      	blx	r7
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	f43f ae9a 	beq.w	8003cda <_printf_float+0xb6>
 8003fa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003fa8:	f10b 0b01 	add.w	fp, fp, #1
 8003fac:	e7bb      	b.n	8003f26 <_printf_float+0x302>
 8003fae:	4631      	mov	r1, r6
 8003fb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	47b8      	blx	r7
 8003fb8:	3001      	adds	r0, #1
 8003fba:	d1c0      	bne.n	8003f3e <_printf_float+0x31a>
 8003fbc:	e68d      	b.n	8003cda <_printf_float+0xb6>
 8003fbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003fc0:	464b      	mov	r3, r9
 8003fc2:	4631      	mov	r1, r6
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	4442      	add	r2, r8
 8003fc8:	47b8      	blx	r7
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d1c3      	bne.n	8003f56 <_printf_float+0x332>
 8003fce:	e684      	b.n	8003cda <_printf_float+0xb6>
 8003fd0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003fd4:	f1ba 0f01 	cmp.w	sl, #1
 8003fd8:	dc01      	bgt.n	8003fde <_printf_float+0x3ba>
 8003fda:	07db      	lsls	r3, r3, #31
 8003fdc:	d536      	bpl.n	800404c <_printf_float+0x428>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	4631      	mov	r1, r6
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	47b8      	blx	r7
 8003fe8:	3001      	adds	r0, #1
 8003fea:	f43f ae76 	beq.w	8003cda <_printf_float+0xb6>
 8003fee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	47b8      	blx	r7
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	f43f ae6e 	beq.w	8003cda <_printf_float+0xb6>
 8003ffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004002:	2200      	movs	r2, #0
 8004004:	2300      	movs	r3, #0
 8004006:	f10a 3aff 	add.w	sl, sl, #4294967295
 800400a:	f7fc fcdd 	bl	80009c8 <__aeabi_dcmpeq>
 800400e:	b9c0      	cbnz	r0, 8004042 <_printf_float+0x41e>
 8004010:	4653      	mov	r3, sl
 8004012:	f108 0201 	add.w	r2, r8, #1
 8004016:	4631      	mov	r1, r6
 8004018:	4628      	mov	r0, r5
 800401a:	47b8      	blx	r7
 800401c:	3001      	adds	r0, #1
 800401e:	d10c      	bne.n	800403a <_printf_float+0x416>
 8004020:	e65b      	b.n	8003cda <_printf_float+0xb6>
 8004022:	2301      	movs	r3, #1
 8004024:	465a      	mov	r2, fp
 8004026:	4631      	mov	r1, r6
 8004028:	4628      	mov	r0, r5
 800402a:	47b8      	blx	r7
 800402c:	3001      	adds	r0, #1
 800402e:	f43f ae54 	beq.w	8003cda <_printf_float+0xb6>
 8004032:	f108 0801 	add.w	r8, r8, #1
 8004036:	45d0      	cmp	r8, sl
 8004038:	dbf3      	blt.n	8004022 <_printf_float+0x3fe>
 800403a:	464b      	mov	r3, r9
 800403c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004040:	e6e0      	b.n	8003e04 <_printf_float+0x1e0>
 8004042:	f04f 0800 	mov.w	r8, #0
 8004046:	f104 0b1a 	add.w	fp, r4, #26
 800404a:	e7f4      	b.n	8004036 <_printf_float+0x412>
 800404c:	2301      	movs	r3, #1
 800404e:	4642      	mov	r2, r8
 8004050:	e7e1      	b.n	8004016 <_printf_float+0x3f2>
 8004052:	2301      	movs	r3, #1
 8004054:	464a      	mov	r2, r9
 8004056:	4631      	mov	r1, r6
 8004058:	4628      	mov	r0, r5
 800405a:	47b8      	blx	r7
 800405c:	3001      	adds	r0, #1
 800405e:	f43f ae3c 	beq.w	8003cda <_printf_float+0xb6>
 8004062:	f108 0801 	add.w	r8, r8, #1
 8004066:	68e3      	ldr	r3, [r4, #12]
 8004068:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800406a:	1a5b      	subs	r3, r3, r1
 800406c:	4543      	cmp	r3, r8
 800406e:	dcf0      	bgt.n	8004052 <_printf_float+0x42e>
 8004070:	e6fd      	b.n	8003e6e <_printf_float+0x24a>
 8004072:	f04f 0800 	mov.w	r8, #0
 8004076:	f104 0919 	add.w	r9, r4, #25
 800407a:	e7f4      	b.n	8004066 <_printf_float+0x442>

0800407c <_printf_common>:
 800407c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004080:	4616      	mov	r6, r2
 8004082:	4698      	mov	r8, r3
 8004084:	688a      	ldr	r2, [r1, #8]
 8004086:	690b      	ldr	r3, [r1, #16]
 8004088:	4607      	mov	r7, r0
 800408a:	4293      	cmp	r3, r2
 800408c:	bfb8      	it	lt
 800408e:	4613      	movlt	r3, r2
 8004090:	6033      	str	r3, [r6, #0]
 8004092:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004096:	460c      	mov	r4, r1
 8004098:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800409c:	b10a      	cbz	r2, 80040a2 <_printf_common+0x26>
 800409e:	3301      	adds	r3, #1
 80040a0:	6033      	str	r3, [r6, #0]
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	0699      	lsls	r1, r3, #26
 80040a6:	bf42      	ittt	mi
 80040a8:	6833      	ldrmi	r3, [r6, #0]
 80040aa:	3302      	addmi	r3, #2
 80040ac:	6033      	strmi	r3, [r6, #0]
 80040ae:	6825      	ldr	r5, [r4, #0]
 80040b0:	f015 0506 	ands.w	r5, r5, #6
 80040b4:	d106      	bne.n	80040c4 <_printf_common+0x48>
 80040b6:	f104 0a19 	add.w	sl, r4, #25
 80040ba:	68e3      	ldr	r3, [r4, #12]
 80040bc:	6832      	ldr	r2, [r6, #0]
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	42ab      	cmp	r3, r5
 80040c2:	dc2b      	bgt.n	800411c <_printf_common+0xa0>
 80040c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040c8:	6822      	ldr	r2, [r4, #0]
 80040ca:	3b00      	subs	r3, #0
 80040cc:	bf18      	it	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	0692      	lsls	r2, r2, #26
 80040d2:	d430      	bmi.n	8004136 <_printf_common+0xba>
 80040d4:	4641      	mov	r1, r8
 80040d6:	4638      	mov	r0, r7
 80040d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040dc:	47c8      	blx	r9
 80040de:	3001      	adds	r0, #1
 80040e0:	d023      	beq.n	800412a <_printf_common+0xae>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	6922      	ldr	r2, [r4, #16]
 80040e6:	f003 0306 	and.w	r3, r3, #6
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	bf14      	ite	ne
 80040ee:	2500      	movne	r5, #0
 80040f0:	6833      	ldreq	r3, [r6, #0]
 80040f2:	f04f 0600 	mov.w	r6, #0
 80040f6:	bf08      	it	eq
 80040f8:	68e5      	ldreq	r5, [r4, #12]
 80040fa:	f104 041a 	add.w	r4, r4, #26
 80040fe:	bf08      	it	eq
 8004100:	1aed      	subeq	r5, r5, r3
 8004102:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004106:	bf08      	it	eq
 8004108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800410c:	4293      	cmp	r3, r2
 800410e:	bfc4      	itt	gt
 8004110:	1a9b      	subgt	r3, r3, r2
 8004112:	18ed      	addgt	r5, r5, r3
 8004114:	42b5      	cmp	r5, r6
 8004116:	d11a      	bne.n	800414e <_printf_common+0xd2>
 8004118:	2000      	movs	r0, #0
 800411a:	e008      	b.n	800412e <_printf_common+0xb2>
 800411c:	2301      	movs	r3, #1
 800411e:	4652      	mov	r2, sl
 8004120:	4641      	mov	r1, r8
 8004122:	4638      	mov	r0, r7
 8004124:	47c8      	blx	r9
 8004126:	3001      	adds	r0, #1
 8004128:	d103      	bne.n	8004132 <_printf_common+0xb6>
 800412a:	f04f 30ff 	mov.w	r0, #4294967295
 800412e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004132:	3501      	adds	r5, #1
 8004134:	e7c1      	b.n	80040ba <_printf_common+0x3e>
 8004136:	2030      	movs	r0, #48	@ 0x30
 8004138:	18e1      	adds	r1, r4, r3
 800413a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004144:	4422      	add	r2, r4
 8004146:	3302      	adds	r3, #2
 8004148:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800414c:	e7c2      	b.n	80040d4 <_printf_common+0x58>
 800414e:	2301      	movs	r3, #1
 8004150:	4622      	mov	r2, r4
 8004152:	4641      	mov	r1, r8
 8004154:	4638      	mov	r0, r7
 8004156:	47c8      	blx	r9
 8004158:	3001      	adds	r0, #1
 800415a:	d0e6      	beq.n	800412a <_printf_common+0xae>
 800415c:	3601      	adds	r6, #1
 800415e:	e7d9      	b.n	8004114 <_printf_common+0x98>

08004160 <_printf_i>:
 8004160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004164:	7e0f      	ldrb	r7, [r1, #24]
 8004166:	4691      	mov	r9, r2
 8004168:	2f78      	cmp	r7, #120	@ 0x78
 800416a:	4680      	mov	r8, r0
 800416c:	460c      	mov	r4, r1
 800416e:	469a      	mov	sl, r3
 8004170:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004172:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004176:	d807      	bhi.n	8004188 <_printf_i+0x28>
 8004178:	2f62      	cmp	r7, #98	@ 0x62
 800417a:	d80a      	bhi.n	8004192 <_printf_i+0x32>
 800417c:	2f00      	cmp	r7, #0
 800417e:	f000 80d3 	beq.w	8004328 <_printf_i+0x1c8>
 8004182:	2f58      	cmp	r7, #88	@ 0x58
 8004184:	f000 80ba 	beq.w	80042fc <_printf_i+0x19c>
 8004188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800418c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004190:	e03a      	b.n	8004208 <_printf_i+0xa8>
 8004192:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004196:	2b15      	cmp	r3, #21
 8004198:	d8f6      	bhi.n	8004188 <_printf_i+0x28>
 800419a:	a101      	add	r1, pc, #4	@ (adr r1, 80041a0 <_printf_i+0x40>)
 800419c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041a0:	080041f9 	.word	0x080041f9
 80041a4:	0800420d 	.word	0x0800420d
 80041a8:	08004189 	.word	0x08004189
 80041ac:	08004189 	.word	0x08004189
 80041b0:	08004189 	.word	0x08004189
 80041b4:	08004189 	.word	0x08004189
 80041b8:	0800420d 	.word	0x0800420d
 80041bc:	08004189 	.word	0x08004189
 80041c0:	08004189 	.word	0x08004189
 80041c4:	08004189 	.word	0x08004189
 80041c8:	08004189 	.word	0x08004189
 80041cc:	0800430f 	.word	0x0800430f
 80041d0:	08004237 	.word	0x08004237
 80041d4:	080042c9 	.word	0x080042c9
 80041d8:	08004189 	.word	0x08004189
 80041dc:	08004189 	.word	0x08004189
 80041e0:	08004331 	.word	0x08004331
 80041e4:	08004189 	.word	0x08004189
 80041e8:	08004237 	.word	0x08004237
 80041ec:	08004189 	.word	0x08004189
 80041f0:	08004189 	.word	0x08004189
 80041f4:	080042d1 	.word	0x080042d1
 80041f8:	6833      	ldr	r3, [r6, #0]
 80041fa:	1d1a      	adds	r2, r3, #4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6032      	str	r2, [r6, #0]
 8004200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004204:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004208:	2301      	movs	r3, #1
 800420a:	e09e      	b.n	800434a <_printf_i+0x1ea>
 800420c:	6833      	ldr	r3, [r6, #0]
 800420e:	6820      	ldr	r0, [r4, #0]
 8004210:	1d19      	adds	r1, r3, #4
 8004212:	6031      	str	r1, [r6, #0]
 8004214:	0606      	lsls	r6, r0, #24
 8004216:	d501      	bpl.n	800421c <_printf_i+0xbc>
 8004218:	681d      	ldr	r5, [r3, #0]
 800421a:	e003      	b.n	8004224 <_printf_i+0xc4>
 800421c:	0645      	lsls	r5, r0, #25
 800421e:	d5fb      	bpl.n	8004218 <_printf_i+0xb8>
 8004220:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004224:	2d00      	cmp	r5, #0
 8004226:	da03      	bge.n	8004230 <_printf_i+0xd0>
 8004228:	232d      	movs	r3, #45	@ 0x2d
 800422a:	426d      	negs	r5, r5
 800422c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004230:	230a      	movs	r3, #10
 8004232:	4859      	ldr	r0, [pc, #356]	@ (8004398 <_printf_i+0x238>)
 8004234:	e011      	b.n	800425a <_printf_i+0xfa>
 8004236:	6821      	ldr	r1, [r4, #0]
 8004238:	6833      	ldr	r3, [r6, #0]
 800423a:	0608      	lsls	r0, r1, #24
 800423c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004240:	d402      	bmi.n	8004248 <_printf_i+0xe8>
 8004242:	0649      	lsls	r1, r1, #25
 8004244:	bf48      	it	mi
 8004246:	b2ad      	uxthmi	r5, r5
 8004248:	2f6f      	cmp	r7, #111	@ 0x6f
 800424a:	6033      	str	r3, [r6, #0]
 800424c:	bf14      	ite	ne
 800424e:	230a      	movne	r3, #10
 8004250:	2308      	moveq	r3, #8
 8004252:	4851      	ldr	r0, [pc, #324]	@ (8004398 <_printf_i+0x238>)
 8004254:	2100      	movs	r1, #0
 8004256:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800425a:	6866      	ldr	r6, [r4, #4]
 800425c:	2e00      	cmp	r6, #0
 800425e:	bfa8      	it	ge
 8004260:	6821      	ldrge	r1, [r4, #0]
 8004262:	60a6      	str	r6, [r4, #8]
 8004264:	bfa4      	itt	ge
 8004266:	f021 0104 	bicge.w	r1, r1, #4
 800426a:	6021      	strge	r1, [r4, #0]
 800426c:	b90d      	cbnz	r5, 8004272 <_printf_i+0x112>
 800426e:	2e00      	cmp	r6, #0
 8004270:	d04b      	beq.n	800430a <_printf_i+0x1aa>
 8004272:	4616      	mov	r6, r2
 8004274:	fbb5 f1f3 	udiv	r1, r5, r3
 8004278:	fb03 5711 	mls	r7, r3, r1, r5
 800427c:	5dc7      	ldrb	r7, [r0, r7]
 800427e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004282:	462f      	mov	r7, r5
 8004284:	42bb      	cmp	r3, r7
 8004286:	460d      	mov	r5, r1
 8004288:	d9f4      	bls.n	8004274 <_printf_i+0x114>
 800428a:	2b08      	cmp	r3, #8
 800428c:	d10b      	bne.n	80042a6 <_printf_i+0x146>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	07df      	lsls	r7, r3, #31
 8004292:	d508      	bpl.n	80042a6 <_printf_i+0x146>
 8004294:	6923      	ldr	r3, [r4, #16]
 8004296:	6861      	ldr	r1, [r4, #4]
 8004298:	4299      	cmp	r1, r3
 800429a:	bfde      	ittt	le
 800429c:	2330      	movle	r3, #48	@ 0x30
 800429e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042a6:	1b92      	subs	r2, r2, r6
 80042a8:	6122      	str	r2, [r4, #16]
 80042aa:	464b      	mov	r3, r9
 80042ac:	4621      	mov	r1, r4
 80042ae:	4640      	mov	r0, r8
 80042b0:	f8cd a000 	str.w	sl, [sp]
 80042b4:	aa03      	add	r2, sp, #12
 80042b6:	f7ff fee1 	bl	800407c <_printf_common>
 80042ba:	3001      	adds	r0, #1
 80042bc:	d14a      	bne.n	8004354 <_printf_i+0x1f4>
 80042be:	f04f 30ff 	mov.w	r0, #4294967295
 80042c2:	b004      	add	sp, #16
 80042c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	f043 0320 	orr.w	r3, r3, #32
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	2778      	movs	r7, #120	@ 0x78
 80042d2:	4832      	ldr	r0, [pc, #200]	@ (800439c <_printf_i+0x23c>)
 80042d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	6831      	ldr	r1, [r6, #0]
 80042dc:	061f      	lsls	r7, r3, #24
 80042de:	f851 5b04 	ldr.w	r5, [r1], #4
 80042e2:	d402      	bmi.n	80042ea <_printf_i+0x18a>
 80042e4:	065f      	lsls	r7, r3, #25
 80042e6:	bf48      	it	mi
 80042e8:	b2ad      	uxthmi	r5, r5
 80042ea:	6031      	str	r1, [r6, #0]
 80042ec:	07d9      	lsls	r1, r3, #31
 80042ee:	bf44      	itt	mi
 80042f0:	f043 0320 	orrmi.w	r3, r3, #32
 80042f4:	6023      	strmi	r3, [r4, #0]
 80042f6:	b11d      	cbz	r5, 8004300 <_printf_i+0x1a0>
 80042f8:	2310      	movs	r3, #16
 80042fa:	e7ab      	b.n	8004254 <_printf_i+0xf4>
 80042fc:	4826      	ldr	r0, [pc, #152]	@ (8004398 <_printf_i+0x238>)
 80042fe:	e7e9      	b.n	80042d4 <_printf_i+0x174>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	f023 0320 	bic.w	r3, r3, #32
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	e7f6      	b.n	80042f8 <_printf_i+0x198>
 800430a:	4616      	mov	r6, r2
 800430c:	e7bd      	b.n	800428a <_printf_i+0x12a>
 800430e:	6833      	ldr	r3, [r6, #0]
 8004310:	6825      	ldr	r5, [r4, #0]
 8004312:	1d18      	adds	r0, r3, #4
 8004314:	6961      	ldr	r1, [r4, #20]
 8004316:	6030      	str	r0, [r6, #0]
 8004318:	062e      	lsls	r6, r5, #24
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	d501      	bpl.n	8004322 <_printf_i+0x1c2>
 800431e:	6019      	str	r1, [r3, #0]
 8004320:	e002      	b.n	8004328 <_printf_i+0x1c8>
 8004322:	0668      	lsls	r0, r5, #25
 8004324:	d5fb      	bpl.n	800431e <_printf_i+0x1be>
 8004326:	8019      	strh	r1, [r3, #0]
 8004328:	2300      	movs	r3, #0
 800432a:	4616      	mov	r6, r2
 800432c:	6123      	str	r3, [r4, #16]
 800432e:	e7bc      	b.n	80042aa <_printf_i+0x14a>
 8004330:	6833      	ldr	r3, [r6, #0]
 8004332:	2100      	movs	r1, #0
 8004334:	1d1a      	adds	r2, r3, #4
 8004336:	6032      	str	r2, [r6, #0]
 8004338:	681e      	ldr	r6, [r3, #0]
 800433a:	6862      	ldr	r2, [r4, #4]
 800433c:	4630      	mov	r0, r6
 800433e:	f000 f9b4 	bl	80046aa <memchr>
 8004342:	b108      	cbz	r0, 8004348 <_printf_i+0x1e8>
 8004344:	1b80      	subs	r0, r0, r6
 8004346:	6060      	str	r0, [r4, #4]
 8004348:	6863      	ldr	r3, [r4, #4]
 800434a:	6123      	str	r3, [r4, #16]
 800434c:	2300      	movs	r3, #0
 800434e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004352:	e7aa      	b.n	80042aa <_printf_i+0x14a>
 8004354:	4632      	mov	r2, r6
 8004356:	4649      	mov	r1, r9
 8004358:	4640      	mov	r0, r8
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	47d0      	blx	sl
 800435e:	3001      	adds	r0, #1
 8004360:	d0ad      	beq.n	80042be <_printf_i+0x15e>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	079b      	lsls	r3, r3, #30
 8004366:	d413      	bmi.n	8004390 <_printf_i+0x230>
 8004368:	68e0      	ldr	r0, [r4, #12]
 800436a:	9b03      	ldr	r3, [sp, #12]
 800436c:	4298      	cmp	r0, r3
 800436e:	bfb8      	it	lt
 8004370:	4618      	movlt	r0, r3
 8004372:	e7a6      	b.n	80042c2 <_printf_i+0x162>
 8004374:	2301      	movs	r3, #1
 8004376:	4632      	mov	r2, r6
 8004378:	4649      	mov	r1, r9
 800437a:	4640      	mov	r0, r8
 800437c:	47d0      	blx	sl
 800437e:	3001      	adds	r0, #1
 8004380:	d09d      	beq.n	80042be <_printf_i+0x15e>
 8004382:	3501      	adds	r5, #1
 8004384:	68e3      	ldr	r3, [r4, #12]
 8004386:	9903      	ldr	r1, [sp, #12]
 8004388:	1a5b      	subs	r3, r3, r1
 800438a:	42ab      	cmp	r3, r5
 800438c:	dcf2      	bgt.n	8004374 <_printf_i+0x214>
 800438e:	e7eb      	b.n	8004368 <_printf_i+0x208>
 8004390:	2500      	movs	r5, #0
 8004392:	f104 0619 	add.w	r6, r4, #25
 8004396:	e7f5      	b.n	8004384 <_printf_i+0x224>
 8004398:	08006d6d 	.word	0x08006d6d
 800439c:	08006d7e 	.word	0x08006d7e

080043a0 <std>:
 80043a0:	2300      	movs	r3, #0
 80043a2:	b510      	push	{r4, lr}
 80043a4:	4604      	mov	r4, r0
 80043a6:	e9c0 3300 	strd	r3, r3, [r0]
 80043aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043ae:	6083      	str	r3, [r0, #8]
 80043b0:	8181      	strh	r1, [r0, #12]
 80043b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80043b4:	81c2      	strh	r2, [r0, #14]
 80043b6:	6183      	str	r3, [r0, #24]
 80043b8:	4619      	mov	r1, r3
 80043ba:	2208      	movs	r2, #8
 80043bc:	305c      	adds	r0, #92	@ 0x5c
 80043be:	f000 f8f4 	bl	80045aa <memset>
 80043c2:	4b0d      	ldr	r3, [pc, #52]	@ (80043f8 <std+0x58>)
 80043c4:	6224      	str	r4, [r4, #32]
 80043c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80043c8:	4b0c      	ldr	r3, [pc, #48]	@ (80043fc <std+0x5c>)
 80043ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004400 <std+0x60>)
 80043ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <std+0x64>)
 80043d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80043d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <std+0x68>)
 80043d6:	429c      	cmp	r4, r3
 80043d8:	d006      	beq.n	80043e8 <std+0x48>
 80043da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80043de:	4294      	cmp	r4, r2
 80043e0:	d002      	beq.n	80043e8 <std+0x48>
 80043e2:	33d0      	adds	r3, #208	@ 0xd0
 80043e4:	429c      	cmp	r4, r3
 80043e6:	d105      	bne.n	80043f4 <std+0x54>
 80043e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043f0:	f000 b958 	b.w	80046a4 <__retarget_lock_init_recursive>
 80043f4:	bd10      	pop	{r4, pc}
 80043f6:	bf00      	nop
 80043f8:	08004525 	.word	0x08004525
 80043fc:	08004547 	.word	0x08004547
 8004400:	0800457f 	.word	0x0800457f
 8004404:	080045a3 	.word	0x080045a3
 8004408:	200003d8 	.word	0x200003d8

0800440c <stdio_exit_handler>:
 800440c:	4a02      	ldr	r2, [pc, #8]	@ (8004418 <stdio_exit_handler+0xc>)
 800440e:	4903      	ldr	r1, [pc, #12]	@ (800441c <stdio_exit_handler+0x10>)
 8004410:	4803      	ldr	r0, [pc, #12]	@ (8004420 <stdio_exit_handler+0x14>)
 8004412:	f000 b869 	b.w	80044e8 <_fwalk_sglue>
 8004416:	bf00      	nop
 8004418:	20000004 	.word	0x20000004
 800441c:	08005d85 	.word	0x08005d85
 8004420:	20000014 	.word	0x20000014

08004424 <cleanup_stdio>:
 8004424:	6841      	ldr	r1, [r0, #4]
 8004426:	4b0c      	ldr	r3, [pc, #48]	@ (8004458 <cleanup_stdio+0x34>)
 8004428:	b510      	push	{r4, lr}
 800442a:	4299      	cmp	r1, r3
 800442c:	4604      	mov	r4, r0
 800442e:	d001      	beq.n	8004434 <cleanup_stdio+0x10>
 8004430:	f001 fca8 	bl	8005d84 <_fflush_r>
 8004434:	68a1      	ldr	r1, [r4, #8]
 8004436:	4b09      	ldr	r3, [pc, #36]	@ (800445c <cleanup_stdio+0x38>)
 8004438:	4299      	cmp	r1, r3
 800443a:	d002      	beq.n	8004442 <cleanup_stdio+0x1e>
 800443c:	4620      	mov	r0, r4
 800443e:	f001 fca1 	bl	8005d84 <_fflush_r>
 8004442:	68e1      	ldr	r1, [r4, #12]
 8004444:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <cleanup_stdio+0x3c>)
 8004446:	4299      	cmp	r1, r3
 8004448:	d004      	beq.n	8004454 <cleanup_stdio+0x30>
 800444a:	4620      	mov	r0, r4
 800444c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004450:	f001 bc98 	b.w	8005d84 <_fflush_r>
 8004454:	bd10      	pop	{r4, pc}
 8004456:	bf00      	nop
 8004458:	200003d8 	.word	0x200003d8
 800445c:	20000440 	.word	0x20000440
 8004460:	200004a8 	.word	0x200004a8

08004464 <global_stdio_init.part.0>:
 8004464:	b510      	push	{r4, lr}
 8004466:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <global_stdio_init.part.0+0x30>)
 8004468:	4c0b      	ldr	r4, [pc, #44]	@ (8004498 <global_stdio_init.part.0+0x34>)
 800446a:	4a0c      	ldr	r2, [pc, #48]	@ (800449c <global_stdio_init.part.0+0x38>)
 800446c:	4620      	mov	r0, r4
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	2104      	movs	r1, #4
 8004472:	2200      	movs	r2, #0
 8004474:	f7ff ff94 	bl	80043a0 <std>
 8004478:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800447c:	2201      	movs	r2, #1
 800447e:	2109      	movs	r1, #9
 8004480:	f7ff ff8e 	bl	80043a0 <std>
 8004484:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004488:	2202      	movs	r2, #2
 800448a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800448e:	2112      	movs	r1, #18
 8004490:	f7ff bf86 	b.w	80043a0 <std>
 8004494:	20000510 	.word	0x20000510
 8004498:	200003d8 	.word	0x200003d8
 800449c:	0800440d 	.word	0x0800440d

080044a0 <__sfp_lock_acquire>:
 80044a0:	4801      	ldr	r0, [pc, #4]	@ (80044a8 <__sfp_lock_acquire+0x8>)
 80044a2:	f000 b900 	b.w	80046a6 <__retarget_lock_acquire_recursive>
 80044a6:	bf00      	nop
 80044a8:	20000519 	.word	0x20000519

080044ac <__sfp_lock_release>:
 80044ac:	4801      	ldr	r0, [pc, #4]	@ (80044b4 <__sfp_lock_release+0x8>)
 80044ae:	f000 b8fb 	b.w	80046a8 <__retarget_lock_release_recursive>
 80044b2:	bf00      	nop
 80044b4:	20000519 	.word	0x20000519

080044b8 <__sinit>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4604      	mov	r4, r0
 80044bc:	f7ff fff0 	bl	80044a0 <__sfp_lock_acquire>
 80044c0:	6a23      	ldr	r3, [r4, #32]
 80044c2:	b11b      	cbz	r3, 80044cc <__sinit+0x14>
 80044c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c8:	f7ff bff0 	b.w	80044ac <__sfp_lock_release>
 80044cc:	4b04      	ldr	r3, [pc, #16]	@ (80044e0 <__sinit+0x28>)
 80044ce:	6223      	str	r3, [r4, #32]
 80044d0:	4b04      	ldr	r3, [pc, #16]	@ (80044e4 <__sinit+0x2c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f5      	bne.n	80044c4 <__sinit+0xc>
 80044d8:	f7ff ffc4 	bl	8004464 <global_stdio_init.part.0>
 80044dc:	e7f2      	b.n	80044c4 <__sinit+0xc>
 80044de:	bf00      	nop
 80044e0:	08004425 	.word	0x08004425
 80044e4:	20000510 	.word	0x20000510

080044e8 <_fwalk_sglue>:
 80044e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044ec:	4607      	mov	r7, r0
 80044ee:	4688      	mov	r8, r1
 80044f0:	4614      	mov	r4, r2
 80044f2:	2600      	movs	r6, #0
 80044f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044f8:	f1b9 0901 	subs.w	r9, r9, #1
 80044fc:	d505      	bpl.n	800450a <_fwalk_sglue+0x22>
 80044fe:	6824      	ldr	r4, [r4, #0]
 8004500:	2c00      	cmp	r4, #0
 8004502:	d1f7      	bne.n	80044f4 <_fwalk_sglue+0xc>
 8004504:	4630      	mov	r0, r6
 8004506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800450a:	89ab      	ldrh	r3, [r5, #12]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d907      	bls.n	8004520 <_fwalk_sglue+0x38>
 8004510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004514:	3301      	adds	r3, #1
 8004516:	d003      	beq.n	8004520 <_fwalk_sglue+0x38>
 8004518:	4629      	mov	r1, r5
 800451a:	4638      	mov	r0, r7
 800451c:	47c0      	blx	r8
 800451e:	4306      	orrs	r6, r0
 8004520:	3568      	adds	r5, #104	@ 0x68
 8004522:	e7e9      	b.n	80044f8 <_fwalk_sglue+0x10>

08004524 <__sread>:
 8004524:	b510      	push	{r4, lr}
 8004526:	460c      	mov	r4, r1
 8004528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452c:	f000 f86c 	bl	8004608 <_read_r>
 8004530:	2800      	cmp	r0, #0
 8004532:	bfab      	itete	ge
 8004534:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004536:	89a3      	ldrhlt	r3, [r4, #12]
 8004538:	181b      	addge	r3, r3, r0
 800453a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800453e:	bfac      	ite	ge
 8004540:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004542:	81a3      	strhlt	r3, [r4, #12]
 8004544:	bd10      	pop	{r4, pc}

08004546 <__swrite>:
 8004546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800454a:	461f      	mov	r7, r3
 800454c:	898b      	ldrh	r3, [r1, #12]
 800454e:	4605      	mov	r5, r0
 8004550:	05db      	lsls	r3, r3, #23
 8004552:	460c      	mov	r4, r1
 8004554:	4616      	mov	r6, r2
 8004556:	d505      	bpl.n	8004564 <__swrite+0x1e>
 8004558:	2302      	movs	r3, #2
 800455a:	2200      	movs	r2, #0
 800455c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004560:	f000 f840 	bl	80045e4 <_lseek_r>
 8004564:	89a3      	ldrh	r3, [r4, #12]
 8004566:	4632      	mov	r2, r6
 8004568:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800456c:	81a3      	strh	r3, [r4, #12]
 800456e:	4628      	mov	r0, r5
 8004570:	463b      	mov	r3, r7
 8004572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800457a:	f000 b857 	b.w	800462c <_write_r>

0800457e <__sseek>:
 800457e:	b510      	push	{r4, lr}
 8004580:	460c      	mov	r4, r1
 8004582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004586:	f000 f82d 	bl	80045e4 <_lseek_r>
 800458a:	1c43      	adds	r3, r0, #1
 800458c:	89a3      	ldrh	r3, [r4, #12]
 800458e:	bf15      	itete	ne
 8004590:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004592:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004596:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800459a:	81a3      	strheq	r3, [r4, #12]
 800459c:	bf18      	it	ne
 800459e:	81a3      	strhne	r3, [r4, #12]
 80045a0:	bd10      	pop	{r4, pc}

080045a2 <__sclose>:
 80045a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a6:	f000 b80d 	b.w	80045c4 <_close_r>

080045aa <memset>:
 80045aa:	4603      	mov	r3, r0
 80045ac:	4402      	add	r2, r0
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d100      	bne.n	80045b4 <memset+0xa>
 80045b2:	4770      	bx	lr
 80045b4:	f803 1b01 	strb.w	r1, [r3], #1
 80045b8:	e7f9      	b.n	80045ae <memset+0x4>
	...

080045bc <_localeconv_r>:
 80045bc:	4800      	ldr	r0, [pc, #0]	@ (80045c0 <_localeconv_r+0x4>)
 80045be:	4770      	bx	lr
 80045c0:	20000150 	.word	0x20000150

080045c4 <_close_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	2300      	movs	r3, #0
 80045c8:	4d05      	ldr	r5, [pc, #20]	@ (80045e0 <_close_r+0x1c>)
 80045ca:	4604      	mov	r4, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	602b      	str	r3, [r5, #0]
 80045d0:	f7fd f834 	bl	800163c <_close>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d102      	bne.n	80045de <_close_r+0x1a>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	b103      	cbz	r3, 80045de <_close_r+0x1a>
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	20000514 	.word	0x20000514

080045e4 <_lseek_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4604      	mov	r4, r0
 80045e8:	4608      	mov	r0, r1
 80045ea:	4611      	mov	r1, r2
 80045ec:	2200      	movs	r2, #0
 80045ee:	4d05      	ldr	r5, [pc, #20]	@ (8004604 <_lseek_r+0x20>)
 80045f0:	602a      	str	r2, [r5, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f7fd f846 	bl	8001684 <_lseek>
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d102      	bne.n	8004602 <_lseek_r+0x1e>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	b103      	cbz	r3, 8004602 <_lseek_r+0x1e>
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	bd38      	pop	{r3, r4, r5, pc}
 8004604:	20000514 	.word	0x20000514

08004608 <_read_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4604      	mov	r4, r0
 800460c:	4608      	mov	r0, r1
 800460e:	4611      	mov	r1, r2
 8004610:	2200      	movs	r2, #0
 8004612:	4d05      	ldr	r5, [pc, #20]	@ (8004628 <_read_r+0x20>)
 8004614:	602a      	str	r2, [r5, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	f7fc ffd7 	bl	80015ca <_read>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_read_r+0x1e>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_read_r+0x1e>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	20000514 	.word	0x20000514

0800462c <_write_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	4604      	mov	r4, r0
 8004630:	4608      	mov	r0, r1
 8004632:	4611      	mov	r1, r2
 8004634:	2200      	movs	r2, #0
 8004636:	4d05      	ldr	r5, [pc, #20]	@ (800464c <_write_r+0x20>)
 8004638:	602a      	str	r2, [r5, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	f7fc ffe2 	bl	8001604 <_write>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d102      	bne.n	800464a <_write_r+0x1e>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	b103      	cbz	r3, 800464a <_write_r+0x1e>
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	bd38      	pop	{r3, r4, r5, pc}
 800464c:	20000514 	.word	0x20000514

08004650 <__errno>:
 8004650:	4b01      	ldr	r3, [pc, #4]	@ (8004658 <__errno+0x8>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000010 	.word	0x20000010

0800465c <__libc_init_array>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	2600      	movs	r6, #0
 8004660:	4d0c      	ldr	r5, [pc, #48]	@ (8004694 <__libc_init_array+0x38>)
 8004662:	4c0d      	ldr	r4, [pc, #52]	@ (8004698 <__libc_init_array+0x3c>)
 8004664:	1b64      	subs	r4, r4, r5
 8004666:	10a4      	asrs	r4, r4, #2
 8004668:	42a6      	cmp	r6, r4
 800466a:	d109      	bne.n	8004680 <__libc_init_array+0x24>
 800466c:	f002 fb5a 	bl	8006d24 <_init>
 8004670:	2600      	movs	r6, #0
 8004672:	4d0a      	ldr	r5, [pc, #40]	@ (800469c <__libc_init_array+0x40>)
 8004674:	4c0a      	ldr	r4, [pc, #40]	@ (80046a0 <__libc_init_array+0x44>)
 8004676:	1b64      	subs	r4, r4, r5
 8004678:	10a4      	asrs	r4, r4, #2
 800467a:	42a6      	cmp	r6, r4
 800467c:	d105      	bne.n	800468a <__libc_init_array+0x2e>
 800467e:	bd70      	pop	{r4, r5, r6, pc}
 8004680:	f855 3b04 	ldr.w	r3, [r5], #4
 8004684:	4798      	blx	r3
 8004686:	3601      	adds	r6, #1
 8004688:	e7ee      	b.n	8004668 <__libc_init_array+0xc>
 800468a:	f855 3b04 	ldr.w	r3, [r5], #4
 800468e:	4798      	blx	r3
 8004690:	3601      	adds	r6, #1
 8004692:	e7f2      	b.n	800467a <__libc_init_array+0x1e>
 8004694:	080070f0 	.word	0x080070f0
 8004698:	080070f0 	.word	0x080070f0
 800469c:	080070f0 	.word	0x080070f0
 80046a0:	080070f4 	.word	0x080070f4

080046a4 <__retarget_lock_init_recursive>:
 80046a4:	4770      	bx	lr

080046a6 <__retarget_lock_acquire_recursive>:
 80046a6:	4770      	bx	lr

080046a8 <__retarget_lock_release_recursive>:
 80046a8:	4770      	bx	lr

080046aa <memchr>:
 80046aa:	4603      	mov	r3, r0
 80046ac:	b510      	push	{r4, lr}
 80046ae:	b2c9      	uxtb	r1, r1
 80046b0:	4402      	add	r2, r0
 80046b2:	4293      	cmp	r3, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	d101      	bne.n	80046bc <memchr+0x12>
 80046b8:	2000      	movs	r0, #0
 80046ba:	e003      	b.n	80046c4 <memchr+0x1a>
 80046bc:	7804      	ldrb	r4, [r0, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	428c      	cmp	r4, r1
 80046c2:	d1f6      	bne.n	80046b2 <memchr+0x8>
 80046c4:	bd10      	pop	{r4, pc}

080046c6 <memcpy>:
 80046c6:	440a      	add	r2, r1
 80046c8:	4291      	cmp	r1, r2
 80046ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80046ce:	d100      	bne.n	80046d2 <memcpy+0xc>
 80046d0:	4770      	bx	lr
 80046d2:	b510      	push	{r4, lr}
 80046d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d8:	4291      	cmp	r1, r2
 80046da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046de:	d1f9      	bne.n	80046d4 <memcpy+0xe>
 80046e0:	bd10      	pop	{r4, pc}

080046e2 <quorem>:
 80046e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e6:	6903      	ldr	r3, [r0, #16]
 80046e8:	690c      	ldr	r4, [r1, #16]
 80046ea:	4607      	mov	r7, r0
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	db7e      	blt.n	80047ee <quorem+0x10c>
 80046f0:	3c01      	subs	r4, #1
 80046f2:	00a3      	lsls	r3, r4, #2
 80046f4:	f100 0514 	add.w	r5, r0, #20
 80046f8:	f101 0814 	add.w	r8, r1, #20
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800470c:	3301      	adds	r3, #1
 800470e:	429a      	cmp	r2, r3
 8004710:	fbb2 f6f3 	udiv	r6, r2, r3
 8004714:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004718:	d32e      	bcc.n	8004778 <quorem+0x96>
 800471a:	f04f 0a00 	mov.w	sl, #0
 800471e:	46c4      	mov	ip, r8
 8004720:	46ae      	mov	lr, r5
 8004722:	46d3      	mov	fp, sl
 8004724:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004728:	b298      	uxth	r0, r3
 800472a:	fb06 a000 	mla	r0, r6, r0, sl
 800472e:	0c1b      	lsrs	r3, r3, #16
 8004730:	0c02      	lsrs	r2, r0, #16
 8004732:	fb06 2303 	mla	r3, r6, r3, r2
 8004736:	f8de 2000 	ldr.w	r2, [lr]
 800473a:	b280      	uxth	r0, r0
 800473c:	b292      	uxth	r2, r2
 800473e:	1a12      	subs	r2, r2, r0
 8004740:	445a      	add	r2, fp
 8004742:	f8de 0000 	ldr.w	r0, [lr]
 8004746:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800474a:	b29b      	uxth	r3, r3
 800474c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004750:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004754:	b292      	uxth	r2, r2
 8004756:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800475a:	45e1      	cmp	r9, ip
 800475c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004760:	f84e 2b04 	str.w	r2, [lr], #4
 8004764:	d2de      	bcs.n	8004724 <quorem+0x42>
 8004766:	9b00      	ldr	r3, [sp, #0]
 8004768:	58eb      	ldr	r3, [r5, r3]
 800476a:	b92b      	cbnz	r3, 8004778 <quorem+0x96>
 800476c:	9b01      	ldr	r3, [sp, #4]
 800476e:	3b04      	subs	r3, #4
 8004770:	429d      	cmp	r5, r3
 8004772:	461a      	mov	r2, r3
 8004774:	d32f      	bcc.n	80047d6 <quorem+0xf4>
 8004776:	613c      	str	r4, [r7, #16]
 8004778:	4638      	mov	r0, r7
 800477a:	f001 f97b 	bl	8005a74 <__mcmp>
 800477e:	2800      	cmp	r0, #0
 8004780:	db25      	blt.n	80047ce <quorem+0xec>
 8004782:	4629      	mov	r1, r5
 8004784:	2000      	movs	r0, #0
 8004786:	f858 2b04 	ldr.w	r2, [r8], #4
 800478a:	f8d1 c000 	ldr.w	ip, [r1]
 800478e:	fa1f fe82 	uxth.w	lr, r2
 8004792:	fa1f f38c 	uxth.w	r3, ip
 8004796:	eba3 030e 	sub.w	r3, r3, lr
 800479a:	4403      	add	r3, r0
 800479c:	0c12      	lsrs	r2, r2, #16
 800479e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80047a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047ac:	45c1      	cmp	r9, r8
 80047ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80047b2:	f841 3b04 	str.w	r3, [r1], #4
 80047b6:	d2e6      	bcs.n	8004786 <quorem+0xa4>
 80047b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047c0:	b922      	cbnz	r2, 80047cc <quorem+0xea>
 80047c2:	3b04      	subs	r3, #4
 80047c4:	429d      	cmp	r5, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	d30b      	bcc.n	80047e2 <quorem+0x100>
 80047ca:	613c      	str	r4, [r7, #16]
 80047cc:	3601      	adds	r6, #1
 80047ce:	4630      	mov	r0, r6
 80047d0:	b003      	add	sp, #12
 80047d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	3b04      	subs	r3, #4
 80047da:	2a00      	cmp	r2, #0
 80047dc:	d1cb      	bne.n	8004776 <quorem+0x94>
 80047de:	3c01      	subs	r4, #1
 80047e0:	e7c6      	b.n	8004770 <quorem+0x8e>
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	3b04      	subs	r3, #4
 80047e6:	2a00      	cmp	r2, #0
 80047e8:	d1ef      	bne.n	80047ca <quorem+0xe8>
 80047ea:	3c01      	subs	r4, #1
 80047ec:	e7ea      	b.n	80047c4 <quorem+0xe2>
 80047ee:	2000      	movs	r0, #0
 80047f0:	e7ee      	b.n	80047d0 <quorem+0xee>
 80047f2:	0000      	movs	r0, r0
 80047f4:	0000      	movs	r0, r0
	...

080047f8 <_dtoa_r>:
 80047f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fc:	4614      	mov	r4, r2
 80047fe:	461d      	mov	r5, r3
 8004800:	69c7      	ldr	r7, [r0, #28]
 8004802:	b097      	sub	sp, #92	@ 0x5c
 8004804:	4683      	mov	fp, r0
 8004806:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800480a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800480c:	b97f      	cbnz	r7, 800482e <_dtoa_r+0x36>
 800480e:	2010      	movs	r0, #16
 8004810:	f000 fe02 	bl	8005418 <malloc>
 8004814:	4602      	mov	r2, r0
 8004816:	f8cb 001c 	str.w	r0, [fp, #28]
 800481a:	b920      	cbnz	r0, 8004826 <_dtoa_r+0x2e>
 800481c:	21ef      	movs	r1, #239	@ 0xef
 800481e:	4ba8      	ldr	r3, [pc, #672]	@ (8004ac0 <_dtoa_r+0x2c8>)
 8004820:	48a8      	ldr	r0, [pc, #672]	@ (8004ac4 <_dtoa_r+0x2cc>)
 8004822:	f001 fae7 	bl	8005df4 <__assert_func>
 8004826:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800482a:	6007      	str	r7, [r0, #0]
 800482c:	60c7      	str	r7, [r0, #12]
 800482e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	b159      	cbz	r1, 800484e <_dtoa_r+0x56>
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	2301      	movs	r3, #1
 800483a:	4093      	lsls	r3, r2
 800483c:	604a      	str	r2, [r1, #4]
 800483e:	608b      	str	r3, [r1, #8]
 8004840:	4658      	mov	r0, fp
 8004842:	f000 fedf 	bl	8005604 <_Bfree>
 8004846:	2200      	movs	r2, #0
 8004848:	f8db 301c 	ldr.w	r3, [fp, #28]
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	1e2b      	subs	r3, r5, #0
 8004850:	bfaf      	iteee	ge
 8004852:	2300      	movge	r3, #0
 8004854:	2201      	movlt	r2, #1
 8004856:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800485a:	9303      	strlt	r3, [sp, #12]
 800485c:	bfa8      	it	ge
 800485e:	6033      	strge	r3, [r6, #0]
 8004860:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004864:	4b98      	ldr	r3, [pc, #608]	@ (8004ac8 <_dtoa_r+0x2d0>)
 8004866:	bfb8      	it	lt
 8004868:	6032      	strlt	r2, [r6, #0]
 800486a:	ea33 0308 	bics.w	r3, r3, r8
 800486e:	d112      	bne.n	8004896 <_dtoa_r+0x9e>
 8004870:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004874:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800487c:	4323      	orrs	r3, r4
 800487e:	f000 8550 	beq.w	8005322 <_dtoa_r+0xb2a>
 8004882:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004884:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004acc <_dtoa_r+0x2d4>
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8552 	beq.w	8005332 <_dtoa_r+0xb3a>
 800488e:	f10a 0303 	add.w	r3, sl, #3
 8004892:	f000 bd4c 	b.w	800532e <_dtoa_r+0xb36>
 8004896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800489a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800489e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048a2:	2200      	movs	r2, #0
 80048a4:	2300      	movs	r3, #0
 80048a6:	f7fc f88f 	bl	80009c8 <__aeabi_dcmpeq>
 80048aa:	4607      	mov	r7, r0
 80048ac:	b158      	cbz	r0, 80048c6 <_dtoa_r+0xce>
 80048ae:	2301      	movs	r3, #1
 80048b0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80048b6:	b113      	cbz	r3, 80048be <_dtoa_r+0xc6>
 80048b8:	4b85      	ldr	r3, [pc, #532]	@ (8004ad0 <_dtoa_r+0x2d8>)
 80048ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004ad4 <_dtoa_r+0x2dc>
 80048c2:	f000 bd36 	b.w	8005332 <_dtoa_r+0xb3a>
 80048c6:	ab14      	add	r3, sp, #80	@ 0x50
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	ab15      	add	r3, sp, #84	@ 0x54
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	4658      	mov	r0, fp
 80048d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80048d4:	f001 f97e 	bl	8005bd4 <__d2b>
 80048d8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80048dc:	4681      	mov	r9, r0
 80048de:	2e00      	cmp	r6, #0
 80048e0:	d077      	beq.n	80049d2 <_dtoa_r+0x1da>
 80048e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048e8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80048ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048f0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80048f4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80048f8:	9712      	str	r7, [sp, #72]	@ 0x48
 80048fa:	4619      	mov	r1, r3
 80048fc:	2200      	movs	r2, #0
 80048fe:	4b76      	ldr	r3, [pc, #472]	@ (8004ad8 <_dtoa_r+0x2e0>)
 8004900:	f7fb fc42 	bl	8000188 <__aeabi_dsub>
 8004904:	a368      	add	r3, pc, #416	@ (adr r3, 8004aa8 <_dtoa_r+0x2b0>)
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	f7fb fdf5 	bl	80004f8 <__aeabi_dmul>
 800490e:	a368      	add	r3, pc, #416	@ (adr r3, 8004ab0 <_dtoa_r+0x2b8>)
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f7fb fc3a 	bl	800018c <__adddf3>
 8004918:	4604      	mov	r4, r0
 800491a:	4630      	mov	r0, r6
 800491c:	460d      	mov	r5, r1
 800491e:	f7fb fd81 	bl	8000424 <__aeabi_i2d>
 8004922:	a365      	add	r3, pc, #404	@ (adr r3, 8004ab8 <_dtoa_r+0x2c0>)
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f7fb fde6 	bl	80004f8 <__aeabi_dmul>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4620      	mov	r0, r4
 8004932:	4629      	mov	r1, r5
 8004934:	f7fb fc2a 	bl	800018c <__adddf3>
 8004938:	4604      	mov	r4, r0
 800493a:	460d      	mov	r5, r1
 800493c:	f7fc f88c 	bl	8000a58 <__aeabi_d2iz>
 8004940:	2200      	movs	r2, #0
 8004942:	4607      	mov	r7, r0
 8004944:	2300      	movs	r3, #0
 8004946:	4620      	mov	r0, r4
 8004948:	4629      	mov	r1, r5
 800494a:	f7fc f847 	bl	80009dc <__aeabi_dcmplt>
 800494e:	b140      	cbz	r0, 8004962 <_dtoa_r+0x16a>
 8004950:	4638      	mov	r0, r7
 8004952:	f7fb fd67 	bl	8000424 <__aeabi_i2d>
 8004956:	4622      	mov	r2, r4
 8004958:	462b      	mov	r3, r5
 800495a:	f7fc f835 	bl	80009c8 <__aeabi_dcmpeq>
 800495e:	b900      	cbnz	r0, 8004962 <_dtoa_r+0x16a>
 8004960:	3f01      	subs	r7, #1
 8004962:	2f16      	cmp	r7, #22
 8004964:	d853      	bhi.n	8004a0e <_dtoa_r+0x216>
 8004966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800496a:	4b5c      	ldr	r3, [pc, #368]	@ (8004adc <_dtoa_r+0x2e4>)
 800496c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	f7fc f832 	bl	80009dc <__aeabi_dcmplt>
 8004978:	2800      	cmp	r0, #0
 800497a:	d04a      	beq.n	8004a12 <_dtoa_r+0x21a>
 800497c:	2300      	movs	r3, #0
 800497e:	3f01      	subs	r7, #1
 8004980:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004982:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004984:	1b9b      	subs	r3, r3, r6
 8004986:	1e5a      	subs	r2, r3, #1
 8004988:	bf46      	itte	mi
 800498a:	f1c3 0801 	rsbmi	r8, r3, #1
 800498e:	2300      	movmi	r3, #0
 8004990:	f04f 0800 	movpl.w	r8, #0
 8004994:	9209      	str	r2, [sp, #36]	@ 0x24
 8004996:	bf48      	it	mi
 8004998:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800499a:	2f00      	cmp	r7, #0
 800499c:	db3b      	blt.n	8004a16 <_dtoa_r+0x21e>
 800499e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049a0:	970e      	str	r7, [sp, #56]	@ 0x38
 80049a2:	443b      	add	r3, r7
 80049a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049a6:	2300      	movs	r3, #0
 80049a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80049aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049ac:	2b09      	cmp	r3, #9
 80049ae:	d866      	bhi.n	8004a7e <_dtoa_r+0x286>
 80049b0:	2b05      	cmp	r3, #5
 80049b2:	bfc4      	itt	gt
 80049b4:	3b04      	subgt	r3, #4
 80049b6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80049b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049ba:	bfc8      	it	gt
 80049bc:	2400      	movgt	r4, #0
 80049be:	f1a3 0302 	sub.w	r3, r3, #2
 80049c2:	bfd8      	it	le
 80049c4:	2401      	movle	r4, #1
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d864      	bhi.n	8004a94 <_dtoa_r+0x29c>
 80049ca:	e8df f003 	tbb	[pc, r3]
 80049ce:	382b      	.short	0x382b
 80049d0:	5636      	.short	0x5636
 80049d2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80049d6:	441e      	add	r6, r3
 80049d8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80049dc:	2b20      	cmp	r3, #32
 80049de:	bfc1      	itttt	gt
 80049e0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80049e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80049e8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80049ec:	fa24 f303 	lsrgt.w	r3, r4, r3
 80049f0:	bfd6      	itet	le
 80049f2:	f1c3 0320 	rsble	r3, r3, #32
 80049f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80049fa:	fa04 f003 	lslle.w	r0, r4, r3
 80049fe:	f7fb fd01 	bl	8000404 <__aeabi_ui2d>
 8004a02:	2201      	movs	r2, #1
 8004a04:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004a08:	3e01      	subs	r6, #1
 8004a0a:	9212      	str	r2, [sp, #72]	@ 0x48
 8004a0c:	e775      	b.n	80048fa <_dtoa_r+0x102>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e7b6      	b.n	8004980 <_dtoa_r+0x188>
 8004a12:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004a14:	e7b5      	b.n	8004982 <_dtoa_r+0x18a>
 8004a16:	427b      	negs	r3, r7
 8004a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	eba8 0807 	sub.w	r8, r8, r7
 8004a20:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a22:	e7c2      	b.n	80049aa <_dtoa_r+0x1b2>
 8004a24:	2300      	movs	r3, #0
 8004a26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	dc35      	bgt.n	8004a9a <_dtoa_r+0x2a2>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	461a      	mov	r2, r3
 8004a32:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a36:	9221      	str	r2, [sp, #132]	@ 0x84
 8004a38:	e00b      	b.n	8004a52 <_dtoa_r+0x25a>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e7f3      	b.n	8004a26 <_dtoa_r+0x22e>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	9308      	str	r3, [sp, #32]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	9307      	str	r3, [sp, #28]
 8004a4e:	bfb8      	it	lt
 8004a50:	2301      	movlt	r3, #1
 8004a52:	2100      	movs	r1, #0
 8004a54:	2204      	movs	r2, #4
 8004a56:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004a5a:	f102 0514 	add.w	r5, r2, #20
 8004a5e:	429d      	cmp	r5, r3
 8004a60:	d91f      	bls.n	8004aa2 <_dtoa_r+0x2aa>
 8004a62:	6041      	str	r1, [r0, #4]
 8004a64:	4658      	mov	r0, fp
 8004a66:	f000 fd8d 	bl	8005584 <_Balloc>
 8004a6a:	4682      	mov	sl, r0
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d139      	bne.n	8004ae4 <_dtoa_r+0x2ec>
 8004a70:	4602      	mov	r2, r0
 8004a72:	f240 11af 	movw	r1, #431	@ 0x1af
 8004a76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae0 <_dtoa_r+0x2e8>)
 8004a78:	e6d2      	b.n	8004820 <_dtoa_r+0x28>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e7e0      	b.n	8004a40 <_dtoa_r+0x248>
 8004a7e:	2401      	movs	r4, #1
 8004a80:	2300      	movs	r3, #0
 8004a82:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004a84:	9320      	str	r3, [sp, #128]	@ 0x80
 8004a86:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a90:	2312      	movs	r3, #18
 8004a92:	e7d0      	b.n	8004a36 <_dtoa_r+0x23e>
 8004a94:	2301      	movs	r3, #1
 8004a96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a98:	e7f5      	b.n	8004a86 <_dtoa_r+0x28e>
 8004a9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004aa0:	e7d7      	b.n	8004a52 <_dtoa_r+0x25a>
 8004aa2:	3101      	adds	r1, #1
 8004aa4:	0052      	lsls	r2, r2, #1
 8004aa6:	e7d8      	b.n	8004a5a <_dtoa_r+0x262>
 8004aa8:	636f4361 	.word	0x636f4361
 8004aac:	3fd287a7 	.word	0x3fd287a7
 8004ab0:	8b60c8b3 	.word	0x8b60c8b3
 8004ab4:	3fc68a28 	.word	0x3fc68a28
 8004ab8:	509f79fb 	.word	0x509f79fb
 8004abc:	3fd34413 	.word	0x3fd34413
 8004ac0:	08006d9c 	.word	0x08006d9c
 8004ac4:	08006db3 	.word	0x08006db3
 8004ac8:	7ff00000 	.word	0x7ff00000
 8004acc:	08006d98 	.word	0x08006d98
 8004ad0:	08006d6c 	.word	0x08006d6c
 8004ad4:	08006d6b 	.word	0x08006d6b
 8004ad8:	3ff80000 	.word	0x3ff80000
 8004adc:	08006eb0 	.word	0x08006eb0
 8004ae0:	08006e0b 	.word	0x08006e0b
 8004ae4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ae8:	6018      	str	r0, [r3, #0]
 8004aea:	9b07      	ldr	r3, [sp, #28]
 8004aec:	2b0e      	cmp	r3, #14
 8004aee:	f200 80a4 	bhi.w	8004c3a <_dtoa_r+0x442>
 8004af2:	2c00      	cmp	r4, #0
 8004af4:	f000 80a1 	beq.w	8004c3a <_dtoa_r+0x442>
 8004af8:	2f00      	cmp	r7, #0
 8004afa:	dd33      	ble.n	8004b64 <_dtoa_r+0x36c>
 8004afc:	4b86      	ldr	r3, [pc, #536]	@ (8004d18 <_dtoa_r+0x520>)
 8004afe:	f007 020f 	and.w	r2, r7, #15
 8004b02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b06:	05f8      	lsls	r0, r7, #23
 8004b08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004b14:	d516      	bpl.n	8004b44 <_dtoa_r+0x34c>
 8004b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b1a:	4b80      	ldr	r3, [pc, #512]	@ (8004d1c <_dtoa_r+0x524>)
 8004b1c:	2603      	movs	r6, #3
 8004b1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b22:	f7fb fe13 	bl	800074c <__aeabi_ddiv>
 8004b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b2a:	f004 040f 	and.w	r4, r4, #15
 8004b2e:	4d7b      	ldr	r5, [pc, #492]	@ (8004d1c <_dtoa_r+0x524>)
 8004b30:	b954      	cbnz	r4, 8004b48 <_dtoa_r+0x350>
 8004b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b3a:	f7fb fe07 	bl	800074c <__aeabi_ddiv>
 8004b3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b42:	e028      	b.n	8004b96 <_dtoa_r+0x39e>
 8004b44:	2602      	movs	r6, #2
 8004b46:	e7f2      	b.n	8004b2e <_dtoa_r+0x336>
 8004b48:	07e1      	lsls	r1, r4, #31
 8004b4a:	d508      	bpl.n	8004b5e <_dtoa_r+0x366>
 8004b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b54:	f7fb fcd0 	bl	80004f8 <__aeabi_dmul>
 8004b58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b5c:	3601      	adds	r6, #1
 8004b5e:	1064      	asrs	r4, r4, #1
 8004b60:	3508      	adds	r5, #8
 8004b62:	e7e5      	b.n	8004b30 <_dtoa_r+0x338>
 8004b64:	f000 80d2 	beq.w	8004d0c <_dtoa_r+0x514>
 8004b68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b6c:	427c      	negs	r4, r7
 8004b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d18 <_dtoa_r+0x520>)
 8004b70:	f004 020f 	and.w	r2, r4, #15
 8004b74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7c:	f7fb fcbc 	bl	80004f8 <__aeabi_dmul>
 8004b80:	2602      	movs	r6, #2
 8004b82:	2300      	movs	r3, #0
 8004b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b88:	4d64      	ldr	r5, [pc, #400]	@ (8004d1c <_dtoa_r+0x524>)
 8004b8a:	1124      	asrs	r4, r4, #4
 8004b8c:	2c00      	cmp	r4, #0
 8004b8e:	f040 80b2 	bne.w	8004cf6 <_dtoa_r+0x4fe>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1d3      	bne.n	8004b3e <_dtoa_r+0x346>
 8004b96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004b9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80b7 	beq.w	8004d10 <_dtoa_r+0x518>
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	4b5d      	ldr	r3, [pc, #372]	@ (8004d20 <_dtoa_r+0x528>)
 8004baa:	f7fb ff17 	bl	80009dc <__aeabi_dcmplt>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	f000 80ae 	beq.w	8004d10 <_dtoa_r+0x518>
 8004bb4:	9b07      	ldr	r3, [sp, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 80aa 	beq.w	8004d10 <_dtoa_r+0x518>
 8004bbc:	9b08      	ldr	r3, [sp, #32]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	dd37      	ble.n	8004c32 <_dtoa_r+0x43a>
 8004bc2:	1e7b      	subs	r3, r7, #1
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	9304      	str	r3, [sp, #16]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	4629      	mov	r1, r5
 8004bcc:	4b55      	ldr	r3, [pc, #340]	@ (8004d24 <_dtoa_r+0x52c>)
 8004bce:	f7fb fc93 	bl	80004f8 <__aeabi_dmul>
 8004bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bd6:	9c08      	ldr	r4, [sp, #32]
 8004bd8:	3601      	adds	r6, #1
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f7fb fc22 	bl	8000424 <__aeabi_i2d>
 8004be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004be4:	f7fb fc88 	bl	80004f8 <__aeabi_dmul>
 8004be8:	2200      	movs	r2, #0
 8004bea:	4b4f      	ldr	r3, [pc, #316]	@ (8004d28 <_dtoa_r+0x530>)
 8004bec:	f7fb face 	bl	800018c <__adddf3>
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004bf6:	2c00      	cmp	r4, #0
 8004bf8:	f040 809a 	bne.w	8004d30 <_dtoa_r+0x538>
 8004bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c00:	2200      	movs	r2, #0
 8004c02:	4b4a      	ldr	r3, [pc, #296]	@ (8004d2c <_dtoa_r+0x534>)
 8004c04:	f7fb fac0 	bl	8000188 <__aeabi_dsub>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c10:	462a      	mov	r2, r5
 8004c12:	4633      	mov	r3, r6
 8004c14:	f7fb ff00 	bl	8000a18 <__aeabi_dcmpgt>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	f040 828e 	bne.w	800513a <_dtoa_r+0x942>
 8004c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c22:	462a      	mov	r2, r5
 8004c24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004c28:	f7fb fed8 	bl	80009dc <__aeabi_dcmplt>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	f040 8127 	bne.w	8004e80 <_dtoa_r+0x688>
 8004c32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004c36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004c3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f2c0 8163 	blt.w	8004f08 <_dtoa_r+0x710>
 8004c42:	2f0e      	cmp	r7, #14
 8004c44:	f300 8160 	bgt.w	8004f08 <_dtoa_r+0x710>
 8004c48:	4b33      	ldr	r3, [pc, #204]	@ (8004d18 <_dtoa_r+0x520>)
 8004c4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c52:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	da03      	bge.n	8004c64 <_dtoa_r+0x46c>
 8004c5c:	9b07      	ldr	r3, [sp, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f340 8100 	ble.w	8004e64 <_dtoa_r+0x66c>
 8004c64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004c68:	4656      	mov	r6, sl
 8004c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c6e:	4620      	mov	r0, r4
 8004c70:	4629      	mov	r1, r5
 8004c72:	f7fb fd6b 	bl	800074c <__aeabi_ddiv>
 8004c76:	f7fb feef 	bl	8000a58 <__aeabi_d2iz>
 8004c7a:	4680      	mov	r8, r0
 8004c7c:	f7fb fbd2 	bl	8000424 <__aeabi_i2d>
 8004c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c84:	f7fb fc38 	bl	80004f8 <__aeabi_dmul>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	4629      	mov	r1, r5
 8004c90:	f7fb fa7a 	bl	8000188 <__aeabi_dsub>
 8004c94:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004c98:	9d07      	ldr	r5, [sp, #28]
 8004c9a:	f806 4b01 	strb.w	r4, [r6], #1
 8004c9e:	eba6 040a 	sub.w	r4, r6, sl
 8004ca2:	42a5      	cmp	r5, r4
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	f040 8116 	bne.w	8004ed8 <_dtoa_r+0x6e0>
 8004cac:	f7fb fa6e 	bl	800018c <__adddf3>
 8004cb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	460d      	mov	r5, r1
 8004cb8:	f7fb feae 	bl	8000a18 <__aeabi_dcmpgt>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	f040 80f8 	bne.w	8004eb2 <_dtoa_r+0x6ba>
 8004cc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f7fb fe7d 	bl	80009c8 <__aeabi_dcmpeq>
 8004cce:	b118      	cbz	r0, 8004cd8 <_dtoa_r+0x4e0>
 8004cd0:	f018 0f01 	tst.w	r8, #1
 8004cd4:	f040 80ed 	bne.w	8004eb2 <_dtoa_r+0x6ba>
 8004cd8:	4649      	mov	r1, r9
 8004cda:	4658      	mov	r0, fp
 8004cdc:	f000 fc92 	bl	8005604 <_Bfree>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	7033      	strb	r3, [r6, #0]
 8004ce4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004ce6:	3701      	adds	r7, #1
 8004ce8:	601f      	str	r7, [r3, #0]
 8004cea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8320 	beq.w	8005332 <_dtoa_r+0xb3a>
 8004cf2:	601e      	str	r6, [r3, #0]
 8004cf4:	e31d      	b.n	8005332 <_dtoa_r+0xb3a>
 8004cf6:	07e2      	lsls	r2, r4, #31
 8004cf8:	d505      	bpl.n	8004d06 <_dtoa_r+0x50e>
 8004cfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004cfe:	f7fb fbfb 	bl	80004f8 <__aeabi_dmul>
 8004d02:	2301      	movs	r3, #1
 8004d04:	3601      	adds	r6, #1
 8004d06:	1064      	asrs	r4, r4, #1
 8004d08:	3508      	adds	r5, #8
 8004d0a:	e73f      	b.n	8004b8c <_dtoa_r+0x394>
 8004d0c:	2602      	movs	r6, #2
 8004d0e:	e742      	b.n	8004b96 <_dtoa_r+0x39e>
 8004d10:	9c07      	ldr	r4, [sp, #28]
 8004d12:	9704      	str	r7, [sp, #16]
 8004d14:	e761      	b.n	8004bda <_dtoa_r+0x3e2>
 8004d16:	bf00      	nop
 8004d18:	08006eb0 	.word	0x08006eb0
 8004d1c:	08006e88 	.word	0x08006e88
 8004d20:	3ff00000 	.word	0x3ff00000
 8004d24:	40240000 	.word	0x40240000
 8004d28:	401c0000 	.word	0x401c0000
 8004d2c:	40140000 	.word	0x40140000
 8004d30:	4b70      	ldr	r3, [pc, #448]	@ (8004ef4 <_dtoa_r+0x6fc>)
 8004d32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d3c:	4454      	add	r4, sl
 8004d3e:	2900      	cmp	r1, #0
 8004d40:	d045      	beq.n	8004dce <_dtoa_r+0x5d6>
 8004d42:	2000      	movs	r0, #0
 8004d44:	496c      	ldr	r1, [pc, #432]	@ (8004ef8 <_dtoa_r+0x700>)
 8004d46:	f7fb fd01 	bl	800074c <__aeabi_ddiv>
 8004d4a:	4633      	mov	r3, r6
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	f7fb fa1b 	bl	8000188 <__aeabi_dsub>
 8004d52:	4656      	mov	r6, sl
 8004d54:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d5c:	f7fb fe7c 	bl	8000a58 <__aeabi_d2iz>
 8004d60:	4605      	mov	r5, r0
 8004d62:	f7fb fb5f 	bl	8000424 <__aeabi_i2d>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d6e:	f7fb fa0b 	bl	8000188 <__aeabi_dsub>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	3530      	adds	r5, #48	@ 0x30
 8004d78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d80:	f806 5b01 	strb.w	r5, [r6], #1
 8004d84:	f7fb fe2a 	bl	80009dc <__aeabi_dcmplt>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d163      	bne.n	8004e54 <_dtoa_r+0x65c>
 8004d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d90:	2000      	movs	r0, #0
 8004d92:	495a      	ldr	r1, [pc, #360]	@ (8004efc <_dtoa_r+0x704>)
 8004d94:	f7fb f9f8 	bl	8000188 <__aeabi_dsub>
 8004d98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d9c:	f7fb fe1e 	bl	80009dc <__aeabi_dcmplt>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	f040 8087 	bne.w	8004eb4 <_dtoa_r+0x6bc>
 8004da6:	42a6      	cmp	r6, r4
 8004da8:	f43f af43 	beq.w	8004c32 <_dtoa_r+0x43a>
 8004dac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004db0:	2200      	movs	r2, #0
 8004db2:	4b53      	ldr	r3, [pc, #332]	@ (8004f00 <_dtoa_r+0x708>)
 8004db4:	f7fb fba0 	bl	80004f8 <__aeabi_dmul>
 8004db8:	2200      	movs	r2, #0
 8004dba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004f00 <_dtoa_r+0x708>)
 8004dc4:	f7fb fb98 	bl	80004f8 <__aeabi_dmul>
 8004dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dcc:	e7c4      	b.n	8004d58 <_dtoa_r+0x560>
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f7fb fb91 	bl	80004f8 <__aeabi_dmul>
 8004dd6:	4656      	mov	r6, sl
 8004dd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ddc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004de2:	f7fb fe39 	bl	8000a58 <__aeabi_d2iz>
 8004de6:	4605      	mov	r5, r0
 8004de8:	f7fb fb1c 	bl	8000424 <__aeabi_i2d>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004df4:	f7fb f9c8 	bl	8000188 <__aeabi_dsub>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	3530      	adds	r5, #48	@ 0x30
 8004dfe:	f806 5b01 	strb.w	r5, [r6], #1
 8004e02:	42a6      	cmp	r6, r4
 8004e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	d124      	bne.n	8004e58 <_dtoa_r+0x660>
 8004e0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e12:	4b39      	ldr	r3, [pc, #228]	@ (8004ef8 <_dtoa_r+0x700>)
 8004e14:	f7fb f9ba 	bl	800018c <__adddf3>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e20:	f7fb fdfa 	bl	8000a18 <__aeabi_dcmpgt>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d145      	bne.n	8004eb4 <_dtoa_r+0x6bc>
 8004e28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	4932      	ldr	r1, [pc, #200]	@ (8004ef8 <_dtoa_r+0x700>)
 8004e30:	f7fb f9aa 	bl	8000188 <__aeabi_dsub>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e3c:	f7fb fdce 	bl	80009dc <__aeabi_dcmplt>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	f43f aef6 	beq.w	8004c32 <_dtoa_r+0x43a>
 8004e46:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004e48:	1e73      	subs	r3, r6, #1
 8004e4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004e4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004e50:	2b30      	cmp	r3, #48	@ 0x30
 8004e52:	d0f8      	beq.n	8004e46 <_dtoa_r+0x64e>
 8004e54:	9f04      	ldr	r7, [sp, #16]
 8004e56:	e73f      	b.n	8004cd8 <_dtoa_r+0x4e0>
 8004e58:	4b29      	ldr	r3, [pc, #164]	@ (8004f00 <_dtoa_r+0x708>)
 8004e5a:	f7fb fb4d 	bl	80004f8 <__aeabi_dmul>
 8004e5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e62:	e7bc      	b.n	8004dde <_dtoa_r+0x5e6>
 8004e64:	d10c      	bne.n	8004e80 <_dtoa_r+0x688>
 8004e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	4b25      	ldr	r3, [pc, #148]	@ (8004f04 <_dtoa_r+0x70c>)
 8004e6e:	f7fb fb43 	bl	80004f8 <__aeabi_dmul>
 8004e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e76:	f7fb fdc5 	bl	8000a04 <__aeabi_dcmpge>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	f000 815b 	beq.w	8005136 <_dtoa_r+0x93e>
 8004e80:	2400      	movs	r4, #0
 8004e82:	4625      	mov	r5, r4
 8004e84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e86:	4656      	mov	r6, sl
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	9304      	str	r3, [sp, #16]
 8004e8c:	2700      	movs	r7, #0
 8004e8e:	4621      	mov	r1, r4
 8004e90:	4658      	mov	r0, fp
 8004e92:	f000 fbb7 	bl	8005604 <_Bfree>
 8004e96:	2d00      	cmp	r5, #0
 8004e98:	d0dc      	beq.n	8004e54 <_dtoa_r+0x65c>
 8004e9a:	b12f      	cbz	r7, 8004ea8 <_dtoa_r+0x6b0>
 8004e9c:	42af      	cmp	r7, r5
 8004e9e:	d003      	beq.n	8004ea8 <_dtoa_r+0x6b0>
 8004ea0:	4639      	mov	r1, r7
 8004ea2:	4658      	mov	r0, fp
 8004ea4:	f000 fbae 	bl	8005604 <_Bfree>
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	4658      	mov	r0, fp
 8004eac:	f000 fbaa 	bl	8005604 <_Bfree>
 8004eb0:	e7d0      	b.n	8004e54 <_dtoa_r+0x65c>
 8004eb2:	9704      	str	r7, [sp, #16]
 8004eb4:	4633      	mov	r3, r6
 8004eb6:	461e      	mov	r6, r3
 8004eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ebc:	2a39      	cmp	r2, #57	@ 0x39
 8004ebe:	d107      	bne.n	8004ed0 <_dtoa_r+0x6d8>
 8004ec0:	459a      	cmp	sl, r3
 8004ec2:	d1f8      	bne.n	8004eb6 <_dtoa_r+0x6be>
 8004ec4:	9a04      	ldr	r2, [sp, #16]
 8004ec6:	3201      	adds	r2, #1
 8004ec8:	9204      	str	r2, [sp, #16]
 8004eca:	2230      	movs	r2, #48	@ 0x30
 8004ecc:	f88a 2000 	strb.w	r2, [sl]
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	3201      	adds	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	e7bd      	b.n	8004e54 <_dtoa_r+0x65c>
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4b09      	ldr	r3, [pc, #36]	@ (8004f00 <_dtoa_r+0x708>)
 8004edc:	f7fb fb0c 	bl	80004f8 <__aeabi_dmul>
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	460d      	mov	r5, r1
 8004ee8:	f7fb fd6e 	bl	80009c8 <__aeabi_dcmpeq>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	f43f aebc 	beq.w	8004c6a <_dtoa_r+0x472>
 8004ef2:	e6f1      	b.n	8004cd8 <_dtoa_r+0x4e0>
 8004ef4:	08006eb0 	.word	0x08006eb0
 8004ef8:	3fe00000 	.word	0x3fe00000
 8004efc:	3ff00000 	.word	0x3ff00000
 8004f00:	40240000 	.word	0x40240000
 8004f04:	40140000 	.word	0x40140000
 8004f08:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	f000 80db 	beq.w	80050c6 <_dtoa_r+0x8ce>
 8004f10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004f12:	2a01      	cmp	r2, #1
 8004f14:	f300 80bf 	bgt.w	8005096 <_dtoa_r+0x89e>
 8004f18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004f1a:	2a00      	cmp	r2, #0
 8004f1c:	f000 80b7 	beq.w	800508e <_dtoa_r+0x896>
 8004f20:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004f24:	4646      	mov	r6, r8
 8004f26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	441a      	add	r2, r3
 8004f2e:	4658      	mov	r0, fp
 8004f30:	4498      	add	r8, r3
 8004f32:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f34:	f000 fc1a 	bl	800576c <__i2b>
 8004f38:	4605      	mov	r5, r0
 8004f3a:	b15e      	cbz	r6, 8004f54 <_dtoa_r+0x75c>
 8004f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	dd08      	ble.n	8004f54 <_dtoa_r+0x75c>
 8004f42:	42b3      	cmp	r3, r6
 8004f44:	bfa8      	it	ge
 8004f46:	4633      	movge	r3, r6
 8004f48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f4a:	eba8 0803 	sub.w	r8, r8, r3
 8004f4e:	1af6      	subs	r6, r6, r3
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f56:	b1f3      	cbz	r3, 8004f96 <_dtoa_r+0x79e>
 8004f58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80b7 	beq.w	80050ce <_dtoa_r+0x8d6>
 8004f60:	b18c      	cbz	r4, 8004f86 <_dtoa_r+0x78e>
 8004f62:	4629      	mov	r1, r5
 8004f64:	4622      	mov	r2, r4
 8004f66:	4658      	mov	r0, fp
 8004f68:	f000 fcbe 	bl	80058e8 <__pow5mult>
 8004f6c:	464a      	mov	r2, r9
 8004f6e:	4601      	mov	r1, r0
 8004f70:	4605      	mov	r5, r0
 8004f72:	4658      	mov	r0, fp
 8004f74:	f000 fc10 	bl	8005798 <__multiply>
 8004f78:	4649      	mov	r1, r9
 8004f7a:	9004      	str	r0, [sp, #16]
 8004f7c:	4658      	mov	r0, fp
 8004f7e:	f000 fb41 	bl	8005604 <_Bfree>
 8004f82:	9b04      	ldr	r3, [sp, #16]
 8004f84:	4699      	mov	r9, r3
 8004f86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f88:	1b1a      	subs	r2, r3, r4
 8004f8a:	d004      	beq.n	8004f96 <_dtoa_r+0x79e>
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	4658      	mov	r0, fp
 8004f90:	f000 fcaa 	bl	80058e8 <__pow5mult>
 8004f94:	4681      	mov	r9, r0
 8004f96:	2101      	movs	r1, #1
 8004f98:	4658      	mov	r0, fp
 8004f9a:	f000 fbe7 	bl	800576c <__i2b>
 8004f9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 81c9 	beq.w	800533a <_dtoa_r+0xb42>
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4601      	mov	r1, r0
 8004fac:	4658      	mov	r0, fp
 8004fae:	f000 fc9b 	bl	80058e8 <__pow5mult>
 8004fb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	f300 808f 	bgt.w	80050da <_dtoa_r+0x8e2>
 8004fbc:	9b02      	ldr	r3, [sp, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f040 8087 	bne.w	80050d2 <_dtoa_r+0x8da>
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f040 8083 	bne.w	80050d6 <_dtoa_r+0x8de>
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fd6:	0d1b      	lsrs	r3, r3, #20
 8004fd8:	051b      	lsls	r3, r3, #20
 8004fda:	b12b      	cbz	r3, 8004fe8 <_dtoa_r+0x7f0>
 8004fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fde:	f108 0801 	add.w	r8, r8, #1
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 81aa 	beq.w	8005346 <_dtoa_r+0xb4e>
 8004ff2:	6923      	ldr	r3, [r4, #16]
 8004ff4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ff8:	6918      	ldr	r0, [r3, #16]
 8004ffa:	f000 fb6b 	bl	80056d4 <__hi0bits>
 8004ffe:	f1c0 0020 	rsb	r0, r0, #32
 8005002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005004:	4418      	add	r0, r3
 8005006:	f010 001f 	ands.w	r0, r0, #31
 800500a:	d071      	beq.n	80050f0 <_dtoa_r+0x8f8>
 800500c:	f1c0 0320 	rsb	r3, r0, #32
 8005010:	2b04      	cmp	r3, #4
 8005012:	dd65      	ble.n	80050e0 <_dtoa_r+0x8e8>
 8005014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005016:	f1c0 001c 	rsb	r0, r0, #28
 800501a:	4403      	add	r3, r0
 800501c:	4480      	add	r8, r0
 800501e:	4406      	add	r6, r0
 8005020:	9309      	str	r3, [sp, #36]	@ 0x24
 8005022:	f1b8 0f00 	cmp.w	r8, #0
 8005026:	dd05      	ble.n	8005034 <_dtoa_r+0x83c>
 8005028:	4649      	mov	r1, r9
 800502a:	4642      	mov	r2, r8
 800502c:	4658      	mov	r0, fp
 800502e:	f000 fcb5 	bl	800599c <__lshift>
 8005032:	4681      	mov	r9, r0
 8005034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	dd05      	ble.n	8005046 <_dtoa_r+0x84e>
 800503a:	4621      	mov	r1, r4
 800503c:	461a      	mov	r2, r3
 800503e:	4658      	mov	r0, fp
 8005040:	f000 fcac 	bl	800599c <__lshift>
 8005044:	4604      	mov	r4, r0
 8005046:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d053      	beq.n	80050f4 <_dtoa_r+0x8fc>
 800504c:	4621      	mov	r1, r4
 800504e:	4648      	mov	r0, r9
 8005050:	f000 fd10 	bl	8005a74 <__mcmp>
 8005054:	2800      	cmp	r0, #0
 8005056:	da4d      	bge.n	80050f4 <_dtoa_r+0x8fc>
 8005058:	1e7b      	subs	r3, r7, #1
 800505a:	4649      	mov	r1, r9
 800505c:	9304      	str	r3, [sp, #16]
 800505e:	220a      	movs	r2, #10
 8005060:	2300      	movs	r3, #0
 8005062:	4658      	mov	r0, fp
 8005064:	f000 faf0 	bl	8005648 <__multadd>
 8005068:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800506a:	4681      	mov	r9, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 816c 	beq.w	800534a <_dtoa_r+0xb52>
 8005072:	2300      	movs	r3, #0
 8005074:	4629      	mov	r1, r5
 8005076:	220a      	movs	r2, #10
 8005078:	4658      	mov	r0, fp
 800507a:	f000 fae5 	bl	8005648 <__multadd>
 800507e:	9b08      	ldr	r3, [sp, #32]
 8005080:	4605      	mov	r5, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	dc61      	bgt.n	800514a <_dtoa_r+0x952>
 8005086:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005088:	2b02      	cmp	r3, #2
 800508a:	dc3b      	bgt.n	8005104 <_dtoa_r+0x90c>
 800508c:	e05d      	b.n	800514a <_dtoa_r+0x952>
 800508e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005090:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005094:	e746      	b.n	8004f24 <_dtoa_r+0x72c>
 8005096:	9b07      	ldr	r3, [sp, #28]
 8005098:	1e5c      	subs	r4, r3, #1
 800509a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800509c:	42a3      	cmp	r3, r4
 800509e:	bfbf      	itttt	lt
 80050a0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80050a2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80050a4:	1ae3      	sublt	r3, r4, r3
 80050a6:	18d2      	addlt	r2, r2, r3
 80050a8:	bfa8      	it	ge
 80050aa:	1b1c      	subge	r4, r3, r4
 80050ac:	9b07      	ldr	r3, [sp, #28]
 80050ae:	bfbe      	ittt	lt
 80050b0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80050b2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80050b4:	2400      	movlt	r4, #0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bfb5      	itete	lt
 80050ba:	eba8 0603 	sublt.w	r6, r8, r3
 80050be:	4646      	movge	r6, r8
 80050c0:	2300      	movlt	r3, #0
 80050c2:	9b07      	ldrge	r3, [sp, #28]
 80050c4:	e730      	b.n	8004f28 <_dtoa_r+0x730>
 80050c6:	4646      	mov	r6, r8
 80050c8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80050ca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80050cc:	e735      	b.n	8004f3a <_dtoa_r+0x742>
 80050ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050d0:	e75c      	b.n	8004f8c <_dtoa_r+0x794>
 80050d2:	2300      	movs	r3, #0
 80050d4:	e788      	b.n	8004fe8 <_dtoa_r+0x7f0>
 80050d6:	9b02      	ldr	r3, [sp, #8]
 80050d8:	e786      	b.n	8004fe8 <_dtoa_r+0x7f0>
 80050da:	2300      	movs	r3, #0
 80050dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80050de:	e788      	b.n	8004ff2 <_dtoa_r+0x7fa>
 80050e0:	d09f      	beq.n	8005022 <_dtoa_r+0x82a>
 80050e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050e4:	331c      	adds	r3, #28
 80050e6:	441a      	add	r2, r3
 80050e8:	4498      	add	r8, r3
 80050ea:	441e      	add	r6, r3
 80050ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80050ee:	e798      	b.n	8005022 <_dtoa_r+0x82a>
 80050f0:	4603      	mov	r3, r0
 80050f2:	e7f6      	b.n	80050e2 <_dtoa_r+0x8ea>
 80050f4:	9b07      	ldr	r3, [sp, #28]
 80050f6:	9704      	str	r7, [sp, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	dc20      	bgt.n	800513e <_dtoa_r+0x946>
 80050fc:	9308      	str	r3, [sp, #32]
 80050fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005100:	2b02      	cmp	r3, #2
 8005102:	dd1e      	ble.n	8005142 <_dtoa_r+0x94a>
 8005104:	9b08      	ldr	r3, [sp, #32]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f47f aebc 	bne.w	8004e84 <_dtoa_r+0x68c>
 800510c:	4621      	mov	r1, r4
 800510e:	2205      	movs	r2, #5
 8005110:	4658      	mov	r0, fp
 8005112:	f000 fa99 	bl	8005648 <__multadd>
 8005116:	4601      	mov	r1, r0
 8005118:	4604      	mov	r4, r0
 800511a:	4648      	mov	r0, r9
 800511c:	f000 fcaa 	bl	8005a74 <__mcmp>
 8005120:	2800      	cmp	r0, #0
 8005122:	f77f aeaf 	ble.w	8004e84 <_dtoa_r+0x68c>
 8005126:	2331      	movs	r3, #49	@ 0x31
 8005128:	4656      	mov	r6, sl
 800512a:	f806 3b01 	strb.w	r3, [r6], #1
 800512e:	9b04      	ldr	r3, [sp, #16]
 8005130:	3301      	adds	r3, #1
 8005132:	9304      	str	r3, [sp, #16]
 8005134:	e6aa      	b.n	8004e8c <_dtoa_r+0x694>
 8005136:	9c07      	ldr	r4, [sp, #28]
 8005138:	9704      	str	r7, [sp, #16]
 800513a:	4625      	mov	r5, r4
 800513c:	e7f3      	b.n	8005126 <_dtoa_r+0x92e>
 800513e:	9b07      	ldr	r3, [sp, #28]
 8005140:	9308      	str	r3, [sp, #32]
 8005142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8104 	beq.w	8005352 <_dtoa_r+0xb5a>
 800514a:	2e00      	cmp	r6, #0
 800514c:	dd05      	ble.n	800515a <_dtoa_r+0x962>
 800514e:	4629      	mov	r1, r5
 8005150:	4632      	mov	r2, r6
 8005152:	4658      	mov	r0, fp
 8005154:	f000 fc22 	bl	800599c <__lshift>
 8005158:	4605      	mov	r5, r0
 800515a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	d05a      	beq.n	8005216 <_dtoa_r+0xa1e>
 8005160:	4658      	mov	r0, fp
 8005162:	6869      	ldr	r1, [r5, #4]
 8005164:	f000 fa0e 	bl	8005584 <_Balloc>
 8005168:	4606      	mov	r6, r0
 800516a:	b928      	cbnz	r0, 8005178 <_dtoa_r+0x980>
 800516c:	4602      	mov	r2, r0
 800516e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005172:	4b83      	ldr	r3, [pc, #524]	@ (8005380 <_dtoa_r+0xb88>)
 8005174:	f7ff bb54 	b.w	8004820 <_dtoa_r+0x28>
 8005178:	692a      	ldr	r2, [r5, #16]
 800517a:	f105 010c 	add.w	r1, r5, #12
 800517e:	3202      	adds	r2, #2
 8005180:	0092      	lsls	r2, r2, #2
 8005182:	300c      	adds	r0, #12
 8005184:	f7ff fa9f 	bl	80046c6 <memcpy>
 8005188:	2201      	movs	r2, #1
 800518a:	4631      	mov	r1, r6
 800518c:	4658      	mov	r0, fp
 800518e:	f000 fc05 	bl	800599c <__lshift>
 8005192:	462f      	mov	r7, r5
 8005194:	4605      	mov	r5, r0
 8005196:	f10a 0301 	add.w	r3, sl, #1
 800519a:	9307      	str	r3, [sp, #28]
 800519c:	9b08      	ldr	r3, [sp, #32]
 800519e:	4453      	add	r3, sl
 80051a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051a2:	9b02      	ldr	r3, [sp, #8]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80051aa:	9b07      	ldr	r3, [sp, #28]
 80051ac:	4621      	mov	r1, r4
 80051ae:	3b01      	subs	r3, #1
 80051b0:	4648      	mov	r0, r9
 80051b2:	9302      	str	r3, [sp, #8]
 80051b4:	f7ff fa95 	bl	80046e2 <quorem>
 80051b8:	4639      	mov	r1, r7
 80051ba:	9008      	str	r0, [sp, #32]
 80051bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80051c0:	4648      	mov	r0, r9
 80051c2:	f000 fc57 	bl	8005a74 <__mcmp>
 80051c6:	462a      	mov	r2, r5
 80051c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80051ca:	4621      	mov	r1, r4
 80051cc:	4658      	mov	r0, fp
 80051ce:	f000 fc6d 	bl	8005aac <__mdiff>
 80051d2:	68c2      	ldr	r2, [r0, #12]
 80051d4:	4606      	mov	r6, r0
 80051d6:	bb02      	cbnz	r2, 800521a <_dtoa_r+0xa22>
 80051d8:	4601      	mov	r1, r0
 80051da:	4648      	mov	r0, r9
 80051dc:	f000 fc4a 	bl	8005a74 <__mcmp>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4631      	mov	r1, r6
 80051e4:	4658      	mov	r0, fp
 80051e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80051e8:	f000 fa0c 	bl	8005604 <_Bfree>
 80051ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051f0:	9e07      	ldr	r6, [sp, #28]
 80051f2:	ea43 0102 	orr.w	r1, r3, r2
 80051f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051f8:	4319      	orrs	r1, r3
 80051fa:	d110      	bne.n	800521e <_dtoa_r+0xa26>
 80051fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005200:	d029      	beq.n	8005256 <_dtoa_r+0xa5e>
 8005202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	dd02      	ble.n	800520e <_dtoa_r+0xa16>
 8005208:	9b08      	ldr	r3, [sp, #32]
 800520a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800520e:	9b02      	ldr	r3, [sp, #8]
 8005210:	f883 8000 	strb.w	r8, [r3]
 8005214:	e63b      	b.n	8004e8e <_dtoa_r+0x696>
 8005216:	4628      	mov	r0, r5
 8005218:	e7bb      	b.n	8005192 <_dtoa_r+0x99a>
 800521a:	2201      	movs	r2, #1
 800521c:	e7e1      	b.n	80051e2 <_dtoa_r+0x9ea>
 800521e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	db04      	blt.n	800522e <_dtoa_r+0xa36>
 8005224:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005226:	430b      	orrs	r3, r1
 8005228:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800522a:	430b      	orrs	r3, r1
 800522c:	d120      	bne.n	8005270 <_dtoa_r+0xa78>
 800522e:	2a00      	cmp	r2, #0
 8005230:	dded      	ble.n	800520e <_dtoa_r+0xa16>
 8005232:	4649      	mov	r1, r9
 8005234:	2201      	movs	r2, #1
 8005236:	4658      	mov	r0, fp
 8005238:	f000 fbb0 	bl	800599c <__lshift>
 800523c:	4621      	mov	r1, r4
 800523e:	4681      	mov	r9, r0
 8005240:	f000 fc18 	bl	8005a74 <__mcmp>
 8005244:	2800      	cmp	r0, #0
 8005246:	dc03      	bgt.n	8005250 <_dtoa_r+0xa58>
 8005248:	d1e1      	bne.n	800520e <_dtoa_r+0xa16>
 800524a:	f018 0f01 	tst.w	r8, #1
 800524e:	d0de      	beq.n	800520e <_dtoa_r+0xa16>
 8005250:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005254:	d1d8      	bne.n	8005208 <_dtoa_r+0xa10>
 8005256:	2339      	movs	r3, #57	@ 0x39
 8005258:	9a02      	ldr	r2, [sp, #8]
 800525a:	7013      	strb	r3, [r2, #0]
 800525c:	4633      	mov	r3, r6
 800525e:	461e      	mov	r6, r3
 8005260:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005264:	3b01      	subs	r3, #1
 8005266:	2a39      	cmp	r2, #57	@ 0x39
 8005268:	d052      	beq.n	8005310 <_dtoa_r+0xb18>
 800526a:	3201      	adds	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e60e      	b.n	8004e8e <_dtoa_r+0x696>
 8005270:	2a00      	cmp	r2, #0
 8005272:	dd07      	ble.n	8005284 <_dtoa_r+0xa8c>
 8005274:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005278:	d0ed      	beq.n	8005256 <_dtoa_r+0xa5e>
 800527a:	9a02      	ldr	r2, [sp, #8]
 800527c:	f108 0301 	add.w	r3, r8, #1
 8005280:	7013      	strb	r3, [r2, #0]
 8005282:	e604      	b.n	8004e8e <_dtoa_r+0x696>
 8005284:	9b07      	ldr	r3, [sp, #28]
 8005286:	9a07      	ldr	r2, [sp, #28]
 8005288:	f803 8c01 	strb.w	r8, [r3, #-1]
 800528c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800528e:	4293      	cmp	r3, r2
 8005290:	d028      	beq.n	80052e4 <_dtoa_r+0xaec>
 8005292:	4649      	mov	r1, r9
 8005294:	2300      	movs	r3, #0
 8005296:	220a      	movs	r2, #10
 8005298:	4658      	mov	r0, fp
 800529a:	f000 f9d5 	bl	8005648 <__multadd>
 800529e:	42af      	cmp	r7, r5
 80052a0:	4681      	mov	r9, r0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	f04f 020a 	mov.w	r2, #10
 80052aa:	4639      	mov	r1, r7
 80052ac:	4658      	mov	r0, fp
 80052ae:	d107      	bne.n	80052c0 <_dtoa_r+0xac8>
 80052b0:	f000 f9ca 	bl	8005648 <__multadd>
 80052b4:	4607      	mov	r7, r0
 80052b6:	4605      	mov	r5, r0
 80052b8:	9b07      	ldr	r3, [sp, #28]
 80052ba:	3301      	adds	r3, #1
 80052bc:	9307      	str	r3, [sp, #28]
 80052be:	e774      	b.n	80051aa <_dtoa_r+0x9b2>
 80052c0:	f000 f9c2 	bl	8005648 <__multadd>
 80052c4:	4629      	mov	r1, r5
 80052c6:	4607      	mov	r7, r0
 80052c8:	2300      	movs	r3, #0
 80052ca:	220a      	movs	r2, #10
 80052cc:	4658      	mov	r0, fp
 80052ce:	f000 f9bb 	bl	8005648 <__multadd>
 80052d2:	4605      	mov	r5, r0
 80052d4:	e7f0      	b.n	80052b8 <_dtoa_r+0xac0>
 80052d6:	9b08      	ldr	r3, [sp, #32]
 80052d8:	2700      	movs	r7, #0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bfcc      	ite	gt
 80052de:	461e      	movgt	r6, r3
 80052e0:	2601      	movle	r6, #1
 80052e2:	4456      	add	r6, sl
 80052e4:	4649      	mov	r1, r9
 80052e6:	2201      	movs	r2, #1
 80052e8:	4658      	mov	r0, fp
 80052ea:	f000 fb57 	bl	800599c <__lshift>
 80052ee:	4621      	mov	r1, r4
 80052f0:	4681      	mov	r9, r0
 80052f2:	f000 fbbf 	bl	8005a74 <__mcmp>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	dcb0      	bgt.n	800525c <_dtoa_r+0xa64>
 80052fa:	d102      	bne.n	8005302 <_dtoa_r+0xb0a>
 80052fc:	f018 0f01 	tst.w	r8, #1
 8005300:	d1ac      	bne.n	800525c <_dtoa_r+0xa64>
 8005302:	4633      	mov	r3, r6
 8005304:	461e      	mov	r6, r3
 8005306:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800530a:	2a30      	cmp	r2, #48	@ 0x30
 800530c:	d0fa      	beq.n	8005304 <_dtoa_r+0xb0c>
 800530e:	e5be      	b.n	8004e8e <_dtoa_r+0x696>
 8005310:	459a      	cmp	sl, r3
 8005312:	d1a4      	bne.n	800525e <_dtoa_r+0xa66>
 8005314:	9b04      	ldr	r3, [sp, #16]
 8005316:	3301      	adds	r3, #1
 8005318:	9304      	str	r3, [sp, #16]
 800531a:	2331      	movs	r3, #49	@ 0x31
 800531c:	f88a 3000 	strb.w	r3, [sl]
 8005320:	e5b5      	b.n	8004e8e <_dtoa_r+0x696>
 8005322:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005324:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005384 <_dtoa_r+0xb8c>
 8005328:	b11b      	cbz	r3, 8005332 <_dtoa_r+0xb3a>
 800532a:	f10a 0308 	add.w	r3, sl, #8
 800532e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	4650      	mov	r0, sl
 8005334:	b017      	add	sp, #92	@ 0x5c
 8005336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800533a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800533c:	2b01      	cmp	r3, #1
 800533e:	f77f ae3d 	ble.w	8004fbc <_dtoa_r+0x7c4>
 8005342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005344:	930a      	str	r3, [sp, #40]	@ 0x28
 8005346:	2001      	movs	r0, #1
 8005348:	e65b      	b.n	8005002 <_dtoa_r+0x80a>
 800534a:	9b08      	ldr	r3, [sp, #32]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f77f aed6 	ble.w	80050fe <_dtoa_r+0x906>
 8005352:	4656      	mov	r6, sl
 8005354:	4621      	mov	r1, r4
 8005356:	4648      	mov	r0, r9
 8005358:	f7ff f9c3 	bl	80046e2 <quorem>
 800535c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005360:	9b08      	ldr	r3, [sp, #32]
 8005362:	f806 8b01 	strb.w	r8, [r6], #1
 8005366:	eba6 020a 	sub.w	r2, r6, sl
 800536a:	4293      	cmp	r3, r2
 800536c:	ddb3      	ble.n	80052d6 <_dtoa_r+0xade>
 800536e:	4649      	mov	r1, r9
 8005370:	2300      	movs	r3, #0
 8005372:	220a      	movs	r2, #10
 8005374:	4658      	mov	r0, fp
 8005376:	f000 f967 	bl	8005648 <__multadd>
 800537a:	4681      	mov	r9, r0
 800537c:	e7ea      	b.n	8005354 <_dtoa_r+0xb5c>
 800537e:	bf00      	nop
 8005380:	08006e0b 	.word	0x08006e0b
 8005384:	08006d8f 	.word	0x08006d8f

08005388 <_free_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4605      	mov	r5, r0
 800538c:	2900      	cmp	r1, #0
 800538e:	d040      	beq.n	8005412 <_free_r+0x8a>
 8005390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005394:	1f0c      	subs	r4, r1, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	bfb8      	it	lt
 800539a:	18e4      	addlt	r4, r4, r3
 800539c:	f000 f8e6 	bl	800556c <__malloc_lock>
 80053a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005414 <_free_r+0x8c>)
 80053a2:	6813      	ldr	r3, [r2, #0]
 80053a4:	b933      	cbnz	r3, 80053b4 <_free_r+0x2c>
 80053a6:	6063      	str	r3, [r4, #4]
 80053a8:	6014      	str	r4, [r2, #0]
 80053aa:	4628      	mov	r0, r5
 80053ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053b0:	f000 b8e2 	b.w	8005578 <__malloc_unlock>
 80053b4:	42a3      	cmp	r3, r4
 80053b6:	d908      	bls.n	80053ca <_free_r+0x42>
 80053b8:	6820      	ldr	r0, [r4, #0]
 80053ba:	1821      	adds	r1, r4, r0
 80053bc:	428b      	cmp	r3, r1
 80053be:	bf01      	itttt	eq
 80053c0:	6819      	ldreq	r1, [r3, #0]
 80053c2:	685b      	ldreq	r3, [r3, #4]
 80053c4:	1809      	addeq	r1, r1, r0
 80053c6:	6021      	streq	r1, [r4, #0]
 80053c8:	e7ed      	b.n	80053a6 <_free_r+0x1e>
 80053ca:	461a      	mov	r2, r3
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	b10b      	cbz	r3, 80053d4 <_free_r+0x4c>
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	d9fa      	bls.n	80053ca <_free_r+0x42>
 80053d4:	6811      	ldr	r1, [r2, #0]
 80053d6:	1850      	adds	r0, r2, r1
 80053d8:	42a0      	cmp	r0, r4
 80053da:	d10b      	bne.n	80053f4 <_free_r+0x6c>
 80053dc:	6820      	ldr	r0, [r4, #0]
 80053de:	4401      	add	r1, r0
 80053e0:	1850      	adds	r0, r2, r1
 80053e2:	4283      	cmp	r3, r0
 80053e4:	6011      	str	r1, [r2, #0]
 80053e6:	d1e0      	bne.n	80053aa <_free_r+0x22>
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4408      	add	r0, r1
 80053ee:	6010      	str	r0, [r2, #0]
 80053f0:	6053      	str	r3, [r2, #4]
 80053f2:	e7da      	b.n	80053aa <_free_r+0x22>
 80053f4:	d902      	bls.n	80053fc <_free_r+0x74>
 80053f6:	230c      	movs	r3, #12
 80053f8:	602b      	str	r3, [r5, #0]
 80053fa:	e7d6      	b.n	80053aa <_free_r+0x22>
 80053fc:	6820      	ldr	r0, [r4, #0]
 80053fe:	1821      	adds	r1, r4, r0
 8005400:	428b      	cmp	r3, r1
 8005402:	bf01      	itttt	eq
 8005404:	6819      	ldreq	r1, [r3, #0]
 8005406:	685b      	ldreq	r3, [r3, #4]
 8005408:	1809      	addeq	r1, r1, r0
 800540a:	6021      	streq	r1, [r4, #0]
 800540c:	6063      	str	r3, [r4, #4]
 800540e:	6054      	str	r4, [r2, #4]
 8005410:	e7cb      	b.n	80053aa <_free_r+0x22>
 8005412:	bd38      	pop	{r3, r4, r5, pc}
 8005414:	20000520 	.word	0x20000520

08005418 <malloc>:
 8005418:	4b02      	ldr	r3, [pc, #8]	@ (8005424 <malloc+0xc>)
 800541a:	4601      	mov	r1, r0
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	f000 b825 	b.w	800546c <_malloc_r>
 8005422:	bf00      	nop
 8005424:	20000010 	.word	0x20000010

08005428 <sbrk_aligned>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	4e0f      	ldr	r6, [pc, #60]	@ (8005468 <sbrk_aligned+0x40>)
 800542c:	460c      	mov	r4, r1
 800542e:	6831      	ldr	r1, [r6, #0]
 8005430:	4605      	mov	r5, r0
 8005432:	b911      	cbnz	r1, 800543a <sbrk_aligned+0x12>
 8005434:	f000 fcce 	bl	8005dd4 <_sbrk_r>
 8005438:	6030      	str	r0, [r6, #0]
 800543a:	4621      	mov	r1, r4
 800543c:	4628      	mov	r0, r5
 800543e:	f000 fcc9 	bl	8005dd4 <_sbrk_r>
 8005442:	1c43      	adds	r3, r0, #1
 8005444:	d103      	bne.n	800544e <sbrk_aligned+0x26>
 8005446:	f04f 34ff 	mov.w	r4, #4294967295
 800544a:	4620      	mov	r0, r4
 800544c:	bd70      	pop	{r4, r5, r6, pc}
 800544e:	1cc4      	adds	r4, r0, #3
 8005450:	f024 0403 	bic.w	r4, r4, #3
 8005454:	42a0      	cmp	r0, r4
 8005456:	d0f8      	beq.n	800544a <sbrk_aligned+0x22>
 8005458:	1a21      	subs	r1, r4, r0
 800545a:	4628      	mov	r0, r5
 800545c:	f000 fcba 	bl	8005dd4 <_sbrk_r>
 8005460:	3001      	adds	r0, #1
 8005462:	d1f2      	bne.n	800544a <sbrk_aligned+0x22>
 8005464:	e7ef      	b.n	8005446 <sbrk_aligned+0x1e>
 8005466:	bf00      	nop
 8005468:	2000051c 	.word	0x2000051c

0800546c <_malloc_r>:
 800546c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005470:	1ccd      	adds	r5, r1, #3
 8005472:	f025 0503 	bic.w	r5, r5, #3
 8005476:	3508      	adds	r5, #8
 8005478:	2d0c      	cmp	r5, #12
 800547a:	bf38      	it	cc
 800547c:	250c      	movcc	r5, #12
 800547e:	2d00      	cmp	r5, #0
 8005480:	4606      	mov	r6, r0
 8005482:	db01      	blt.n	8005488 <_malloc_r+0x1c>
 8005484:	42a9      	cmp	r1, r5
 8005486:	d904      	bls.n	8005492 <_malloc_r+0x26>
 8005488:	230c      	movs	r3, #12
 800548a:	6033      	str	r3, [r6, #0]
 800548c:	2000      	movs	r0, #0
 800548e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005492:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005568 <_malloc_r+0xfc>
 8005496:	f000 f869 	bl	800556c <__malloc_lock>
 800549a:	f8d8 3000 	ldr.w	r3, [r8]
 800549e:	461c      	mov	r4, r3
 80054a0:	bb44      	cbnz	r4, 80054f4 <_malloc_r+0x88>
 80054a2:	4629      	mov	r1, r5
 80054a4:	4630      	mov	r0, r6
 80054a6:	f7ff ffbf 	bl	8005428 <sbrk_aligned>
 80054aa:	1c43      	adds	r3, r0, #1
 80054ac:	4604      	mov	r4, r0
 80054ae:	d158      	bne.n	8005562 <_malloc_r+0xf6>
 80054b0:	f8d8 4000 	ldr.w	r4, [r8]
 80054b4:	4627      	mov	r7, r4
 80054b6:	2f00      	cmp	r7, #0
 80054b8:	d143      	bne.n	8005542 <_malloc_r+0xd6>
 80054ba:	2c00      	cmp	r4, #0
 80054bc:	d04b      	beq.n	8005556 <_malloc_r+0xea>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	4639      	mov	r1, r7
 80054c2:	4630      	mov	r0, r6
 80054c4:	eb04 0903 	add.w	r9, r4, r3
 80054c8:	f000 fc84 	bl	8005dd4 <_sbrk_r>
 80054cc:	4581      	cmp	r9, r0
 80054ce:	d142      	bne.n	8005556 <_malloc_r+0xea>
 80054d0:	6821      	ldr	r1, [r4, #0]
 80054d2:	4630      	mov	r0, r6
 80054d4:	1a6d      	subs	r5, r5, r1
 80054d6:	4629      	mov	r1, r5
 80054d8:	f7ff ffa6 	bl	8005428 <sbrk_aligned>
 80054dc:	3001      	adds	r0, #1
 80054de:	d03a      	beq.n	8005556 <_malloc_r+0xea>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	442b      	add	r3, r5
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	f8d8 3000 	ldr.w	r3, [r8]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	bb62      	cbnz	r2, 8005548 <_malloc_r+0xdc>
 80054ee:	f8c8 7000 	str.w	r7, [r8]
 80054f2:	e00f      	b.n	8005514 <_malloc_r+0xa8>
 80054f4:	6822      	ldr	r2, [r4, #0]
 80054f6:	1b52      	subs	r2, r2, r5
 80054f8:	d420      	bmi.n	800553c <_malloc_r+0xd0>
 80054fa:	2a0b      	cmp	r2, #11
 80054fc:	d917      	bls.n	800552e <_malloc_r+0xc2>
 80054fe:	1961      	adds	r1, r4, r5
 8005500:	42a3      	cmp	r3, r4
 8005502:	6025      	str	r5, [r4, #0]
 8005504:	bf18      	it	ne
 8005506:	6059      	strne	r1, [r3, #4]
 8005508:	6863      	ldr	r3, [r4, #4]
 800550a:	bf08      	it	eq
 800550c:	f8c8 1000 	streq.w	r1, [r8]
 8005510:	5162      	str	r2, [r4, r5]
 8005512:	604b      	str	r3, [r1, #4]
 8005514:	4630      	mov	r0, r6
 8005516:	f000 f82f 	bl	8005578 <__malloc_unlock>
 800551a:	f104 000b 	add.w	r0, r4, #11
 800551e:	1d23      	adds	r3, r4, #4
 8005520:	f020 0007 	bic.w	r0, r0, #7
 8005524:	1ac2      	subs	r2, r0, r3
 8005526:	bf1c      	itt	ne
 8005528:	1a1b      	subne	r3, r3, r0
 800552a:	50a3      	strne	r3, [r4, r2]
 800552c:	e7af      	b.n	800548e <_malloc_r+0x22>
 800552e:	6862      	ldr	r2, [r4, #4]
 8005530:	42a3      	cmp	r3, r4
 8005532:	bf0c      	ite	eq
 8005534:	f8c8 2000 	streq.w	r2, [r8]
 8005538:	605a      	strne	r2, [r3, #4]
 800553a:	e7eb      	b.n	8005514 <_malloc_r+0xa8>
 800553c:	4623      	mov	r3, r4
 800553e:	6864      	ldr	r4, [r4, #4]
 8005540:	e7ae      	b.n	80054a0 <_malloc_r+0x34>
 8005542:	463c      	mov	r4, r7
 8005544:	687f      	ldr	r7, [r7, #4]
 8005546:	e7b6      	b.n	80054b6 <_malloc_r+0x4a>
 8005548:	461a      	mov	r2, r3
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	42a3      	cmp	r3, r4
 800554e:	d1fb      	bne.n	8005548 <_malloc_r+0xdc>
 8005550:	2300      	movs	r3, #0
 8005552:	6053      	str	r3, [r2, #4]
 8005554:	e7de      	b.n	8005514 <_malloc_r+0xa8>
 8005556:	230c      	movs	r3, #12
 8005558:	4630      	mov	r0, r6
 800555a:	6033      	str	r3, [r6, #0]
 800555c:	f000 f80c 	bl	8005578 <__malloc_unlock>
 8005560:	e794      	b.n	800548c <_malloc_r+0x20>
 8005562:	6005      	str	r5, [r0, #0]
 8005564:	e7d6      	b.n	8005514 <_malloc_r+0xa8>
 8005566:	bf00      	nop
 8005568:	20000520 	.word	0x20000520

0800556c <__malloc_lock>:
 800556c:	4801      	ldr	r0, [pc, #4]	@ (8005574 <__malloc_lock+0x8>)
 800556e:	f7ff b89a 	b.w	80046a6 <__retarget_lock_acquire_recursive>
 8005572:	bf00      	nop
 8005574:	20000518 	.word	0x20000518

08005578 <__malloc_unlock>:
 8005578:	4801      	ldr	r0, [pc, #4]	@ (8005580 <__malloc_unlock+0x8>)
 800557a:	f7ff b895 	b.w	80046a8 <__retarget_lock_release_recursive>
 800557e:	bf00      	nop
 8005580:	20000518 	.word	0x20000518

08005584 <_Balloc>:
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	69c6      	ldr	r6, [r0, #28]
 8005588:	4604      	mov	r4, r0
 800558a:	460d      	mov	r5, r1
 800558c:	b976      	cbnz	r6, 80055ac <_Balloc+0x28>
 800558e:	2010      	movs	r0, #16
 8005590:	f7ff ff42 	bl	8005418 <malloc>
 8005594:	4602      	mov	r2, r0
 8005596:	61e0      	str	r0, [r4, #28]
 8005598:	b920      	cbnz	r0, 80055a4 <_Balloc+0x20>
 800559a:	216b      	movs	r1, #107	@ 0x6b
 800559c:	4b17      	ldr	r3, [pc, #92]	@ (80055fc <_Balloc+0x78>)
 800559e:	4818      	ldr	r0, [pc, #96]	@ (8005600 <_Balloc+0x7c>)
 80055a0:	f000 fc28 	bl	8005df4 <__assert_func>
 80055a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055a8:	6006      	str	r6, [r0, #0]
 80055aa:	60c6      	str	r6, [r0, #12]
 80055ac:	69e6      	ldr	r6, [r4, #28]
 80055ae:	68f3      	ldr	r3, [r6, #12]
 80055b0:	b183      	cbz	r3, 80055d4 <_Balloc+0x50>
 80055b2:	69e3      	ldr	r3, [r4, #28]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055ba:	b9b8      	cbnz	r0, 80055ec <_Balloc+0x68>
 80055bc:	2101      	movs	r1, #1
 80055be:	fa01 f605 	lsl.w	r6, r1, r5
 80055c2:	1d72      	adds	r2, r6, #5
 80055c4:	4620      	mov	r0, r4
 80055c6:	0092      	lsls	r2, r2, #2
 80055c8:	f000 fc32 	bl	8005e30 <_calloc_r>
 80055cc:	b160      	cbz	r0, 80055e8 <_Balloc+0x64>
 80055ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055d2:	e00e      	b.n	80055f2 <_Balloc+0x6e>
 80055d4:	2221      	movs	r2, #33	@ 0x21
 80055d6:	2104      	movs	r1, #4
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 fc29 	bl	8005e30 <_calloc_r>
 80055de:	69e3      	ldr	r3, [r4, #28]
 80055e0:	60f0      	str	r0, [r6, #12]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e4      	bne.n	80055b2 <_Balloc+0x2e>
 80055e8:	2000      	movs	r0, #0
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
 80055ec:	6802      	ldr	r2, [r0, #0]
 80055ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055f2:	2300      	movs	r3, #0
 80055f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055f8:	e7f7      	b.n	80055ea <_Balloc+0x66>
 80055fa:	bf00      	nop
 80055fc:	08006d9c 	.word	0x08006d9c
 8005600:	08006e1c 	.word	0x08006e1c

08005604 <_Bfree>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	69c6      	ldr	r6, [r0, #28]
 8005608:	4605      	mov	r5, r0
 800560a:	460c      	mov	r4, r1
 800560c:	b976      	cbnz	r6, 800562c <_Bfree+0x28>
 800560e:	2010      	movs	r0, #16
 8005610:	f7ff ff02 	bl	8005418 <malloc>
 8005614:	4602      	mov	r2, r0
 8005616:	61e8      	str	r0, [r5, #28]
 8005618:	b920      	cbnz	r0, 8005624 <_Bfree+0x20>
 800561a:	218f      	movs	r1, #143	@ 0x8f
 800561c:	4b08      	ldr	r3, [pc, #32]	@ (8005640 <_Bfree+0x3c>)
 800561e:	4809      	ldr	r0, [pc, #36]	@ (8005644 <_Bfree+0x40>)
 8005620:	f000 fbe8 	bl	8005df4 <__assert_func>
 8005624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005628:	6006      	str	r6, [r0, #0]
 800562a:	60c6      	str	r6, [r0, #12]
 800562c:	b13c      	cbz	r4, 800563e <_Bfree+0x3a>
 800562e:	69eb      	ldr	r3, [r5, #28]
 8005630:	6862      	ldr	r2, [r4, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005638:	6021      	str	r1, [r4, #0]
 800563a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	08006d9c 	.word	0x08006d9c
 8005644:	08006e1c 	.word	0x08006e1c

08005648 <__multadd>:
 8005648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800564c:	4607      	mov	r7, r0
 800564e:	460c      	mov	r4, r1
 8005650:	461e      	mov	r6, r3
 8005652:	2000      	movs	r0, #0
 8005654:	690d      	ldr	r5, [r1, #16]
 8005656:	f101 0c14 	add.w	ip, r1, #20
 800565a:	f8dc 3000 	ldr.w	r3, [ip]
 800565e:	3001      	adds	r0, #1
 8005660:	b299      	uxth	r1, r3
 8005662:	fb02 6101 	mla	r1, r2, r1, r6
 8005666:	0c1e      	lsrs	r6, r3, #16
 8005668:	0c0b      	lsrs	r3, r1, #16
 800566a:	fb02 3306 	mla	r3, r2, r6, r3
 800566e:	b289      	uxth	r1, r1
 8005670:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005674:	4285      	cmp	r5, r0
 8005676:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800567a:	f84c 1b04 	str.w	r1, [ip], #4
 800567e:	dcec      	bgt.n	800565a <__multadd+0x12>
 8005680:	b30e      	cbz	r6, 80056c6 <__multadd+0x7e>
 8005682:	68a3      	ldr	r3, [r4, #8]
 8005684:	42ab      	cmp	r3, r5
 8005686:	dc19      	bgt.n	80056bc <__multadd+0x74>
 8005688:	6861      	ldr	r1, [r4, #4]
 800568a:	4638      	mov	r0, r7
 800568c:	3101      	adds	r1, #1
 800568e:	f7ff ff79 	bl	8005584 <_Balloc>
 8005692:	4680      	mov	r8, r0
 8005694:	b928      	cbnz	r0, 80056a2 <__multadd+0x5a>
 8005696:	4602      	mov	r2, r0
 8005698:	21ba      	movs	r1, #186	@ 0xba
 800569a:	4b0c      	ldr	r3, [pc, #48]	@ (80056cc <__multadd+0x84>)
 800569c:	480c      	ldr	r0, [pc, #48]	@ (80056d0 <__multadd+0x88>)
 800569e:	f000 fba9 	bl	8005df4 <__assert_func>
 80056a2:	6922      	ldr	r2, [r4, #16]
 80056a4:	f104 010c 	add.w	r1, r4, #12
 80056a8:	3202      	adds	r2, #2
 80056aa:	0092      	lsls	r2, r2, #2
 80056ac:	300c      	adds	r0, #12
 80056ae:	f7ff f80a 	bl	80046c6 <memcpy>
 80056b2:	4621      	mov	r1, r4
 80056b4:	4638      	mov	r0, r7
 80056b6:	f7ff ffa5 	bl	8005604 <_Bfree>
 80056ba:	4644      	mov	r4, r8
 80056bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80056c0:	3501      	adds	r5, #1
 80056c2:	615e      	str	r6, [r3, #20]
 80056c4:	6125      	str	r5, [r4, #16]
 80056c6:	4620      	mov	r0, r4
 80056c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056cc:	08006e0b 	.word	0x08006e0b
 80056d0:	08006e1c 	.word	0x08006e1c

080056d4 <__hi0bits>:
 80056d4:	4603      	mov	r3, r0
 80056d6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80056da:	bf3a      	itte	cc
 80056dc:	0403      	lslcc	r3, r0, #16
 80056de:	2010      	movcc	r0, #16
 80056e0:	2000      	movcs	r0, #0
 80056e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056e6:	bf3c      	itt	cc
 80056e8:	021b      	lslcc	r3, r3, #8
 80056ea:	3008      	addcc	r0, #8
 80056ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056f0:	bf3c      	itt	cc
 80056f2:	011b      	lslcc	r3, r3, #4
 80056f4:	3004      	addcc	r0, #4
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056fa:	bf3c      	itt	cc
 80056fc:	009b      	lslcc	r3, r3, #2
 80056fe:	3002      	addcc	r0, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	db05      	blt.n	8005710 <__hi0bits+0x3c>
 8005704:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005708:	f100 0001 	add.w	r0, r0, #1
 800570c:	bf08      	it	eq
 800570e:	2020      	moveq	r0, #32
 8005710:	4770      	bx	lr

08005712 <__lo0bits>:
 8005712:	6803      	ldr	r3, [r0, #0]
 8005714:	4602      	mov	r2, r0
 8005716:	f013 0007 	ands.w	r0, r3, #7
 800571a:	d00b      	beq.n	8005734 <__lo0bits+0x22>
 800571c:	07d9      	lsls	r1, r3, #31
 800571e:	d421      	bmi.n	8005764 <__lo0bits+0x52>
 8005720:	0798      	lsls	r0, r3, #30
 8005722:	bf49      	itett	mi
 8005724:	085b      	lsrmi	r3, r3, #1
 8005726:	089b      	lsrpl	r3, r3, #2
 8005728:	2001      	movmi	r0, #1
 800572a:	6013      	strmi	r3, [r2, #0]
 800572c:	bf5c      	itt	pl
 800572e:	2002      	movpl	r0, #2
 8005730:	6013      	strpl	r3, [r2, #0]
 8005732:	4770      	bx	lr
 8005734:	b299      	uxth	r1, r3
 8005736:	b909      	cbnz	r1, 800573c <__lo0bits+0x2a>
 8005738:	2010      	movs	r0, #16
 800573a:	0c1b      	lsrs	r3, r3, #16
 800573c:	b2d9      	uxtb	r1, r3
 800573e:	b909      	cbnz	r1, 8005744 <__lo0bits+0x32>
 8005740:	3008      	adds	r0, #8
 8005742:	0a1b      	lsrs	r3, r3, #8
 8005744:	0719      	lsls	r1, r3, #28
 8005746:	bf04      	itt	eq
 8005748:	091b      	lsreq	r3, r3, #4
 800574a:	3004      	addeq	r0, #4
 800574c:	0799      	lsls	r1, r3, #30
 800574e:	bf04      	itt	eq
 8005750:	089b      	lsreq	r3, r3, #2
 8005752:	3002      	addeq	r0, #2
 8005754:	07d9      	lsls	r1, r3, #31
 8005756:	d403      	bmi.n	8005760 <__lo0bits+0x4e>
 8005758:	085b      	lsrs	r3, r3, #1
 800575a:	f100 0001 	add.w	r0, r0, #1
 800575e:	d003      	beq.n	8005768 <__lo0bits+0x56>
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	4770      	bx	lr
 8005764:	2000      	movs	r0, #0
 8005766:	4770      	bx	lr
 8005768:	2020      	movs	r0, #32
 800576a:	4770      	bx	lr

0800576c <__i2b>:
 800576c:	b510      	push	{r4, lr}
 800576e:	460c      	mov	r4, r1
 8005770:	2101      	movs	r1, #1
 8005772:	f7ff ff07 	bl	8005584 <_Balloc>
 8005776:	4602      	mov	r2, r0
 8005778:	b928      	cbnz	r0, 8005786 <__i2b+0x1a>
 800577a:	f240 1145 	movw	r1, #325	@ 0x145
 800577e:	4b04      	ldr	r3, [pc, #16]	@ (8005790 <__i2b+0x24>)
 8005780:	4804      	ldr	r0, [pc, #16]	@ (8005794 <__i2b+0x28>)
 8005782:	f000 fb37 	bl	8005df4 <__assert_func>
 8005786:	2301      	movs	r3, #1
 8005788:	6144      	str	r4, [r0, #20]
 800578a:	6103      	str	r3, [r0, #16]
 800578c:	bd10      	pop	{r4, pc}
 800578e:	bf00      	nop
 8005790:	08006e0b 	.word	0x08006e0b
 8005794:	08006e1c 	.word	0x08006e1c

08005798 <__multiply>:
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	4614      	mov	r4, r2
 800579e:	690a      	ldr	r2, [r1, #16]
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	460f      	mov	r7, r1
 80057a4:	429a      	cmp	r2, r3
 80057a6:	bfa2      	ittt	ge
 80057a8:	4623      	movge	r3, r4
 80057aa:	460c      	movge	r4, r1
 80057ac:	461f      	movge	r7, r3
 80057ae:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80057b2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80057b6:	68a3      	ldr	r3, [r4, #8]
 80057b8:	6861      	ldr	r1, [r4, #4]
 80057ba:	eb0a 0609 	add.w	r6, sl, r9
 80057be:	42b3      	cmp	r3, r6
 80057c0:	b085      	sub	sp, #20
 80057c2:	bfb8      	it	lt
 80057c4:	3101      	addlt	r1, #1
 80057c6:	f7ff fedd 	bl	8005584 <_Balloc>
 80057ca:	b930      	cbnz	r0, 80057da <__multiply+0x42>
 80057cc:	4602      	mov	r2, r0
 80057ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80057d2:	4b43      	ldr	r3, [pc, #268]	@ (80058e0 <__multiply+0x148>)
 80057d4:	4843      	ldr	r0, [pc, #268]	@ (80058e4 <__multiply+0x14c>)
 80057d6:	f000 fb0d 	bl	8005df4 <__assert_func>
 80057da:	f100 0514 	add.w	r5, r0, #20
 80057de:	462b      	mov	r3, r5
 80057e0:	2200      	movs	r2, #0
 80057e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80057e6:	4543      	cmp	r3, r8
 80057e8:	d321      	bcc.n	800582e <__multiply+0x96>
 80057ea:	f107 0114 	add.w	r1, r7, #20
 80057ee:	f104 0214 	add.w	r2, r4, #20
 80057f2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80057f6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80057fa:	9302      	str	r3, [sp, #8]
 80057fc:	1b13      	subs	r3, r2, r4
 80057fe:	3b15      	subs	r3, #21
 8005800:	f023 0303 	bic.w	r3, r3, #3
 8005804:	3304      	adds	r3, #4
 8005806:	f104 0715 	add.w	r7, r4, #21
 800580a:	42ba      	cmp	r2, r7
 800580c:	bf38      	it	cc
 800580e:	2304      	movcc	r3, #4
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	9b02      	ldr	r3, [sp, #8]
 8005814:	9103      	str	r1, [sp, #12]
 8005816:	428b      	cmp	r3, r1
 8005818:	d80c      	bhi.n	8005834 <__multiply+0x9c>
 800581a:	2e00      	cmp	r6, #0
 800581c:	dd03      	ble.n	8005826 <__multiply+0x8e>
 800581e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005822:	2b00      	cmp	r3, #0
 8005824:	d05a      	beq.n	80058dc <__multiply+0x144>
 8005826:	6106      	str	r6, [r0, #16]
 8005828:	b005      	add	sp, #20
 800582a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582e:	f843 2b04 	str.w	r2, [r3], #4
 8005832:	e7d8      	b.n	80057e6 <__multiply+0x4e>
 8005834:	f8b1 a000 	ldrh.w	sl, [r1]
 8005838:	f1ba 0f00 	cmp.w	sl, #0
 800583c:	d023      	beq.n	8005886 <__multiply+0xee>
 800583e:	46a9      	mov	r9, r5
 8005840:	f04f 0c00 	mov.w	ip, #0
 8005844:	f104 0e14 	add.w	lr, r4, #20
 8005848:	f85e 7b04 	ldr.w	r7, [lr], #4
 800584c:	f8d9 3000 	ldr.w	r3, [r9]
 8005850:	fa1f fb87 	uxth.w	fp, r7
 8005854:	b29b      	uxth	r3, r3
 8005856:	fb0a 330b 	mla	r3, sl, fp, r3
 800585a:	4463      	add	r3, ip
 800585c:	f8d9 c000 	ldr.w	ip, [r9]
 8005860:	0c3f      	lsrs	r7, r7, #16
 8005862:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005866:	fb0a c707 	mla	r7, sl, r7, ip
 800586a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800586e:	b29b      	uxth	r3, r3
 8005870:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005874:	4572      	cmp	r2, lr
 8005876:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800587a:	f849 3b04 	str.w	r3, [r9], #4
 800587e:	d8e3      	bhi.n	8005848 <__multiply+0xb0>
 8005880:	9b01      	ldr	r3, [sp, #4]
 8005882:	f845 c003 	str.w	ip, [r5, r3]
 8005886:	9b03      	ldr	r3, [sp, #12]
 8005888:	3104      	adds	r1, #4
 800588a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800588e:	f1b9 0f00 	cmp.w	r9, #0
 8005892:	d021      	beq.n	80058d8 <__multiply+0x140>
 8005894:	46ae      	mov	lr, r5
 8005896:	f04f 0a00 	mov.w	sl, #0
 800589a:	682b      	ldr	r3, [r5, #0]
 800589c:	f104 0c14 	add.w	ip, r4, #20
 80058a0:	f8bc b000 	ldrh.w	fp, [ip]
 80058a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	fb09 770b 	mla	r7, r9, fp, r7
 80058ae:	4457      	add	r7, sl
 80058b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80058b4:	f84e 3b04 	str.w	r3, [lr], #4
 80058b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80058bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058c0:	f8be 3000 	ldrh.w	r3, [lr]
 80058c4:	4562      	cmp	r2, ip
 80058c6:	fb09 330a 	mla	r3, r9, sl, r3
 80058ca:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80058ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058d2:	d8e5      	bhi.n	80058a0 <__multiply+0x108>
 80058d4:	9f01      	ldr	r7, [sp, #4]
 80058d6:	51eb      	str	r3, [r5, r7]
 80058d8:	3504      	adds	r5, #4
 80058da:	e79a      	b.n	8005812 <__multiply+0x7a>
 80058dc:	3e01      	subs	r6, #1
 80058de:	e79c      	b.n	800581a <__multiply+0x82>
 80058e0:	08006e0b 	.word	0x08006e0b
 80058e4:	08006e1c 	.word	0x08006e1c

080058e8 <__pow5mult>:
 80058e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ec:	4615      	mov	r5, r2
 80058ee:	f012 0203 	ands.w	r2, r2, #3
 80058f2:	4607      	mov	r7, r0
 80058f4:	460e      	mov	r6, r1
 80058f6:	d007      	beq.n	8005908 <__pow5mult+0x20>
 80058f8:	4c25      	ldr	r4, [pc, #148]	@ (8005990 <__pow5mult+0xa8>)
 80058fa:	3a01      	subs	r2, #1
 80058fc:	2300      	movs	r3, #0
 80058fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005902:	f7ff fea1 	bl	8005648 <__multadd>
 8005906:	4606      	mov	r6, r0
 8005908:	10ad      	asrs	r5, r5, #2
 800590a:	d03d      	beq.n	8005988 <__pow5mult+0xa0>
 800590c:	69fc      	ldr	r4, [r7, #28]
 800590e:	b97c      	cbnz	r4, 8005930 <__pow5mult+0x48>
 8005910:	2010      	movs	r0, #16
 8005912:	f7ff fd81 	bl	8005418 <malloc>
 8005916:	4602      	mov	r2, r0
 8005918:	61f8      	str	r0, [r7, #28]
 800591a:	b928      	cbnz	r0, 8005928 <__pow5mult+0x40>
 800591c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005920:	4b1c      	ldr	r3, [pc, #112]	@ (8005994 <__pow5mult+0xac>)
 8005922:	481d      	ldr	r0, [pc, #116]	@ (8005998 <__pow5mult+0xb0>)
 8005924:	f000 fa66 	bl	8005df4 <__assert_func>
 8005928:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800592c:	6004      	str	r4, [r0, #0]
 800592e:	60c4      	str	r4, [r0, #12]
 8005930:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005934:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005938:	b94c      	cbnz	r4, 800594e <__pow5mult+0x66>
 800593a:	f240 2171 	movw	r1, #625	@ 0x271
 800593e:	4638      	mov	r0, r7
 8005940:	f7ff ff14 	bl	800576c <__i2b>
 8005944:	2300      	movs	r3, #0
 8005946:	4604      	mov	r4, r0
 8005948:	f8c8 0008 	str.w	r0, [r8, #8]
 800594c:	6003      	str	r3, [r0, #0]
 800594e:	f04f 0900 	mov.w	r9, #0
 8005952:	07eb      	lsls	r3, r5, #31
 8005954:	d50a      	bpl.n	800596c <__pow5mult+0x84>
 8005956:	4631      	mov	r1, r6
 8005958:	4622      	mov	r2, r4
 800595a:	4638      	mov	r0, r7
 800595c:	f7ff ff1c 	bl	8005798 <__multiply>
 8005960:	4680      	mov	r8, r0
 8005962:	4631      	mov	r1, r6
 8005964:	4638      	mov	r0, r7
 8005966:	f7ff fe4d 	bl	8005604 <_Bfree>
 800596a:	4646      	mov	r6, r8
 800596c:	106d      	asrs	r5, r5, #1
 800596e:	d00b      	beq.n	8005988 <__pow5mult+0xa0>
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	b938      	cbnz	r0, 8005984 <__pow5mult+0x9c>
 8005974:	4622      	mov	r2, r4
 8005976:	4621      	mov	r1, r4
 8005978:	4638      	mov	r0, r7
 800597a:	f7ff ff0d 	bl	8005798 <__multiply>
 800597e:	6020      	str	r0, [r4, #0]
 8005980:	f8c0 9000 	str.w	r9, [r0]
 8005984:	4604      	mov	r4, r0
 8005986:	e7e4      	b.n	8005952 <__pow5mult+0x6a>
 8005988:	4630      	mov	r0, r6
 800598a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800598e:	bf00      	nop
 8005990:	08006e78 	.word	0x08006e78
 8005994:	08006d9c 	.word	0x08006d9c
 8005998:	08006e1c 	.word	0x08006e1c

0800599c <__lshift>:
 800599c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	460c      	mov	r4, r1
 80059a2:	4607      	mov	r7, r0
 80059a4:	4691      	mov	r9, r2
 80059a6:	6923      	ldr	r3, [r4, #16]
 80059a8:	6849      	ldr	r1, [r1, #4]
 80059aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059ae:	68a3      	ldr	r3, [r4, #8]
 80059b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059b4:	f108 0601 	add.w	r6, r8, #1
 80059b8:	42b3      	cmp	r3, r6
 80059ba:	db0b      	blt.n	80059d4 <__lshift+0x38>
 80059bc:	4638      	mov	r0, r7
 80059be:	f7ff fde1 	bl	8005584 <_Balloc>
 80059c2:	4605      	mov	r5, r0
 80059c4:	b948      	cbnz	r0, 80059da <__lshift+0x3e>
 80059c6:	4602      	mov	r2, r0
 80059c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80059cc:	4b27      	ldr	r3, [pc, #156]	@ (8005a6c <__lshift+0xd0>)
 80059ce:	4828      	ldr	r0, [pc, #160]	@ (8005a70 <__lshift+0xd4>)
 80059d0:	f000 fa10 	bl	8005df4 <__assert_func>
 80059d4:	3101      	adds	r1, #1
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	e7ee      	b.n	80059b8 <__lshift+0x1c>
 80059da:	2300      	movs	r3, #0
 80059dc:	f100 0114 	add.w	r1, r0, #20
 80059e0:	f100 0210 	add.w	r2, r0, #16
 80059e4:	4618      	mov	r0, r3
 80059e6:	4553      	cmp	r3, sl
 80059e8:	db33      	blt.n	8005a52 <__lshift+0xb6>
 80059ea:	6920      	ldr	r0, [r4, #16]
 80059ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059f0:	f104 0314 	add.w	r3, r4, #20
 80059f4:	f019 091f 	ands.w	r9, r9, #31
 80059f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a00:	d02b      	beq.n	8005a5a <__lshift+0xbe>
 8005a02:	468a      	mov	sl, r1
 8005a04:	2200      	movs	r2, #0
 8005a06:	f1c9 0e20 	rsb	lr, r9, #32
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	fa00 f009 	lsl.w	r0, r0, r9
 8005a10:	4310      	orrs	r0, r2
 8005a12:	f84a 0b04 	str.w	r0, [sl], #4
 8005a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a1a:	459c      	cmp	ip, r3
 8005a1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a20:	d8f3      	bhi.n	8005a0a <__lshift+0x6e>
 8005a22:	ebac 0304 	sub.w	r3, ip, r4
 8005a26:	3b15      	subs	r3, #21
 8005a28:	f023 0303 	bic.w	r3, r3, #3
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	f104 0015 	add.w	r0, r4, #21
 8005a32:	4584      	cmp	ip, r0
 8005a34:	bf38      	it	cc
 8005a36:	2304      	movcc	r3, #4
 8005a38:	50ca      	str	r2, [r1, r3]
 8005a3a:	b10a      	cbz	r2, 8005a40 <__lshift+0xa4>
 8005a3c:	f108 0602 	add.w	r6, r8, #2
 8005a40:	3e01      	subs	r6, #1
 8005a42:	4638      	mov	r0, r7
 8005a44:	4621      	mov	r1, r4
 8005a46:	612e      	str	r6, [r5, #16]
 8005a48:	f7ff fddc 	bl	8005604 <_Bfree>
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a52:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a56:	3301      	adds	r3, #1
 8005a58:	e7c5      	b.n	80059e6 <__lshift+0x4a>
 8005a5a:	3904      	subs	r1, #4
 8005a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a60:	459c      	cmp	ip, r3
 8005a62:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a66:	d8f9      	bhi.n	8005a5c <__lshift+0xc0>
 8005a68:	e7ea      	b.n	8005a40 <__lshift+0xa4>
 8005a6a:	bf00      	nop
 8005a6c:	08006e0b 	.word	0x08006e0b
 8005a70:	08006e1c 	.word	0x08006e1c

08005a74 <__mcmp>:
 8005a74:	4603      	mov	r3, r0
 8005a76:	690a      	ldr	r2, [r1, #16]
 8005a78:	6900      	ldr	r0, [r0, #16]
 8005a7a:	b530      	push	{r4, r5, lr}
 8005a7c:	1a80      	subs	r0, r0, r2
 8005a7e:	d10e      	bne.n	8005a9e <__mcmp+0x2a>
 8005a80:	3314      	adds	r3, #20
 8005a82:	3114      	adds	r1, #20
 8005a84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a94:	4295      	cmp	r5, r2
 8005a96:	d003      	beq.n	8005aa0 <__mcmp+0x2c>
 8005a98:	d205      	bcs.n	8005aa6 <__mcmp+0x32>
 8005a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9e:	bd30      	pop	{r4, r5, pc}
 8005aa0:	42a3      	cmp	r3, r4
 8005aa2:	d3f3      	bcc.n	8005a8c <__mcmp+0x18>
 8005aa4:	e7fb      	b.n	8005a9e <__mcmp+0x2a>
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	e7f9      	b.n	8005a9e <__mcmp+0x2a>
	...

08005aac <__mdiff>:
 8005aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab0:	4689      	mov	r9, r1
 8005ab2:	4606      	mov	r6, r0
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4648      	mov	r0, r9
 8005ab8:	4614      	mov	r4, r2
 8005aba:	f7ff ffdb 	bl	8005a74 <__mcmp>
 8005abe:	1e05      	subs	r5, r0, #0
 8005ac0:	d112      	bne.n	8005ae8 <__mdiff+0x3c>
 8005ac2:	4629      	mov	r1, r5
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	f7ff fd5d 	bl	8005584 <_Balloc>
 8005aca:	4602      	mov	r2, r0
 8005acc:	b928      	cbnz	r0, 8005ada <__mdiff+0x2e>
 8005ace:	f240 2137 	movw	r1, #567	@ 0x237
 8005ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8005bcc <__mdiff+0x120>)
 8005ad4:	483e      	ldr	r0, [pc, #248]	@ (8005bd0 <__mdiff+0x124>)
 8005ad6:	f000 f98d 	bl	8005df4 <__assert_func>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	b003      	add	sp, #12
 8005ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae8:	bfbc      	itt	lt
 8005aea:	464b      	movlt	r3, r9
 8005aec:	46a1      	movlt	r9, r4
 8005aee:	4630      	mov	r0, r6
 8005af0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005af4:	bfba      	itte	lt
 8005af6:	461c      	movlt	r4, r3
 8005af8:	2501      	movlt	r5, #1
 8005afa:	2500      	movge	r5, #0
 8005afc:	f7ff fd42 	bl	8005584 <_Balloc>
 8005b00:	4602      	mov	r2, r0
 8005b02:	b918      	cbnz	r0, 8005b0c <__mdiff+0x60>
 8005b04:	f240 2145 	movw	r1, #581	@ 0x245
 8005b08:	4b30      	ldr	r3, [pc, #192]	@ (8005bcc <__mdiff+0x120>)
 8005b0a:	e7e3      	b.n	8005ad4 <__mdiff+0x28>
 8005b0c:	f100 0b14 	add.w	fp, r0, #20
 8005b10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005b14:	f109 0310 	add.w	r3, r9, #16
 8005b18:	60c5      	str	r5, [r0, #12]
 8005b1a:	f04f 0c00 	mov.w	ip, #0
 8005b1e:	f109 0514 	add.w	r5, r9, #20
 8005b22:	46d9      	mov	r9, fp
 8005b24:	6926      	ldr	r6, [r4, #16]
 8005b26:	f104 0e14 	add.w	lr, r4, #20
 8005b2a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005b2e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	9b01      	ldr	r3, [sp, #4]
 8005b36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005b3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005b3e:	b281      	uxth	r1, r0
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	fa1f f38a 	uxth.w	r3, sl
 8005b46:	1a5b      	subs	r3, r3, r1
 8005b48:	0c00      	lsrs	r0, r0, #16
 8005b4a:	4463      	add	r3, ip
 8005b4c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005b50:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005b5a:	4576      	cmp	r6, lr
 8005b5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b60:	f849 3b04 	str.w	r3, [r9], #4
 8005b64:	d8e6      	bhi.n	8005b34 <__mdiff+0x88>
 8005b66:	1b33      	subs	r3, r6, r4
 8005b68:	3b15      	subs	r3, #21
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	3415      	adds	r4, #21
 8005b70:	3304      	adds	r3, #4
 8005b72:	42a6      	cmp	r6, r4
 8005b74:	bf38      	it	cc
 8005b76:	2304      	movcc	r3, #4
 8005b78:	441d      	add	r5, r3
 8005b7a:	445b      	add	r3, fp
 8005b7c:	461e      	mov	r6, r3
 8005b7e:	462c      	mov	r4, r5
 8005b80:	4544      	cmp	r4, r8
 8005b82:	d30e      	bcc.n	8005ba2 <__mdiff+0xf6>
 8005b84:	f108 0103 	add.w	r1, r8, #3
 8005b88:	1b49      	subs	r1, r1, r5
 8005b8a:	f021 0103 	bic.w	r1, r1, #3
 8005b8e:	3d03      	subs	r5, #3
 8005b90:	45a8      	cmp	r8, r5
 8005b92:	bf38      	it	cc
 8005b94:	2100      	movcc	r1, #0
 8005b96:	440b      	add	r3, r1
 8005b98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b9c:	b199      	cbz	r1, 8005bc6 <__mdiff+0x11a>
 8005b9e:	6117      	str	r7, [r2, #16]
 8005ba0:	e79e      	b.n	8005ae0 <__mdiff+0x34>
 8005ba2:	46e6      	mov	lr, ip
 8005ba4:	f854 1b04 	ldr.w	r1, [r4], #4
 8005ba8:	fa1f fc81 	uxth.w	ip, r1
 8005bac:	44f4      	add	ip, lr
 8005bae:	0c08      	lsrs	r0, r1, #16
 8005bb0:	4471      	add	r1, lr
 8005bb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005bb6:	b289      	uxth	r1, r1
 8005bb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005bbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005bc0:	f846 1b04 	str.w	r1, [r6], #4
 8005bc4:	e7dc      	b.n	8005b80 <__mdiff+0xd4>
 8005bc6:	3f01      	subs	r7, #1
 8005bc8:	e7e6      	b.n	8005b98 <__mdiff+0xec>
 8005bca:	bf00      	nop
 8005bcc:	08006e0b 	.word	0x08006e0b
 8005bd0:	08006e1c 	.word	0x08006e1c

08005bd4 <__d2b>:
 8005bd4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005bd8:	2101      	movs	r1, #1
 8005bda:	4690      	mov	r8, r2
 8005bdc:	4699      	mov	r9, r3
 8005bde:	9e08      	ldr	r6, [sp, #32]
 8005be0:	f7ff fcd0 	bl	8005584 <_Balloc>
 8005be4:	4604      	mov	r4, r0
 8005be6:	b930      	cbnz	r0, 8005bf6 <__d2b+0x22>
 8005be8:	4602      	mov	r2, r0
 8005bea:	f240 310f 	movw	r1, #783	@ 0x30f
 8005bee:	4b23      	ldr	r3, [pc, #140]	@ (8005c7c <__d2b+0xa8>)
 8005bf0:	4823      	ldr	r0, [pc, #140]	@ (8005c80 <__d2b+0xac>)
 8005bf2:	f000 f8ff 	bl	8005df4 <__assert_func>
 8005bf6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005bfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bfe:	b10d      	cbz	r5, 8005c04 <__d2b+0x30>
 8005c00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	f1b8 0300 	subs.w	r3, r8, #0
 8005c0a:	d024      	beq.n	8005c56 <__d2b+0x82>
 8005c0c:	4668      	mov	r0, sp
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	f7ff fd7f 	bl	8005712 <__lo0bits>
 8005c14:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c18:	b1d8      	cbz	r0, 8005c52 <__d2b+0x7e>
 8005c1a:	f1c0 0320 	rsb	r3, r0, #32
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	430b      	orrs	r3, r1
 8005c24:	40c2      	lsrs	r2, r0
 8005c26:	6163      	str	r3, [r4, #20]
 8005c28:	9201      	str	r2, [sp, #4]
 8005c2a:	9b01      	ldr	r3, [sp, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	bf0c      	ite	eq
 8005c30:	2201      	moveq	r2, #1
 8005c32:	2202      	movne	r2, #2
 8005c34:	61a3      	str	r3, [r4, #24]
 8005c36:	6122      	str	r2, [r4, #16]
 8005c38:	b1ad      	cbz	r5, 8005c66 <__d2b+0x92>
 8005c3a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005c3e:	4405      	add	r5, r0
 8005c40:	6035      	str	r5, [r6, #0]
 8005c42:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c48:	6018      	str	r0, [r3, #0]
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	b002      	add	sp, #8
 8005c4e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005c52:	6161      	str	r1, [r4, #20]
 8005c54:	e7e9      	b.n	8005c2a <__d2b+0x56>
 8005c56:	a801      	add	r0, sp, #4
 8005c58:	f7ff fd5b 	bl	8005712 <__lo0bits>
 8005c5c:	9b01      	ldr	r3, [sp, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	6163      	str	r3, [r4, #20]
 8005c62:	3020      	adds	r0, #32
 8005c64:	e7e7      	b.n	8005c36 <__d2b+0x62>
 8005c66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005c6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c6e:	6030      	str	r0, [r6, #0]
 8005c70:	6918      	ldr	r0, [r3, #16]
 8005c72:	f7ff fd2f 	bl	80056d4 <__hi0bits>
 8005c76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c7a:	e7e4      	b.n	8005c46 <__d2b+0x72>
 8005c7c:	08006e0b 	.word	0x08006e0b
 8005c80:	08006e1c 	.word	0x08006e1c

08005c84 <__sflush_r>:
 8005c84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	0716      	lsls	r6, r2, #28
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	d454      	bmi.n	8005d3c <__sflush_r+0xb8>
 8005c92:	684b      	ldr	r3, [r1, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dc02      	bgt.n	8005c9e <__sflush_r+0x1a>
 8005c98:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	dd48      	ble.n	8005d30 <__sflush_r+0xac>
 8005c9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ca0:	2e00      	cmp	r6, #0
 8005ca2:	d045      	beq.n	8005d30 <__sflush_r+0xac>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005caa:	682f      	ldr	r7, [r5, #0]
 8005cac:	6a21      	ldr	r1, [r4, #32]
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	d030      	beq.n	8005d14 <__sflush_r+0x90>
 8005cb2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	0759      	lsls	r1, r3, #29
 8005cb8:	d505      	bpl.n	8005cc6 <__sflush_r+0x42>
 8005cba:	6863      	ldr	r3, [r4, #4]
 8005cbc:	1ad2      	subs	r2, r2, r3
 8005cbe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cc0:	b10b      	cbz	r3, 8005cc6 <__sflush_r+0x42>
 8005cc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cc4:	1ad2      	subs	r2, r2, r3
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	4628      	mov	r0, r5
 8005cca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ccc:	6a21      	ldr	r1, [r4, #32]
 8005cce:	47b0      	blx	r6
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	89a3      	ldrh	r3, [r4, #12]
 8005cd4:	d106      	bne.n	8005ce4 <__sflush_r+0x60>
 8005cd6:	6829      	ldr	r1, [r5, #0]
 8005cd8:	291d      	cmp	r1, #29
 8005cda:	d82b      	bhi.n	8005d34 <__sflush_r+0xb0>
 8005cdc:	4a28      	ldr	r2, [pc, #160]	@ (8005d80 <__sflush_r+0xfc>)
 8005cde:	410a      	asrs	r2, r1
 8005ce0:	07d6      	lsls	r6, r2, #31
 8005ce2:	d427      	bmi.n	8005d34 <__sflush_r+0xb0>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	6062      	str	r2, [r4, #4]
 8005ce8:	6922      	ldr	r2, [r4, #16]
 8005cea:	04d9      	lsls	r1, r3, #19
 8005cec:	6022      	str	r2, [r4, #0]
 8005cee:	d504      	bpl.n	8005cfa <__sflush_r+0x76>
 8005cf0:	1c42      	adds	r2, r0, #1
 8005cf2:	d101      	bne.n	8005cf8 <__sflush_r+0x74>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	b903      	cbnz	r3, 8005cfa <__sflush_r+0x76>
 8005cf8:	6560      	str	r0, [r4, #84]	@ 0x54
 8005cfa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cfc:	602f      	str	r7, [r5, #0]
 8005cfe:	b1b9      	cbz	r1, 8005d30 <__sflush_r+0xac>
 8005d00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d04:	4299      	cmp	r1, r3
 8005d06:	d002      	beq.n	8005d0e <__sflush_r+0x8a>
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f7ff fb3d 	bl	8005388 <_free_r>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d12:	e00d      	b.n	8005d30 <__sflush_r+0xac>
 8005d14:	2301      	movs	r3, #1
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b0      	blx	r6
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	1c50      	adds	r0, r2, #1
 8005d1e:	d1c9      	bne.n	8005cb4 <__sflush_r+0x30>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0c6      	beq.n	8005cb4 <__sflush_r+0x30>
 8005d26:	2b1d      	cmp	r3, #29
 8005d28:	d001      	beq.n	8005d2e <__sflush_r+0xaa>
 8005d2a:	2b16      	cmp	r3, #22
 8005d2c:	d11d      	bne.n	8005d6a <__sflush_r+0xe6>
 8005d2e:	602f      	str	r7, [r5, #0]
 8005d30:	2000      	movs	r0, #0
 8005d32:	e021      	b.n	8005d78 <__sflush_r+0xf4>
 8005d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d38:	b21b      	sxth	r3, r3
 8005d3a:	e01a      	b.n	8005d72 <__sflush_r+0xee>
 8005d3c:	690f      	ldr	r7, [r1, #16]
 8005d3e:	2f00      	cmp	r7, #0
 8005d40:	d0f6      	beq.n	8005d30 <__sflush_r+0xac>
 8005d42:	0793      	lsls	r3, r2, #30
 8005d44:	bf18      	it	ne
 8005d46:	2300      	movne	r3, #0
 8005d48:	680e      	ldr	r6, [r1, #0]
 8005d4a:	bf08      	it	eq
 8005d4c:	694b      	ldreq	r3, [r1, #20]
 8005d4e:	1bf6      	subs	r6, r6, r7
 8005d50:	600f      	str	r7, [r1, #0]
 8005d52:	608b      	str	r3, [r1, #8]
 8005d54:	2e00      	cmp	r6, #0
 8005d56:	ddeb      	ble.n	8005d30 <__sflush_r+0xac>
 8005d58:	4633      	mov	r3, r6
 8005d5a:	463a      	mov	r2, r7
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	6a21      	ldr	r1, [r4, #32]
 8005d60:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005d64:	47e0      	blx	ip
 8005d66:	2800      	cmp	r0, #0
 8005d68:	dc07      	bgt.n	8005d7a <__sflush_r+0xf6>
 8005d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d72:	f04f 30ff 	mov.w	r0, #4294967295
 8005d76:	81a3      	strh	r3, [r4, #12]
 8005d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d7a:	4407      	add	r7, r0
 8005d7c:	1a36      	subs	r6, r6, r0
 8005d7e:	e7e9      	b.n	8005d54 <__sflush_r+0xd0>
 8005d80:	dfbffffe 	.word	0xdfbffffe

08005d84 <_fflush_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	690b      	ldr	r3, [r1, #16]
 8005d88:	4605      	mov	r5, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	b913      	cbnz	r3, 8005d94 <_fflush_r+0x10>
 8005d8e:	2500      	movs	r5, #0
 8005d90:	4628      	mov	r0, r5
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	b118      	cbz	r0, 8005d9e <_fflush_r+0x1a>
 8005d96:	6a03      	ldr	r3, [r0, #32]
 8005d98:	b90b      	cbnz	r3, 8005d9e <_fflush_r+0x1a>
 8005d9a:	f7fe fb8d 	bl	80044b8 <__sinit>
 8005d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f3      	beq.n	8005d8e <_fflush_r+0xa>
 8005da6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005da8:	07d0      	lsls	r0, r2, #31
 8005daa:	d404      	bmi.n	8005db6 <_fflush_r+0x32>
 8005dac:	0599      	lsls	r1, r3, #22
 8005dae:	d402      	bmi.n	8005db6 <_fflush_r+0x32>
 8005db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005db2:	f7fe fc78 	bl	80046a6 <__retarget_lock_acquire_recursive>
 8005db6:	4628      	mov	r0, r5
 8005db8:	4621      	mov	r1, r4
 8005dba:	f7ff ff63 	bl	8005c84 <__sflush_r>
 8005dbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	07da      	lsls	r2, r3, #31
 8005dc4:	d4e4      	bmi.n	8005d90 <_fflush_r+0xc>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	059b      	lsls	r3, r3, #22
 8005dca:	d4e1      	bmi.n	8005d90 <_fflush_r+0xc>
 8005dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dce:	f7fe fc6b 	bl	80046a8 <__retarget_lock_release_recursive>
 8005dd2:	e7dd      	b.n	8005d90 <_fflush_r+0xc>

08005dd4 <_sbrk_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	4d05      	ldr	r5, [pc, #20]	@ (8005df0 <_sbrk_r+0x1c>)
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	f7fb fc5c 	bl	800169c <_sbrk>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_sbrk_r+0x1a>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_sbrk_r+0x1a>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	20000514 	.word	0x20000514

08005df4 <__assert_func>:
 8005df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005df6:	4614      	mov	r4, r2
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4b09      	ldr	r3, [pc, #36]	@ (8005e20 <__assert_func+0x2c>)
 8005dfc:	4605      	mov	r5, r0
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68d8      	ldr	r0, [r3, #12]
 8005e02:	b954      	cbnz	r4, 8005e1a <__assert_func+0x26>
 8005e04:	4b07      	ldr	r3, [pc, #28]	@ (8005e24 <__assert_func+0x30>)
 8005e06:	461c      	mov	r4, r3
 8005e08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e0c:	9100      	str	r1, [sp, #0]
 8005e0e:	462b      	mov	r3, r5
 8005e10:	4905      	ldr	r1, [pc, #20]	@ (8005e28 <__assert_func+0x34>)
 8005e12:	f000 f841 	bl	8005e98 <fiprintf>
 8005e16:	f000 f851 	bl	8005ebc <abort>
 8005e1a:	4b04      	ldr	r3, [pc, #16]	@ (8005e2c <__assert_func+0x38>)
 8005e1c:	e7f4      	b.n	8005e08 <__assert_func+0x14>
 8005e1e:	bf00      	nop
 8005e20:	20000010 	.word	0x20000010
 8005e24:	08006fbd 	.word	0x08006fbd
 8005e28:	08006f8f 	.word	0x08006f8f
 8005e2c:	08006f82 	.word	0x08006f82

08005e30 <_calloc_r>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	fba1 5402 	umull	r5, r4, r1, r2
 8005e36:	b93c      	cbnz	r4, 8005e48 <_calloc_r+0x18>
 8005e38:	4629      	mov	r1, r5
 8005e3a:	f7ff fb17 	bl	800546c <_malloc_r>
 8005e3e:	4606      	mov	r6, r0
 8005e40:	b928      	cbnz	r0, 8005e4e <_calloc_r+0x1e>
 8005e42:	2600      	movs	r6, #0
 8005e44:	4630      	mov	r0, r6
 8005e46:	bd70      	pop	{r4, r5, r6, pc}
 8005e48:	220c      	movs	r2, #12
 8005e4a:	6002      	str	r2, [r0, #0]
 8005e4c:	e7f9      	b.n	8005e42 <_calloc_r+0x12>
 8005e4e:	462a      	mov	r2, r5
 8005e50:	4621      	mov	r1, r4
 8005e52:	f7fe fbaa 	bl	80045aa <memset>
 8005e56:	e7f5      	b.n	8005e44 <_calloc_r+0x14>

08005e58 <__ascii_mbtowc>:
 8005e58:	b082      	sub	sp, #8
 8005e5a:	b901      	cbnz	r1, 8005e5e <__ascii_mbtowc+0x6>
 8005e5c:	a901      	add	r1, sp, #4
 8005e5e:	b142      	cbz	r2, 8005e72 <__ascii_mbtowc+0x1a>
 8005e60:	b14b      	cbz	r3, 8005e76 <__ascii_mbtowc+0x1e>
 8005e62:	7813      	ldrb	r3, [r2, #0]
 8005e64:	600b      	str	r3, [r1, #0]
 8005e66:	7812      	ldrb	r2, [r2, #0]
 8005e68:	1e10      	subs	r0, r2, #0
 8005e6a:	bf18      	it	ne
 8005e6c:	2001      	movne	r0, #1
 8005e6e:	b002      	add	sp, #8
 8005e70:	4770      	bx	lr
 8005e72:	4610      	mov	r0, r2
 8005e74:	e7fb      	b.n	8005e6e <__ascii_mbtowc+0x16>
 8005e76:	f06f 0001 	mvn.w	r0, #1
 8005e7a:	e7f8      	b.n	8005e6e <__ascii_mbtowc+0x16>

08005e7c <__ascii_wctomb>:
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	4608      	mov	r0, r1
 8005e80:	b141      	cbz	r1, 8005e94 <__ascii_wctomb+0x18>
 8005e82:	2aff      	cmp	r2, #255	@ 0xff
 8005e84:	d904      	bls.n	8005e90 <__ascii_wctomb+0x14>
 8005e86:	228a      	movs	r2, #138	@ 0x8a
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	4770      	bx	lr
 8005e90:	2001      	movs	r0, #1
 8005e92:	700a      	strb	r2, [r1, #0]
 8005e94:	4770      	bx	lr
	...

08005e98 <fiprintf>:
 8005e98:	b40e      	push	{r1, r2, r3}
 8005e9a:	b503      	push	{r0, r1, lr}
 8005e9c:	4601      	mov	r1, r0
 8005e9e:	ab03      	add	r3, sp, #12
 8005ea0:	4805      	ldr	r0, [pc, #20]	@ (8005eb8 <fiprintf+0x20>)
 8005ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ea6:	6800      	ldr	r0, [r0, #0]
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	f000 f835 	bl	8005f18 <_vfiprintf_r>
 8005eae:	b002      	add	sp, #8
 8005eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eb4:	b003      	add	sp, #12
 8005eb6:	4770      	bx	lr
 8005eb8:	20000010 	.word	0x20000010

08005ebc <abort>:
 8005ebc:	2006      	movs	r0, #6
 8005ebe:	b508      	push	{r3, lr}
 8005ec0:	f000 f9fe 	bl	80062c0 <raise>
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	f7fb fb75 	bl	80015b4 <_exit>

08005eca <__sfputc_r>:
 8005eca:	6893      	ldr	r3, [r2, #8]
 8005ecc:	b410      	push	{r4}
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	6093      	str	r3, [r2, #8]
 8005ed4:	da07      	bge.n	8005ee6 <__sfputc_r+0x1c>
 8005ed6:	6994      	ldr	r4, [r2, #24]
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	db01      	blt.n	8005ee0 <__sfputc_r+0x16>
 8005edc:	290a      	cmp	r1, #10
 8005ede:	d102      	bne.n	8005ee6 <__sfputc_r+0x1c>
 8005ee0:	bc10      	pop	{r4}
 8005ee2:	f000 b931 	b.w	8006148 <__swbuf_r>
 8005ee6:	6813      	ldr	r3, [r2, #0]
 8005ee8:	1c58      	adds	r0, r3, #1
 8005eea:	6010      	str	r0, [r2, #0]
 8005eec:	7019      	strb	r1, [r3, #0]
 8005eee:	4608      	mov	r0, r1
 8005ef0:	bc10      	pop	{r4}
 8005ef2:	4770      	bx	lr

08005ef4 <__sfputs_r>:
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	460f      	mov	r7, r1
 8005efa:	4614      	mov	r4, r2
 8005efc:	18d5      	adds	r5, r2, r3
 8005efe:	42ac      	cmp	r4, r5
 8005f00:	d101      	bne.n	8005f06 <__sfputs_r+0x12>
 8005f02:	2000      	movs	r0, #0
 8005f04:	e007      	b.n	8005f16 <__sfputs_r+0x22>
 8005f06:	463a      	mov	r2, r7
 8005f08:	4630      	mov	r0, r6
 8005f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0e:	f7ff ffdc 	bl	8005eca <__sfputc_r>
 8005f12:	1c43      	adds	r3, r0, #1
 8005f14:	d1f3      	bne.n	8005efe <__sfputs_r+0xa>
 8005f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f18 <_vfiprintf_r>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	460d      	mov	r5, r1
 8005f1e:	4614      	mov	r4, r2
 8005f20:	4698      	mov	r8, r3
 8005f22:	4606      	mov	r6, r0
 8005f24:	b09d      	sub	sp, #116	@ 0x74
 8005f26:	b118      	cbz	r0, 8005f30 <_vfiprintf_r+0x18>
 8005f28:	6a03      	ldr	r3, [r0, #32]
 8005f2a:	b90b      	cbnz	r3, 8005f30 <_vfiprintf_r+0x18>
 8005f2c:	f7fe fac4 	bl	80044b8 <__sinit>
 8005f30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f32:	07d9      	lsls	r1, r3, #31
 8005f34:	d405      	bmi.n	8005f42 <_vfiprintf_r+0x2a>
 8005f36:	89ab      	ldrh	r3, [r5, #12]
 8005f38:	059a      	lsls	r2, r3, #22
 8005f3a:	d402      	bmi.n	8005f42 <_vfiprintf_r+0x2a>
 8005f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f3e:	f7fe fbb2 	bl	80046a6 <__retarget_lock_acquire_recursive>
 8005f42:	89ab      	ldrh	r3, [r5, #12]
 8005f44:	071b      	lsls	r3, r3, #28
 8005f46:	d501      	bpl.n	8005f4c <_vfiprintf_r+0x34>
 8005f48:	692b      	ldr	r3, [r5, #16]
 8005f4a:	b99b      	cbnz	r3, 8005f74 <_vfiprintf_r+0x5c>
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f000 f938 	bl	80061c4 <__swsetup_r>
 8005f54:	b170      	cbz	r0, 8005f74 <_vfiprintf_r+0x5c>
 8005f56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f58:	07dc      	lsls	r4, r3, #31
 8005f5a:	d504      	bpl.n	8005f66 <_vfiprintf_r+0x4e>
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	b01d      	add	sp, #116	@ 0x74
 8005f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	89ab      	ldrh	r3, [r5, #12]
 8005f68:	0598      	lsls	r0, r3, #22
 8005f6a:	d4f7      	bmi.n	8005f5c <_vfiprintf_r+0x44>
 8005f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f6e:	f7fe fb9b 	bl	80046a8 <__retarget_lock_release_recursive>
 8005f72:	e7f3      	b.n	8005f5c <_vfiprintf_r+0x44>
 8005f74:	2300      	movs	r3, #0
 8005f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f78:	2320      	movs	r3, #32
 8005f7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f7e:	2330      	movs	r3, #48	@ 0x30
 8005f80:	f04f 0901 	mov.w	r9, #1
 8005f84:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f88:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006134 <_vfiprintf_r+0x21c>
 8005f8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f90:	4623      	mov	r3, r4
 8005f92:	469a      	mov	sl, r3
 8005f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f98:	b10a      	cbz	r2, 8005f9e <_vfiprintf_r+0x86>
 8005f9a:	2a25      	cmp	r2, #37	@ 0x25
 8005f9c:	d1f9      	bne.n	8005f92 <_vfiprintf_r+0x7a>
 8005f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8005fa2:	d00b      	beq.n	8005fbc <_vfiprintf_r+0xa4>
 8005fa4:	465b      	mov	r3, fp
 8005fa6:	4622      	mov	r2, r4
 8005fa8:	4629      	mov	r1, r5
 8005faa:	4630      	mov	r0, r6
 8005fac:	f7ff ffa2 	bl	8005ef4 <__sfputs_r>
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	f000 80a7 	beq.w	8006104 <_vfiprintf_r+0x1ec>
 8005fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fb8:	445a      	add	r2, fp
 8005fba:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 809f 	beq.w	8006104 <_vfiprintf_r+0x1ec>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fd0:	f10a 0a01 	add.w	sl, sl, #1
 8005fd4:	9304      	str	r3, [sp, #16]
 8005fd6:	9307      	str	r3, [sp, #28]
 8005fd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fde:	4654      	mov	r4, sl
 8005fe0:	2205      	movs	r2, #5
 8005fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe6:	4853      	ldr	r0, [pc, #332]	@ (8006134 <_vfiprintf_r+0x21c>)
 8005fe8:	f7fe fb5f 	bl	80046aa <memchr>
 8005fec:	9a04      	ldr	r2, [sp, #16]
 8005fee:	b9d8      	cbnz	r0, 8006028 <_vfiprintf_r+0x110>
 8005ff0:	06d1      	lsls	r1, r2, #27
 8005ff2:	bf44      	itt	mi
 8005ff4:	2320      	movmi	r3, #32
 8005ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ffa:	0713      	lsls	r3, r2, #28
 8005ffc:	bf44      	itt	mi
 8005ffe:	232b      	movmi	r3, #43	@ 0x2b
 8006000:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006004:	f89a 3000 	ldrb.w	r3, [sl]
 8006008:	2b2a      	cmp	r3, #42	@ 0x2a
 800600a:	d015      	beq.n	8006038 <_vfiprintf_r+0x120>
 800600c:	4654      	mov	r4, sl
 800600e:	2000      	movs	r0, #0
 8006010:	f04f 0c0a 	mov.w	ip, #10
 8006014:	9a07      	ldr	r2, [sp, #28]
 8006016:	4621      	mov	r1, r4
 8006018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800601c:	3b30      	subs	r3, #48	@ 0x30
 800601e:	2b09      	cmp	r3, #9
 8006020:	d94b      	bls.n	80060ba <_vfiprintf_r+0x1a2>
 8006022:	b1b0      	cbz	r0, 8006052 <_vfiprintf_r+0x13a>
 8006024:	9207      	str	r2, [sp, #28]
 8006026:	e014      	b.n	8006052 <_vfiprintf_r+0x13a>
 8006028:	eba0 0308 	sub.w	r3, r0, r8
 800602c:	fa09 f303 	lsl.w	r3, r9, r3
 8006030:	4313      	orrs	r3, r2
 8006032:	46a2      	mov	sl, r4
 8006034:	9304      	str	r3, [sp, #16]
 8006036:	e7d2      	b.n	8005fde <_vfiprintf_r+0xc6>
 8006038:	9b03      	ldr	r3, [sp, #12]
 800603a:	1d19      	adds	r1, r3, #4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	9103      	str	r1, [sp, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	bfbb      	ittet	lt
 8006044:	425b      	neglt	r3, r3
 8006046:	f042 0202 	orrlt.w	r2, r2, #2
 800604a:	9307      	strge	r3, [sp, #28]
 800604c:	9307      	strlt	r3, [sp, #28]
 800604e:	bfb8      	it	lt
 8006050:	9204      	strlt	r2, [sp, #16]
 8006052:	7823      	ldrb	r3, [r4, #0]
 8006054:	2b2e      	cmp	r3, #46	@ 0x2e
 8006056:	d10a      	bne.n	800606e <_vfiprintf_r+0x156>
 8006058:	7863      	ldrb	r3, [r4, #1]
 800605a:	2b2a      	cmp	r3, #42	@ 0x2a
 800605c:	d132      	bne.n	80060c4 <_vfiprintf_r+0x1ac>
 800605e:	9b03      	ldr	r3, [sp, #12]
 8006060:	3402      	adds	r4, #2
 8006062:	1d1a      	adds	r2, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	9203      	str	r2, [sp, #12]
 8006068:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800606c:	9305      	str	r3, [sp, #20]
 800606e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006138 <_vfiprintf_r+0x220>
 8006072:	2203      	movs	r2, #3
 8006074:	4650      	mov	r0, sl
 8006076:	7821      	ldrb	r1, [r4, #0]
 8006078:	f7fe fb17 	bl	80046aa <memchr>
 800607c:	b138      	cbz	r0, 800608e <_vfiprintf_r+0x176>
 800607e:	2240      	movs	r2, #64	@ 0x40
 8006080:	9b04      	ldr	r3, [sp, #16]
 8006082:	eba0 000a 	sub.w	r0, r0, sl
 8006086:	4082      	lsls	r2, r0
 8006088:	4313      	orrs	r3, r2
 800608a:	3401      	adds	r4, #1
 800608c:	9304      	str	r3, [sp, #16]
 800608e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006092:	2206      	movs	r2, #6
 8006094:	4829      	ldr	r0, [pc, #164]	@ (800613c <_vfiprintf_r+0x224>)
 8006096:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800609a:	f7fe fb06 	bl	80046aa <memchr>
 800609e:	2800      	cmp	r0, #0
 80060a0:	d03f      	beq.n	8006122 <_vfiprintf_r+0x20a>
 80060a2:	4b27      	ldr	r3, [pc, #156]	@ (8006140 <_vfiprintf_r+0x228>)
 80060a4:	bb1b      	cbnz	r3, 80060ee <_vfiprintf_r+0x1d6>
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	3307      	adds	r3, #7
 80060aa:	f023 0307 	bic.w	r3, r3, #7
 80060ae:	3308      	adds	r3, #8
 80060b0:	9303      	str	r3, [sp, #12]
 80060b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060b4:	443b      	add	r3, r7
 80060b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80060b8:	e76a      	b.n	8005f90 <_vfiprintf_r+0x78>
 80060ba:	460c      	mov	r4, r1
 80060bc:	2001      	movs	r0, #1
 80060be:	fb0c 3202 	mla	r2, ip, r2, r3
 80060c2:	e7a8      	b.n	8006016 <_vfiprintf_r+0xfe>
 80060c4:	2300      	movs	r3, #0
 80060c6:	f04f 0c0a 	mov.w	ip, #10
 80060ca:	4619      	mov	r1, r3
 80060cc:	3401      	adds	r4, #1
 80060ce:	9305      	str	r3, [sp, #20]
 80060d0:	4620      	mov	r0, r4
 80060d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060d6:	3a30      	subs	r2, #48	@ 0x30
 80060d8:	2a09      	cmp	r2, #9
 80060da:	d903      	bls.n	80060e4 <_vfiprintf_r+0x1cc>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0c6      	beq.n	800606e <_vfiprintf_r+0x156>
 80060e0:	9105      	str	r1, [sp, #20]
 80060e2:	e7c4      	b.n	800606e <_vfiprintf_r+0x156>
 80060e4:	4604      	mov	r4, r0
 80060e6:	2301      	movs	r3, #1
 80060e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80060ec:	e7f0      	b.n	80060d0 <_vfiprintf_r+0x1b8>
 80060ee:	ab03      	add	r3, sp, #12
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	462a      	mov	r2, r5
 80060f4:	4630      	mov	r0, r6
 80060f6:	4b13      	ldr	r3, [pc, #76]	@ (8006144 <_vfiprintf_r+0x22c>)
 80060f8:	a904      	add	r1, sp, #16
 80060fa:	f7fd fd93 	bl	8003c24 <_printf_float>
 80060fe:	4607      	mov	r7, r0
 8006100:	1c78      	adds	r0, r7, #1
 8006102:	d1d6      	bne.n	80060b2 <_vfiprintf_r+0x19a>
 8006104:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006106:	07d9      	lsls	r1, r3, #31
 8006108:	d405      	bmi.n	8006116 <_vfiprintf_r+0x1fe>
 800610a:	89ab      	ldrh	r3, [r5, #12]
 800610c:	059a      	lsls	r2, r3, #22
 800610e:	d402      	bmi.n	8006116 <_vfiprintf_r+0x1fe>
 8006110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006112:	f7fe fac9 	bl	80046a8 <__retarget_lock_release_recursive>
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	065b      	lsls	r3, r3, #25
 800611a:	f53f af1f 	bmi.w	8005f5c <_vfiprintf_r+0x44>
 800611e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006120:	e71e      	b.n	8005f60 <_vfiprintf_r+0x48>
 8006122:	ab03      	add	r3, sp, #12
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	462a      	mov	r2, r5
 8006128:	4630      	mov	r0, r6
 800612a:	4b06      	ldr	r3, [pc, #24]	@ (8006144 <_vfiprintf_r+0x22c>)
 800612c:	a904      	add	r1, sp, #16
 800612e:	f7fe f817 	bl	8004160 <_printf_i>
 8006132:	e7e4      	b.n	80060fe <_vfiprintf_r+0x1e6>
 8006134:	080070bf 	.word	0x080070bf
 8006138:	080070c5 	.word	0x080070c5
 800613c:	080070c9 	.word	0x080070c9
 8006140:	08003c25 	.word	0x08003c25
 8006144:	08005ef5 	.word	0x08005ef5

08006148 <__swbuf_r>:
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614a:	460e      	mov	r6, r1
 800614c:	4614      	mov	r4, r2
 800614e:	4605      	mov	r5, r0
 8006150:	b118      	cbz	r0, 800615a <__swbuf_r+0x12>
 8006152:	6a03      	ldr	r3, [r0, #32]
 8006154:	b90b      	cbnz	r3, 800615a <__swbuf_r+0x12>
 8006156:	f7fe f9af 	bl	80044b8 <__sinit>
 800615a:	69a3      	ldr	r3, [r4, #24]
 800615c:	60a3      	str	r3, [r4, #8]
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	071a      	lsls	r2, r3, #28
 8006162:	d501      	bpl.n	8006168 <__swbuf_r+0x20>
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	b943      	cbnz	r3, 800617a <__swbuf_r+0x32>
 8006168:	4621      	mov	r1, r4
 800616a:	4628      	mov	r0, r5
 800616c:	f000 f82a 	bl	80061c4 <__swsetup_r>
 8006170:	b118      	cbz	r0, 800617a <__swbuf_r+0x32>
 8006172:	f04f 37ff 	mov.w	r7, #4294967295
 8006176:	4638      	mov	r0, r7
 8006178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	6922      	ldr	r2, [r4, #16]
 800617e:	b2f6      	uxtb	r6, r6
 8006180:	1a98      	subs	r0, r3, r2
 8006182:	6963      	ldr	r3, [r4, #20]
 8006184:	4637      	mov	r7, r6
 8006186:	4283      	cmp	r3, r0
 8006188:	dc05      	bgt.n	8006196 <__swbuf_r+0x4e>
 800618a:	4621      	mov	r1, r4
 800618c:	4628      	mov	r0, r5
 800618e:	f7ff fdf9 	bl	8005d84 <_fflush_r>
 8006192:	2800      	cmp	r0, #0
 8006194:	d1ed      	bne.n	8006172 <__swbuf_r+0x2a>
 8006196:	68a3      	ldr	r3, [r4, #8]
 8006198:	3b01      	subs	r3, #1
 800619a:	60a3      	str	r3, [r4, #8]
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	6022      	str	r2, [r4, #0]
 80061a2:	701e      	strb	r6, [r3, #0]
 80061a4:	6962      	ldr	r2, [r4, #20]
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d004      	beq.n	80061b6 <__swbuf_r+0x6e>
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	07db      	lsls	r3, r3, #31
 80061b0:	d5e1      	bpl.n	8006176 <__swbuf_r+0x2e>
 80061b2:	2e0a      	cmp	r6, #10
 80061b4:	d1df      	bne.n	8006176 <__swbuf_r+0x2e>
 80061b6:	4621      	mov	r1, r4
 80061b8:	4628      	mov	r0, r5
 80061ba:	f7ff fde3 	bl	8005d84 <_fflush_r>
 80061be:	2800      	cmp	r0, #0
 80061c0:	d0d9      	beq.n	8006176 <__swbuf_r+0x2e>
 80061c2:	e7d6      	b.n	8006172 <__swbuf_r+0x2a>

080061c4 <__swsetup_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4b29      	ldr	r3, [pc, #164]	@ (800626c <__swsetup_r+0xa8>)
 80061c8:	4605      	mov	r5, r0
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	460c      	mov	r4, r1
 80061ce:	b118      	cbz	r0, 80061d8 <__swsetup_r+0x14>
 80061d0:	6a03      	ldr	r3, [r0, #32]
 80061d2:	b90b      	cbnz	r3, 80061d8 <__swsetup_r+0x14>
 80061d4:	f7fe f970 	bl	80044b8 <__sinit>
 80061d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061dc:	0719      	lsls	r1, r3, #28
 80061de:	d422      	bmi.n	8006226 <__swsetup_r+0x62>
 80061e0:	06da      	lsls	r2, r3, #27
 80061e2:	d407      	bmi.n	80061f4 <__swsetup_r+0x30>
 80061e4:	2209      	movs	r2, #9
 80061e6:	602a      	str	r2, [r5, #0]
 80061e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	e033      	b.n	800625c <__swsetup_r+0x98>
 80061f4:	0758      	lsls	r0, r3, #29
 80061f6:	d512      	bpl.n	800621e <__swsetup_r+0x5a>
 80061f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061fa:	b141      	cbz	r1, 800620e <__swsetup_r+0x4a>
 80061fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006200:	4299      	cmp	r1, r3
 8006202:	d002      	beq.n	800620a <__swsetup_r+0x46>
 8006204:	4628      	mov	r0, r5
 8006206:	f7ff f8bf 	bl	8005388 <_free_r>
 800620a:	2300      	movs	r3, #0
 800620c:	6363      	str	r3, [r4, #52]	@ 0x34
 800620e:	89a3      	ldrh	r3, [r4, #12]
 8006210:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006214:	81a3      	strh	r3, [r4, #12]
 8006216:	2300      	movs	r3, #0
 8006218:	6063      	str	r3, [r4, #4]
 800621a:	6923      	ldr	r3, [r4, #16]
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	f043 0308 	orr.w	r3, r3, #8
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	b94b      	cbnz	r3, 800623e <__swsetup_r+0x7a>
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006234:	d003      	beq.n	800623e <__swsetup_r+0x7a>
 8006236:	4621      	mov	r1, r4
 8006238:	4628      	mov	r0, r5
 800623a:	f000 f882 	bl	8006342 <__smakebuf_r>
 800623e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006242:	f013 0201 	ands.w	r2, r3, #1
 8006246:	d00a      	beq.n	800625e <__swsetup_r+0x9a>
 8006248:	2200      	movs	r2, #0
 800624a:	60a2      	str	r2, [r4, #8]
 800624c:	6962      	ldr	r2, [r4, #20]
 800624e:	4252      	negs	r2, r2
 8006250:	61a2      	str	r2, [r4, #24]
 8006252:	6922      	ldr	r2, [r4, #16]
 8006254:	b942      	cbnz	r2, 8006268 <__swsetup_r+0xa4>
 8006256:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800625a:	d1c5      	bne.n	80061e8 <__swsetup_r+0x24>
 800625c:	bd38      	pop	{r3, r4, r5, pc}
 800625e:	0799      	lsls	r1, r3, #30
 8006260:	bf58      	it	pl
 8006262:	6962      	ldrpl	r2, [r4, #20]
 8006264:	60a2      	str	r2, [r4, #8]
 8006266:	e7f4      	b.n	8006252 <__swsetup_r+0x8e>
 8006268:	2000      	movs	r0, #0
 800626a:	e7f7      	b.n	800625c <__swsetup_r+0x98>
 800626c:	20000010 	.word	0x20000010

08006270 <_raise_r>:
 8006270:	291f      	cmp	r1, #31
 8006272:	b538      	push	{r3, r4, r5, lr}
 8006274:	4605      	mov	r5, r0
 8006276:	460c      	mov	r4, r1
 8006278:	d904      	bls.n	8006284 <_raise_r+0x14>
 800627a:	2316      	movs	r3, #22
 800627c:	6003      	str	r3, [r0, #0]
 800627e:	f04f 30ff 	mov.w	r0, #4294967295
 8006282:	bd38      	pop	{r3, r4, r5, pc}
 8006284:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006286:	b112      	cbz	r2, 800628e <_raise_r+0x1e>
 8006288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800628c:	b94b      	cbnz	r3, 80062a2 <_raise_r+0x32>
 800628e:	4628      	mov	r0, r5
 8006290:	f000 f830 	bl	80062f4 <_getpid_r>
 8006294:	4622      	mov	r2, r4
 8006296:	4601      	mov	r1, r0
 8006298:	4628      	mov	r0, r5
 800629a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800629e:	f000 b817 	b.w	80062d0 <_kill_r>
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d00a      	beq.n	80062bc <_raise_r+0x4c>
 80062a6:	1c59      	adds	r1, r3, #1
 80062a8:	d103      	bne.n	80062b2 <_raise_r+0x42>
 80062aa:	2316      	movs	r3, #22
 80062ac:	6003      	str	r3, [r0, #0]
 80062ae:	2001      	movs	r0, #1
 80062b0:	e7e7      	b.n	8006282 <_raise_r+0x12>
 80062b2:	2100      	movs	r1, #0
 80062b4:	4620      	mov	r0, r4
 80062b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80062ba:	4798      	blx	r3
 80062bc:	2000      	movs	r0, #0
 80062be:	e7e0      	b.n	8006282 <_raise_r+0x12>

080062c0 <raise>:
 80062c0:	4b02      	ldr	r3, [pc, #8]	@ (80062cc <raise+0xc>)
 80062c2:	4601      	mov	r1, r0
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	f7ff bfd3 	b.w	8006270 <_raise_r>
 80062ca:	bf00      	nop
 80062cc:	20000010 	.word	0x20000010

080062d0 <_kill_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	2300      	movs	r3, #0
 80062d4:	4d06      	ldr	r5, [pc, #24]	@ (80062f0 <_kill_r+0x20>)
 80062d6:	4604      	mov	r4, r0
 80062d8:	4608      	mov	r0, r1
 80062da:	4611      	mov	r1, r2
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	f7fb f959 	bl	8001594 <_kill>
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	d102      	bne.n	80062ec <_kill_r+0x1c>
 80062e6:	682b      	ldr	r3, [r5, #0]
 80062e8:	b103      	cbz	r3, 80062ec <_kill_r+0x1c>
 80062ea:	6023      	str	r3, [r4, #0]
 80062ec:	bd38      	pop	{r3, r4, r5, pc}
 80062ee:	bf00      	nop
 80062f0:	20000514 	.word	0x20000514

080062f4 <_getpid_r>:
 80062f4:	f7fb b947 	b.w	8001586 <_getpid>

080062f8 <__swhatbuf_r>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	460c      	mov	r4, r1
 80062fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006300:	4615      	mov	r5, r2
 8006302:	2900      	cmp	r1, #0
 8006304:	461e      	mov	r6, r3
 8006306:	b096      	sub	sp, #88	@ 0x58
 8006308:	da0c      	bge.n	8006324 <__swhatbuf_r+0x2c>
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	2100      	movs	r1, #0
 800630e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006312:	bf14      	ite	ne
 8006314:	2340      	movne	r3, #64	@ 0x40
 8006316:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800631a:	2000      	movs	r0, #0
 800631c:	6031      	str	r1, [r6, #0]
 800631e:	602b      	str	r3, [r5, #0]
 8006320:	b016      	add	sp, #88	@ 0x58
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	466a      	mov	r2, sp
 8006326:	f000 f849 	bl	80063bc <_fstat_r>
 800632a:	2800      	cmp	r0, #0
 800632c:	dbed      	blt.n	800630a <__swhatbuf_r+0x12>
 800632e:	9901      	ldr	r1, [sp, #4]
 8006330:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006334:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006338:	4259      	negs	r1, r3
 800633a:	4159      	adcs	r1, r3
 800633c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006340:	e7eb      	b.n	800631a <__swhatbuf_r+0x22>

08006342 <__smakebuf_r>:
 8006342:	898b      	ldrh	r3, [r1, #12]
 8006344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006346:	079d      	lsls	r5, r3, #30
 8006348:	4606      	mov	r6, r0
 800634a:	460c      	mov	r4, r1
 800634c:	d507      	bpl.n	800635e <__smakebuf_r+0x1c>
 800634e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	6123      	str	r3, [r4, #16]
 8006356:	2301      	movs	r3, #1
 8006358:	6163      	str	r3, [r4, #20]
 800635a:	b003      	add	sp, #12
 800635c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800635e:	466a      	mov	r2, sp
 8006360:	ab01      	add	r3, sp, #4
 8006362:	f7ff ffc9 	bl	80062f8 <__swhatbuf_r>
 8006366:	9f00      	ldr	r7, [sp, #0]
 8006368:	4605      	mov	r5, r0
 800636a:	4639      	mov	r1, r7
 800636c:	4630      	mov	r0, r6
 800636e:	f7ff f87d 	bl	800546c <_malloc_r>
 8006372:	b948      	cbnz	r0, 8006388 <__smakebuf_r+0x46>
 8006374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006378:	059a      	lsls	r2, r3, #22
 800637a:	d4ee      	bmi.n	800635a <__smakebuf_r+0x18>
 800637c:	f023 0303 	bic.w	r3, r3, #3
 8006380:	f043 0302 	orr.w	r3, r3, #2
 8006384:	81a3      	strh	r3, [r4, #12]
 8006386:	e7e2      	b.n	800634e <__smakebuf_r+0xc>
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800638e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006392:	81a3      	strh	r3, [r4, #12]
 8006394:	9b01      	ldr	r3, [sp, #4]
 8006396:	6020      	str	r0, [r4, #0]
 8006398:	b15b      	cbz	r3, 80063b2 <__smakebuf_r+0x70>
 800639a:	4630      	mov	r0, r6
 800639c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a0:	f000 f81e 	bl	80063e0 <_isatty_r>
 80063a4:	b128      	cbz	r0, 80063b2 <__smakebuf_r+0x70>
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	f023 0303 	bic.w	r3, r3, #3
 80063ac:	f043 0301 	orr.w	r3, r3, #1
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	431d      	orrs	r5, r3
 80063b6:	81a5      	strh	r5, [r4, #12]
 80063b8:	e7cf      	b.n	800635a <__smakebuf_r+0x18>
	...

080063bc <_fstat_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	2300      	movs	r3, #0
 80063c0:	4d06      	ldr	r5, [pc, #24]	@ (80063dc <_fstat_r+0x20>)
 80063c2:	4604      	mov	r4, r0
 80063c4:	4608      	mov	r0, r1
 80063c6:	4611      	mov	r1, r2
 80063c8:	602b      	str	r3, [r5, #0]
 80063ca:	f7fb f942 	bl	8001652 <_fstat>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	d102      	bne.n	80063d8 <_fstat_r+0x1c>
 80063d2:	682b      	ldr	r3, [r5, #0]
 80063d4:	b103      	cbz	r3, 80063d8 <_fstat_r+0x1c>
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	bd38      	pop	{r3, r4, r5, pc}
 80063da:	bf00      	nop
 80063dc:	20000514 	.word	0x20000514

080063e0 <_isatty_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	2300      	movs	r3, #0
 80063e4:	4d05      	ldr	r5, [pc, #20]	@ (80063fc <_isatty_r+0x1c>)
 80063e6:	4604      	mov	r4, r0
 80063e8:	4608      	mov	r0, r1
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	f7fb f940 	bl	8001670 <_isatty>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_isatty_r+0x1a>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_isatty_r+0x1a>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	20000514 	.word	0x20000514

08006400 <powf>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	460c      	mov	r4, r1
 8006404:	4606      	mov	r6, r0
 8006406:	f000 f851 	bl	80064ac <__ieee754_powf>
 800640a:	4621      	mov	r1, r4
 800640c:	4605      	mov	r5, r0
 800640e:	4620      	mov	r0, r4
 8006410:	f7fa fe1e 	bl	8001050 <__aeabi_fcmpun>
 8006414:	bb68      	cbnz	r0, 8006472 <powf+0x72>
 8006416:	2100      	movs	r1, #0
 8006418:	4630      	mov	r0, r6
 800641a:	f7fa fde7 	bl	8000fec <__aeabi_fcmpeq>
 800641e:	b190      	cbz	r0, 8006446 <powf+0x46>
 8006420:	2100      	movs	r1, #0
 8006422:	4620      	mov	r0, r4
 8006424:	f7fa fde2 	bl	8000fec <__aeabi_fcmpeq>
 8006428:	2800      	cmp	r0, #0
 800642a:	d133      	bne.n	8006494 <powf+0x94>
 800642c:	4620      	mov	r0, r4
 800642e:	f000 f834 	bl	800649a <finitef>
 8006432:	b1f0      	cbz	r0, 8006472 <powf+0x72>
 8006434:	2100      	movs	r1, #0
 8006436:	4620      	mov	r0, r4
 8006438:	f7fa fde2 	bl	8001000 <__aeabi_fcmplt>
 800643c:	b1c8      	cbz	r0, 8006472 <powf+0x72>
 800643e:	f7fe f907 	bl	8004650 <__errno>
 8006442:	2322      	movs	r3, #34	@ 0x22
 8006444:	e014      	b.n	8006470 <powf+0x70>
 8006446:	4628      	mov	r0, r5
 8006448:	f000 f827 	bl	800649a <finitef>
 800644c:	b998      	cbnz	r0, 8006476 <powf+0x76>
 800644e:	4630      	mov	r0, r6
 8006450:	f000 f823 	bl	800649a <finitef>
 8006454:	b178      	cbz	r0, 8006476 <powf+0x76>
 8006456:	4620      	mov	r0, r4
 8006458:	f000 f81f 	bl	800649a <finitef>
 800645c:	b158      	cbz	r0, 8006476 <powf+0x76>
 800645e:	4629      	mov	r1, r5
 8006460:	4628      	mov	r0, r5
 8006462:	f7fa fdf5 	bl	8001050 <__aeabi_fcmpun>
 8006466:	2800      	cmp	r0, #0
 8006468:	d0e9      	beq.n	800643e <powf+0x3e>
 800646a:	f7fe f8f1 	bl	8004650 <__errno>
 800646e:	2321      	movs	r3, #33	@ 0x21
 8006470:	6003      	str	r3, [r0, #0]
 8006472:	4628      	mov	r0, r5
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	2100      	movs	r1, #0
 8006478:	4628      	mov	r0, r5
 800647a:	f7fa fdb7 	bl	8000fec <__aeabi_fcmpeq>
 800647e:	2800      	cmp	r0, #0
 8006480:	d0f7      	beq.n	8006472 <powf+0x72>
 8006482:	4630      	mov	r0, r6
 8006484:	f000 f809 	bl	800649a <finitef>
 8006488:	2800      	cmp	r0, #0
 800648a:	d0f2      	beq.n	8006472 <powf+0x72>
 800648c:	4620      	mov	r0, r4
 800648e:	f000 f804 	bl	800649a <finitef>
 8006492:	e7d3      	b.n	800643c <powf+0x3c>
 8006494:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8006498:	e7eb      	b.n	8006472 <powf+0x72>

0800649a <finitef>:
 800649a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800649e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80064a2:	bfac      	ite	ge
 80064a4:	2000      	movge	r0, #0
 80064a6:	2001      	movlt	r0, #1
 80064a8:	4770      	bx	lr
	...

080064ac <__ieee754_powf>:
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 80064b4:	4680      	mov	r8, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	4606      	mov	r6, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	b087      	sub	sp, #28
 80064be:	d10c      	bne.n	80064da <__ieee754_powf+0x2e>
 80064c0:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 80064c4:	0076      	lsls	r6, r6, #1
 80064c6:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80064ca:	f240 8336 	bls.w	8006b3a <__ieee754_powf+0x68e>
 80064ce:	4639      	mov	r1, r7
 80064d0:	4640      	mov	r0, r8
 80064d2:	f7fa faef 	bl	8000ab4 <__addsf3>
 80064d6:	4601      	mov	r1, r0
 80064d8:	e03e      	b.n	8006558 <__ieee754_powf+0xac>
 80064da:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 80064de:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80064e2:	d802      	bhi.n	80064ea <__ieee754_powf+0x3e>
 80064e4:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80064e8:	d908      	bls.n	80064fc <__ieee754_powf+0x50>
 80064ea:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80064ee:	d1ee      	bne.n	80064ce <__ieee754_powf+0x22>
 80064f0:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80064f4:	0064      	lsls	r4, r4, #1
 80064f6:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80064fa:	e7e6      	b.n	80064ca <__ieee754_powf+0x1e>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	da1e      	bge.n	800653e <__ieee754_powf+0x92>
 8006500:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8006504:	d22c      	bcs.n	8006560 <__ieee754_powf+0xb4>
 8006506:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800650a:	d333      	bcc.n	8006574 <__ieee754_powf+0xc8>
 800650c:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8006510:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8006514:	fa4b f503 	asr.w	r5, fp, r3
 8006518:	fa05 f303 	lsl.w	r3, r5, r3
 800651c:	455b      	cmp	r3, fp
 800651e:	d127      	bne.n	8006570 <__ieee754_powf+0xc4>
 8006520:	f005 0501 	and.w	r5, r5, #1
 8006524:	f1c5 0502 	rsb	r5, r5, #2
 8006528:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800652c:	d123      	bne.n	8006576 <__ieee754_powf+0xca>
 800652e:	2c00      	cmp	r4, #0
 8006530:	4641      	mov	r1, r8
 8006532:	da11      	bge.n	8006558 <__ieee754_powf+0xac>
 8006534:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006538:	f7fa fc78 	bl	8000e2c <__aeabi_fdiv>
 800653c:	e7cb      	b.n	80064d6 <__ieee754_powf+0x2a>
 800653e:	2500      	movs	r5, #0
 8006540:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8006544:	d1f0      	bne.n	8006528 <__ieee754_powf+0x7c>
 8006546:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800654a:	f000 82f6 	beq.w	8006b3a <__ieee754_powf+0x68e>
 800654e:	d909      	bls.n	8006564 <__ieee754_powf+0xb8>
 8006550:	2c00      	cmp	r4, #0
 8006552:	f2c0 82f5 	blt.w	8006b40 <__ieee754_powf+0x694>
 8006556:	4639      	mov	r1, r7
 8006558:	4608      	mov	r0, r1
 800655a:	b007      	add	sp, #28
 800655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006560:	2502      	movs	r5, #2
 8006562:	e7ed      	b.n	8006540 <__ieee754_powf+0x94>
 8006564:	2c00      	cmp	r4, #0
 8006566:	f280 82eb 	bge.w	8006b40 <__ieee754_powf+0x694>
 800656a:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800656e:	e7f3      	b.n	8006558 <__ieee754_powf+0xac>
 8006570:	2500      	movs	r5, #0
 8006572:	e7d9      	b.n	8006528 <__ieee754_powf+0x7c>
 8006574:	2500      	movs	r5, #0
 8006576:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800657a:	d104      	bne.n	8006586 <__ieee754_powf+0xda>
 800657c:	4641      	mov	r1, r8
 800657e:	4640      	mov	r0, r8
 8006580:	f7fa fba0 	bl	8000cc4 <__aeabi_fmul>
 8006584:	e7a7      	b.n	80064d6 <__ieee754_powf+0x2a>
 8006586:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800658a:	d107      	bne.n	800659c <__ieee754_powf+0xf0>
 800658c:	2e00      	cmp	r6, #0
 800658e:	db05      	blt.n	800659c <__ieee754_powf+0xf0>
 8006590:	4640      	mov	r0, r8
 8006592:	b007      	add	sp, #28
 8006594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	f000 bb54 	b.w	8006c44 <__ieee754_sqrtf>
 800659c:	4640      	mov	r0, r8
 800659e:	f000 fae3 	bl	8006b68 <fabsf>
 80065a2:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80065a6:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80065aa:	46ca      	mov	sl, r9
 80065ac:	4601      	mov	r1, r0
 80065ae:	d002      	beq.n	80065b6 <__ieee754_powf+0x10a>
 80065b0:	f1b9 0f00 	cmp.w	r9, #0
 80065b4:	d117      	bne.n	80065e6 <__ieee754_powf+0x13a>
 80065b6:	2c00      	cmp	r4, #0
 80065b8:	da04      	bge.n	80065c4 <__ieee754_powf+0x118>
 80065ba:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80065be:	f7fa fc35 	bl	8000e2c <__aeabi_fdiv>
 80065c2:	4601      	mov	r1, r0
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	dac7      	bge.n	8006558 <__ieee754_powf+0xac>
 80065c8:	f1a9 597e 	sub.w	r9, r9, #1065353216	@ 0x3f800000
 80065cc:	ea59 0905 	orrs.w	r9, r9, r5
 80065d0:	d104      	bne.n	80065dc <__ieee754_powf+0x130>
 80065d2:	4608      	mov	r0, r1
 80065d4:	f7fa fa6c 	bl	8000ab0 <__aeabi_fsub>
 80065d8:	4601      	mov	r1, r0
 80065da:	e7ad      	b.n	8006538 <__ieee754_powf+0x8c>
 80065dc:	2d01      	cmp	r5, #1
 80065de:	d1bb      	bne.n	8006558 <__ieee754_powf+0xac>
 80065e0:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80065e4:	e777      	b.n	80064d6 <__ieee754_powf+0x2a>
 80065e6:	0ff3      	lsrs	r3, r6, #31
 80065e8:	3b01      	subs	r3, #1
 80065ea:	9303      	str	r3, [sp, #12]
 80065ec:	432b      	orrs	r3, r5
 80065ee:	d101      	bne.n	80065f4 <__ieee754_powf+0x148>
 80065f0:	4641      	mov	r1, r8
 80065f2:	e7ee      	b.n	80065d2 <__ieee754_powf+0x126>
 80065f4:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 80065f8:	f240 809e 	bls.w	8006738 <__ieee754_powf+0x28c>
 80065fc:	4b47      	ldr	r3, [pc, #284]	@ (800671c <__ieee754_powf+0x270>)
 80065fe:	4599      	cmp	r9, r3
 8006600:	d807      	bhi.n	8006612 <__ieee754_powf+0x166>
 8006602:	2c00      	cmp	r4, #0
 8006604:	da0a      	bge.n	800661c <__ieee754_powf+0x170>
 8006606:	2000      	movs	r0, #0
 8006608:	b007      	add	sp, #28
 800660a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660e:	f000 bb14 	b.w	8006c3a <__math_oflowf>
 8006612:	4b43      	ldr	r3, [pc, #268]	@ (8006720 <__ieee754_powf+0x274>)
 8006614:	4599      	cmp	r9, r3
 8006616:	d907      	bls.n	8006628 <__ieee754_powf+0x17c>
 8006618:	2c00      	cmp	r4, #0
 800661a:	dcf4      	bgt.n	8006606 <__ieee754_powf+0x15a>
 800661c:	2000      	movs	r0, #0
 800661e:	b007      	add	sp, #28
 8006620:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	f000 bb05 	b.w	8006c32 <__math_uflowf>
 8006628:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800662c:	f7fa fa40 	bl	8000ab0 <__aeabi_fsub>
 8006630:	493c      	ldr	r1, [pc, #240]	@ (8006724 <__ieee754_powf+0x278>)
 8006632:	4606      	mov	r6, r0
 8006634:	f7fa fb46 	bl	8000cc4 <__aeabi_fmul>
 8006638:	493b      	ldr	r1, [pc, #236]	@ (8006728 <__ieee754_powf+0x27c>)
 800663a:	4680      	mov	r8, r0
 800663c:	4630      	mov	r0, r6
 800663e:	f7fa fb41 	bl	8000cc4 <__aeabi_fmul>
 8006642:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8006646:	4681      	mov	r9, r0
 8006648:	4630      	mov	r0, r6
 800664a:	f7fa fb3b 	bl	8000cc4 <__aeabi_fmul>
 800664e:	4601      	mov	r1, r0
 8006650:	4836      	ldr	r0, [pc, #216]	@ (800672c <__ieee754_powf+0x280>)
 8006652:	f7fa fa2d 	bl	8000ab0 <__aeabi_fsub>
 8006656:	4631      	mov	r1, r6
 8006658:	f7fa fb34 	bl	8000cc4 <__aeabi_fmul>
 800665c:	4601      	mov	r1, r0
 800665e:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8006662:	f7fa fa25 	bl	8000ab0 <__aeabi_fsub>
 8006666:	4631      	mov	r1, r6
 8006668:	4682      	mov	sl, r0
 800666a:	4630      	mov	r0, r6
 800666c:	f7fa fb2a 	bl	8000cc4 <__aeabi_fmul>
 8006670:	4601      	mov	r1, r0
 8006672:	4650      	mov	r0, sl
 8006674:	f7fa fb26 	bl	8000cc4 <__aeabi_fmul>
 8006678:	492d      	ldr	r1, [pc, #180]	@ (8006730 <__ieee754_powf+0x284>)
 800667a:	f7fa fb23 	bl	8000cc4 <__aeabi_fmul>
 800667e:	4601      	mov	r1, r0
 8006680:	4648      	mov	r0, r9
 8006682:	f7fa fa15 	bl	8000ab0 <__aeabi_fsub>
 8006686:	4601      	mov	r1, r0
 8006688:	4606      	mov	r6, r0
 800668a:	4640      	mov	r0, r8
 800668c:	f7fa fa12 	bl	8000ab4 <__addsf3>
 8006690:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8006694:	f02b 0b0f 	bic.w	fp, fp, #15
 8006698:	4641      	mov	r1, r8
 800669a:	4658      	mov	r0, fp
 800669c:	f7fa fa08 	bl	8000ab0 <__aeabi_fsub>
 80066a0:	4601      	mov	r1, r0
 80066a2:	4630      	mov	r0, r6
 80066a4:	f7fa fa04 	bl	8000ab0 <__aeabi_fsub>
 80066a8:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	3d01      	subs	r5, #1
 80066b0:	f024 040f 	bic.w	r4, r4, #15
 80066b4:	431d      	orrs	r5, r3
 80066b6:	4606      	mov	r6, r0
 80066b8:	4621      	mov	r1, r4
 80066ba:	4638      	mov	r0, r7
 80066bc:	bf14      	ite	ne
 80066be:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 80066c2:	4d1c      	ldreq	r5, [pc, #112]	@ (8006734 <__ieee754_powf+0x288>)
 80066c4:	f7fa f9f4 	bl	8000ab0 <__aeabi_fsub>
 80066c8:	4659      	mov	r1, fp
 80066ca:	f7fa fafb 	bl	8000cc4 <__aeabi_fmul>
 80066ce:	4639      	mov	r1, r7
 80066d0:	4680      	mov	r8, r0
 80066d2:	4630      	mov	r0, r6
 80066d4:	f7fa faf6 	bl	8000cc4 <__aeabi_fmul>
 80066d8:	4601      	mov	r1, r0
 80066da:	4640      	mov	r0, r8
 80066dc:	f7fa f9ea 	bl	8000ab4 <__addsf3>
 80066e0:	4621      	mov	r1, r4
 80066e2:	4606      	mov	r6, r0
 80066e4:	4658      	mov	r0, fp
 80066e6:	f7fa faed 	bl	8000cc4 <__aeabi_fmul>
 80066ea:	4601      	mov	r1, r0
 80066ec:	4607      	mov	r7, r0
 80066ee:	4630      	mov	r0, r6
 80066f0:	f7fa f9e0 	bl	8000ab4 <__addsf3>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	4680      	mov	r8, r0
 80066fa:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80066fe:	f340 8141 	ble.w	8006984 <__ieee754_powf+0x4d8>
 8006702:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8006706:	f240 812a 	bls.w	800695e <__ieee754_powf+0x4b2>
 800670a:	2100      	movs	r1, #0
 800670c:	4628      	mov	r0, r5
 800670e:	f7fa fc77 	bl	8001000 <__aeabi_fcmplt>
 8006712:	3800      	subs	r0, #0
 8006714:	bf18      	it	ne
 8006716:	2001      	movne	r0, #1
 8006718:	e776      	b.n	8006608 <__ieee754_powf+0x15c>
 800671a:	bf00      	nop
 800671c:	3f7ffff3 	.word	0x3f7ffff3
 8006720:	3f800007 	.word	0x3f800007
 8006724:	3fb8aa00 	.word	0x3fb8aa00
 8006728:	36eca570 	.word	0x36eca570
 800672c:	3eaaaaab 	.word	0x3eaaaaab
 8006730:	3fb8aa3b 	.word	0x3fb8aa3b
 8006734:	bf800000 	.word	0xbf800000
 8006738:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800673c:	f040 810b 	bne.w	8006956 <__ieee754_powf+0x4aa>
 8006740:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8006744:	f7fa fabe 	bl	8000cc4 <__aeabi_fmul>
 8006748:	f06f 0217 	mvn.w	r2, #23
 800674c:	4682      	mov	sl, r0
 800674e:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8006752:	3b7f      	subs	r3, #127	@ 0x7f
 8006754:	441a      	add	r2, r3
 8006756:	4b96      	ldr	r3, [pc, #600]	@ (80069b0 <__ieee754_powf+0x504>)
 8006758:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 800675c:	459a      	cmp	sl, r3
 800675e:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8006762:	dd06      	ble.n	8006772 <__ieee754_powf+0x2c6>
 8006764:	4b93      	ldr	r3, [pc, #588]	@ (80069b4 <__ieee754_powf+0x508>)
 8006766:	459a      	cmp	sl, r3
 8006768:	f340 80f7 	ble.w	800695a <__ieee754_powf+0x4ae>
 800676c:	3201      	adds	r2, #1
 800676e:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8006772:	2300      	movs	r3, #0
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	9205      	str	r2, [sp, #20]
 8006778:	4b8f      	ldr	r3, [pc, #572]	@ (80069b8 <__ieee754_powf+0x50c>)
 800677a:	9a01      	ldr	r2, [sp, #4]
 800677c:	4630      	mov	r0, r6
 800677e:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8006782:	46b2      	mov	sl, r6
 8006784:	4659      	mov	r1, fp
 8006786:	f7fa f993 	bl	8000ab0 <__aeabi_fsub>
 800678a:	4631      	mov	r1, r6
 800678c:	4681      	mov	r9, r0
 800678e:	4658      	mov	r0, fp
 8006790:	f7fa f990 	bl	8000ab4 <__addsf3>
 8006794:	4601      	mov	r1, r0
 8006796:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800679a:	f7fa fb47 	bl	8000e2c <__aeabi_fdiv>
 800679e:	4601      	mov	r1, r0
 80067a0:	9004      	str	r0, [sp, #16]
 80067a2:	4648      	mov	r0, r9
 80067a4:	f7fa fa8e 	bl	8000cc4 <__aeabi_fmul>
 80067a8:	9002      	str	r0, [sp, #8]
 80067aa:	9b02      	ldr	r3, [sp, #8]
 80067ac:	1076      	asrs	r6, r6, #1
 80067ae:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 80067b2:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 80067b6:	9b01      	ldr	r3, [sp, #4]
 80067b8:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 80067bc:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80067c0:	f028 080f 	bic.w	r8, r8, #15
 80067c4:	4631      	mov	r1, r6
 80067c6:	4640      	mov	r0, r8
 80067c8:	f7fa fa7c 	bl	8000cc4 <__aeabi_fmul>
 80067cc:	4601      	mov	r1, r0
 80067ce:	4648      	mov	r0, r9
 80067d0:	f7fa f96e 	bl	8000ab0 <__aeabi_fsub>
 80067d4:	4659      	mov	r1, fp
 80067d6:	4681      	mov	r9, r0
 80067d8:	4630      	mov	r0, r6
 80067da:	f7fa f969 	bl	8000ab0 <__aeabi_fsub>
 80067de:	4601      	mov	r1, r0
 80067e0:	4650      	mov	r0, sl
 80067e2:	f7fa f965 	bl	8000ab0 <__aeabi_fsub>
 80067e6:	4641      	mov	r1, r8
 80067e8:	f7fa fa6c 	bl	8000cc4 <__aeabi_fmul>
 80067ec:	4601      	mov	r1, r0
 80067ee:	4648      	mov	r0, r9
 80067f0:	f7fa f95e 	bl	8000ab0 <__aeabi_fsub>
 80067f4:	9b04      	ldr	r3, [sp, #16]
 80067f6:	4619      	mov	r1, r3
 80067f8:	f7fa fa64 	bl	8000cc4 <__aeabi_fmul>
 80067fc:	9902      	ldr	r1, [sp, #8]
 80067fe:	4683      	mov	fp, r0
 8006800:	4608      	mov	r0, r1
 8006802:	f7fa fa5f 	bl	8000cc4 <__aeabi_fmul>
 8006806:	4606      	mov	r6, r0
 8006808:	496c      	ldr	r1, [pc, #432]	@ (80069bc <__ieee754_powf+0x510>)
 800680a:	f7fa fa5b 	bl	8000cc4 <__aeabi_fmul>
 800680e:	496c      	ldr	r1, [pc, #432]	@ (80069c0 <__ieee754_powf+0x514>)
 8006810:	f7fa f950 	bl	8000ab4 <__addsf3>
 8006814:	4631      	mov	r1, r6
 8006816:	f7fa fa55 	bl	8000cc4 <__aeabi_fmul>
 800681a:	496a      	ldr	r1, [pc, #424]	@ (80069c4 <__ieee754_powf+0x518>)
 800681c:	f7fa f94a 	bl	8000ab4 <__addsf3>
 8006820:	4631      	mov	r1, r6
 8006822:	f7fa fa4f 	bl	8000cc4 <__aeabi_fmul>
 8006826:	4968      	ldr	r1, [pc, #416]	@ (80069c8 <__ieee754_powf+0x51c>)
 8006828:	f7fa f944 	bl	8000ab4 <__addsf3>
 800682c:	4631      	mov	r1, r6
 800682e:	f7fa fa49 	bl	8000cc4 <__aeabi_fmul>
 8006832:	4966      	ldr	r1, [pc, #408]	@ (80069cc <__ieee754_powf+0x520>)
 8006834:	f7fa f93e 	bl	8000ab4 <__addsf3>
 8006838:	4631      	mov	r1, r6
 800683a:	f7fa fa43 	bl	8000cc4 <__aeabi_fmul>
 800683e:	4964      	ldr	r1, [pc, #400]	@ (80069d0 <__ieee754_powf+0x524>)
 8006840:	f7fa f938 	bl	8000ab4 <__addsf3>
 8006844:	4631      	mov	r1, r6
 8006846:	4681      	mov	r9, r0
 8006848:	4630      	mov	r0, r6
 800684a:	f7fa fa3b 	bl	8000cc4 <__aeabi_fmul>
 800684e:	4601      	mov	r1, r0
 8006850:	4648      	mov	r0, r9
 8006852:	f7fa fa37 	bl	8000cc4 <__aeabi_fmul>
 8006856:	4606      	mov	r6, r0
 8006858:	4641      	mov	r1, r8
 800685a:	9802      	ldr	r0, [sp, #8]
 800685c:	f7fa f92a 	bl	8000ab4 <__addsf3>
 8006860:	4659      	mov	r1, fp
 8006862:	f7fa fa2f 	bl	8000cc4 <__aeabi_fmul>
 8006866:	4631      	mov	r1, r6
 8006868:	f7fa f924 	bl	8000ab4 <__addsf3>
 800686c:	4641      	mov	r1, r8
 800686e:	4681      	mov	r9, r0
 8006870:	4640      	mov	r0, r8
 8006872:	f7fa fa27 	bl	8000cc4 <__aeabi_fmul>
 8006876:	4957      	ldr	r1, [pc, #348]	@ (80069d4 <__ieee754_powf+0x528>)
 8006878:	4682      	mov	sl, r0
 800687a:	f7fa f91b 	bl	8000ab4 <__addsf3>
 800687e:	4649      	mov	r1, r9
 8006880:	f7fa f918 	bl	8000ab4 <__addsf3>
 8006884:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8006888:	f026 060f 	bic.w	r6, r6, #15
 800688c:	4631      	mov	r1, r6
 800688e:	4640      	mov	r0, r8
 8006890:	f7fa fa18 	bl	8000cc4 <__aeabi_fmul>
 8006894:	494f      	ldr	r1, [pc, #316]	@ (80069d4 <__ieee754_powf+0x528>)
 8006896:	4680      	mov	r8, r0
 8006898:	4630      	mov	r0, r6
 800689a:	f7fa f909 	bl	8000ab0 <__aeabi_fsub>
 800689e:	4651      	mov	r1, sl
 80068a0:	f7fa f906 	bl	8000ab0 <__aeabi_fsub>
 80068a4:	4601      	mov	r1, r0
 80068a6:	4648      	mov	r0, r9
 80068a8:	f7fa f902 	bl	8000ab0 <__aeabi_fsub>
 80068ac:	9902      	ldr	r1, [sp, #8]
 80068ae:	f7fa fa09 	bl	8000cc4 <__aeabi_fmul>
 80068b2:	4631      	mov	r1, r6
 80068b4:	4681      	mov	r9, r0
 80068b6:	4658      	mov	r0, fp
 80068b8:	f7fa fa04 	bl	8000cc4 <__aeabi_fmul>
 80068bc:	4601      	mov	r1, r0
 80068be:	4648      	mov	r0, r9
 80068c0:	f7fa f8f8 	bl	8000ab4 <__addsf3>
 80068c4:	4682      	mov	sl, r0
 80068c6:	4601      	mov	r1, r0
 80068c8:	4640      	mov	r0, r8
 80068ca:	f7fa f8f3 	bl	8000ab4 <__addsf3>
 80068ce:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80068d2:	f026 060f 	bic.w	r6, r6, #15
 80068d6:	4630      	mov	r0, r6
 80068d8:	493f      	ldr	r1, [pc, #252]	@ (80069d8 <__ieee754_powf+0x52c>)
 80068da:	f7fa f9f3 	bl	8000cc4 <__aeabi_fmul>
 80068de:	4641      	mov	r1, r8
 80068e0:	4681      	mov	r9, r0
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7fa f8e4 	bl	8000ab0 <__aeabi_fsub>
 80068e8:	4601      	mov	r1, r0
 80068ea:	4650      	mov	r0, sl
 80068ec:	f7fa f8e0 	bl	8000ab0 <__aeabi_fsub>
 80068f0:	493a      	ldr	r1, [pc, #232]	@ (80069dc <__ieee754_powf+0x530>)
 80068f2:	f7fa f9e7 	bl	8000cc4 <__aeabi_fmul>
 80068f6:	493a      	ldr	r1, [pc, #232]	@ (80069e0 <__ieee754_powf+0x534>)
 80068f8:	4680      	mov	r8, r0
 80068fa:	4630      	mov	r0, r6
 80068fc:	f7fa f9e2 	bl	8000cc4 <__aeabi_fmul>
 8006900:	4601      	mov	r1, r0
 8006902:	4640      	mov	r0, r8
 8006904:	f7fa f8d6 	bl	8000ab4 <__addsf3>
 8006908:	4b36      	ldr	r3, [pc, #216]	@ (80069e4 <__ieee754_powf+0x538>)
 800690a:	9a01      	ldr	r2, [sp, #4]
 800690c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006910:	f7fa f8d0 	bl	8000ab4 <__addsf3>
 8006914:	9a05      	ldr	r2, [sp, #20]
 8006916:	4606      	mov	r6, r0
 8006918:	4610      	mov	r0, r2
 800691a:	f7fa f97f 	bl	8000c1c <__aeabi_i2f>
 800691e:	4680      	mov	r8, r0
 8006920:	4b31      	ldr	r3, [pc, #196]	@ (80069e8 <__ieee754_powf+0x53c>)
 8006922:	9a01      	ldr	r2, [sp, #4]
 8006924:	4631      	mov	r1, r6
 8006926:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800692a:	4648      	mov	r0, r9
 800692c:	f7fa f8c2 	bl	8000ab4 <__addsf3>
 8006930:	4651      	mov	r1, sl
 8006932:	f7fa f8bf 	bl	8000ab4 <__addsf3>
 8006936:	4641      	mov	r1, r8
 8006938:	f7fa f8bc 	bl	8000ab4 <__addsf3>
 800693c:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8006940:	f02b 0b0f 	bic.w	fp, fp, #15
 8006944:	4641      	mov	r1, r8
 8006946:	4658      	mov	r0, fp
 8006948:	f7fa f8b2 	bl	8000ab0 <__aeabi_fsub>
 800694c:	4651      	mov	r1, sl
 800694e:	f7fa f8af 	bl	8000ab0 <__aeabi_fsub>
 8006952:	4649      	mov	r1, r9
 8006954:	e6a2      	b.n	800669c <__ieee754_powf+0x1f0>
 8006956:	2200      	movs	r2, #0
 8006958:	e6f9      	b.n	800674e <__ieee754_powf+0x2a2>
 800695a:	2301      	movs	r3, #1
 800695c:	e70a      	b.n	8006774 <__ieee754_powf+0x2c8>
 800695e:	d149      	bne.n	80069f4 <__ieee754_powf+0x548>
 8006960:	4922      	ldr	r1, [pc, #136]	@ (80069ec <__ieee754_powf+0x540>)
 8006962:	4630      	mov	r0, r6
 8006964:	f7fa f8a6 	bl	8000ab4 <__addsf3>
 8006968:	4639      	mov	r1, r7
 800696a:	4681      	mov	r9, r0
 800696c:	4620      	mov	r0, r4
 800696e:	f7fa f89f 	bl	8000ab0 <__aeabi_fsub>
 8006972:	4601      	mov	r1, r0
 8006974:	4648      	mov	r0, r9
 8006976:	f7fa fb61 	bl	800103c <__aeabi_fcmpgt>
 800697a:	2800      	cmp	r0, #0
 800697c:	f47f aec5 	bne.w	800670a <__ieee754_powf+0x25e>
 8006980:	2386      	movs	r3, #134	@ 0x86
 8006982:	e03c      	b.n	80069fe <__ieee754_powf+0x552>
 8006984:	4a1a      	ldr	r2, [pc, #104]	@ (80069f0 <__ieee754_powf+0x544>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d907      	bls.n	800699a <__ieee754_powf+0x4ee>
 800698a:	2100      	movs	r1, #0
 800698c:	4628      	mov	r0, r5
 800698e:	f7fa fb37 	bl	8001000 <__aeabi_fcmplt>
 8006992:	3800      	subs	r0, #0
 8006994:	bf18      	it	ne
 8006996:	2001      	movne	r0, #1
 8006998:	e641      	b.n	800661e <__ieee754_powf+0x172>
 800699a:	d12b      	bne.n	80069f4 <__ieee754_powf+0x548>
 800699c:	4639      	mov	r1, r7
 800699e:	f7fa f887 	bl	8000ab0 <__aeabi_fsub>
 80069a2:	4631      	mov	r1, r6
 80069a4:	f7fa fb40 	bl	8001028 <__aeabi_fcmpge>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d0e9      	beq.n	8006980 <__ieee754_powf+0x4d4>
 80069ac:	e7ed      	b.n	800698a <__ieee754_powf+0x4de>
 80069ae:	bf00      	nop
 80069b0:	001cc471 	.word	0x001cc471
 80069b4:	005db3d6 	.word	0x005db3d6
 80069b8:	080070e0 	.word	0x080070e0
 80069bc:	3e53f142 	.word	0x3e53f142
 80069c0:	3e6c3255 	.word	0x3e6c3255
 80069c4:	3e8ba305 	.word	0x3e8ba305
 80069c8:	3eaaaaab 	.word	0x3eaaaaab
 80069cc:	3edb6db7 	.word	0x3edb6db7
 80069d0:	3f19999a 	.word	0x3f19999a
 80069d4:	40400000 	.word	0x40400000
 80069d8:	3f763800 	.word	0x3f763800
 80069dc:	3f76384f 	.word	0x3f76384f
 80069e0:	369dc3a0 	.word	0x369dc3a0
 80069e4:	080070d0 	.word	0x080070d0
 80069e8:	080070d8 	.word	0x080070d8
 80069ec:	3338aa3c 	.word	0x3338aa3c
 80069f0:	43160000 	.word	0x43160000
 80069f4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80069f8:	f240 809b 	bls.w	8006b32 <__ieee754_powf+0x686>
 80069fc:	15db      	asrs	r3, r3, #23
 80069fe:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8006a02:	3b7e      	subs	r3, #126	@ 0x7e
 8006a04:	411c      	asrs	r4, r3
 8006a06:	4444      	add	r4, r8
 8006a08:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8006a0c:	494d      	ldr	r1, [pc, #308]	@ (8006b44 <__ieee754_powf+0x698>)
 8006a0e:	3b7f      	subs	r3, #127	@ 0x7f
 8006a10:	4119      	asrs	r1, r3
 8006a12:	4021      	ands	r1, r4
 8006a14:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006a18:	f1c3 0317 	rsb	r3, r3, #23
 8006a1c:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8006a20:	4638      	mov	r0, r7
 8006a22:	411c      	asrs	r4, r3
 8006a24:	f1b8 0f00 	cmp.w	r8, #0
 8006a28:	bfb8      	it	lt
 8006a2a:	4264      	neglt	r4, r4
 8006a2c:	f7fa f840 	bl	8000ab0 <__aeabi_fsub>
 8006a30:	4607      	mov	r7, r0
 8006a32:	4631      	mov	r1, r6
 8006a34:	4638      	mov	r0, r7
 8006a36:	f7fa f83d 	bl	8000ab4 <__addsf3>
 8006a3a:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8006a3e:	f028 080f 	bic.w	r8, r8, #15
 8006a42:	4640      	mov	r0, r8
 8006a44:	4940      	ldr	r1, [pc, #256]	@ (8006b48 <__ieee754_powf+0x69c>)
 8006a46:	f7fa f93d 	bl	8000cc4 <__aeabi_fmul>
 8006a4a:	4639      	mov	r1, r7
 8006a4c:	4681      	mov	r9, r0
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f7fa f82e 	bl	8000ab0 <__aeabi_fsub>
 8006a54:	4601      	mov	r1, r0
 8006a56:	4630      	mov	r0, r6
 8006a58:	f7fa f82a 	bl	8000ab0 <__aeabi_fsub>
 8006a5c:	493b      	ldr	r1, [pc, #236]	@ (8006b4c <__ieee754_powf+0x6a0>)
 8006a5e:	f7fa f931 	bl	8000cc4 <__aeabi_fmul>
 8006a62:	493b      	ldr	r1, [pc, #236]	@ (8006b50 <__ieee754_powf+0x6a4>)
 8006a64:	4606      	mov	r6, r0
 8006a66:	4640      	mov	r0, r8
 8006a68:	f7fa f92c 	bl	8000cc4 <__aeabi_fmul>
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f7fa f820 	bl	8000ab4 <__addsf3>
 8006a74:	4607      	mov	r7, r0
 8006a76:	4601      	mov	r1, r0
 8006a78:	4648      	mov	r0, r9
 8006a7a:	f7fa f81b 	bl	8000ab4 <__addsf3>
 8006a7e:	4649      	mov	r1, r9
 8006a80:	4606      	mov	r6, r0
 8006a82:	f7fa f815 	bl	8000ab0 <__aeabi_fsub>
 8006a86:	4601      	mov	r1, r0
 8006a88:	4638      	mov	r0, r7
 8006a8a:	f7fa f811 	bl	8000ab0 <__aeabi_fsub>
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4680      	mov	r8, r0
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7fa f916 	bl	8000cc4 <__aeabi_fmul>
 8006a98:	4607      	mov	r7, r0
 8006a9a:	492e      	ldr	r1, [pc, #184]	@ (8006b54 <__ieee754_powf+0x6a8>)
 8006a9c:	f7fa f912 	bl	8000cc4 <__aeabi_fmul>
 8006aa0:	492d      	ldr	r1, [pc, #180]	@ (8006b58 <__ieee754_powf+0x6ac>)
 8006aa2:	f7fa f805 	bl	8000ab0 <__aeabi_fsub>
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	f7fa f90c 	bl	8000cc4 <__aeabi_fmul>
 8006aac:	492b      	ldr	r1, [pc, #172]	@ (8006b5c <__ieee754_powf+0x6b0>)
 8006aae:	f7fa f801 	bl	8000ab4 <__addsf3>
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	f7fa f906 	bl	8000cc4 <__aeabi_fmul>
 8006ab8:	4929      	ldr	r1, [pc, #164]	@ (8006b60 <__ieee754_powf+0x6b4>)
 8006aba:	f7f9 fff9 	bl	8000ab0 <__aeabi_fsub>
 8006abe:	4639      	mov	r1, r7
 8006ac0:	f7fa f900 	bl	8000cc4 <__aeabi_fmul>
 8006ac4:	4927      	ldr	r1, [pc, #156]	@ (8006b64 <__ieee754_powf+0x6b8>)
 8006ac6:	f7f9 fff5 	bl	8000ab4 <__addsf3>
 8006aca:	4639      	mov	r1, r7
 8006acc:	f7fa f8fa 	bl	8000cc4 <__aeabi_fmul>
 8006ad0:	4601      	mov	r1, r0
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f7f9 ffec 	bl	8000ab0 <__aeabi_fsub>
 8006ad8:	4607      	mov	r7, r0
 8006ada:	4601      	mov	r1, r0
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7fa f8f1 	bl	8000cc4 <__aeabi_fmul>
 8006ae2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006ae6:	4681      	mov	r9, r0
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f7f9 ffe1 	bl	8000ab0 <__aeabi_fsub>
 8006aee:	4601      	mov	r1, r0
 8006af0:	4648      	mov	r0, r9
 8006af2:	f7fa f99b 	bl	8000e2c <__aeabi_fdiv>
 8006af6:	4641      	mov	r1, r8
 8006af8:	4607      	mov	r7, r0
 8006afa:	4630      	mov	r0, r6
 8006afc:	f7fa f8e2 	bl	8000cc4 <__aeabi_fmul>
 8006b00:	4641      	mov	r1, r8
 8006b02:	f7f9 ffd7 	bl	8000ab4 <__addsf3>
 8006b06:	4601      	mov	r1, r0
 8006b08:	4638      	mov	r0, r7
 8006b0a:	f7f9 ffd1 	bl	8000ab0 <__aeabi_fsub>
 8006b0e:	4631      	mov	r1, r6
 8006b10:	f7f9 ffce 	bl	8000ab0 <__aeabi_fsub>
 8006b14:	4601      	mov	r1, r0
 8006b16:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006b1a:	f7f9 ffc9 	bl	8000ab0 <__aeabi_fsub>
 8006b1e:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8006b22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b26:	da06      	bge.n	8006b36 <__ieee754_powf+0x68a>
 8006b28:	4621      	mov	r1, r4
 8006b2a:	f000 f821 	bl	8006b70 <scalbnf>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	e526      	b.n	8006580 <__ieee754_powf+0xd4>
 8006b32:	2400      	movs	r4, #0
 8006b34:	e77d      	b.n	8006a32 <__ieee754_powf+0x586>
 8006b36:	4618      	mov	r0, r3
 8006b38:	e7f9      	b.n	8006b2e <__ieee754_powf+0x682>
 8006b3a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006b3e:	e50b      	b.n	8006558 <__ieee754_powf+0xac>
 8006b40:	2100      	movs	r1, #0
 8006b42:	e509      	b.n	8006558 <__ieee754_powf+0xac>
 8006b44:	ff800000 	.word	0xff800000
 8006b48:	3f317200 	.word	0x3f317200
 8006b4c:	3f317218 	.word	0x3f317218
 8006b50:	35bfbe8c 	.word	0x35bfbe8c
 8006b54:	3331bb4c 	.word	0x3331bb4c
 8006b58:	35ddea0e 	.word	0x35ddea0e
 8006b5c:	388ab355 	.word	0x388ab355
 8006b60:	3b360b61 	.word	0x3b360b61
 8006b64:	3e2aaaab 	.word	0x3e2aaaab

08006b68 <fabsf>:
 8006b68:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006b6c:	4770      	bx	lr
	...

08006b70 <scalbnf>:
 8006b70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4603      	mov	r3, r0
 8006b78:	460d      	mov	r5, r1
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	d02e      	beq.n	8006bdc <scalbnf+0x6c>
 8006b7e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006b82:	d304      	bcc.n	8006b8e <scalbnf+0x1e>
 8006b84:	4601      	mov	r1, r0
 8006b86:	f7f9 ff95 	bl	8000ab4 <__addsf3>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	e026      	b.n	8006bdc <scalbnf+0x6c>
 8006b8e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8006b92:	d118      	bne.n	8006bc6 <scalbnf+0x56>
 8006b94:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8006b98:	f7fa f894 	bl	8000cc4 <__aeabi_fmul>
 8006b9c:	4a17      	ldr	r2, [pc, #92]	@ (8006bfc <scalbnf+0x8c>)
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	4295      	cmp	r5, r2
 8006ba2:	db0c      	blt.n	8006bbe <scalbnf+0x4e>
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006baa:	3a19      	subs	r2, #25
 8006bac:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006bb0:	428d      	cmp	r5, r1
 8006bb2:	dd0a      	ble.n	8006bca <scalbnf+0x5a>
 8006bb4:	4912      	ldr	r1, [pc, #72]	@ (8006c00 <scalbnf+0x90>)
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f361 001e 	bfi	r0, r1, #0, #31
 8006bbc:	e000      	b.n	8006bc0 <scalbnf+0x50>
 8006bbe:	4911      	ldr	r1, [pc, #68]	@ (8006c04 <scalbnf+0x94>)
 8006bc0:	f7fa f880 	bl	8000cc4 <__aeabi_fmul>
 8006bc4:	e7e1      	b.n	8006b8a <scalbnf+0x1a>
 8006bc6:	0dd2      	lsrs	r2, r2, #23
 8006bc8:	e7f0      	b.n	8006bac <scalbnf+0x3c>
 8006bca:	1951      	adds	r1, r2, r5
 8006bcc:	29fe      	cmp	r1, #254	@ 0xfe
 8006bce:	dcf1      	bgt.n	8006bb4 <scalbnf+0x44>
 8006bd0:	2900      	cmp	r1, #0
 8006bd2:	dd05      	ble.n	8006be0 <scalbnf+0x70>
 8006bd4:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006bd8:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8006bdc:	4618      	mov	r0, r3
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	f111 0f16 	cmn.w	r1, #22
 8006be4:	da01      	bge.n	8006bea <scalbnf+0x7a>
 8006be6:	4907      	ldr	r1, [pc, #28]	@ (8006c04 <scalbnf+0x94>)
 8006be8:	e7e5      	b.n	8006bb6 <scalbnf+0x46>
 8006bea:	f101 0019 	add.w	r0, r1, #25
 8006bee:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006bf2:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8006bf6:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8006bfa:	e7e1      	b.n	8006bc0 <scalbnf+0x50>
 8006bfc:	ffff3cb0 	.word	0xffff3cb0
 8006c00:	7149f2ca 	.word	0x7149f2ca
 8006c04:	0da24260 	.word	0x0da24260

08006c08 <with_errnof>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	460d      	mov	r5, r1
 8006c0e:	f7fd fd1f 	bl	8004650 <__errno>
 8006c12:	6005      	str	r5, [r0, #0]
 8006c14:	4620      	mov	r0, r4
 8006c16:	bd38      	pop	{r3, r4, r5, pc}

08006c18 <xflowf>:
 8006c18:	b508      	push	{r3, lr}
 8006c1a:	b140      	cbz	r0, 8006c2e <xflowf+0x16>
 8006c1c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8006c20:	f7fa f850 	bl	8000cc4 <__aeabi_fmul>
 8006c24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c28:	2122      	movs	r1, #34	@ 0x22
 8006c2a:	f7ff bfed 	b.w	8006c08 <with_errnof>
 8006c2e:	4608      	mov	r0, r1
 8006c30:	e7f6      	b.n	8006c20 <xflowf+0x8>

08006c32 <__math_uflowf>:
 8006c32:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8006c36:	f7ff bfef 	b.w	8006c18 <xflowf>

08006c3a <__math_oflowf>:
 8006c3a:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8006c3e:	f7ff bfeb 	b.w	8006c18 <xflowf>
	...

08006c44 <__ieee754_sqrtf>:
 8006c44:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8006c48:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c50:	4603      	mov	r3, r0
 8006c52:	4604      	mov	r4, r0
 8006c54:	d30a      	bcc.n	8006c6c <__ieee754_sqrtf+0x28>
 8006c56:	4601      	mov	r1, r0
 8006c58:	f7fa f834 	bl	8000cc4 <__aeabi_fmul>
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f7f9 ff28 	bl	8000ab4 <__addsf3>
 8006c64:	4604      	mov	r4, r0
 8006c66:	4620      	mov	r0, r4
 8006c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c6c:	2a00      	cmp	r2, #0
 8006c6e:	d0fa      	beq.n	8006c66 <__ieee754_sqrtf+0x22>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	da06      	bge.n	8006c82 <__ieee754_sqrtf+0x3e>
 8006c74:	4601      	mov	r1, r0
 8006c76:	f7f9 ff1b 	bl	8000ab0 <__aeabi_fsub>
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	f7fa f8d6 	bl	8000e2c <__aeabi_fdiv>
 8006c80:	e7f0      	b.n	8006c64 <__ieee754_sqrtf+0x20>
 8006c82:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 8006c86:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8006c8a:	d03e      	beq.n	8006d0a <__ieee754_sqrtf+0xc6>
 8006c8c:	2400      	movs	r4, #0
 8006c8e:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 8006c92:	07ca      	lsls	r2, r1, #31
 8006c94:	f04f 0019 	mov.w	r0, #25
 8006c98:	4626      	mov	r6, r4
 8006c9a:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8006c9e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006ca2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ca6:	bf58      	it	pl
 8006ca8:	005b      	lslpl	r3, r3, #1
 8006caa:	106d      	asrs	r5, r5, #1
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	1872      	adds	r2, r6, r1
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	bfcf      	iteee	gt
 8006cb4:	461a      	movgt	r2, r3
 8006cb6:	1856      	addle	r6, r2, r1
 8006cb8:	1864      	addle	r4, r4, r1
 8006cba:	1a9a      	suble	r2, r3, r2
 8006cbc:	3801      	subs	r0, #1
 8006cbe:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8006cc2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006cc6:	d1f2      	bne.n	8006cae <__ieee754_sqrtf+0x6a>
 8006cc8:	b1ba      	cbz	r2, 8006cfa <__ieee754_sqrtf+0xb6>
 8006cca:	4e14      	ldr	r6, [pc, #80]	@ (8006d1c <__ieee754_sqrtf+0xd8>)
 8006ccc:	4f14      	ldr	r7, [pc, #80]	@ (8006d20 <__ieee754_sqrtf+0xdc>)
 8006cce:	6830      	ldr	r0, [r6, #0]
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	f7f9 feed 	bl	8000ab0 <__aeabi_fsub>
 8006cd6:	f8d6 8000 	ldr.w	r8, [r6]
 8006cda:	4601      	mov	r1, r0
 8006cdc:	4640      	mov	r0, r8
 8006cde:	f7fa f999 	bl	8001014 <__aeabi_fcmple>
 8006ce2:	b150      	cbz	r0, 8006cfa <__ieee754_sqrtf+0xb6>
 8006ce4:	6830      	ldr	r0, [r6, #0]
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	f7f9 fee4 	bl	8000ab4 <__addsf3>
 8006cec:	6836      	ldr	r6, [r6, #0]
 8006cee:	4601      	mov	r1, r0
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f7fa f985 	bl	8001000 <__aeabi_fcmplt>
 8006cf6:	b168      	cbz	r0, 8006d14 <__ieee754_sqrtf+0xd0>
 8006cf8:	3402      	adds	r4, #2
 8006cfa:	1064      	asrs	r4, r4, #1
 8006cfc:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8006d00:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8006d04:	e7af      	b.n	8006c66 <__ieee754_sqrtf+0x22>
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	3201      	adds	r2, #1
 8006d0a:	0218      	lsls	r0, r3, #8
 8006d0c:	d5fb      	bpl.n	8006d06 <__ieee754_sqrtf+0xc2>
 8006d0e:	3a01      	subs	r2, #1
 8006d10:	1a89      	subs	r1, r1, r2
 8006d12:	e7bb      	b.n	8006c8c <__ieee754_sqrtf+0x48>
 8006d14:	3401      	adds	r4, #1
 8006d16:	f024 0401 	bic.w	r4, r4, #1
 8006d1a:	e7ee      	b.n	8006cfa <__ieee754_sqrtf+0xb6>
 8006d1c:	200001d0 	.word	0x200001d0
 8006d20:	200001cc 	.word	0x200001cc

08006d24 <_init>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	bf00      	nop
 8006d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2a:	bc08      	pop	{r3}
 8006d2c:	469e      	mov	lr, r3
 8006d2e:	4770      	bx	lr

08006d30 <_fini>:
 8006d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d32:	bf00      	nop
 8006d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d36:	bc08      	pop	{r3}
 8006d38:	469e      	mov	lr, r3
 8006d3a:	4770      	bx	lr

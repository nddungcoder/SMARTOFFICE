
SMARTOFFICE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c44  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08006d78  08006d78  00007d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007120  08007120  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007120  08007120  00008120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007128  08007128  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007128  08007128  00008128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800712c  0800712c  0000812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007130  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200001d4  08007304  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08007304  000095d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000755c  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002678  00000000  00000000  00010759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  00012dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000478  00000000  00000000  00013428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014261  00000000  00000000  000138a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c046  00000000  00000000  00027b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c30f  00000000  00000000  00033b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008fe56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002720  00000000  00000000  0008fe9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000925bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d4 	.word	0x200001d4
 800014c:	00000000 	.word	0x00000000
 8000150:	08006d5c 	.word	0x08006d5c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001d8 	.word	0x200001d8
 800016c:	08006d5c 	.word	0x08006d5c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_frsub>:
 8000aa8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aac:	e002      	b.n	8000ab4 <__addsf3>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_fsub>:
 8000ab0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ab4 <__addsf3>:
 8000ab4:	0042      	lsls	r2, r0, #1
 8000ab6:	bf1f      	itttt	ne
 8000ab8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000abc:	ea92 0f03 	teqne	r2, r3
 8000ac0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac8:	d06a      	beq.n	8000ba0 <__addsf3+0xec>
 8000aca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ace:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad2:	bfc1      	itttt	gt
 8000ad4:	18d2      	addgt	r2, r2, r3
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	4048      	eorgt	r0, r1
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	2b19      	cmp	r3, #25
 8000ae2:	bf88      	it	hi
 8000ae4:	4770      	bxhi	lr
 8000ae6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000afe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4249      	negne	r1, r1
 8000b06:	ea92 0f03 	teq	r2, r3
 8000b0a:	d03f      	beq.n	8000b8c <__addsf3+0xd8>
 8000b0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b10:	fa41 fc03 	asr.w	ip, r1, r3
 8000b14:	eb10 000c 	adds.w	r0, r0, ip
 8000b18:	f1c3 0320 	rsb	r3, r3, #32
 8000b1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b24:	d502      	bpl.n	8000b2c <__addsf3+0x78>
 8000b26:	4249      	negs	r1, r1
 8000b28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b30:	d313      	bcc.n	8000b5a <__addsf3+0xa6>
 8000b32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b36:	d306      	bcc.n	8000b46 <__addsf3+0x92>
 8000b38:	0840      	lsrs	r0, r0, #1
 8000b3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3e:	f102 0201 	add.w	r2, r2, #1
 8000b42:	2afe      	cmp	r2, #254	@ 0xfe
 8000b44:	d251      	bcs.n	8000bea <__addsf3+0x136>
 8000b46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4e:	bf08      	it	eq
 8000b50:	f020 0001 	biceq.w	r0, r0, #1
 8000b54:	ea40 0003 	orr.w	r0, r0, r3
 8000b58:	4770      	bx	lr
 8000b5a:	0049      	lsls	r1, r1, #1
 8000b5c:	eb40 0000 	adc.w	r0, r0, r0
 8000b60:	3a01      	subs	r2, #1
 8000b62:	bf28      	it	cs
 8000b64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b68:	d2ed      	bcs.n	8000b46 <__addsf3+0x92>
 8000b6a:	fab0 fc80 	clz	ip, r0
 8000b6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b72:	ebb2 020c 	subs.w	r2, r2, ip
 8000b76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7a:	bfaa      	itet	ge
 8000b7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b80:	4252      	neglt	r2, r2
 8000b82:	4318      	orrge	r0, r3
 8000b84:	bfbc      	itt	lt
 8000b86:	40d0      	lsrlt	r0, r2
 8000b88:	4318      	orrlt	r0, r3
 8000b8a:	4770      	bx	lr
 8000b8c:	f092 0f00 	teq	r2, #0
 8000b90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b94:	bf06      	itte	eq
 8000b96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b9a:	3201      	addeq	r2, #1
 8000b9c:	3b01      	subne	r3, #1
 8000b9e:	e7b5      	b.n	8000b0c <__addsf3+0x58>
 8000ba0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba8:	bf18      	it	ne
 8000baa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bae:	d021      	beq.n	8000bf4 <__addsf3+0x140>
 8000bb0:	ea92 0f03 	teq	r2, r3
 8000bb4:	d004      	beq.n	8000bc0 <__addsf3+0x10c>
 8000bb6:	f092 0f00 	teq	r2, #0
 8000bba:	bf08      	it	eq
 8000bbc:	4608      	moveq	r0, r1
 8000bbe:	4770      	bx	lr
 8000bc0:	ea90 0f01 	teq	r0, r1
 8000bc4:	bf1c      	itt	ne
 8000bc6:	2000      	movne	r0, #0
 8000bc8:	4770      	bxne	lr
 8000bca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bce:	d104      	bne.n	8000bda <__addsf3+0x126>
 8000bd0:	0040      	lsls	r0, r0, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bd8:	4770      	bx	lr
 8000bda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bde:	bf3c      	itt	cc
 8000be0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000be4:	4770      	bxcc	lr
 8000be6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf2:	4770      	bx	lr
 8000bf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf8:	bf16      	itet	ne
 8000bfa:	4608      	movne	r0, r1
 8000bfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c00:	4601      	movne	r1, r0
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	bf06      	itte	eq
 8000c06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0a:	ea90 0f01 	teqeq	r0, r1
 8000c0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_ui2f>:
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e004      	b.n	8000c24 <__aeabi_i2f+0x8>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_i2f>:
 8000c1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c20:	bf48      	it	mi
 8000c22:	4240      	negmi	r0, r0
 8000c24:	ea5f 0c00 	movs.w	ip, r0
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c30:	4601      	mov	r1, r0
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	e01c      	b.n	8000c72 <__aeabi_l2f+0x2a>

08000c38 <__aeabi_ul2f>:
 8000c38:	ea50 0201 	orrs.w	r2, r0, r1
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e00a      	b.n	8000c5c <__aeabi_l2f+0x14>
 8000c46:	bf00      	nop

08000c48 <__aeabi_l2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__aeabi_l2f+0x14>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	ea5f 0c01 	movs.w	ip, r1
 8000c60:	bf02      	ittt	eq
 8000c62:	4684      	moveq	ip, r0
 8000c64:	4601      	moveq	r1, r0
 8000c66:	2000      	moveq	r0, #0
 8000c68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c6c:	bf08      	it	eq
 8000c6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c76:	fabc f28c 	clz	r2, ip
 8000c7a:	3a08      	subs	r2, #8
 8000c7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c80:	db10      	blt.n	8000ca4 <__aeabi_l2f+0x5c>
 8000c82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c86:	4463      	add	r3, ip
 8000c88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c94:	fa20 f202 	lsr.w	r2, r0, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ca2:	4770      	bx	lr
 8000ca4:	f102 0220 	add.w	r2, r2, #32
 8000ca8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_fmul>:
 8000cc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ccc:	bf1e      	ittt	ne
 8000cce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd2:	ea92 0f0c 	teqne	r2, ip
 8000cd6:	ea93 0f0c 	teqne	r3, ip
 8000cda:	d06f      	beq.n	8000dbc <__aeabi_fmul+0xf8>
 8000cdc:	441a      	add	r2, r3
 8000cde:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce2:	0240      	lsls	r0, r0, #9
 8000ce4:	bf18      	it	ne
 8000ce6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cea:	d01e      	beq.n	8000d2a <__aeabi_fmul+0x66>
 8000cec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cf0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cf8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d00:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d04:	bf3e      	ittt	cc
 8000d06:	0049      	lslcc	r1, r1, #1
 8000d08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	ea40 0001 	orr.w	r0, r0, r1
 8000d12:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d16:	2afd      	cmp	r2, #253	@ 0xfd
 8000d18:	d81d      	bhi.n	8000d56 <__aeabi_fmul+0x92>
 8000d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d22:	bf08      	it	eq
 8000d24:	f020 0001 	biceq.w	r0, r0, #1
 8000d28:	4770      	bx	lr
 8000d2a:	f090 0f00 	teq	r0, #0
 8000d2e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d32:	bf08      	it	eq
 8000d34:	0249      	lsleq	r1, r1, #9
 8000d36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d3e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d40:	bfc2      	ittt	gt
 8000d42:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4a:	4770      	bxgt	lr
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	3a01      	subs	r2, #1
 8000d56:	dc5d      	bgt.n	8000e14 <__aeabi_fmul+0x150>
 8000d58:	f112 0f19 	cmn.w	r2, #25
 8000d5c:	bfdc      	itt	le
 8000d5e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d62:	4770      	bxle	lr
 8000d64:	f1c2 0200 	rsb	r2, r2, #0
 8000d68:	0041      	lsls	r1, r0, #1
 8000d6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d6e:	f1c2 0220 	rsb	r2, r2, #32
 8000d72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7a:	f140 0000 	adc.w	r0, r0, #0
 8000d7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d82:	bf08      	it	eq
 8000d84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d88:	4770      	bx	lr
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fmul+0xce>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fmul+0xe6>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e78f      	b.n	8000cdc <__aeabi_fmul+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	bf18      	it	ne
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d00a      	beq.n	8000de2 <__aeabi_fmul+0x11e>
 8000dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dd0:	bf18      	it	ne
 8000dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dd6:	d1d8      	bne.n	8000d8a <__aeabi_fmul+0xc6>
 8000dd8:	ea80 0001 	eor.w	r0, r0, r1
 8000ddc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	bf17      	itett	ne
 8000de8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dec:	4608      	moveq	r0, r1
 8000dee:	f091 0f00 	teqne	r1, #0
 8000df2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000df6:	d014      	beq.n	8000e22 <__aeabi_fmul+0x15e>
 8000df8:	ea92 0f0c 	teq	r2, ip
 8000dfc:	d101      	bne.n	8000e02 <__aeabi_fmul+0x13e>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	d10f      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e02:	ea93 0f0c 	teq	r3, ip
 8000e06:	d103      	bne.n	8000e10 <__aeabi_fmul+0x14c>
 8000e08:	024b      	lsls	r3, r1, #9
 8000e0a:	bf18      	it	ne
 8000e0c:	4608      	movne	r0, r1
 8000e0e:	d108      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e10:	ea80 0001 	eor.w	r0, r0, r1
 8000e14:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e20:	4770      	bx	lr
 8000e22:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e26:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_fdiv>:
 8000e2c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e34:	bf1e      	ittt	ne
 8000e36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3a:	ea92 0f0c 	teqne	r2, ip
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d069      	beq.n	8000f18 <__aeabi_fdiv+0xec>
 8000e44:	eba2 0203 	sub.w	r2, r2, r3
 8000e48:	ea80 0c01 	eor.w	ip, r0, r1
 8000e4c:	0249      	lsls	r1, r1, #9
 8000e4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e52:	d037      	beq.n	8000ec4 <__aeabi_fdiv+0x98>
 8000e54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e64:	428b      	cmp	r3, r1
 8000e66:	bf38      	it	cc
 8000e68:	005b      	lslcc	r3, r3, #1
 8000e6a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e6e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e72:	428b      	cmp	r3, r1
 8000e74:	bf24      	itt	cs
 8000e76:	1a5b      	subcs	r3, r3, r1
 8000e78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e80:	bf24      	itt	cs
 8000e82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e8e:	bf24      	itt	cs
 8000e90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	bf18      	it	ne
 8000eaa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eae:	d1e0      	bne.n	8000e72 <__aeabi_fdiv+0x46>
 8000eb0:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb2:	f63f af50 	bhi.w	8000d56 <__aeabi_fmul+0x92>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ec8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ecc:	327f      	adds	r2, #127	@ 0x7f
 8000ece:	bfc2      	ittt	gt
 8000ed0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ed4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ed8:	4770      	bxgt	lr
 8000eda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	3a01      	subs	r2, #1
 8000ee4:	e737      	b.n	8000d56 <__aeabi_fmul+0x92>
 8000ee6:	f092 0f00 	teq	r2, #0
 8000eea:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000eee:	bf02      	ittt	eq
 8000ef0:	0040      	lsleq	r0, r0, #1
 8000ef2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ef6:	3a01      	subeq	r2, #1
 8000ef8:	d0f9      	beq.n	8000eee <__aeabi_fdiv+0xc2>
 8000efa:	ea40 000c 	orr.w	r0, r0, ip
 8000efe:	f093 0f00 	teq	r3, #0
 8000f02:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0049      	lsleq	r1, r1, #1
 8000f0a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f0e:	3b01      	subeq	r3, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fdiv+0xda>
 8000f12:	ea41 010c 	orr.w	r1, r1, ip
 8000f16:	e795      	b.n	8000e44 <__aeabi_fdiv+0x18>
 8000f18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d108      	bne.n	8000f34 <__aeabi_fdiv+0x108>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	f47f af7d 	bne.w	8000e22 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	f47f af70 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e776      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f34:	ea93 0f0c 	teq	r3, ip
 8000f38:	d104      	bne.n	8000f44 <__aeabi_fdiv+0x118>
 8000f3a:	024b      	lsls	r3, r1, #9
 8000f3c:	f43f af4c 	beq.w	8000dd8 <__aeabi_fmul+0x114>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e76e      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f44:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f48:	bf18      	it	ne
 8000f4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f4e:	d1ca      	bne.n	8000ee6 <__aeabi_fdiv+0xba>
 8000f50:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f54:	f47f af5c 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f58:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f5c:	f47f af3c 	bne.w	8000dd8 <__aeabi_fmul+0x114>
 8000f60:	e75f      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f62:	bf00      	nop

08000f64 <__gesf2>:
 8000f64:	f04f 3cff 	mov.w	ip, #4294967295
 8000f68:	e006      	b.n	8000f78 <__cmpsf2+0x4>
 8000f6a:	bf00      	nop

08000f6c <__lesf2>:
 8000f6c:	f04f 0c01 	mov.w	ip, #1
 8000f70:	e002      	b.n	8000f78 <__cmpsf2+0x4>
 8000f72:	bf00      	nop

08000f74 <__cmpsf2>:
 8000f74:	f04f 0c01 	mov.w	ip, #1
 8000f78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f88:	bf18      	it	ne
 8000f8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f8e:	d011      	beq.n	8000fb4 <__cmpsf2+0x40>
 8000f90:	b001      	add	sp, #4
 8000f92:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f96:	bf18      	it	ne
 8000f98:	ea90 0f01 	teqne	r0, r1
 8000f9c:	bf58      	it	pl
 8000f9e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fa2:	bf88      	it	hi
 8000fa4:	17c8      	asrhi	r0, r1, #31
 8000fa6:	bf38      	it	cc
 8000fa8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fac:	bf18      	it	ne
 8000fae:	f040 0001 	orrne.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	d102      	bne.n	8000fc0 <__cmpsf2+0x4c>
 8000fba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fbe:	d105      	bne.n	8000fcc <__cmpsf2+0x58>
 8000fc0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fc4:	d1e4      	bne.n	8000f90 <__cmpsf2+0x1c>
 8000fc6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fca:	d0e1      	beq.n	8000f90 <__cmpsf2+0x1c>
 8000fcc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_cfrcmple>:
 8000fd4:	4684      	mov	ip, r0
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	4661      	mov	r1, ip
 8000fda:	e7ff      	b.n	8000fdc <__aeabi_cfcmpeq>

08000fdc <__aeabi_cfcmpeq>:
 8000fdc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fde:	f7ff ffc9 	bl	8000f74 <__cmpsf2>
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	bf48      	it	mi
 8000fe6:	f110 0f00 	cmnmi.w	r0, #0
 8000fea:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fec <__aeabi_fcmpeq>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff fff4 	bl	8000fdc <__aeabi_cfcmpeq>
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2001      	moveq	r0, #1
 8000ff8:	2000      	movne	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmplt>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffea 	bl	8000fdc <__aeabi_cfcmpeq>
 8001008:	bf34      	ite	cc
 800100a:	2001      	movcc	r0, #1
 800100c:	2000      	movcs	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmple>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffe0 	bl	8000fdc <__aeabi_cfcmpeq>
 800101c:	bf94      	ite	ls
 800101e:	2001      	movls	r0, #1
 8001020:	2000      	movhi	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmpge>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffd2 	bl	8000fd4 <__aeabi_cfrcmple>
 8001030:	bf94      	ite	ls
 8001032:	2001      	movls	r0, #1
 8001034:	2000      	movhi	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmpgt>:
 800103c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001040:	f7ff ffc8 	bl	8000fd4 <__aeabi_cfrcmple>
 8001044:	bf34      	ite	cc
 8001046:	2001      	movcc	r0, #1
 8001048:	2000      	movcs	r0, #0
 800104a:	f85d fb08 	ldr.w	pc, [sp], #8
 800104e:	bf00      	nop

08001050 <__aeabi_fcmpun>:
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	d102      	bne.n	8001064 <__aeabi_fcmpun+0x14>
 800105e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001062:	d108      	bne.n	8001076 <__aeabi_fcmpun+0x26>
 8001064:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001068:	d102      	bne.n	8001070 <__aeabi_fcmpun+0x20>
 800106a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106e:	d102      	bne.n	8001076 <__aeabi_fcmpun+0x26>
 8001070:	f04f 0000 	mov.w	r0, #0
 8001074:	4770      	bx	lr
 8001076:	f04f 0001 	mov.w	r0, #1
 800107a:	4770      	bx	lr

0800107c <__aeabi_f2uiz>:
 800107c:	0042      	lsls	r2, r0, #1
 800107e:	d20e      	bcs.n	800109e <__aeabi_f2uiz+0x22>
 8001080:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001084:	d30b      	bcc.n	800109e <__aeabi_f2uiz+0x22>
 8001086:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800108a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800108e:	d409      	bmi.n	80010a4 <__aeabi_f2uiz+0x28>
 8001090:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001094:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001098:	fa23 f002 	lsr.w	r0, r3, r2
 800109c:	4770      	bx	lr
 800109e:	f04f 0000 	mov.w	r0, #0
 80010a2:	4770      	bx	lr
 80010a4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010a8:	d101      	bne.n	80010ae <__aeabi_f2uiz+0x32>
 80010aa:	0242      	lsls	r2, r0, #9
 80010ac:	d102      	bne.n	80010b4 <__aeabi_f2uiz+0x38>
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295
 80010b2:	4770      	bx	lr
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <SystemClock_Config>:

/**
 * @brief Cấu hình hệ thống clock STM32F1 sử dụng HSE + PLL để chạy ở 72 MHz.
 */
void SystemClock_Config(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
    // 1. Bật HSE
    RCC->CR |= RCC_CR_HSEON;
 80010c0:	4b34      	ldr	r3, [pc, #208]	@ (8001194 <SystemClock_Config+0xd8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a33      	ldr	r2, [pc, #204]	@ (8001194 <SystemClock_Config+0xd8>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ca:	6013      	str	r3, [r2, #0]

    // 2. Chờ HSE ổn định
    while (!(RCC->CR & RCC_CR_HSERDY))
 80010cc:	bf00      	nop
 80010ce:	4b31      	ldr	r3, [pc, #196]	@ (8001194 <SystemClock_Config+0xd8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f9      	beq.n	80010ce <SystemClock_Config+0x12>
        ;

    // 3. Cấu hình Flash: 2 wait states (để hoạt động 72MHz)
    FLASH->ACR |= FLASH_ACR_PRFTBE; // Enable prefetch buffer
 80010da:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <SystemClock_Config+0xdc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a2e      	ldr	r2, [pc, #184]	@ (8001198 <SystemClock_Config+0xdc>)
 80010e0:	f043 0310 	orr.w	r3, r3, #16
 80010e4:	6013      	str	r3, [r2, #0]
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80010e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001198 <SystemClock_Config+0xdc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001198 <SystemClock_Config+0xdc>)
 80010ec:	f023 0307 	bic.w	r3, r3, #7
 80010f0:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_LATENCY_2; // 2 wait states
 80010f2:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <SystemClock_Config+0xdc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a28      	ldr	r2, [pc, #160]	@ (8001198 <SystemClock_Config+0xdc>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6013      	str	r3, [r2, #0]

    // 4. Cấu hình PLL: nguồn HSE, nhân 9 => 8MHz x 9 = 72MHz
    RCC->CFGR &= ~RCC_CFGR_PLLSRC; // Clear PLL source
 80010fe:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <SystemClock_Config+0xd8>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4a24      	ldr	r2, [pc, #144]	@ (8001194 <SystemClock_Config+0xd8>)
 8001104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001108:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLSRC;  // PLL source = HSE
 800110a:	4b22      	ldr	r3, [pc, #136]	@ (8001194 <SystemClock_Config+0xd8>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a21      	ldr	r2, [pc, #132]	@ (8001194 <SystemClock_Config+0xd8>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001114:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= ~RCC_CFGR_PLLMULL;
 8001116:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <SystemClock_Config+0xd8>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4a1e      	ldr	r2, [pc, #120]	@ (8001194 <SystemClock_Config+0xd8>)
 800111c:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8001120:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLMULL9; // PLL x9
 8001122:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <SystemClock_Config+0xd8>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4a1b      	ldr	r2, [pc, #108]	@ (8001194 <SystemClock_Config+0xd8>)
 8001128:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 800112c:	6053      	str	r3, [r2, #4]

    // 5. Cấu hình bus
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;  // AHB = SYSCLK
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <SystemClock_Config+0xd8>)
 8001130:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <SystemClock_Config+0xd8>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; // APB1 = HCLK/2 (max 36MHz)
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <SystemClock_Config+0xd8>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a16      	ldr	r2, [pc, #88]	@ (8001194 <SystemClock_Config+0xd8>)
 800113c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001140:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; // APB2 = HCLK
 8001142:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <SystemClock_Config+0xd8>)
 8001144:	4a13      	ldr	r2, [pc, #76]	@ (8001194 <SystemClock_Config+0xd8>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	6053      	str	r3, [r2, #4]

    // 6. Bật PLL
    RCC->CR |= RCC_CR_PLLON;
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <SystemClock_Config+0xd8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a11      	ldr	r2, [pc, #68]	@ (8001194 <SystemClock_Config+0xd8>)
 8001150:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001154:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY))
 8001156:	bf00      	nop
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <SystemClock_Config+0xd8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f9      	beq.n	8001158 <SystemClock_Config+0x9c>
        ;

    // 7. Chọn PLL làm hệ thống clock
    RCC->CFGR &= ~RCC_CFGR_SW;
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <SystemClock_Config+0xd8>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <SystemClock_Config+0xd8>)
 800116a:	f023 0303 	bic.w	r3, r3, #3
 800116e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <SystemClock_Config+0xd8>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <SystemClock_Config+0xd8>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 800117c:	bf00      	nop
 800117e:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <SystemClock_Config+0xd8>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b08      	cmp	r3, #8
 8001188:	d1f9      	bne.n	800117e <SystemClock_Config+0xc2>
        ;
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40021000 	.word	0x40021000
 8001198:	40022000 	.word	0x40022000

0800119c <App_Init>:

void App_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
    SystemClock_Config();
 80011a0:	f7ff ff8c 	bl	80010bc <SystemClock_Config>
    USART1_Init(9600);
 80011a4:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80011a8:	f001 fab8 	bl	800271c <USART1_Init>
    Timer_Init();
 80011ac:	f002 fc24 	bl	80039f8 <Timer_Init>
    Queue_init(&g_uartQueue);
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <App_Init+0x2c>)
 80011b2:	f002 fb18 	bl	80037e6 <Queue_init>
    device_init();
 80011b6:	f001 ff91 	bl	80030dc <device_init>
    // GPIOA->CRL |= (GPIO_CRL_MODE5_1 | GPIO_CRL_MODE5_0); 
    // GPIOA->CRL |= (0b00 << 22);                          

    

    DUNGX_UART_Receive_IT(&huart1, uart_rx_buffer, 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	4903      	ldr	r1, [pc, #12]	@ (80011cc <App_Init+0x30>)
 80011be:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <App_Init+0x34>)
 80011c0:	f001 faf6 	bl	80027b0 <DUNGX_UART_Receive_IT>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000022c 	.word	0x2000022c
 80011cc:	200003a0 	.word	0x200003a0
 80011d0:	200001f0 	.word	0x200001f0

080011d4 <App_Loop>:

void App_Loop(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    READ_Sensor();
 80011d8:	f001 ffc8 	bl	800316c <READ_Sensor>
    Notify_SendMessage();
 80011dc:	f002 f812 	bl	8003204 <Notify_SendMessage>
    if (sys.mode == AUTO_MODE)
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <App_Loop+0x38>)
 80011e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <App_Loop+0x1c>
    {
        Auto_Process();
 80011ea:	f000 f811 	bl	8001210 <Auto_Process>
 80011ee:	e006      	b.n	80011fe <App_Loop+0x2a>
    }
    else if (sys.mode == MANUAL_MODE)
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <App_Loop+0x38>)
 80011f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <App_Loop+0x2a>
    {
        Manual_Process();
 80011fa:	f000 f8f9 	bl	80013f0 <Manual_Process>
    }
    
    Delay_ms(500);
 80011fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001202:	f002 fc4b 	bl	8003a9c <Delay_ms>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200003ac 	.word	0x200003ac

08001210 <Auto_Process>:
#include "led_rgb.h"
#include "motor.h"
#include "siren.h"

void Auto_Process(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
    if (sys.mode == AUTO_MODE)
 8001216:	4b6c      	ldr	r3, [pc, #432]	@ (80013c8 <Auto_Process+0x1b8>)
 8001218:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800121c:	2b00      	cmp	r3, #0
 800121e:	f040 80d0 	bne.w	80013c2 <Auto_Process+0x1b2>
    {
        if(sys.lux <300.0f) 
 8001222:	4b69      	ldr	r3, [pc, #420]	@ (80013c8 <Auto_Process+0x1b8>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	4969      	ldr	r1, [pc, #420]	@ (80013cc <Auto_Process+0x1bc>)
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fee9 	bl	8001000 <__aeabi_fcmplt>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00c      	beq.n	800124e <Auto_Process+0x3e>
        {
            LED_RGB_SetState(LED_WHITE_100); // Bật đèn LED RGB sáng trắng 100%
 8001234:	2002      	movs	r0, #2
 8001236:	f001 fdf5 	bl	8002e24 <LED_RGB_SetState>
            sys.led_r = 255.0f; 
 800123a:	4b63      	ldr	r3, [pc, #396]	@ (80013c8 <Auto_Process+0x1b8>)
 800123c:	4a64      	ldr	r2, [pc, #400]	@ (80013d0 <Auto_Process+0x1c0>)
 800123e:	611a      	str	r2, [r3, #16]
            sys.led_g = 255.0f; 
 8001240:	4b61      	ldr	r3, [pc, #388]	@ (80013c8 <Auto_Process+0x1b8>)
 8001242:	4a63      	ldr	r2, [pc, #396]	@ (80013d0 <Auto_Process+0x1c0>)
 8001244:	615a      	str	r2, [r3, #20]
            sys.led_b = 255.0f;
 8001246:	4b60      	ldr	r3, [pc, #384]	@ (80013c8 <Auto_Process+0x1b8>)
 8001248:	4a61      	ldr	r2, [pc, #388]	@ (80013d0 <Auto_Process+0x1c0>)
 800124a:	619a      	str	r2, [r3, #24]
 800124c:	e039      	b.n	80012c2 <Auto_Process+0xb2>
        }
        else if(sys.lux >= 300.0f && sys.lux < 600.0f) 
 800124e:	4b5e      	ldr	r3, [pc, #376]	@ (80013c8 <Auto_Process+0x1b8>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	495e      	ldr	r1, [pc, #376]	@ (80013cc <Auto_Process+0x1bc>)
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fee7 	bl	8001028 <__aeabi_fcmpge>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d015      	beq.n	800128c <Auto_Process+0x7c>
 8001260:	4b59      	ldr	r3, [pc, #356]	@ (80013c8 <Auto_Process+0x1b8>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	495b      	ldr	r1, [pc, #364]	@ (80013d4 <Auto_Process+0x1c4>)
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff feca 	bl	8001000 <__aeabi_fcmplt>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00c      	beq.n	800128c <Auto_Process+0x7c>
        {
            LED_RGB_SetState(LED_WHITE_50); // Bật đèn LED RGB sáng trắng 50%
 8001272:	2001      	movs	r0, #1
 8001274:	f001 fdd6 	bl	8002e24 <LED_RGB_SetState>
            sys.led_r = 127.0f; 
 8001278:	4b53      	ldr	r3, [pc, #332]	@ (80013c8 <Auto_Process+0x1b8>)
 800127a:	4a57      	ldr	r2, [pc, #348]	@ (80013d8 <Auto_Process+0x1c8>)
 800127c:	611a      	str	r2, [r3, #16]
            sys.led_g = 127.0f; 
 800127e:	4b52      	ldr	r3, [pc, #328]	@ (80013c8 <Auto_Process+0x1b8>)
 8001280:	4a55      	ldr	r2, [pc, #340]	@ (80013d8 <Auto_Process+0x1c8>)
 8001282:	615a      	str	r2, [r3, #20]
            sys.led_b = 127.0f;
 8001284:	4b50      	ldr	r3, [pc, #320]	@ (80013c8 <Auto_Process+0x1b8>)
 8001286:	4a54      	ldr	r2, [pc, #336]	@ (80013d8 <Auto_Process+0x1c8>)
 8001288:	619a      	str	r2, [r3, #24]
 800128a:	e01a      	b.n	80012c2 <Auto_Process+0xb2>
        }
        else if(sys.lux >= 600.0f) 
 800128c:	4b4e      	ldr	r3, [pc, #312]	@ (80013c8 <Auto_Process+0x1b8>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4950      	ldr	r1, [pc, #320]	@ (80013d4 <Auto_Process+0x1c4>)
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fec8 	bl	8001028 <__aeabi_fcmpge>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00f      	beq.n	80012be <Auto_Process+0xae>
        {
            LED_RGB_SetState(LED_OFF); // Tắt đèn LED RGB
 800129e:	2000      	movs	r0, #0
 80012a0:	f001 fdc0 	bl	8002e24 <LED_RGB_SetState>
            sys.led_r = 0.0f; 
 80012a4:	4b48      	ldr	r3, [pc, #288]	@ (80013c8 <Auto_Process+0x1b8>)
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
            sys.led_g = 0.0f; 
 80012ac:	4b46      	ldr	r3, [pc, #280]	@ (80013c8 <Auto_Process+0x1b8>)
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
            sys.led_b = 0.0f; 
 80012b4:	4b44      	ldr	r3, [pc, #272]	@ (80013c8 <Auto_Process+0x1b8>)
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
 80012bc:	e001      	b.n	80012c2 <Auto_Process+0xb2>
        }
        else
        {
            // Tắt đèn LED RGB
            LED_RGB_Off();
 80012be:	f001 fd9b 	bl	8002df8 <LED_RGB_Off>
        }

        if(sys.temperature > 30.0f) 
 80012c2:	4b41      	ldr	r3, [pc, #260]	@ (80013c8 <Auto_Process+0x1b8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4945      	ldr	r1, [pc, #276]	@ (80013dc <Auto_Process+0x1cc>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff feb7 	bl	800103c <__aeabi_fcmpgt>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00a      	beq.n	80012ea <Auto_Process+0xda>
        {
            Mototr_SetLevel(3); // Bật motor với tốc độ cao
 80012d4:	2003      	movs	r0, #3
 80012d6:	f001 fe97 	bl	8003008 <Mototr_SetLevel>
            sys.motor_level = 3.0f; 
 80012da:	4b3b      	ldr	r3, [pc, #236]	@ (80013c8 <Auto_Process+0x1b8>)
 80012dc:	4a40      	ldr	r2, [pc, #256]	@ (80013e0 <Auto_Process+0x1d0>)
 80012de:	621a      	str	r2, [r3, #32]
            
            sys.motor_dir = 0.0f; 
 80012e0:	4b39      	ldr	r3, [pc, #228]	@ (80013c8 <Auto_Process+0x1b8>)
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80012e8:	e060      	b.n	80013ac <Auto_Process+0x19c>
        }
        else if(sys.temperature <= 30.0f && sys.temperature > 25.0f) 
 80012ea:	4b37      	ldr	r3, [pc, #220]	@ (80013c8 <Auto_Process+0x1b8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	493b      	ldr	r1, [pc, #236]	@ (80013dc <Auto_Process+0x1cc>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe8f 	bl	8001014 <__aeabi_fcmple>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d010      	beq.n	800131e <Auto_Process+0x10e>
 80012fc:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <Auto_Process+0x1b8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4938      	ldr	r1, [pc, #224]	@ (80013e4 <Auto_Process+0x1d4>)
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fe9a 	bl	800103c <__aeabi_fcmpgt>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <Auto_Process+0x10e>
        {
            Mototr_SetLevel(2);
 800130e:	2002      	movs	r0, #2
 8001310:	f001 fe7a 	bl	8003008 <Mototr_SetLevel>
            sys.motor_level = 2.0f; 
 8001314:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <Auto_Process+0x1b8>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800131a:	621a      	str	r2, [r3, #32]
 800131c:	e020      	b.n	8001360 <Auto_Process+0x150>
        }
        else if(sys.temperature <= 25.0f && sys.temperature > 20.0f) 
 800131e:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <Auto_Process+0x1b8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4930      	ldr	r1, [pc, #192]	@ (80013e4 <Auto_Process+0x1d4>)
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe75 	bl	8001014 <__aeabi_fcmple>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d010      	beq.n	8001352 <Auto_Process+0x142>
 8001330:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <Auto_Process+0x1b8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	492c      	ldr	r1, [pc, #176]	@ (80013e8 <Auto_Process+0x1d8>)
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe80 	bl	800103c <__aeabi_fcmpgt>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <Auto_Process+0x142>
        {
            Mototr_SetLevel(1); // Bật motor với tốc độ thấp
 8001342:	2001      	movs	r0, #1
 8001344:	f001 fe60 	bl	8003008 <Mototr_SetLevel>
            sys.motor_level = 1.0f; 
 8001348:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <Auto_Process+0x1b8>)
 800134a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800134e:	621a      	str	r2, [r3, #32]
 8001350:	e006      	b.n	8001360 <Auto_Process+0x150>
        }
        else
        {
            Mototr_SetLevel(0); // Tắt motor
 8001352:	2000      	movs	r0, #0
 8001354:	f001 fe58 	bl	8003008 <Mototr_SetLevel>
            sys.motor_level = 0.0f; 
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <Auto_Process+0x1b8>)
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
        }

        
        while (!empty(&g_uartQueue))
 8001360:	e024      	b.n	80013ac <Auto_Process+0x19c>
        {
            message_t *message = front(&g_uartQueue);
 8001362:	4822      	ldr	r0, [pc, #136]	@ (80013ec <Auto_Process+0x1dc>)
 8001364:	f002 fae8 	bl	8003938 <front>
 8001368:	6078      	str	r0, [r7, #4]
            if (message == NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d027      	beq.n	80013c0 <Auto_Process+0x1b0>
            {
                return; // Không có gói tin nào trong hàng đợi
            }

            // Kiểm tra gói tin có hợp lệ không
            if (message->header[0] == COMMAND && message->header[2] == 4 && message->header[1] == AUTO)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	785b      	ldrb	r3, [r3, #1]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d116      	bne.n	80013a6 <Auto_Process+0x196>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	78db      	ldrb	r3, [r3, #3]
 800137c:	2b04      	cmp	r3, #4
 800137e:	d112      	bne.n	80013a6 <Auto_Process+0x196>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	789b      	ldrb	r3, [r3, #2]
 8001384:	2b20      	cmp	r3, #32
 8001386:	d10e      	bne.n	80013a6 <Auto_Process+0x196>
            {
                sys.mode = (MODE)Convert_Bytes_To_Int(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7918      	ldrb	r0, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7959      	ldrb	r1, [r3, #5]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	799a      	ldrb	r2, [r3, #6]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	79db      	ldrb	r3, [r3, #7]
 8001398:	f002 f86f 	bl	800347a <Convert_Bytes_To_Int>
 800139c:	4603      	mov	r3, r0
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <Auto_Process+0x1b8>)
 80013a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            }
            // Xóa gói tin đã xử lý khỏi hàng đợi
            pop(&g_uartQueue);
 80013a6:	4811      	ldr	r0, [pc, #68]	@ (80013ec <Auto_Process+0x1dc>)
 80013a8:	f002 fa9a 	bl	80038e0 <pop>
        while (!empty(&g_uartQueue))
 80013ac:	480f      	ldr	r0, [pc, #60]	@ (80013ec <Auto_Process+0x1dc>)
 80013ae:	f002 fa30 	bl	8003812 <empty>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f083 0301 	eor.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1d1      	bne.n	8001362 <Auto_Process+0x152>
 80013be:	e000      	b.n	80013c2 <Auto_Process+0x1b2>
                return; // Không có gói tin nào trong hàng đợi
 80013c0:	bf00      	nop
        }
    }
}
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200003ac 	.word	0x200003ac
 80013cc:	43960000 	.word	0x43960000
 80013d0:	437f0000 	.word	0x437f0000
 80013d4:	44160000 	.word	0x44160000
 80013d8:	42fe0000 	.word	0x42fe0000
 80013dc:	41f00000 	.word	0x41f00000
 80013e0:	40400000 	.word	0x40400000
 80013e4:	41c80000 	.word	0x41c80000
 80013e8:	41a00000 	.word	0x41a00000
 80013ec:	2000022c 	.word	0x2000022c

080013f0 <Manual_Process>:
#include "led_rgb.h"
#include "motor.h"
#include "siren.h"

void Manual_Process(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
    while (!empty(&g_uartQueue) && (sys.mode == MANUAL_MODE))
 80013f6:	e09a      	b.n	800152e <Manual_Process+0x13e>
    {
        message_t *message = front(&g_uartQueue);
 80013f8:	4857      	ldr	r0, [pc, #348]	@ (8001558 <Manual_Process+0x168>)
 80013fa:	f002 fa9d 	bl	8003938 <front>
 80013fe:	6078      	str	r0, [r7, #4]
        if (message == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80a3 	beq.w	800154e <Manual_Process+0x15e>
        {
            return;
        }
        // Xử lý gói tin trong chế độ Manual
        if (message->header[0] == COMMAND && message->header[2] == 4)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	785b      	ldrb	r3, [r3, #1]
 800140c:	2b01      	cmp	r3, #1
 800140e:	f040 808b 	bne.w	8001528 <Manual_Process+0x138>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	78db      	ldrb	r3, [r3, #3]
 8001416:	2b04      	cmp	r3, #4
 8001418:	f040 8086 	bne.w	8001528 <Manual_Process+0x138>
        {
            switch (message->header[1])
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	789b      	ldrb	r3, [r3, #2]
 8001420:	3b11      	subs	r3, #17
 8001422:	2b0f      	cmp	r3, #15
 8001424:	d87f      	bhi.n	8001526 <Manual_Process+0x136>
 8001426:	a201      	add	r2, pc, #4	@ (adr r2, 800142c <Manual_Process+0x3c>)
 8001428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142c:	0800146d 	.word	0x0800146d
 8001430:	0800149d 	.word	0x0800149d
 8001434:	080014cd 	.word	0x080014cd
 8001438:	08001527 	.word	0x08001527
 800143c:	08001527 	.word	0x08001527
 8001440:	08001527 	.word	0x08001527
 8001444:	08001527 	.word	0x08001527
 8001448:	08001527 	.word	0x08001527
 800144c:	08001527 	.word	0x08001527
 8001450:	08001527 	.word	0x08001527
 8001454:	08001527 	.word	0x08001527
 8001458:	08001527 	.word	0x08001527
 800145c:	08001527 	.word	0x08001527
 8001460:	08001527 	.word	0x08001527
 8001464:	08001527 	.word	0x08001527
 8001468:	08001507 	.word	0x08001507
            {
            case LED:
                // Thiết lập màu LED RGB
                sys.led_state = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7918      	ldrb	r0, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7959      	ldrb	r1, [r3, #5]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	799a      	ldrb	r2, [r3, #6]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	79db      	ldrb	r3, [r3, #7]
 800147c:	f001 ffe0 	bl	8003440 <Convert_Bytes_To_Float>
 8001480:	4603      	mov	r3, r0
 8001482:	4a36      	ldr	r2, [pc, #216]	@ (800155c <Manual_Process+0x16c>)
 8001484:	61d3      	str	r3, [r2, #28]
                LED_RGB_SetState(sys.led_state);
 8001486:	4b35      	ldr	r3, [pc, #212]	@ (800155c <Manual_Process+0x16c>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fdf6 	bl	800107c <__aeabi_f2uiz>
 8001490:	4603      	mov	r3, r0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f001 fcc5 	bl	8002e24 <LED_RGB_SetState>
                break;
 800149a:	e045      	b.n	8001528 <Manual_Process+0x138>
            case MOTOR:
                // Thiết lập tốc độ và hướng của motor
                sys.motor_level = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7918      	ldrb	r0, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7959      	ldrb	r1, [r3, #5]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	799a      	ldrb	r2, [r3, #6]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	79db      	ldrb	r3, [r3, #7]
 80014ac:	f001 ffc8 	bl	8003440 <Convert_Bytes_To_Float>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a2a      	ldr	r2, [pc, #168]	@ (800155c <Manual_Process+0x16c>)
 80014b4:	6213      	str	r3, [r2, #32]
                Mototr_SetLevel((uint8_t)sys.motor_level);
 80014b6:	4b29      	ldr	r3, [pc, #164]	@ (800155c <Manual_Process+0x16c>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fdde 	bl	800107c <__aeabi_f2uiz>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 fd9f 	bl	8003008 <Mototr_SetLevel>
                break;
 80014ca:	e02d      	b.n	8001528 <Manual_Process+0x138>
            case SIREN:
                // Bật/tắt còi
                sys.siren_on = Convert_Bytes_To_Float(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7918      	ldrb	r0, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7959      	ldrb	r1, [r3, #5]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	799a      	ldrb	r2, [r3, #6]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	79db      	ldrb	r3, [r3, #7]
 80014dc:	f001 ffb0 	bl	8003440 <Convert_Bytes_To_Float>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4a1e      	ldr	r2, [pc, #120]	@ (800155c <Manual_Process+0x16c>)
 80014e4:	6293      	str	r3, [r2, #40]	@ 0x28
                if (sys.siren_on > 0)
 80014e6:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <Manual_Process+0x16c>)
 80014e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ea:	f04f 0100 	mov.w	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fda4 	bl	800103c <__aeabi_fcmpgt>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <Manual_Process+0x110>
                {
                    Siren_On();
 80014fa:	f001 fdd7 	bl	80030ac <Siren_On>
                }
                else
                {
                    Siren_Off();
                }
                break;
 80014fe:	e013      	b.n	8001528 <Manual_Process+0x138>
                    Siren_Off();
 8001500:	f001 fde0 	bl	80030c4 <Siren_Off>
                break;
 8001504:	e010      	b.n	8001528 <Manual_Process+0x138>
            case AUTO:
                sys.mode = (MODE)Convert_Bytes_To_Int(message->payload[0], message->payload[1], message->payload[2], message->payload[3]);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7918      	ldrb	r0, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7959      	ldrb	r1, [r3, #5]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	799a      	ldrb	r2, [r3, #6]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	79db      	ldrb	r3, [r3, #7]
 8001516:	f001 ffb0 	bl	800347a <Convert_Bytes_To_Int>
 800151a:	4603      	mov	r3, r0
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <Manual_Process+0x16c>)
 8001520:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                // TODO
                break;
 8001524:	e000      	b.n	8001528 <Manual_Process+0x138>
            default:
                // Gói tin không hợp lệ, có thể ghi log hoặc thông báo lỗi
                break;
 8001526:	bf00      	nop
            }
        }
        // Xóa gói tin đã xử lý khỏi hàng đợi
        pop(&g_uartQueue);
 8001528:	480b      	ldr	r0, [pc, #44]	@ (8001558 <Manual_Process+0x168>)
 800152a:	f002 f9d9 	bl	80038e0 <pop>
    while (!empty(&g_uartQueue) && (sys.mode == MANUAL_MODE))
 800152e:	480a      	ldr	r0, [pc, #40]	@ (8001558 <Manual_Process+0x168>)
 8001530:	f002 f96f 	bl	8003812 <empty>
 8001534:	4603      	mov	r3, r0
 8001536:	f083 0301 	eor.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d007      	beq.n	8001550 <Manual_Process+0x160>
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <Manual_Process+0x16c>)
 8001542:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001546:	2b01      	cmp	r3, #1
 8001548:	f43f af56 	beq.w	80013f8 <Manual_Process+0x8>
 800154c:	e000      	b.n	8001550 <Manual_Process+0x160>
            return;
 800154e:	bf00      	nop
    }
}
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000022c 	.word	0x2000022c
 800155c:	200003ac 	.word	0x200003ac

08001560 <main>:
 */

#include "app_main.h"

int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    App_Init();
 8001564:	f7ff fe1a 	bl	800119c <App_Init>
    while (1)
    {
        App_Loop();
 8001568:	f7ff fe34 	bl	80011d4 <App_Loop>
 800156c:	e7fc      	b.n	8001568 <main+0x8>

0800156e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  return 1;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <_kill>:

int _kill(int pid, int sig)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001586:	f003 f881 	bl	800468c <__errno>
 800158a:	4603      	mov	r3, r0
 800158c:	2216      	movs	r2, #22
 800158e:	601a      	str	r2, [r3, #0]
  return -1;
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_exit>:

void _exit (int status)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ffe7 	bl	800157c <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ae:	bf00      	nop
 80015b0:	e7fd      	b.n	80015ae <_exit+0x12>

080015b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e00a      	b.n	80015da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015c4:	f3af 8000 	nop.w
 80015c8:	4601      	mov	r1, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	60ba      	str	r2, [r7, #8]
 80015d0:	b2ca      	uxtb	r2, r1
 80015d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	dbf0      	blt.n	80015c4 <_read+0x12>
  }

  return len;
 80015e2:	687b      	ldr	r3, [r7, #4]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e009      	b.n	8001612 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	60ba      	str	r2, [r7, #8]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	429a      	cmp	r2, r3
 8001618:	dbf1      	blt.n	80015fe <_write+0x12>
  }
  return len;
 800161a:	687b      	ldr	r3, [r7, #4]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_close>:

int _close(int file)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800164a:	605a      	str	r2, [r3, #4]
  return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <_isatty>:

int _isatty(int file)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f002 ffea 	bl	800468c <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	220c      	movs	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20002800 	.word	0x20002800
 80016e4:	00000400 	.word	0x00000400
 80016e8:	200003dc 	.word	0x200003dc
 80016ec:	200005d8 	.word	0x200005d8

080016f0 <ADC_Init>:
/* stm32_adc.c - Minimal ADC Driver for STM32F103C6T6 */

#include "stm32_adc.h"

StatusTypeDef ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
    if (hadc == NULL || hadc->Instance != ADC1) {
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <ADC_Init+0x18>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a3a      	ldr	r2, [pc, #232]	@ (80017ec <ADC_Init+0xfc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d001      	beq.n	800170c <ADC_Init+0x1c>
        return DUNGX_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e069      	b.n	80017e0 <ADC_Init+0xf0>
    }

    // Enable ADC1 clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800170c:	4b38      	ldr	r3, [pc, #224]	@ (80017f0 <ADC_Init+0x100>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a37      	ldr	r2, [pc, #220]	@ (80017f0 <ADC_Init+0x100>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001716:	6193      	str	r3, [r2, #24]

    // Reset CR1 and CR2
    hadc->Instance->CR1 = 0;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR2 = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]

    // Set scan mode
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001730:	d107      	bne.n	8001742 <ADC_Init+0x52>
        hadc->Instance->CR1 |= ADC_SCAN_ENABLE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001740:	605a      	str	r2, [r3, #4]
    }

    // Set data alignment
    if (hadc->Init.DataAlign == ADC_DATAALIGN_LEFT) {
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800174a:	d107      	bne.n	800175c <ADC_Init+0x6c>
        hadc->Instance->CR2 |= ADC_DATAALIGN_LEFT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800175a:	609a      	str	r2, [r3, #8]
    }

    // Set continuous conversion
    if (hadc->Init.ContinuousConvMode == ENABLE) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7b1b      	ldrb	r3, [r3, #12]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d107      	bne.n	8001774 <ADC_Init+0x84>
        hadc->Instance->CR2 |= ADC_CR2_CONT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0202 	orr.w	r2, r2, #2
 8001772:	609a      	str	r2, [r3, #8]
    }

    // Set number of conversions
    hadc->Instance->SQR1 &= ~ADC_SQR1_L;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001782:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= (hadc->Init.NbrOfConversion - 1) << 20;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	3b01      	subs	r3, #1
 8001790:	051a      	lsls	r2, r3, #20
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable ADC
    ADC_ENABLE(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0201 	orr.w	r2, r2, #1
 80017a8:	609a      	str	r2, [r3, #8]

    // Short delay before calibration
    for (volatile int i = 0; i < 1000; ++i);
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e002      	b.n	80017b6 <ADC_Init+0xc6>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017bc:	dbf8      	blt.n	80017b0 <ADC_Init+0xc0>

    // Calibration
    hadc->Instance->CR2 |= ADC_CR2_CAL;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0204 	orr.w	r2, r2, #4
 80017cc:	609a      	str	r2, [r3, #8]
    while (hadc->Instance->CR2 & ADC_CR2_CAL);
 80017ce:	bf00      	nop
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f8      	bne.n	80017d0 <ADC_Init+0xe0>

    return DUNGX_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40012400 	.word	0x40012400
 80017f0:	40021000 	.word	0x40021000

080017f4 <ADC_ConfigChannel>:

StatusTypeDef ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
    if (hadc == NULL || sConfig == NULL) {
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <ADC_ConfigChannel+0x16>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <ADC_ConfigChannel+0x1a>
        return DUNGX_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e022      	b.n	8001854 <ADC_ConfigChannel+0x60>
    }

    // Configure channel rank in regular sequence
    hadc->Instance->SQR3 &= ~ADC_SQR3_SQ1;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 021f 	bic.w	r2, r2, #31
 800181c:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= sConfig->Channel;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	635a      	str	r2, [r3, #52]	@ 0x34

    // Configure sample time (only SMP0 used here for simplicity)
    hadc->Instance->SMPR2 &= ~ADC_SMPR2_SMP0;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0207 	bic.w	r2, r2, #7
 800183e:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= sConfig->SamplingTime;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6919      	ldr	r1, [r3, #16]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	611a      	str	r2, [r3, #16]

    return DUNGX_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <ADC_Start>:

StatusTypeDef ADC_Start(ADC_HandleTypeDef* hadc)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
    if (hadc == NULL) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <ADC_Start+0x12>
        return DUNGX_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e010      	b.n	8001892 <ADC_Start+0x34>
    }

    // Start conversion
    hadc->Instance->CR2 |= ADC_CR2_ADON;  // First write to ADON turns ADC on
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= ADC_CR2_ADON;  // Second write starts conversion
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	609a      	str	r2, [r3, #8]

    return DUNGX_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <ADC_PollForConversion>:

StatusTypeDef ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
    if (hadc == NULL) {
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d108      	bne.n	80018be <ADC_PollForConversion+0x22>
        return DUNGX_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e00e      	b.n	80018ce <ADC_PollForConversion+0x32>
    }

    while (!(hadc->Instance->SR & ADC_SR_EOC)) {
        if (Timeout-- == 0) return DUNGX_TIMEOUT;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	1e5a      	subs	r2, r3, #1
 80018b4:	603a      	str	r2, [r7, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <ADC_PollForConversion+0x22>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e007      	b.n	80018ce <ADC_PollForConversion+0x32>
    while (!(hadc->Instance->SR & ADC_SR_EOC)) {
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f1      	beq.n	80018b0 <ADC_PollForConversion+0x14>
    }

    return DUNGX_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <ADC_GetValue>:

uint32_t ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
    if (hadc == NULL) return 0;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <ADC_GetValue+0x12>
 80018e6:	2300      	movs	r3, #0
 80018e8:	e002      	b.n	80018f0 <ADC_GetValue+0x18>
    return hadc->Instance->DR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
	...

080018fc <GPIO_Init>:
/* stm32_gpio.c - Minimal GPIO HAL Implementation for STM32F103C6T6 with EXTI */

#include "stm32_gpio.h"

void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	@ 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
    uint32_t pos = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    while ((GPIO_Init->Pin >> pos) != 0x00u)
 800190a:	e108      	b.n	8001b1e <GPIO_Init+0x222>
    {
        if ((GPIO_Init->Pin & (1u << pos)) != 0)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80fc 	beq.w	8001b18 <GPIO_Init+0x21c>
        {
            uint32_t shift = (pos % 8) * 4;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	613b      	str	r3, [r7, #16]
            __IO uint32_t *reg = (pos < 8) ? &GPIOx->CRL : &GPIOx->CRH;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2b07      	cmp	r3, #7
 800192e:	d801      	bhi.n	8001934 <GPIO_Init+0x38>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	e001      	b.n	8001938 <GPIO_Init+0x3c>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3304      	adds	r3, #4
 8001938:	60fb      	str	r3, [r7, #12]

            *reg &= ~(0xFu << shift);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	210f      	movs	r1, #15
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	401a      	ands	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	601a      	str	r2, [r3, #0]

            if (GPIO_Init->Mode == GPIO_MODE_INPUT)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d12f      	bne.n	80019b6 <GPIO_Init+0xba>
            {
                if (GPIO_Init->Pull == GPIO_PULLUP)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d10e      	bne.n	800197c <GPIO_Init+0x80>
                {
                    *reg |= (0x08u << shift); // CNF = 10 input PU/PD
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2108      	movs	r1, #8
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	431a      	orrs	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	601a      	str	r2, [r3, #0]
                    GPIOx->BSRR = (1u << pos);
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	409a      	lsls	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	e05f      	b.n	8001a3c <GPIO_Init+0x140>
                }
                else if (GPIO_Init->Pull == GPIO_PULLDOWN)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d10e      	bne.n	80019a2 <GPIO_Init+0xa6>
                {
                    *reg |= (0x08u << shift); // CNF = 10 input PU/PD
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2108      	movs	r1, #8
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	431a      	orrs	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	601a      	str	r2, [r3, #0]
                    GPIOx->BRR = (1u << pos);
 8001996:	2201      	movs	r2, #1
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	409a      	lsls	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	e04c      	b.n	8001a3c <GPIO_Init+0x140>
                }
                else
                {
                    *reg |= (0x04u << shift); // CNF = 01 floating
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2104      	movs	r1, #4
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	431a      	orrs	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e042      	b.n	8001a3c <GPIO_Init+0x140>
                }
            }
            else if (GPIO_Init->Mode == GPIO_MODE_ANALOG)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d104      	bne.n	80019c8 <GPIO_Init+0xcc>
            {
                *reg |= (0x00u << shift); // CNF = 00 analog
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	e039      	b.n	8001a3c <GPIO_Init+0x140>
            }
            else // Output or AF
            {
                uint32_t mode = 0x00u;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
                if (GPIO_Init->Speed == GPIO_SPEED_LOW) mode = 0x02;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <GPIO_Init+0xde>
 80019d4:	2302      	movs	r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	e008      	b.n	80019ec <GPIO_Init+0xf0>
                else if (GPIO_Init->Speed == GPIO_SPEED_MEDIUM) mode = 0x01;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d102      	bne.n	80019e8 <GPIO_Init+0xec>
 80019e2:	2301      	movs	r3, #1
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	e001      	b.n	80019ec <GPIO_Init+0xf0>
                else mode = 0x03;
 80019e8:	2303      	movs	r3, #3
 80019ea:	61bb      	str	r3, [r7, #24]

                uint32_t cnf = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
                if (GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) cnf = 0x00;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d102      	bne.n	80019fe <GPIO_Init+0x102>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	e013      	b.n	8001a26 <GPIO_Init+0x12a>
                else if (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) cnf = 0x04;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b11      	cmp	r3, #17
 8001a04:	d102      	bne.n	8001a0c <GPIO_Init+0x110>
 8001a06:	2304      	movs	r3, #4
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e00c      	b.n	8001a26 <GPIO_Init+0x12a>
                else if (GPIO_Init->Mode == GPIO_MODE_AF_PP) cnf = 0x08;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d102      	bne.n	8001a1a <GPIO_Init+0x11e>
 8001a14:	2308      	movs	r3, #8
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e005      	b.n	8001a26 <GPIO_Init+0x12a>
                else if (GPIO_Init->Mode == GPIO_MODE_AF_OD) cnf = 0x0C;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d101      	bne.n	8001a26 <GPIO_Init+0x12a>
 8001a22:	230c      	movs	r3, #12
 8001a24:	617b      	str	r3, [r7, #20]

                *reg |= ((mode | cnf) << shift);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	4319      	orrs	r1, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	431a      	orrs	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	601a      	str	r2, [r3, #0]
            }

            // EXTI configuration if needed
            if ((GPIO_Init->Mode & 0x10000000u) != 0)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d067      	beq.n	8001b18 <GPIO_Init+0x21c>
            {
                uint32_t exti_line = 1u << pos;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	60bb      	str	r3, [r7, #8]
                AFIO->EXTICR[pos >> 2] &= ~(0xFu << (4 * (pos & 0x03)));
 8001a52:	4a3a      	ldr	r2, [pc, #232]	@ (8001b3c <GPIO_Init+0x240>)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	4833      	ldr	r0, [pc, #204]	@ (8001b3c <GPIO_Init+0x240>)
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	400a      	ands	r2, r1
 8001a76:	3302      	adds	r3, #2
 8001a78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                AFIO->EXTICR[pos >> 2] |= ((GPIOx == GPIOA ? 0 : (GPIOx == GPIOB ? 1 : 2)) << (4 * (pos & 0x03)));
 8001a7c:	4a2f      	ldr	r2, [pc, #188]	@ (8001b3c <GPIO_Init+0x240>)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	492d      	ldr	r1, [pc, #180]	@ (8001b40 <GPIO_Init+0x244>)
 8001a8c:	428b      	cmp	r3, r1
 8001a8e:	d007      	beq.n	8001aa0 <GPIO_Init+0x1a4>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	492c      	ldr	r1, [pc, #176]	@ (8001b44 <GPIO_Init+0x248>)
 8001a94:	428b      	cmp	r3, r1
 8001a96:	d101      	bne.n	8001a9c <GPIO_Init+0x1a0>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e002      	b.n	8001aa2 <GPIO_Init+0x1a6>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e000      	b.n	8001aa2 <GPIO_Init+0x1a6>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	69f9      	ldr	r1, [r7, #28]
 8001aa4:	f001 0103 	and.w	r1, r1, #3
 8001aa8:	0089      	lsls	r1, r1, #2
 8001aaa:	408b      	lsls	r3, r1
 8001aac:	4618      	mov	r0, r3
 8001aae:	4923      	ldr	r1, [pc, #140]	@ (8001b3c <GPIO_Init+0x240>)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	4302      	orrs	r2, r0
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (GPIO_Init->Mode & 0x00100000u) EXTI->RTSR |= exti_line; else EXTI->RTSR &= ~exti_line;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <GPIO_Init+0x1da>
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <GPIO_Init+0x24c>)
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	491e      	ldr	r1, [pc, #120]	@ (8001b48 <GPIO_Init+0x24c>)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]
 8001ad4:	e006      	b.n	8001ae4 <GPIO_Init+0x1e8>
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <GPIO_Init+0x24c>)
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	491a      	ldr	r1, [pc, #104]	@ (8001b48 <GPIO_Init+0x24c>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
                if (GPIO_Init->Mode & 0x00200000u) EXTI->FTSR |= exti_line; else EXTI->FTSR &= ~exti_line;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <GPIO_Init+0x202>
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <GPIO_Init+0x24c>)
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	4914      	ldr	r1, [pc, #80]	@ (8001b48 <GPIO_Init+0x24c>)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60cb      	str	r3, [r1, #12]
 8001afc:	e006      	b.n	8001b0c <GPIO_Init+0x210>
 8001afe:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <GPIO_Init+0x24c>)
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4910      	ldr	r1, [pc, #64]	@ (8001b48 <GPIO_Init+0x24c>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]

                EXTI->IMR |= exti_line;
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <GPIO_Init+0x24c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	490d      	ldr	r1, [pc, #52]	@ (8001b48 <GPIO_Init+0x24c>)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
            }
        }
        pos++;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
    while ((GPIO_Init->Pin >> pos) != 0x00u)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f47f aeef 	bne.w	800190c <GPIO_Init+0x10>
    }
}
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
 8001b32:	3724      	adds	r7, #36	@ 0x24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	40010400 	.word	0x40010400

08001b4c <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	707b      	strb	r3, [r7, #1]
    if (PinState != GPIO_PIN_RESET)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <GPIO_WritePin+0x1e>
        GPIOx->BSRR = GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	611a      	str	r2, [r3, #16]
    else
        GPIOx->BRR = GPIO_Pin;
}
 8001b68:	e002      	b.n	8001b70 <GPIO_WritePin+0x24>
        GPIOx->BRR = GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	615a      	str	r2, [r3, #20]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
	...

08001b7c <TIM_Base_Init>:
/* stm32_tim.c - Minimal Timer HAL Implementation for STM32F103C6T6 */

#include "stm32_tim.h"

StatusTypeDef TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    if (htim == NULL || htim->Instance == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <TIM_Base_Init+0x16>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <TIM_Base_Init+0x1a>
        return DUNGX_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e029      	b.n	8001bea <TIM_Base_Init+0x6e>

    // Enable timer clock
    if (htim->Instance == TIM2)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b9e:	d105      	bne.n	8001bac <TIM_Base_Init+0x30>
        RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001ba0:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <TIM_Base_Init+0x78>)
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	4a13      	ldr	r2, [pc, #76]	@ (8001bf4 <TIM_Base_Init+0x78>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	61d3      	str	r3, [r2, #28]

    // Cấu hình prescaler và ARR
    htim->Instance->PSC = htim->Init.Prescaler;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6852      	ldr	r2, [r2, #4]
 8001bb4:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = htim->Init.Period;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68d2      	ldr	r2, [r2, #12]
 8001bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Giữ lại các bit khác, chỉ thay thế mode và division
    htim->Instance->CR1 &= ~(TIM_CR1_CMS | TIM_CR1_DIR | TIM_CR1_CKD);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 725c 	bic.w	r2, r2, #880	@ 0x370
 8001bce:	601a      	str	r2, [r3, #0]
    htim->Instance->CR1 |= htim->Init.CounterMode | htim->Init.ClockDivision;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6819      	ldr	r1, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]

    return DUNGX_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <TIM_PWM_Init>:

StatusTypeDef TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    return TIM_Base_Init(htim); // For simplicity, PWM init is same as base init
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ffbb 	bl	8001b7c <TIM_Base_Init>
 8001c06:	4603      	mov	r3, r0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <TIM_PWM_ConfigChannel>:

StatusTypeDef TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
    if (htim == NULL || sConfig == NULL)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <TIM_PWM_ConfigChannel+0x18>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <TIM_PWM_ConfigChannel+0x1c>
        return DUNGX_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0e2      	b.n	8001df2 <TIM_PWM_ConfigChannel+0x1e2>

    // Set mode and polarity
    switch (Channel)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	f200 80dc 	bhi.w	8001dec <TIM_PWM_ConfigChannel+0x1dc>
 8001c34:	a201      	add	r2, pc, #4	@ (adr r2, 8001c3c <TIM_PWM_ConfigChannel+0x2c>)
 8001c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3a:	bf00      	nop
 8001c3c:	08001c71 	.word	0x08001c71
 8001c40:	08001ded 	.word	0x08001ded
 8001c44:	08001ded 	.word	0x08001ded
 8001c48:	08001ded 	.word	0x08001ded
 8001c4c:	08001ce1 	.word	0x08001ce1
 8001c50:	08001ded 	.word	0x08001ded
 8001c54:	08001ded 	.word	0x08001ded
 8001c58:	08001ded 	.word	0x08001ded
 8001c5c:	08001d3b 	.word	0x08001d3b
 8001c60:	08001ded 	.word	0x08001ded
 8001c64:	08001ded 	.word	0x08001ded
 8001c68:	08001ded 	.word	0x08001ded
 8001c6c:	08001d93 	.word	0x08001d93
    {
    case TIM_CHANNEL_1:
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1M;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699a      	ldr	r2, [r3, #24]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c7e:	619a      	str	r2, [r3, #24]
        htim->Instance->CCMR1 |= sConfig->OCMode;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6999      	ldr	r1, [r3, #24]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	619a      	str	r2, [r3, #24]
        htim->Instance->CCR1 = sConfig->Pulse;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	6852      	ldr	r2, [r2, #4]
 8001c9a:	635a      	str	r2, [r3, #52]	@ 0x34
        if (sConfig->OCFastMode == TIM_OCFAST_DISABLE)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d107      	bne.n	8001cb4 <TIM_PWM_ConfigChannel+0xa4>
            htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0204 	bic.w	r2, r2, #4
 8001cb2:	619a      	str	r2, [r3, #24]
        if (sConfig->OCPolarity == TIM_OCPOLARITY_LOW)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d108      	bne.n	8001cce <TIM_PWM_ConfigChannel+0xbe>
            htim->Instance->CCER |= TIM_CCER_CC1P;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6a1a      	ldr	r2, [r3, #32]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0202 	orr.w	r2, r2, #2
 8001cca:	621a      	str	r2, [r3, #32]
        else
            htim->Instance->CCER &= ~TIM_CCER_CC1P;
        break;
 8001ccc:	e090      	b.n	8001df0 <TIM_PWM_ConfigChannel+0x1e0>
            htim->Instance->CCER &= ~TIM_CCER_CC1P;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0202 	bic.w	r2, r2, #2
 8001cdc:	621a      	str	r2, [r3, #32]
        break;
 8001cde:	e087      	b.n	8001df0 <TIM_PWM_ConfigChannel+0x1e0>
    case TIM_CHANNEL_2:
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2M;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001cee:	619a      	str	r2, [r3, #24]
        htim->Instance->CCMR1 |= (sConfig->OCMode << 8);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6999      	ldr	r1, [r3, #24]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	021a      	lsls	r2, r3, #8
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	619a      	str	r2, [r3, #24]
        htim->Instance->CCR2 = sConfig->Pulse;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	6852      	ldr	r2, [r2, #4]
 8001d0c:	639a      	str	r2, [r3, #56]	@ 0x38
        if (sConfig->OCPolarity == TIM_OCPOLARITY_LOW)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d108      	bne.n	8001d28 <TIM_PWM_ConfigChannel+0x118>
            htim->Instance->CCER |= TIM_CCER_CC2P;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6a1a      	ldr	r2, [r3, #32]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0220 	orr.w	r2, r2, #32
 8001d24:	621a      	str	r2, [r3, #32]
        else
            htim->Instance->CCER &= ~TIM_CCER_CC2P;
        break;
 8001d26:	e063      	b.n	8001df0 <TIM_PWM_ConfigChannel+0x1e0>
            htim->Instance->CCER &= ~TIM_CCER_CC2P;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6a1a      	ldr	r2, [r3, #32]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0220 	bic.w	r2, r2, #32
 8001d36:	621a      	str	r2, [r3, #32]
        break;
 8001d38:	e05a      	b.n	8001df0 <TIM_PWM_ConfigChannel+0x1e0>
    case TIM_CHANNEL_3:
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3M;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69da      	ldr	r2, [r3, #28]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d48:	61da      	str	r2, [r3, #28]
        htim->Instance->CCMR2 |= sConfig->OCMode;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69d9      	ldr	r1, [r3, #28]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	61da      	str	r2, [r3, #28]
        htim->Instance->CCR3 = sConfig->Pulse;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	6852      	ldr	r2, [r2, #4]
 8001d64:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (sConfig->OCPolarity == TIM_OCPOLARITY_LOW)
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d108      	bne.n	8001d80 <TIM_PWM_ConfigChannel+0x170>
            htim->Instance->CCER |= TIM_CCER_CC3P;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a1a      	ldr	r2, [r3, #32]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d7c:	621a      	str	r2, [r3, #32]
        else
            htim->Instance->CCER &= ~TIM_CCER_CC3P;
        break;
 8001d7e:	e037      	b.n	8001df0 <TIM_PWM_ConfigChannel+0x1e0>
            htim->Instance->CCER &= ~TIM_CCER_CC3P;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6a1a      	ldr	r2, [r3, #32]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d8e:	621a      	str	r2, [r3, #32]
        break;
 8001d90:	e02e      	b.n	8001df0 <TIM_PWM_ConfigChannel+0x1e0>
    case TIM_CHANNEL_4:
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4M;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69da      	ldr	r2, [r3, #28]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001da0:	61da      	str	r2, [r3, #28]
        htim->Instance->CCMR2 |= (sConfig->OCMode << 8);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	69d9      	ldr	r1, [r3, #28]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	021a      	lsls	r2, r3, #8
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	61da      	str	r2, [r3, #28]
        htim->Instance->CCR4 = sConfig->Pulse;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	6852      	ldr	r2, [r2, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	@ 0x40
        if (sConfig->OCPolarity == TIM_OCPOLARITY_LOW)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d108      	bne.n	8001dda <TIM_PWM_ConfigChannel+0x1ca>
            htim->Instance->CCER |= TIM_CCER_CC4P;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6a1a      	ldr	r2, [r3, #32]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dd6:	621a      	str	r2, [r3, #32]
        else
            htim->Instance->CCER &= ~TIM_CCER_CC4P;
        break;
 8001dd8:	e00a      	b.n	8001df0 <TIM_PWM_ConfigChannel+0x1e0>
            htim->Instance->CCER &= ~TIM_CCER_CC4P;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6a1a      	ldr	r2, [r3, #32]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001de8:	621a      	str	r2, [r3, #32]
        break;
 8001dea:	e001      	b.n	8001df0 <TIM_PWM_ConfigChannel+0x1e0>
    default:
        return DUNGX_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <TIM_PWM_ConfigChannel+0x1e2>
    }

    return DUNGX_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <TIM_PWM_Start>:

StatusTypeDef TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
    switch (Channel)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d841      	bhi.n	8001e90 <TIM_PWM_Start+0x94>
 8001e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e14 <TIM_PWM_Start+0x18>)
 8001e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e12:	bf00      	nop
 8001e14:	08001e49 	.word	0x08001e49
 8001e18:	08001e91 	.word	0x08001e91
 8001e1c:	08001e91 	.word	0x08001e91
 8001e20:	08001e91 	.word	0x08001e91
 8001e24:	08001e5b 	.word	0x08001e5b
 8001e28:	08001e91 	.word	0x08001e91
 8001e2c:	08001e91 	.word	0x08001e91
 8001e30:	08001e91 	.word	0x08001e91
 8001e34:	08001e6d 	.word	0x08001e6d
 8001e38:	08001e91 	.word	0x08001e91
 8001e3c:	08001e91 	.word	0x08001e91
 8001e40:	08001e91 	.word	0x08001e91
 8001e44:	08001e7f 	.word	0x08001e7f
    {
    case TIM_CHANNEL_1:
        htim->Instance->CCER |= TIM_CCER_CC1E;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6a1a      	ldr	r2, [r3, #32]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	621a      	str	r2, [r3, #32]
        break;
 8001e58:	e01c      	b.n	8001e94 <TIM_PWM_Start+0x98>
    case TIM_CHANNEL_2:
        htim->Instance->CCER |= TIM_CCER_CC2E;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a1a      	ldr	r2, [r3, #32]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0210 	orr.w	r2, r2, #16
 8001e68:	621a      	str	r2, [r3, #32]
        break;
 8001e6a:	e013      	b.n	8001e94 <TIM_PWM_Start+0x98>
    case TIM_CHANNEL_3:
        htim->Instance->CCER |= TIM_CCER_CC3E;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6a1a      	ldr	r2, [r3, #32]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e7a:	621a      	str	r2, [r3, #32]
        break;
 8001e7c:	e00a      	b.n	8001e94 <TIM_PWM_Start+0x98>
    case TIM_CHANNEL_4:
        htim->Instance->CCER |= TIM_CCER_CC4E;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a1a      	ldr	r2, [r3, #32]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001e8c:	621a      	str	r2, [r3, #32]
        break;
 8001e8e:	e001      	b.n	8001e94 <TIM_PWM_Start+0x98>
    default:
        return DUNGX_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e008      	b.n	8001ea6 <TIM_PWM_Start+0xaa>
    }
    TIM_ENABLE(htim);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
    return DUNGX_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <TIM_SetCompare>:
    TIM_DISABLE(htim);
    return DUNGX_OK;
}

void TIM_SetCompare(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t Compare)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
    if (htim == NULL)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d034      	beq.n	8001f2c <TIM_SetCompare+0x7c>
        return;

    switch (Channel)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b0c      	cmp	r3, #12
 8001ec6:	d833      	bhi.n	8001f30 <TIM_SetCompare+0x80>
 8001ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed0 <TIM_SetCompare+0x20>)
 8001eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ece:	bf00      	nop
 8001ed0:	08001f05 	.word	0x08001f05
 8001ed4:	08001f31 	.word	0x08001f31
 8001ed8:	08001f31 	.word	0x08001f31
 8001edc:	08001f31 	.word	0x08001f31
 8001ee0:	08001f0f 	.word	0x08001f0f
 8001ee4:	08001f31 	.word	0x08001f31
 8001ee8:	08001f31 	.word	0x08001f31
 8001eec:	08001f31 	.word	0x08001f31
 8001ef0:	08001f19 	.word	0x08001f19
 8001ef4:	08001f31 	.word	0x08001f31
 8001ef8:	08001f31 	.word	0x08001f31
 8001efc:	08001f31 	.word	0x08001f31
 8001f00:	08001f23 	.word	0x08001f23
    {
    case TIM_CHANNEL_1:
        htim->Instance->CCR1 = Compare;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8001f0c:	e011      	b.n	8001f32 <TIM_SetCompare+0x82>
    case TIM_CHANNEL_2:
        htim->Instance->CCR2 = Compare;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8001f16:	e00c      	b.n	8001f32 <TIM_SetCompare+0x82>
    case TIM_CHANNEL_3:
        htim->Instance->CCR3 = Compare;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8001f20:	e007      	b.n	8001f32 <TIM_SetCompare+0x82>
    case TIM_CHANNEL_4:
        htim->Instance->CCR4 = Compare;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8001f2a:	e002      	b.n	8001f32 <TIM_SetCompare+0x82>
        return;
 8001f2c:	bf00      	nop
 8001f2e:	e000      	b.n	8001f32 <TIM_SetCompare+0x82>
    default:
        break;
 8001f30:	bf00      	nop
    }
}
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop

08001f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db0b      	blt.n	8001f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	4906      	ldr	r1, [pc, #24]	@ (8001f70 <__NVIC_EnableIRQ+0x34>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	e000e100 	.word	0xe000e100

08001f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db0a      	blt.n	8001f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	490c      	ldr	r1, [pc, #48]	@ (8001fc0 <__NVIC_SetPriority+0x4c>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	440b      	add	r3, r1
 8001f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f9c:	e00a      	b.n	8001fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4908      	ldr	r1, [pc, #32]	@ (8001fc4 <__NVIC_SetPriority+0x50>)
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	3b04      	subs	r3, #4
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	761a      	strb	r2, [r3, #24]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000e100 	.word	0xe000e100
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <UART_Init>:
static StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
static StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);


StatusTypeDef UART_Init(UART_HandleTypeDef *huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
    if (huart == NULL || huart->Instance == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <UART_Init+0x16>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <UART_Init+0x1a>
        return DUNGX_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0ca      	b.n	8002178 <UART_Init+0x1b0>

    // Enable clock for USART1 and GPIOA
    if (huart->Instance == USART1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a66      	ldr	r2, [pc, #408]	@ (8002180 <UART_Init+0x1b8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d107      	bne.n	8001ffc <UART_Init+0x34>
    {
        RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPAEN;
 8001fec:	4b65      	ldr	r3, [pc, #404]	@ (8002184 <UART_Init+0x1bc>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a64      	ldr	r2, [pc, #400]	@ (8002184 <UART_Init+0x1bc>)
 8001ff2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6193      	str	r3, [r2, #24]
    }

    if (huart->Instance == USART1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a5f      	ldr	r2, [pc, #380]	@ (8002180 <UART_Init+0x1b8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d12b      	bne.n	800205e <UART_Init+0x96>
    {
        RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002006:	4b5f      	ldr	r3, [pc, #380]	@ (8002184 <UART_Init+0x1bc>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	4a5e      	ldr	r2, [pc, #376]	@ (8002184 <UART_Init+0x1bc>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6193      	str	r3, [r2, #24]

        // PA9 - TX
        GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 8002012:	4b5d      	ldr	r3, [pc, #372]	@ (8002188 <UART_Init+0x1c0>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4a5c      	ldr	r2, [pc, #368]	@ (8002188 <UART_Init+0x1c0>)
 8002018:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800201c:	6053      	str	r3, [r2, #4]
        GPIOA->CRH |= GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0;
 800201e:	4b5a      	ldr	r3, [pc, #360]	@ (8002188 <UART_Init+0x1c0>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4a59      	ldr	r2, [pc, #356]	@ (8002188 <UART_Init+0x1c0>)
 8002024:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002028:	6053      	str	r3, [r2, #4]
        GPIOA->CRH |= GPIO_CRH_CNF9_1;
 800202a:	4b57      	ldr	r3, [pc, #348]	@ (8002188 <UART_Init+0x1c0>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a56      	ldr	r2, [pc, #344]	@ (8002188 <UART_Init+0x1c0>)
 8002030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002034:	6053      	str	r3, [r2, #4]

        // PA10 - RX
        GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 8002036:	4b54      	ldr	r3, [pc, #336]	@ (8002188 <UART_Init+0x1c0>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4a53      	ldr	r2, [pc, #332]	@ (8002188 <UART_Init+0x1c0>)
 800203c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002040:	6053      	str	r3, [r2, #4]
        GPIOA->CRH |= GPIO_CRH_CNF10_0; // Input floating
 8002042:	4b51      	ldr	r3, [pc, #324]	@ (8002188 <UART_Init+0x1c0>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a50      	ldr	r2, [pc, #320]	@ (8002188 <UART_Init+0x1c0>)
 8002048:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800204c:	6053      	str	r3, [r2, #4]

        NVIC_EnableIRQ(USART1_IRQn);
 800204e:	2025      	movs	r0, #37	@ 0x25
 8002050:	f7ff ff74 	bl	8001f3c <__NVIC_EnableIRQ>
        NVIC_SetPriority(USART1_IRQn, 1);
 8002054:	2101      	movs	r1, #1
 8002056:	2025      	movs	r0, #37	@ 0x25
 8002058:	f7ff ff8c 	bl	8001f74 <__NVIC_SetPriority>
 800205c:	e02f      	b.n	80020be <UART_Init+0xf6>
    }

    else if (huart->Instance == USART2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a4a      	ldr	r2, [pc, #296]	@ (800218c <UART_Init+0x1c4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d12a      	bne.n	80020be <UART_Init+0xf6>
    {
        RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002068:	4b46      	ldr	r3, [pc, #280]	@ (8002184 <UART_Init+0x1bc>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a45      	ldr	r2, [pc, #276]	@ (8002184 <UART_Init+0x1bc>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6193      	str	r3, [r2, #24]

        // PA2 - TX
        GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 8002074:	4b44      	ldr	r3, [pc, #272]	@ (8002188 <UART_Init+0x1c0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a43      	ldr	r2, [pc, #268]	@ (8002188 <UART_Init+0x1c0>)
 800207a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800207e:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_MODE2_1 | GPIO_CRL_MODE2_0;
 8002080:	4b41      	ldr	r3, [pc, #260]	@ (8002188 <UART_Init+0x1c0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a40      	ldr	r2, [pc, #256]	@ (8002188 <UART_Init+0x1c0>)
 8002086:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800208a:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_CNF2_1;
 800208c:	4b3e      	ldr	r3, [pc, #248]	@ (8002188 <UART_Init+0x1c0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a3d      	ldr	r2, [pc, #244]	@ (8002188 <UART_Init+0x1c0>)
 8002092:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002096:	6013      	str	r3, [r2, #0]

        // PA3 – RX – input floating
        GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 8002098:	4b3b      	ldr	r3, [pc, #236]	@ (8002188 <UART_Init+0x1c0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a3a      	ldr	r2, [pc, #232]	@ (8002188 <UART_Init+0x1c0>)
 800209e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80020a2:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_CNF3_0; // Input floating (01)
 80020a4:	4b38      	ldr	r3, [pc, #224]	@ (8002188 <UART_Init+0x1c0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a37      	ldr	r2, [pc, #220]	@ (8002188 <UART_Init+0x1c0>)
 80020aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ae:	6013      	str	r3, [r2, #0]

        NVIC_EnableIRQ(USART2_IRQn);
 80020b0:	2026      	movs	r0, #38	@ 0x26
 80020b2:	f7ff ff43 	bl	8001f3c <__NVIC_EnableIRQ>
        NVIC_SetPriority(USART2_IRQn, 1);
 80020b6:	2101      	movs	r1, #1
 80020b8:	2026      	movs	r0, #38	@ 0x26
 80020ba:	f7ff ff5b 	bl	8001f74 <__NVIC_SetPriority>
    }
    // Configure baud rate
    uint32_t pclk = 72000000;
 80020be:	4b34      	ldr	r3, [pc, #208]	@ (8002190 <UART_Init+0x1c8>)
 80020c0:	60fb      	str	r3, [r7, #12]
    huart->Instance->BRR = (pclk + huart->Init.BaudRate / 2) / huart->Init.BaudRate;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	085a      	lsrs	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	18d1      	adds	r1, r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80020d8:	609a      	str	r2, [r3, #8]

    // Clear relevant bits, then set
    huart->Instance->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80020e8:	f023 030c 	bic.w	r3, r3, #12
 80020ec:	60d3      	str	r3, [r2, #12]
    huart->Instance->CR1 |= huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68d9      	ldr	r1, [r3, #12]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	60da      	str	r2, [r3, #12]

    // ========================
    // CR2 - Stop bits
    // ========================
    huart->Instance->CR2 &= ~(USART_CR2_STOP);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800211a:	611a      	str	r2, [r3, #16]
    huart->Instance->CR2 |= huart->Init.StopBits;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6919      	ldr	r1, [r3, #16]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	611a      	str	r2, [r3, #16]

    // ========================
    // CR3 - Hardware flow control
    // ========================
    huart->Instance->CR3 &= ~(USART_CR3_CTSE | USART_CR3_RTSE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800213c:	615a      	str	r2, [r3, #20]
    huart->Instance->CR3 |= huart->Init.HwFlowCtl;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6959      	ldr	r1, [r3, #20]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	615a      	str	r2, [r3, #20]

    // Enable USART
    huart->Instance->CR1 |= USART_CR1_UE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800215e:	60da      	str	r2, [r3, #12]

    // Set internal state
    huart->gState = UART_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    huart->RxState = UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    huart->ErrorCode = UART_ERROR_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	639a      	str	r2, [r3, #56]	@ 0x38

    return DUNGX_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40013800 	.word	0x40013800
 8002184:	40021000 	.word	0x40021000
 8002188:	40010800 	.word	0x40010800
 800218c:	40004400 	.word	0x40004400
 8002190:	044aa200 	.word	0x044aa200

08002194 <UART_Transmit>:

StatusTypeDef UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	80fb      	strh	r3, [r7, #6]
    if (huart == NULL || pData == NULL || Size == 0)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <UART_Transmit+0x22>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <UART_Transmit+0x22>
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d116      	bne.n	80021e4 <UART_Transmit+0x50>
        return DUNGX_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e029      	b.n	800220e <UART_Transmit+0x7a>
    while (Size--)
    {
        // Wait until TXE (Transmit Data Register Empty)
        while (!(huart->Instance->SR & USART_SR_TXE))
        {
            if (Timeout-- == 0)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	603a      	str	r2, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <UART_Transmit+0x34>
                return DUNGX_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e022      	b.n	800220e <UART_Transmit+0x7a>
        while (!(huart->Instance->SR & USART_SR_TXE))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f1      	beq.n	80021ba <UART_Transmit+0x26>
        }

        huart->Instance->DR = (*pData++ & 0xFF);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	60ba      	str	r2, [r7, #8]
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
    while (Size--)
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	1e5a      	subs	r2, r3, #1
 80021e8:	80fa      	strh	r2, [r7, #6]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1ec      	bne.n	80021c8 <UART_Transmit+0x34>
    }

    // Wait for TC (Transmission Complete)
    while (!(huart->Instance->SR & USART_SR_TC))
 80021ee:	e006      	b.n	80021fe <UART_Transmit+0x6a>
    {
        if (Timeout-- == 0)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	603a      	str	r2, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <UART_Transmit+0x6a>
            return DUNGX_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e007      	b.n	800220e <UART_Transmit+0x7a>
    while (!(huart->Instance->SR & USART_SR_TC))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f1      	beq.n	80021f0 <UART_Transmit+0x5c>
    }

    return DUNGX_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <UART_IRQHandler>:

    return DUNGX_OK;
}

void UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    uint32_t isrflags = huart->Instance->SR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]
    uint32_t cr1its = huart->Instance->CR1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	60bb      	str	r3, [r7, #8]

    /* Check for RXNE (data received) */
    if ((isrflags & USART_SR_RXNE) && (cr1its & USART_CR1_RXNEIE))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <UART_IRQHandler+0x34>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <UART_IRQHandler+0x34>
    {
        UART_Receive_IT(huart); // Gọi hàm xử lý nhận IT
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f847 	bl	80022d8 <UART_Receive_IT>
        return;
 800224a:	e042      	b.n	80022d2 <UART_IRQHandler+0xba>
    }

    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <UART_IRQHandler+0x50>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <UART_IRQHandler+0x50>
      {
        UART_Transmit_IT(huart);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f8a3 	bl	80023ac <UART_Transmit_IT>
        return;
 8002266:	e034      	b.n	80022d2 <UART_IRQHandler+0xba>
      }


    /* Check for errors */
    if ((isrflags & (USART_SR_PE | USART_SR_FE | USART_SR_NE | USART_SR_ORE)) != 0)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	2b00      	cmp	r3, #0
 8002270:	d02f      	beq.n	80022d2 <UART_IRQHandler+0xba>
    {
        if (isrflags & USART_SR_PE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <UART_IRQHandler+0x70>
            huart->ErrorCode |= UART_ERROR_PE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	639a      	str	r2, [r3, #56]	@ 0x38
        if (isrflags & USART_SR_FE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <UART_IRQHandler+0x86>
            huart->ErrorCode |= UART_ERROR_FE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002296:	f043 0204 	orr.w	r2, r3, #4
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	639a      	str	r2, [r3, #56]	@ 0x38
        if (isrflags & USART_SR_NE)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <UART_IRQHandler+0x9c>
            huart->ErrorCode |= UART_ERROR_NE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ac:	f043 0202 	orr.w	r2, r3, #2
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	639a      	str	r2, [r3, #56]	@ 0x38
        if (isrflags & USART_SR_ORE)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <UART_IRQHandler+0xb2>
            huart->ErrorCode |= UART_ERROR_ORE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c2:	f043 0208 	orr.w	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	639a      	str	r2, [r3, #56]	@ 0x38

        huart->gState = UART_STATE_ERROR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	22e0      	movs	r2, #224	@ 0xe0
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
}
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <UART_Receive_IT>:

static StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
    if (huart->RxState != UART_STATE_BUSY_RX)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b22      	cmp	r3, #34	@ 0x22
 80022ea:	d001      	beq.n	80022f0 <UART_Receive_IT+0x18>
        return DUNGX_BUSY;
 80022ec:	2302      	movs	r3, #2
 80022ee:	e059      	b.n	80023a4 <UART_Receive_IT+0xcc>

    uint8_t *pdata8bits;
    uint16_t *pdata16bits;

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022f8:	d115      	bne.n	8002326 <UART_Receive_IT+0x4e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d111      	bne.n	8002326 <UART_Receive_IT+0x4e>
    {
        pdata16bits = (uint16_t *)huart->pRxBuffPtr;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002306:	60fb      	str	r3, [r7, #12]
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	1c9a      	adds	r2, r3, #2
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	@ 0x28
 8002324:	e024      	b.n	8002370 <UART_Receive_IT+0x98>
    }
    else
    {
        pdata8bits = (uint8_t *)huart->pRxBuffPtr;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232a:	60bb      	str	r3, [r7, #8]

        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) ||
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002334:	d007      	beq.n	8002346 <UART_Receive_IT+0x6e>
            ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) ||
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10a      	bne.n	8002354 <UART_Receive_IT+0x7c>
            ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <UART_Receive_IT+0x7c>
        {
            *pdata8bits = (uint8_t)(huart->Instance->DR & 0xFF);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e008      	b.n	8002366 <UART_Receive_IT+0x8e>
        }
        else
        {
            *pdata8bits = (uint8_t)(huart->Instance->DR & 0x7F);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	701a      	strb	r2, [r3, #0]
        }
        huart->pRxBuffPtr += 1U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29b      	uxth	r3, r3
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4619      	mov	r1, r3
 800237e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10e      	bne.n	80023a2 <UART_Receive_IT+0xca>
    {
        // Tắt ngắt RXNE
        huart->Instance->CR1 &= ~USART_CR1_RXNEIE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0220 	bic.w	r2, r2, #32
 8002392:	60da      	str	r2, [r3, #12]

        // Cập nhật trạng thái
        huart->RxState = UART_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        // Gọi callback
        UART_RxCpltCallback(huart);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 ffa3 	bl	80032e8 <UART_RxCpltCallback>
    }

    return DUNGX_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <UART_Transmit_IT>:

static StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
    {
        const uint16_t *tmp;

        /* Check that a Tx process is ongoing */
        if (huart->gState == UART_STATE_BUSY_TX)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b21      	cmp	r3, #33	@ 0x21
 80023be:	d13e      	bne.n	800243e <UART_Transmit_IT+0x92>
        {
            if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023c8:	d114      	bne.n	80023f4 <UART_Transmit_IT+0x48>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d110      	bne.n	80023f4 <UART_Transmit_IT+0x48>
            {
                tmp = (const uint16_t *)huart->pTxBuffPtr;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	60fb      	str	r3, [r7, #12]
                huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e6:	605a      	str	r2, [r3, #4]
                huart->pTxBuffPtr += 2U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	1c9a      	adds	r2, r3, #2
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	621a      	str	r2, [r3, #32]
 80023f2:	e008      	b.n	8002406 <UART_Transmit_IT+0x5a>
            }
            else
            {
                huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	1c59      	adds	r1, r3, #1
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6211      	str	r1, [r2, #32]
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
            }

            if (--huart->TxXferCount == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29b      	uxth	r3, r3
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4619      	mov	r1, r3
 8002414:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10f      	bne.n	800243a <UART_Transmit_IT+0x8e>
            {
                /* Disable the UART Transmit Data Register Empty Interrupt */
                UART_DISABLE_IT(huart, UART_IT_TXE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002428:	615a      	str	r2, [r3, #20]

                /* Enable the UART Transmit Complete Interrupt */
                UART_ENABLE_IT(huart, UART_IT_TC);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002438:	615a      	str	r2, [r3, #20]
            }
            return DUNGX_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <UART_Transmit_IT+0x94>
        }
        else
        {
            return DUNGX_BUSY;
 800243e:	2302      	movs	r3, #2
        }
    }
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
	...

0800244c <Clear_All_State_Fsm>:
 *
 * Hàm này sẽ xóa bộ đếm, cờ trạng thái, dữ liệu đang lưu tạm, và đưa FSM
 * về trạng thái sẵn sàng nhận frame mới từ đầu.
 */
void Clear_All_State_Fsm(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
    fsm_state = FSM_STATE_START;
 8002450:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <Clear_All_State_Fsm+0x24>)
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
    byte_count = 0;
 8002456:	4b07      	ldr	r3, [pc, #28]	@ (8002474 <Clear_All_State_Fsm+0x28>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
    expected_payload_length = 0;
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <Clear_All_State_Fsm+0x2c>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
    flag_fsm_new_message = 0;
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <Clear_All_State_Fsm+0x30>)
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	200003e0 	.word	0x200003e0
 8002474:	200003e1 	.word	0x200003e1
 8002478:	200003e2 	.word	0x200003e2
 800247c:	200003e3 	.word	0x200003e3

08002480 <Fsm_Get_Message>:
 *
 * Nếu frame hợp lệ và đủ, dữ liệu sẽ được sao chép vào dataout và
 * FSM sẽ chuyển về trạng thái chờ frame mới.
 */
uint8_t Fsm_Get_Message(uint8_t datain[], uint8_t dataout[])
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b094      	sub	sp, #80	@ 0x50
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
    if (flag_fsm_new_message)
 800248a:	4b9a      	ldr	r3, [pc, #616]	@ (80026f4 <Fsm_Get_Message+0x274>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <Fsm_Get_Message+0x16>
        return 1;
 8002492:	2301      	movs	r3, #1
 8002494:	e12a      	b.n	80026ec <Fsm_Get_Message+0x26c>
    uint8_t length = 1;
 8002496:	2301      	movs	r3, #1
 8002498:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    switch (fsm_state)
 800249c:	4b96      	ldr	r3, [pc, #600]	@ (80026f8 <Fsm_Get_Message+0x278>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	f200 8121 	bhi.w	80026e8 <Fsm_Get_Message+0x268>
 80024a6:	a201      	add	r2, pc, #4	@ (adr r2, 80024ac <Fsm_Get_Message+0x2c>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	0800251d 	.word	0x0800251d
 80024b4:	080025b1 	.word	0x080025b1
 80024b8:	0800262d 	.word	0x0800262d
    {
    case FSM_STATE_START:

        dataout[0] = datain[0];
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	781a      	ldrb	r2, [r3, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	701a      	strb	r2, [r3, #0]

        if (byte_count == 0 && datain[0] == START_BYTE)
 80024c4:	4b8d      	ldr	r3, [pc, #564]	@ (80026fc <Fsm_Get_Message+0x27c>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d112      	bne.n	80024f2 <Fsm_Get_Message+0x72>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2baa      	cmp	r3, #170	@ 0xaa
 80024d2:	d10e      	bne.n	80024f2 <Fsm_Get_Message+0x72>
        {
            // Nếu byte đầu tiên là START_BYTE, chuyển sang trạng thái HEADER
            Clear_All_State_Fsm();
 80024d4:	f7ff ffba 	bl	800244c <Clear_All_State_Fsm>
            fsm_state = FSM_STATE_HEADER;
 80024d8:	4b87      	ldr	r3, [pc, #540]	@ (80026f8 <Fsm_Get_Message+0x278>)
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
            byte_count++;
 80024de:	4b87      	ldr	r3, [pc, #540]	@ (80026fc <Fsm_Get_Message+0x27c>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b85      	ldr	r3, [pc, #532]	@ (80026fc <Fsm_Get_Message+0x27c>)
 80024e8:	701a      	strb	r2, [r3, #0]
            length = HEADER_SIZE;
 80024ea:	2303      	movs	r3, #3
 80024ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            // NACK
            uint8_t data[FRAME_SIZE];
            uint8_t length = Create_Message_RESPONSE(UNKNOWN, RESPONSE_NACK, data);
            USART1_Send_Data(data, length);
        }
        break;
 80024f0:	e0fa      	b.n	80026e8 <Fsm_Get_Message+0x268>
            Clear_All_State_Fsm();
 80024f2:	f7ff ffab 	bl	800244c <Clear_All_State_Fsm>
            uint8_t length = Create_Message_RESPONSE(UNKNOWN, RESPONSE_NACK, data);
 80024f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024fa:	461a      	mov	r2, r3
 80024fc:	2102      	movs	r1, #2
 80024fe:	20ff      	movs	r0, #255	@ 0xff
 8002500:	f001 f85d 	bl	80035be <Create_Message_RESPONSE>
 8002504:	4603      	mov	r3, r0
 8002506:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            USART1_Send_Data(data, length);
 800250a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800250e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f925 	bl	8002764 <USART1_Send_Data>
        break;
 800251a:	e0e5      	b.n	80026e8 <Fsm_Get_Message+0x268>

    case FSM_STATE_HEADER:
        if (byte_count == 1 && Check_Frame_Header(datain))
 800251c:	4b77      	ldr	r3, [pc, #476]	@ (80026fc <Fsm_Get_Message+0x27c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d130      	bne.n	8002586 <Fsm_Get_Message+0x106>
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f001 f90b 	bl	8003740 <Check_Frame_Header>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02a      	beq.n	8002586 <Fsm_Get_Message+0x106>
        {
            GPIOA->ODR ^= (1 << 5);
 8002530:	4b73      	ldr	r3, [pc, #460]	@ (8002700 <Fsm_Get_Message+0x280>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a72      	ldr	r2, [pc, #456]	@ (8002700 <Fsm_Get_Message+0x280>)
 8002536:	f083 0320 	eor.w	r3, r3, #32
 800253a:	60d3      	str	r3, [r2, #12]
            for (int i = 0; i < HEADER_SIZE; i++)
 800253c:	2300      	movs	r3, #0
 800253e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002540:	e012      	b.n	8002568 <Fsm_Get_Message+0xe8>
            {
                dataout[byte_count] = datain[i];
 8002542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	441a      	add	r2, r3
 8002548:	4b6c      	ldr	r3, [pc, #432]	@ (80026fc <Fsm_Get_Message+0x27c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	440b      	add	r3, r1
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	701a      	strb	r2, [r3, #0]
                byte_count++;
 8002556:	4b69      	ldr	r3, [pc, #420]	@ (80026fc <Fsm_Get_Message+0x27c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	3301      	adds	r3, #1
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b67      	ldr	r3, [pc, #412]	@ (80026fc <Fsm_Get_Message+0x27c>)
 8002560:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < HEADER_SIZE; i++)
 8002562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002564:	3301      	adds	r3, #1
 8002566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800256a:	2b02      	cmp	r3, #2
 800256c:	dde9      	ble.n	8002542 <Fsm_Get_Message+0xc2>
            }
            expected_payload_length = datain[2];
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	789a      	ldrb	r2, [r3, #2]
 8002572:	4b64      	ldr	r3, [pc, #400]	@ (8002704 <Fsm_Get_Message+0x284>)
 8002574:	701a      	strb	r2, [r3, #0]

            fsm_state = FSM_STATE_PAYLOAD;
 8002576:	4b60      	ldr	r3, [pc, #384]	@ (80026f8 <Fsm_Get_Message+0x278>)
 8002578:	2202      	movs	r2, #2
 800257a:	701a      	strb	r2, [r3, #0]

            length = expected_payload_length;
 800257c:	4b61      	ldr	r3, [pc, #388]	@ (8002704 <Fsm_Get_Message+0x284>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            // NACK
            uint8_t data[FRAME_SIZE];
            uint8_t length = Create_Message_RESPONSE(dataout[2], RESPONSE_NACK, data);
            USART1_Send_Data(data, length); // Gửi phản hồi NACK
        }
        break;
 8002584:	e0b0      	b.n	80026e8 <Fsm_Get_Message+0x268>
            uint8_t length = Create_Message_RESPONSE(dataout[2], RESPONSE_NACK, data);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	3302      	adds	r3, #2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	f107 0220 	add.w	r2, r7, #32
 8002590:	2102      	movs	r1, #2
 8002592:	4618      	mov	r0, r3
 8002594:	f001 f813 	bl	80035be <Create_Message_RESPONSE>
 8002598:	4603      	mov	r3, r0
 800259a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            USART1_Send_Data(data, length); // Gửi phản hồi NACK
 800259e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80025a2:	f107 0320 	add.w	r3, r7, #32
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 f8db 	bl	8002764 <USART1_Send_Data>
        break;
 80025ae:	e09b      	b.n	80026e8 <Fsm_Get_Message+0x268>

    case FSM_STATE_PAYLOAD:
        if (byte_count == (1 + HEADER_SIZE))
 80025b0:	4b52      	ldr	r3, [pc, #328]	@ (80026fc <Fsm_Get_Message+0x27c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d11f      	bne.n	80025f8 <Fsm_Get_Message+0x178>
        {
            for (int i = 0; i < 4; i++)
 80025b8:	2300      	movs	r3, #0
 80025ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80025bc:	e012      	b.n	80025e4 <Fsm_Get_Message+0x164>
            {
                dataout[byte_count] = datain[i];
 80025be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	441a      	add	r2, r3
 80025c4:	4b4d      	ldr	r3, [pc, #308]	@ (80026fc <Fsm_Get_Message+0x27c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	440b      	add	r3, r1
 80025ce:	7812      	ldrb	r2, [r2, #0]
 80025d0:	701a      	strb	r2, [r3, #0]
                byte_count++;
 80025d2:	4b4a      	ldr	r3, [pc, #296]	@ (80026fc <Fsm_Get_Message+0x27c>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4b48      	ldr	r3, [pc, #288]	@ (80026fc <Fsm_Get_Message+0x27c>)
 80025dc:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 4; i++)
 80025de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025e0:	3301      	adds	r3, #1
 80025e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80025e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	dde9      	ble.n	80025be <Fsm_Get_Message+0x13e>
            }
            fsm_state = FSM_STATE_CHECKSUM;
 80025ea:	4b43      	ldr	r3, [pc, #268]	@ (80026f8 <Fsm_Get_Message+0x278>)
 80025ec:	2203      	movs	r2, #3
 80025ee:	701a      	strb	r2, [r3, #0]

            length = CHECKSUM_SIZE;
 80025f0:	2302      	movs	r3, #2
 80025f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            Clear_All_State_Fsm();
            uint8_t data[FRAME_SIZE];
            uint8_t length = Create_Message_RESPONSE(dataout[2], RESPONSE_NACK, data);
            USART1_Send_Data(data, length); // Gửi phản hồi NACK
        }
        break;
 80025f6:	e077      	b.n	80026e8 <Fsm_Get_Message+0x268>
            length = CHECKSUM_SIZE;
 80025f8:	2302      	movs	r3, #2
 80025fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            Clear_All_State_Fsm();
 80025fe:	f7ff ff25 	bl	800244c <Clear_All_State_Fsm>
            uint8_t length = Create_Message_RESPONSE(dataout[2], RESPONSE_NACK, data);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	3302      	adds	r3, #2
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	f107 0214 	add.w	r2, r7, #20
 800260c:	2102      	movs	r1, #2
 800260e:	4618      	mov	r0, r3
 8002610:	f000 ffd5 	bl	80035be <Create_Message_RESPONSE>
 8002614:	4603      	mov	r3, r0
 8002616:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            USART1_Send_Data(data, length); // Gửi phản hồi NACK
 800261a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f000 f89d 	bl	8002764 <USART1_Send_Data>
        break;
 800262a:	e05d      	b.n	80026e8 <Fsm_Get_Message+0x268>

    case FSM_STATE_CHECKSUM:

        for (int i = 0; i < CHECKSUM_SIZE; i++)
 800262c:	2300      	movs	r3, #0
 800262e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002630:	e012      	b.n	8002658 <Fsm_Get_Message+0x1d8>
        {
            dataout[byte_count] = datain[i];
 8002632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	441a      	add	r2, r3
 8002638:	4b30      	ldr	r3, [pc, #192]	@ (80026fc <Fsm_Get_Message+0x27c>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	440b      	add	r3, r1
 8002642:	7812      	ldrb	r2, [r2, #0]
 8002644:	701a      	strb	r2, [r3, #0]
            byte_count++;
 8002646:	4b2d      	ldr	r3, [pc, #180]	@ (80026fc <Fsm_Get_Message+0x27c>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b2b      	ldr	r3, [pc, #172]	@ (80026fc <Fsm_Get_Message+0x27c>)
 8002650:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < CHECKSUM_SIZE; i++)
 8002652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002654:	3301      	adds	r3, #1
 8002656:	643b      	str	r3, [r7, #64]	@ 0x40
 8002658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800265a:	2b01      	cmp	r3, #1
 800265c:	dde9      	ble.n	8002632 <Fsm_Get_Message+0x1b2>
        }

        uint16_t received_checksum = Convert_Bytes_To_Uint16(
            dataout[byte_count - 2], dataout[byte_count - 1]);
 800265e:	4b27      	ldr	r3, [pc, #156]	@ (80026fc <Fsm_Get_Message+0x27c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	3b02      	subs	r3, #2
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	4413      	add	r3, r2
        uint16_t received_checksum = Convert_Bytes_To_Uint16(
 8002668:	7818      	ldrb	r0, [r3, #0]
            dataout[byte_count - 2], dataout[byte_count - 1]);
 800266a:	4b24      	ldr	r3, [pc, #144]	@ (80026fc <Fsm_Get_Message+0x27c>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	3b01      	subs	r3, #1
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	4413      	add	r3, r2
        uint16_t received_checksum = Convert_Bytes_To_Uint16(
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	f000 ff1c 	bl	80034b4 <Convert_Bytes_To_Uint16>
 800267c:	4603      	mov	r3, r0
 800267e:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        uint16_t calculated_checksum = Message_Calculate_Checksum(
 8002680:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <Fsm_Get_Message+0x27c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	3b02      	subs	r3, #2
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4619      	mov	r1, r3
 800268a:	6838      	ldr	r0, [r7, #0]
 800268c:	f000 ff24 	bl	80034d8 <Message_Calculate_Checksum>
 8002690:	4603      	mov	r3, r0
 8002692:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            dataout, byte_count - CHECKSUM_SIZE);

        if (byte_count == (1 + HEADER_SIZE + expected_payload_length + CHECKSUM_SIZE) &&
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <Fsm_Get_Message+0x27c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b1a      	ldr	r3, [pc, #104]	@ (8002704 <Fsm_Get_Message+0x284>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	3306      	adds	r3, #6
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d10a      	bne.n	80026ba <Fsm_Get_Message+0x23a>
 80026a4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80026a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d106      	bne.n	80026ba <Fsm_Get_Message+0x23a>
            (received_checksum == calculated_checksum))
        {
            flag_fsm_new_message = 1;
 80026ac:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <Fsm_Get_Message+0x274>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
            fsm_state = FSM_STATE_START;
 80026b2:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <Fsm_Get_Message+0x278>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
            uint8_t data[FRAME_SIZE];
                        uint8_t length = Create_Message_RESPONSE(dataout[2], RESPONSE_NACK, data);
                        USART1_Send_Data(data, length); // Gửi phản hồi NACK
        }

        break;
 80026b8:	e015      	b.n	80026e6 <Fsm_Get_Message+0x266>
            Clear_All_State_Fsm();
 80026ba:	f7ff fec7 	bl	800244c <Clear_All_State_Fsm>
                        uint8_t length = Create_Message_RESPONSE(dataout[2], RESPONSE_NACK, data);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	3302      	adds	r3, #2
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f107 0208 	add.w	r2, r7, #8
 80026c8:	2102      	movs	r1, #2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 ff77 	bl	80035be <Create_Message_RESPONSE>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                        USART1_Send_Data(data, length); // Gửi phản hồi NACK
 80026d6:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80026da:	f107 0308 	add.w	r3, r7, #8
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 f83f 	bl	8002764 <USART1_Send_Data>
        break;
 80026e6:	bf00      	nop
    }
    return length;
 80026e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3750      	adds	r7, #80	@ 0x50
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200003e3 	.word	0x200003e3
 80026f8:	200003e0 	.word	0x200003e0
 80026fc:	200003e1 	.word	0x200003e1
 8002700:	40010800 	.word	0x40010800
 8002704:	200003e2 	.word	0x200003e2

08002708 <Check_Fsm_Flag_New_Message>:
 * @brief Kiểm tra xem đã nhận được một frame hoàn chỉnh và hợp lệ chưa.
 *
 * @return 1 nếu đã nhận đúng và đủ frame; 0 nếu chưa đủ hoặc không hợp lệ.
 */
uint8_t Check_Fsm_Flag_New_Message(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
    return flag_fsm_new_message;
 800270c:	4b02      	ldr	r3, [pc, #8]	@ (8002718 <Check_Fsm_Flag_New_Message+0x10>)
 800270e:	781b      	ldrb	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	200003e3 	.word	0x200003e3

0800271c <USART1_Init>:

/**
 * @brief Khởi tạo USART1 với tốc độ baud được chỉ định.
 */
void USART1_Init(uint32_t baud_rate)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
    huart1.Instance = USART1;
 8002724:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <USART1_Init+0x40>)
 8002726:	4a0e      	ldr	r2, [pc, #56]	@ (8002760 <USART1_Init+0x44>)
 8002728:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = baud_rate;
 800272a:	4a0c      	ldr	r2, [pc, #48]	@ (800275c <USART1_Init+0x40>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6053      	str	r3, [r2, #4]
    // Word length 8-bit => M = 0 (bit 12 clear)
    huart1.Init.WordLength = 0;
 8002730:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <USART1_Init+0x40>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]

    huart1.Init.StopBits = 0;                            // 1 stop bit (mặc định)
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <USART1_Init+0x40>)
 8002738:	2200      	movs	r2, #0
 800273a:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = USART_CR1_PCE & ~USART_CR1_PCE; // No parity
 800273c:	4b07      	ldr	r3, [pc, #28]	@ (800275c <USART1_Init+0x40>)
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;                  // TX + RX
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <USART1_Init+0x40>)
 8002744:	220c      	movs	r2, #12
 8002746:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;         // Không sử dụng điều khiển luồng phần cứng
 8002748:	4b04      	ldr	r3, [pc, #16]	@ (800275c <USART1_Init+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]

    UART_Init(&huart1); // Gọi hàm từ stm32_uart.c
 800274e:	4803      	ldr	r0, [pc, #12]	@ (800275c <USART1_Init+0x40>)
 8002750:	f7ff fc3a 	bl	8001fc8 <UART_Init>
}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	200001f0 	.word	0x200001f0
 8002760:	40013800 	.word	0x40013800

08002764 <USART1_Send_Data>:

/**
 * @brief Gửi một mảng dữ liệu qua USART1.
 */
void USART1_Send_Data(uint8_t *data, uint8_t length)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
    if (data != NULL && length > 0)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <USART1_Send_Data+0x26>
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <USART1_Send_Data+0x26>
    {
        UART_Transmit(&huart1, data, length, 1000000);
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <USART1_Send_Data+0x30>)
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4804      	ldr	r0, [pc, #16]	@ (8002798 <USART1_Send_Data+0x34>)
 8002786:	f7ff fd05 	bl	8002194 <UART_Transmit>
    }
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	000f4240 	.word	0x000f4240
 8002798:	200001f0 	.word	0x200001f0

0800279c <USART1_IRQHandler>:
/**
 * @brief Xử lý ngắt nhận dữ liệu từ USART1.
 * @note Hàm này sẽ được gọi tự động khi có dữ liệu đến USART1.
 */
void USART1_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
    UART_IRQHandler(&huart1);
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <USART1_IRQHandler+0x10>)
 80027a2:	f7ff fd39 	bl	8002218 <UART_IRQHandler>
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200001f0 	.word	0x200001f0

080027b0 <DUNGX_UART_Receive_IT>:

StatusTypeDef DUNGX_UART_Receive_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint8_t Size)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	71fb      	strb	r3, [r7, #7]

    // Kiểm tra UART đã sẵn sàng nhận chưa
    if (huart->RxState == UART_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	d126      	bne.n	8002818 <DUNGX_UART_Receive_IT+0x68>
    {

        if ((pData == NULL) || (Size == 0))
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <DUNGX_UART_Receive_IT+0x26>
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <DUNGX_UART_Receive_IT+0x2a>
        {
            return DUNGX_ERROR; // Lỗi dữ liệu
 80027d6:	2301      	movs	r3, #1
 80027d8:	e01f      	b.n	800281a <DUNGX_UART_Receive_IT+0x6a>
        }

        // Cập nhật trạng thái và buffer nhận
        huart->RxState = UART_STATE_BUSY_RX;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2222      	movs	r2, #34	@ 0x22
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        huart->ErrorCode = UART_ERROR_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	639a      	str	r2, [r3, #56]	@ 0x38
        huart->RxXferSize = Size;
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
        huart->RxXferCount = Size;
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
        huart->pRxBuffPtr = pData;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	629a      	str	r2, [r3, #40]	@ 0x28

        (void)huart1.Instance->DR; // Clear RXNE flag
 80027fe:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <DUNGX_UART_Receive_IT+0x74>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]

        // Bật ngắt RXNE (nhận dữ liệu)
        huart->Instance->CR1 |= USART_CR1_RXNEIE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0220 	orr.w	r2, r2, #32
 8002812:	60da      	str	r2, [r3, #12]

        return DUNGX_OK; // Thành công
 8002814:	2300      	movs	r3, #0
 8002816:	e000      	b.n	800281a <DUNGX_UART_Receive_IT+0x6a>
    }
    else
    {
        return DUNGX_BUSY; // UART đang bận
 8002818:	2302      	movs	r3, #2
    }
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	200001f0 	.word	0x200001f0

08002828 <CDS_Init>:
#define CDS_ADC_SAMPLING ADC_SAMPLETIME_71CYCLES_5

static ADC_HandleTypeDef hadc_cds;

void CDS_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
    // 1. Enable peripheral clocks (GPIOA, ADC1)
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800282e:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <CDS_Init+0x80>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	4a1d      	ldr	r2, [pc, #116]	@ (80028a8 <CDS_Init+0x80>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800283a:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <CDS_Init+0x80>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	4a1a      	ldr	r2, [pc, #104]	@ (80028a8 <CDS_Init+0x80>)
 8002840:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002844:	6193      	str	r3, [r2, #24]

    // 2. Configure PA0 as analog input
    GPIO_InitTypeDef gpio_init = {
 8002846:	f107 0310 	add.w	r3, r7, #16
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
 8002854:	2301      	movs	r3, #1
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	2303      	movs	r3, #3
 800285a:	617b      	str	r3, [r7, #20]
        .Pin = CDS_GPIO_PIN,
        .Mode = GPIO_MODE_ANALOG};
    GPIO_Init(CDS_GPIO_PORT, &gpio_init);
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	4619      	mov	r1, r3
 8002862:	4812      	ldr	r0, [pc, #72]	@ (80028ac <CDS_Init+0x84>)
 8002864:	f7ff f84a 	bl	80018fc <GPIO_Init>

    // 3. Configure ADC1
    hadc_cds.Instance = ADC1;
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <CDS_Init+0x88>)
 800286a:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <CDS_Init+0x8c>)
 800286c:	601a      	str	r2, [r3, #0]
    hadc_cds.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <CDS_Init+0x88>)
 8002870:	2200      	movs	r2, #0
 8002872:	605a      	str	r2, [r3, #4]
    hadc_cds.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002874:	4b0e      	ldr	r3, [pc, #56]	@ (80028b0 <CDS_Init+0x88>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
    hadc_cds.Init.ContinuousConvMode = DISABLE;
 800287a:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <CDS_Init+0x88>)
 800287c:	2200      	movs	r2, #0
 800287e:	731a      	strb	r2, [r3, #12]
    hadc_cds.Init.NbrOfConversion = 1;
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <CDS_Init+0x88>)
 8002882:	2201      	movs	r2, #1
 8002884:	611a      	str	r2, [r3, #16]
    ADC_Init(&hadc_cds);
 8002886:	480a      	ldr	r0, [pc, #40]	@ (80028b0 <CDS_Init+0x88>)
 8002888:	f7fe ff32 	bl	80016f0 <ADC_Init>

    // 4. Configure ADC channel (Channel 0 = PA0)
    ADC_ChannelConfTypeDef ch_config = {
 800288c:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <CDS_Init+0x90>)
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	ca07      	ldmia	r2, {r0, r1, r2}
 8002892:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        .Channel = CDS_ADC_CHANNEL,
        .Rank = ADC_REGULAR_RANK_1,
        .SamplingTime = CDS_ADC_SAMPLING};
    ADC_ConfigChannel(&hadc_cds, &ch_config);
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4805      	ldr	r0, [pc, #20]	@ (80028b0 <CDS_Init+0x88>)
 800289c:	f7fe ffaa 	bl	80017f4 <ADC_ConfigChannel>
}
 80028a0:	bf00      	nop
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40010800 	.word	0x40010800
 80028b0:	200003e4 	.word	0x200003e4
 80028b4:	40012400 	.word	0x40012400
 80028b8:	08006d78 	.word	0x08006d78

080028bc <CDS_ReadRaw>:

uint16_t CDS_ReadRaw(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
    ADC_Start(&hadc_cds);
 80028c0:	4809      	ldr	r0, [pc, #36]	@ (80028e8 <CDS_ReadRaw+0x2c>)
 80028c2:	f7fe ffcc 	bl	800185e <ADC_Start>
    if (ADC_PollForConversion(&hadc_cds, 1000) != DUNGX_OK)
 80028c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80028ca:	4807      	ldr	r0, [pc, #28]	@ (80028e8 <CDS_ReadRaw+0x2c>)
 80028cc:	f7fe ffe6 	bl	800189c <ADC_PollForConversion>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <CDS_ReadRaw+0x1e>
        return 0; // Timeout or error
 80028d6:	2300      	movs	r3, #0
 80028d8:	e004      	b.n	80028e4 <CDS_ReadRaw+0x28>
    return (uint16_t)ADC_GetValue(&hadc_cds);
 80028da:	4803      	ldr	r0, [pc, #12]	@ (80028e8 <CDS_ReadRaw+0x2c>)
 80028dc:	f7fe fffc 	bl	80018d8 <ADC_GetValue>
 80028e0:	4603      	mov	r3, r0
 80028e2:	b29b      	uxth	r3, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	200003e4 	.word	0x200003e4

080028ec <CDS_ReadLux>:

float CDS_ReadLux(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
    uint16_t raw = CDS_ReadRaw();
 80028f2:	f7ff ffe3 	bl	80028bc <CDS_ReadRaw>
 80028f6:	4603      	mov	r3, r0
 80028f8:	80fb      	strh	r3, [r7, #6]

    // Convert raw ADC value to lux
    float lux = (float)(4095 - raw) * 2000.0f / 4095.0f;
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8002900:	330f      	adds	r3, #15
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe f98a 	bl	8000c1c <__aeabi_i2f>
 8002908:	4603      	mov	r3, r0
 800290a:	4908      	ldr	r1, [pc, #32]	@ (800292c <CDS_ReadLux+0x40>)
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe f9d9 	bl	8000cc4 <__aeabi_fmul>
 8002912:	4603      	mov	r3, r0
 8002914:	4906      	ldr	r1, [pc, #24]	@ (8002930 <CDS_ReadLux+0x44>)
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fa88 	bl	8000e2c <__aeabi_fdiv>
 800291c:	4603      	mov	r3, r0
 800291e:	603b      	str	r3, [r7, #0]
    return lux;
 8002920:	683b      	ldr	r3, [r7, #0]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	44fa0000 	.word	0x44fa0000
 8002930:	457ff000 	.word	0x457ff000

08002934 <DHT_SetPinOutput>:

#define DHT11_PORT GPIOA
#define DHT11_PIN (1U << 2) // PA2

static void DHT_SetPinOutput(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio = {
 800293a:	463b      	mov	r3, r7
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	2304      	movs	r3, #4
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	2311      	movs	r3, #17
 800294c:	607b      	str	r3, [r7, #4]
        .Pin = DHT11_PIN,
        .Mode = GPIO_MODE_OUTPUT_OD,
        .Speed = GPIO_SPEED_LOW,
    };
    GPIO_Init(DHT11_PORT, &gpio);
 800294e:	463b      	mov	r3, r7
 8002950:	4619      	mov	r1, r3
 8002952:	4803      	ldr	r0, [pc, #12]	@ (8002960 <DHT_SetPinOutput+0x2c>)
 8002954:	f7fe ffd2 	bl	80018fc <GPIO_Init>
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40010800 	.word	0x40010800

08002964 <DHT_SetPinInput>:

static void DHT_SetPinInput(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio = {
 800296a:	463b      	mov	r3, r7
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	2304      	movs	r3, #4
 8002978:	603b      	str	r3, [r7, #0]
        .Pin = DHT11_PIN,
        .Mode = GPIO_MODE_INPUT,
        .Pull = GPIO_NOPULL};
    GPIO_Init(DHT11_PORT, &gpio);
 800297a:	463b      	mov	r3, r7
 800297c:	4619      	mov	r1, r3
 800297e:	4803      	ldr	r0, [pc, #12]	@ (800298c <DHT_SetPinInput+0x28>)
 8002980:	f7fe ffbc 	bl	80018fc <GPIO_Init>
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40010800 	.word	0x40010800

08002990 <DHT_ReadPin>:

static uint8_t DHT_ReadPin(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
    return (DHT11_PORT->IDR & DHT11_PIN) ? 1 : 0;
 8002994:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <DHT_ReadPin+0x20>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40010800 	.word	0x40010800

080029b4 <DHT11_Init>:

void DHT11_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80029b8:	4b07      	ldr	r3, [pc, #28]	@ (80029d8 <DHT11_Init+0x24>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a06      	ldr	r2, [pc, #24]	@ (80029d8 <DHT11_Init+0x24>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6193      	str	r3, [r2, #24]
    DHT_SetPinOutput();
 80029c4:	f7ff ffb6 	bl	8002934 <DHT_SetPinOutput>
    GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 80029c8:	2201      	movs	r2, #1
 80029ca:	2104      	movs	r1, #4
 80029cc:	4803      	ldr	r0, [pc, #12]	@ (80029dc <DHT11_Init+0x28>)
 80029ce:	f7ff f8bd 	bl	8001b4c <GPIO_WritePin>
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40010800 	.word	0x40010800

080029e0 <DHT11_Start>:

static void DHT11_Start(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
    DHT_SetPinOutput();
 80029e4:	f7ff ffa6 	bl	8002934 <DHT_SetPinOutput>
    GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 80029e8:	2200      	movs	r2, #0
 80029ea:	2104      	movs	r1, #4
 80029ec:	4808      	ldr	r0, [pc, #32]	@ (8002a10 <DHT11_Start+0x30>)
 80029ee:	f7ff f8ad 	bl	8001b4c <GPIO_WritePin>
    Delay_ms(20); // Kéo thấp ≥ 18ms
 80029f2:	2014      	movs	r0, #20
 80029f4:	f001 f852 	bl	8003a9c <Delay_ms>
    GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 80029f8:	2201      	movs	r2, #1
 80029fa:	2104      	movs	r1, #4
 80029fc:	4804      	ldr	r0, [pc, #16]	@ (8002a10 <DHT11_Start+0x30>)
 80029fe:	f7ff f8a5 	bl	8001b4c <GPIO_WritePin>
    Delay_us(30);
 8002a02:	201e      	movs	r0, #30
 8002a04:	f001 f860 	bl	8003ac8 <Delay_us>
    DHT_SetPinInput();
 8002a08:	f7ff ffac 	bl	8002964 <DHT_SetPinInput>
}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40010800 	.word	0x40010800

08002a14 <DHT_ReadBit>:

static uint8_t DHT_ReadBit(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
    while (DHT_ReadPin() == 0)
 8002a18:	bf00      	nop
 8002a1a:	f7ff ffb9 	bl	8002990 <DHT_ReadPin>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0fa      	beq.n	8002a1a <DHT_ReadBit+0x6>
        ;                 // Chờ đầu 0
    Delay_us(30);         // Sau 30us kiểm tra
 8002a24:	201e      	movs	r0, #30
 8002a26:	f001 f84f 	bl	8003ac8 <Delay_us>
    return DHT_ReadPin(); // HIGH → 1, LOW → 0
 8002a2a:	f7ff ffb1 	bl	8002990 <DHT_ReadPin>
 8002a2e:	4603      	mov	r3, r0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <DHT_ReadByte>:

static uint8_t DHT_ReadByte(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
    uint8_t i, byte = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	71fb      	strb	r3, [r7, #7]
 8002a42:	e012      	b.n	8002a6a <DHT_ReadByte+0x36>
    {
        byte <<= 1;
 8002a44:	79bb      	ldrb	r3, [r7, #6]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	71bb      	strb	r3, [r7, #6]
        byte |= DHT_ReadBit();
 8002a4a:	f7ff ffe3 	bl	8002a14 <DHT_ReadBit>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	461a      	mov	r2, r3
 8002a52:	79bb      	ldrb	r3, [r7, #6]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	71bb      	strb	r3, [r7, #6]
        while (DHT_ReadPin())
 8002a58:	bf00      	nop
 8002a5a:	f7ff ff99 	bl	8002990 <DHT_ReadPin>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1fa      	bne.n	8002a5a <DHT_ReadByte+0x26>
    for (i = 0; i < 8; i++)
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	3301      	adds	r3, #1
 8002a68:	71fb      	strb	r3, [r7, #7]
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2b07      	cmp	r3, #7
 8002a6e:	d9e9      	bls.n	8002a44 <DHT_ReadByte+0x10>
            ; // Chờ kết thúc bit
    }
    return byte;
 8002a70:	79bb      	ldrb	r3, [r7, #6]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <DHT11_Read>:

bool DHT11_Read(uint8_t *humi_int, uint8_t *humi_dec, uint8_t *temp_int, uint8_t *temp_dec)
{
 8002a7a:	b590      	push	{r4, r7, lr}
 8002a7c:	b089      	sub	sp, #36	@ 0x24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	603b      	str	r3, [r7, #0]
    uint8_t data[5] = {0};
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	763b      	strb	r3, [r7, #24]

    DHT11_Start();
 8002a90:	f7ff ffa6 	bl	80029e0 <DHT11_Start>

    // Chờ phản hồi từ DHT11
    uint32_t timeout = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
    while (DHT_ReadPin())
 8002a98:	e008      	b.n	8002aac <DHT11_Read+0x32>
        if (++timeout > 1000)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002aa6:	d901      	bls.n	8002aac <DHT11_Read+0x32>
            return false;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e053      	b.n	8002b54 <DHT11_Read+0xda>
    while (DHT_ReadPin())
 8002aac:	f7ff ff70 	bl	8002990 <DHT_ReadPin>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f1      	bne.n	8002a9a <DHT11_Read+0x20>
    timeout = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
    while (!DHT_ReadPin())
 8002aba:	e008      	b.n	8002ace <DHT11_Read+0x54>
        if (++timeout > 1000)
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ac8:	d901      	bls.n	8002ace <DHT11_Read+0x54>
            return false;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e042      	b.n	8002b54 <DHT11_Read+0xda>
    while (!DHT_ReadPin())
 8002ace:	f7ff ff5f 	bl	8002990 <DHT_ReadPin>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f1      	beq.n	8002abc <DHT11_Read+0x42>
    timeout = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
    while (DHT_ReadPin())
 8002adc:	e008      	b.n	8002af0 <DHT11_Read+0x76>
        if (++timeout > 1000)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002aea:	d901      	bls.n	8002af0 <DHT11_Read+0x76>
            return false;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e031      	b.n	8002b54 <DHT11_Read+0xda>
    while (DHT_ReadPin())
 8002af0:	f7ff ff4e 	bl	8002990 <DHT_ReadPin>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f1      	bne.n	8002ade <DHT11_Read+0x64>

    // Đọc 5 byte
    for (uint8_t i = 0; i < 5; i++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	76fb      	strb	r3, [r7, #27]
 8002afe:	e00c      	b.n	8002b1a <DHT11_Read+0xa0>
        data[i] = DHT_ReadByte();
 8002b00:	7efc      	ldrb	r4, [r7, #27]
 8002b02:	f7ff ff97 	bl	8002a34 <DHT_ReadByte>
 8002b06:	4603      	mov	r3, r0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f104 0320 	add.w	r3, r4, #32
 8002b0e:	443b      	add	r3, r7
 8002b10:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 5; i++)
 8002b14:	7efb      	ldrb	r3, [r7, #27]
 8002b16:	3301      	adds	r3, #1
 8002b18:	76fb      	strb	r3, [r7, #27]
 8002b1a:	7efb      	ldrb	r3, [r7, #27]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d9ef      	bls.n	8002b00 <DHT11_Read+0x86>

    // Kiểm tra checksum
    if ((data[0] + data[1] + data[2] + data[3]) != data[4])
 8002b20:	7d3b      	ldrb	r3, [r7, #20]
 8002b22:	461a      	mov	r2, r3
 8002b24:	7d7b      	ldrb	r3, [r7, #21]
 8002b26:	4413      	add	r3, r2
 8002b28:	7dba      	ldrb	r2, [r7, #22]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	7dfa      	ldrb	r2, [r7, #23]
 8002b2e:	4413      	add	r3, r2
 8002b30:	7e3a      	ldrb	r2, [r7, #24]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d001      	beq.n	8002b3a <DHT11_Read+0xc0>
        return false;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e00c      	b.n	8002b54 <DHT11_Read+0xda>

    *humi_int = data[0];
 8002b3a:	7d3a      	ldrb	r2, [r7, #20]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	701a      	strb	r2, [r3, #0]
    *humi_dec = data[1];
 8002b40:	7d7a      	ldrb	r2, [r7, #21]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	701a      	strb	r2, [r3, #0]
    *temp_int = data[2];
 8002b46:	7dba      	ldrb	r2, [r7, #22]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	701a      	strb	r2, [r3, #0]
    *temp_dec = data[3];
 8002b4c:	7dfa      	ldrb	r2, [r7, #23]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	701a      	strb	r2, [r3, #0]
    return true;
 8002b52:	2301      	movs	r3, #1
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3724      	adds	r7, #36	@ 0x24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd90      	pop	{r4, r7, pc}

08002b5c <MQ2_Init>:

static ADC_HandleTypeDef hadc_mq2;
static float Ro = 10.0f; // Giá trị mặc định Ro

void MQ2_Init(float ro_clean_air)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	@ 0x28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
    Ro = ro_clean_air;
 8002b64:	4a1f      	ldr	r2, [pc, #124]	@ (8002be4 <MQ2_Init+0x88>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6013      	str	r3, [r2, #0]

    // Bật clock GPIOA nếu chưa bật
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002be8 <MQ2_Init+0x8c>)
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002be8 <MQ2_Init+0x8c>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6193      	str	r3, [r2, #24]

    // Cấu hình chân analog (ví dụ PA1)
    GPIO_InitTypeDef GPIO_InitStruct = {
 8002b76:	f107 0318 	add.w	r3, r7, #24
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	2302      	movs	r3, #2
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	2303      	movs	r3, #3
 8002b8a:	61fb      	str	r3, [r7, #28]
        .Pin = MQ2_PIN,
        .Mode = GPIO_MODE_ANALOG};
    GPIO_Init(MQ2_PORT, &GPIO_InitStruct);
 8002b8c:	f107 0318 	add.w	r3, r7, #24
 8002b90:	4619      	mov	r1, r3
 8002b92:	4816      	ldr	r0, [pc, #88]	@ (8002bec <MQ2_Init+0x90>)
 8002b94:	f7fe feb2 	bl	80018fc <GPIO_Init>

    // Cấu hình ADC
    hadc_mq2.Instance = ADC1;
 8002b98:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <MQ2_Init+0x94>)
 8002b9a:	4a16      	ldr	r2, [pc, #88]	@ (8002bf4 <MQ2_Init+0x98>)
 8002b9c:	601a      	str	r2, [r3, #0]
    hadc_mq2.Init.ContinuousConvMode = DISABLE;
 8002b9e:	4b14      	ldr	r3, [pc, #80]	@ (8002bf0 <MQ2_Init+0x94>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	731a      	strb	r2, [r3, #12]
    hadc_mq2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ba4:	4b12      	ldr	r3, [pc, #72]	@ (8002bf0 <MQ2_Init+0x94>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	605a      	str	r2, [r3, #4]
    hadc_mq2.Init.NbrOfConversion = 1;
 8002baa:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <MQ2_Init+0x94>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	611a      	str	r2, [r3, #16]
    hadc_mq2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <MQ2_Init+0x94>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]

    ADC_Init(&hadc_mq2);
 8002bb6:	480e      	ldr	r0, [pc, #56]	@ (8002bf0 <MQ2_Init+0x94>)
 8002bb8:	f7fe fd9a 	bl	80016f0 <ADC_Init>

    ADC_ChannelConfTypeDef sConfig = {
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	2306      	movs	r3, #6
 8002bce:	617b      	str	r3, [r7, #20]
        .Channel = 1, // ADC1_IN1 nếu dùng PA1
        .SamplingTime = ADC_SAMPLETIME_71CYCLES_5};
    ADC_ConfigChannel(&hadc_mq2, &sConfig);
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4806      	ldr	r0, [pc, #24]	@ (8002bf0 <MQ2_Init+0x94>)
 8002bd8:	f7fe fe0c 	bl	80017f4 <ADC_ConfigChannel>
}
 8002bdc:	bf00      	nop
 8002bde:	3728      	adds	r7, #40	@ 0x28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000000 	.word	0x20000000
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40010800 	.word	0x40010800
 8002bf0:	20000400 	.word	0x20000400
 8002bf4:	40012400 	.word	0x40012400

08002bf8 <MQ2_ReadRaw>:

static uint16_t MQ2_ReadRaw(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
    ADC_Start(&hadc_mq2);
 8002bfc:	4807      	ldr	r0, [pc, #28]	@ (8002c1c <MQ2_ReadRaw+0x24>)
 8002bfe:	f7fe fe2e 	bl	800185e <ADC_Start>
    ADC_PollForConversion(&hadc_mq2, 1000);
 8002c02:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c06:	4805      	ldr	r0, [pc, #20]	@ (8002c1c <MQ2_ReadRaw+0x24>)
 8002c08:	f7fe fe48 	bl	800189c <ADC_PollForConversion>
    return (uint16_t)ADC_GetValue(&hadc_mq2);
 8002c0c:	4803      	ldr	r0, [pc, #12]	@ (8002c1c <MQ2_ReadRaw+0x24>)
 8002c0e:	f7fe fe63 	bl	80018d8 <ADC_GetValue>
 8002c12:	4603      	mov	r3, r0
 8002c14:	b29b      	uxth	r3, r3
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000400 	.word	0x20000400

08002c20 <MQ2_ReadRs>:

static float MQ2_ReadRs(void)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
    uint16_t adc_val = MQ2_ReadRaw();
 8002c26:	f7ff ffe7 	bl	8002bf8 <MQ2_ReadRaw>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80fb      	strh	r3, [r7, #6]
    float voltage_ratio = (ADC_MAX - adc_val) / (float)adc_val;
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fff3 	bl	8000c1c <__aeabi_i2f>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4619      	mov	r1, r3
 8002c3a:	480c      	ldr	r0, [pc, #48]	@ (8002c6c <MQ2_ReadRs+0x4c>)
 8002c3c:	f7fd ff38 	bl	8000ab0 <__aeabi_fsub>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461c      	mov	r4, r3
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd ffe4 	bl	8000c14 <__aeabi_ui2f>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4620      	mov	r0, r4
 8002c52:	f7fe f8eb 	bl	8000e2c <__aeabi_fdiv>
 8002c56:	4603      	mov	r3, r0
 8002c58:	603b      	str	r3, [r7, #0]
    return RL_VALUE * voltage_ratio;
 8002c5a:	4905      	ldr	r1, [pc, #20]	@ (8002c70 <MQ2_ReadRs+0x50>)
 8002c5c:	6838      	ldr	r0, [r7, #0]
 8002c5e:	f7fe f831 	bl	8000cc4 <__aeabi_fmul>
 8002c62:	4603      	mov	r3, r0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd90      	pop	{r4, r7, pc}
 8002c6c:	457ff000 	.word	0x457ff000
 8002c70:	41200000 	.word	0x41200000

08002c74 <MQ2_ReadAirQuality>:
/**
 * @brief Đọc nồng độ khí tổng quát (Smoke) đại diện cho chất lượng không khí
 * @return ppm
 */
float MQ2_ReadAirQuality(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
    float rs = MQ2_ReadRs();
 8002c7a:	f7ff ffd1 	bl	8002c20 <MQ2_ReadRs>
 8002c7e:	6078      	str	r0, [r7, #4]
    float ratio = rs / Ro;
 8002c80:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <MQ2_ReadAirQuality+0x38>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe f8d0 	bl	8000e2c <__aeabi_fdiv>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	603b      	str	r3, [r7, #0]
    return SMOKE_A * powf(ratio, SMOKE_B);
 8002c90:	4907      	ldr	r1, [pc, #28]	@ (8002cb0 <MQ2_ReadAirQuality+0x3c>)
 8002c92:	6838      	ldr	r0, [r7, #0]
 8002c94:	f003 fbd0 	bl	8006438 <powf>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4906      	ldr	r1, [pc, #24]	@ (8002cb4 <MQ2_ReadAirQuality+0x40>)
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe f811 	bl	8000cc4 <__aeabi_fmul>
 8002ca2:	4603      	mov	r3, r0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	bfcccccd 	.word	0xbfcccccd
 8002cb4:	42c80000 	.word	0x42c80000

08002cb8 <LED_RGB_Init>:
    [LED_RED]       = {255, 0,   0   }
};


void LED_RGB_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
    // 1. Cấu hình các chân PWM: PA6, PA7, PB0 (AF_PP)
    GPIO_InitTypeDef gpio;

    gpio.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	617b      	str	r3, [r7, #20]
    gpio.Speed = GPIO_SPEED_HIGH;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	61fb      	str	r3, [r7, #28]

    gpio.Pin = LED_R_PIN;
 8002cc6:	2340      	movs	r3, #64	@ 0x40
 8002cc8:	613b      	str	r3, [r7, #16]
    GPIO_Init(LED_R_PORT, &gpio);
 8002cca:	f107 0310 	add.w	r3, r7, #16
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4827      	ldr	r0, [pc, #156]	@ (8002d70 <LED_RGB_Init+0xb8>)
 8002cd2:	f7fe fe13 	bl	80018fc <GPIO_Init>

    gpio.Pin = LED_G_PIN;
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	613b      	str	r3, [r7, #16]
    GPIO_Init(LED_G_PORT, &gpio);
 8002cda:	f107 0310 	add.w	r3, r7, #16
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4823      	ldr	r0, [pc, #140]	@ (8002d70 <LED_RGB_Init+0xb8>)
 8002ce2:	f7fe fe0b 	bl	80018fc <GPIO_Init>

    gpio.Pin = LED_B_PIN;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	613b      	str	r3, [r7, #16]
    GPIO_Init(LED_B_PORT, &gpio);
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4820      	ldr	r0, [pc, #128]	@ (8002d74 <LED_RGB_Init+0xbc>)
 8002cf2:	f7fe fe03 	bl	80018fc <GPIO_Init>

    // 2. Cấu hình timer TIM3
    htim3.Instance = TIM3;
 8002cf6:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <LED_RGB_Init+0xc0>)
 8002cf8:	4a20      	ldr	r2, [pc, #128]	@ (8002d7c <LED_RGB_Init+0xc4>)
 8002cfa:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 71;           // 72 MHz / (71+1) = 1 MHz
 8002cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <LED_RGB_Init+0xc0>)
 8002cfe:	2247      	movs	r2, #71	@ 0x47
 8002d00:	605a      	str	r2, [r3, #4]
    htim3.Init.Period = 999;             // PWM tần số = 1 kHz
 8002d02:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <LED_RGB_Init+0xc0>)
 8002d04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d08:	60da      	str	r2, [r3, #12]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d78 <LED_RGB_Init+0xc0>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d10:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <LED_RGB_Init+0xc0>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]
    TIM_PWM_Init(&htim3);
 8002d16:	4818      	ldr	r0, [pc, #96]	@ (8002d78 <LED_RGB_Init+0xc0>)
 8002d18:	f7fe ff6e 	bl	8001bf8 <TIM_PWM_Init>

    // 3. Cấu hình từng kênh PWM (CH1–CH3)
    TIM_OC_InitTypeDef sConfigOC = {
 8002d1c:	2306      	movs	r3, #6
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	2300      	movs	r3, #0
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
        .Pulse = 0,
        .OCPolarity = TIM_OCPOLARITY_HIGH,
        .OCFastMode = TIM_OCFAST_DISABLE
    };

    TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1); // RED
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4619      	mov	r1, r3
 8002d32:	4811      	ldr	r0, [pc, #68]	@ (8002d78 <LED_RGB_Init+0xc0>)
 8002d34:	f7fe ff6c 	bl	8001c10 <TIM_PWM_ConfigChannel>
    TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2); // GREEN
 8002d38:	463b      	mov	r3, r7
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	480e      	ldr	r0, [pc, #56]	@ (8002d78 <LED_RGB_Init+0xc0>)
 8002d40:	f7fe ff66 	bl	8001c10 <TIM_PWM_ConfigChannel>
    TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3); // BLUE
 8002d44:	463b      	mov	r3, r7
 8002d46:	2208      	movs	r2, #8
 8002d48:	4619      	mov	r1, r3
 8002d4a:	480b      	ldr	r0, [pc, #44]	@ (8002d78 <LED_RGB_Init+0xc0>)
 8002d4c:	f7fe ff60 	bl	8001c10 <TIM_PWM_ConfigChannel>

    TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002d50:	2100      	movs	r1, #0
 8002d52:	4809      	ldr	r0, [pc, #36]	@ (8002d78 <LED_RGB_Init+0xc0>)
 8002d54:	f7ff f852 	bl	8001dfc <TIM_PWM_Start>
    TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002d58:	2104      	movs	r1, #4
 8002d5a:	4807      	ldr	r0, [pc, #28]	@ (8002d78 <LED_RGB_Init+0xc0>)
 8002d5c:	f7ff f84e 	bl	8001dfc <TIM_PWM_Start>
    TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002d60:	2108      	movs	r1, #8
 8002d62:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <LED_RGB_Init+0xc0>)
 8002d64:	f7ff f84a 	bl	8001dfc <TIM_PWM_Start>
}
 8002d68:	bf00      	nop
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40010800 	.word	0x40010800
 8002d74:	40010c00 	.word	0x40010c00
 8002d78:	2000041c 	.word	0x2000041c
 8002d7c:	40000400 	.word	0x40000400

08002d80 <LED_RGB_Set>:

void LED_RGB_Set(uint8_t r_percent, uint8_t g_percent, uint8_t b_percent)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	71bb      	strb	r3, [r7, #6]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	717b      	strb	r3, [r7, #5]
    uint32_t period = htim3.Init.Period + 1;
 8002d92:	4b17      	ldr	r3, [pc, #92]	@ (8002df0 <LED_RGB_Set+0x70>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	3301      	adds	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]

    TIM_SetCompare(&htim3, TIM_CHANNEL_1, (r_percent * period) / 255);
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <LED_RGB_Set+0x74>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	09db      	lsrs	r3, r3, #7
 8002daa:	461a      	mov	r2, r3
 8002dac:	2100      	movs	r1, #0
 8002dae:	4810      	ldr	r0, [pc, #64]	@ (8002df0 <LED_RGB_Set+0x70>)
 8002db0:	f7ff f87e 	bl	8001eb0 <TIM_SetCompare>
    TIM_SetCompare(&htim3, TIM_CHANNEL_2, (g_percent * period) / 255);
 8002db4:	79bb      	ldrb	r3, [r7, #6]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	fb02 f303 	mul.w	r3, r2, r3
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002df4 <LED_RGB_Set+0x74>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	09db      	lsrs	r3, r3, #7
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2104      	movs	r1, #4
 8002dc8:	4809      	ldr	r0, [pc, #36]	@ (8002df0 <LED_RGB_Set+0x70>)
 8002dca:	f7ff f871 	bl	8001eb0 <TIM_SetCompare>
    TIM_SetCompare(&htim3, TIM_CHANNEL_3, (b_percent * period) / 255);
 8002dce:	797b      	ldrb	r3, [r7, #5]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	fb02 f303 	mul.w	r3, r2, r3
 8002dd6:	4a07      	ldr	r2, [pc, #28]	@ (8002df4 <LED_RGB_Set+0x74>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	09db      	lsrs	r3, r3, #7
 8002dde:	461a      	mov	r2, r3
 8002de0:	2108      	movs	r1, #8
 8002de2:	4803      	ldr	r0, [pc, #12]	@ (8002df0 <LED_RGB_Set+0x70>)
 8002de4:	f7ff f864 	bl	8001eb0 <TIM_SetCompare>
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	2000041c 	.word	0x2000041c
 8002df4:	80808081 	.word	0x80808081

08002df8 <LED_RGB_Off>:

void LED_RGB_Off(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
    TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4807      	ldr	r0, [pc, #28]	@ (8002e20 <LED_RGB_Off+0x28>)
 8002e02:	f7ff f855 	bl	8001eb0 <TIM_SetCompare>
    TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2104      	movs	r1, #4
 8002e0a:	4805      	ldr	r0, [pc, #20]	@ (8002e20 <LED_RGB_Off+0x28>)
 8002e0c:	f7ff f850 	bl	8001eb0 <TIM_SetCompare>
    TIM_SetCompare(&htim3, TIM_CHANNEL_3, 0);
 8002e10:	2200      	movs	r2, #0
 8002e12:	2108      	movs	r1, #8
 8002e14:	4802      	ldr	r0, [pc, #8]	@ (8002e20 <LED_RGB_Off+0x28>)
 8002e16:	f7ff f84b 	bl	8001eb0 <TIM_SetCompare>
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	2000041c 	.word	0x2000041c

08002e24 <LED_RGB_SetState>:
    *g_percent = (htim3.Instance->CCR2 * 255) / period;
    *b_percent = (htim3.Instance->CCR3 * 255) / period;
}


void LED_RGB_SetState(LED_State_t state){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
    if (state < LED_OFF || state > LED_RED) {
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d812      	bhi.n	8002e5a <LED_RGB_SetState+0x36>
        return; // Invalid state
    }

    RGB_Color_t color = led_color_table[state];
 8002e34:	79fa      	ldrb	r2, [r7, #7]
 8002e36:	490b      	ldr	r1, [pc, #44]	@ (8002e64 <LED_RGB_SetState+0x40>)
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	18ca      	adds	r2, r1, r3
 8002e40:	f107 030c 	add.w	r3, r7, #12
 8002e44:	8811      	ldrh	r1, [r2, #0]
 8002e46:	7892      	ldrb	r2, [r2, #2]
 8002e48:	8019      	strh	r1, [r3, #0]
 8002e4a:	709a      	strb	r2, [r3, #2]
    LED_RGB_Set(color.R, color.G, color.B);
 8002e4c:	7b3b      	ldrb	r3, [r7, #12]
 8002e4e:	7b79      	ldrb	r1, [r7, #13]
 8002e50:	7bba      	ldrb	r2, [r7, #14]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff94 	bl	8002d80 <LED_RGB_Set>
 8002e58:	e000      	b.n	8002e5c <LED_RGB_SetState+0x38>
        return; // Invalid state
 8002e5a:	bf00      	nop
}
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	08006d84 	.word	0x08006d84

08002e68 <Motor_Init>:
#define MOTOR_IN1_PIN (1U << 15) // PB15 - IN1 pin
#define MOTOR_IN2_PORT GPIOB
#define MOTOR_IN2_PIN (1U << 14) // PB14 - IN2 pin

void Motor_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b090      	sub	sp, #64	@ 0x40
 8002e6c:	af00      	add	r7, sp, #0
    // 1. Clock enable
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN | RCC_APB2ENR_TIM1EN;
 8002e6e:	4b34      	ldr	r3, [pc, #208]	@ (8002f40 <Motor_Init+0xd8>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	4a33      	ldr	r2, [pc, #204]	@ (8002f40 <Motor_Init+0xd8>)
 8002e74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e78:	f043 030c 	orr.w	r3, r3, #12
 8002e7c:	6193      	str	r3, [r2, #24]

    // 2. Init PA8: TIM1_CH1 (AF_PP)
    GPIO_InitTypeDef gpio_pwm = {
 8002e7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	60da      	str	r2, [r3, #12]
 8002e8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e92:	2302      	movs	r3, #2
 8002e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e96:	2302      	movs	r3, #2
 8002e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        .Pin = (MOTOR_PWM_PIN),
        .Mode = GPIO_MODE_AF_PP,
        .Speed = GPIO_SPEED_HIGH};
    GPIO_Init(MOTOR_PWM_PORT, &gpio_pwm);
 8002e9a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4828      	ldr	r0, [pc, #160]	@ (8002f44 <Motor_Init+0xdc>)
 8002ea2:	f7fe fd2b 	bl	80018fc <GPIO_Init>

    // 3. Init PB15: IN1 pin (output push-pull)
    GPIO_InitTypeDef gpio_in1 = {
 8002ea6:	f107 0320 	add.w	r3, r7, #32
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]
 8002eb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eb8:	623b      	str	r3, [r7, #32]
 8002eba:	2301      	movs	r3, #1
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
        .Pin = (MOTOR_IN1_PIN),
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Speed = GPIO_SPEED_LOW};
    GPIO_Init(MOTOR_IN1_PORT, &gpio_in1);
 8002ebe:	f107 0320 	add.w	r3, r7, #32
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4820      	ldr	r0, [pc, #128]	@ (8002f48 <Motor_Init+0xe0>)
 8002ec6:	f7fe fd19 	bl	80018fc <GPIO_Init>

    // 4. Init PB14: IN2 pin (output push-pull)
    GPIO_InitTypeDef gpio_in2 = {
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
        .Pin = (MOTOR_IN2_PIN),
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Speed = GPIO_SPEED_LOW};
    GPIO_Init(MOTOR_IN2_PORT, &gpio_in2);
 8002ee2:	f107 0310 	add.w	r3, r7, #16
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4817      	ldr	r0, [pc, #92]	@ (8002f48 <Motor_Init+0xe0>)
 8002eea:	f7fe fd07 	bl	80018fc <GPIO_Init>

    // 4. Timer config
    htim1.Instance = TIM1;
 8002eee:	4b17      	ldr	r3, [pc, #92]	@ (8002f4c <Motor_Init+0xe4>)
 8002ef0:	4a17      	ldr	r2, [pc, #92]	@ (8002f50 <Motor_Init+0xe8>)
 8002ef2:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 71; // 72MHz / (71+1) = 1MHz
 8002ef4:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <Motor_Init+0xe4>)
 8002ef6:	2247      	movs	r2, #71	@ 0x47
 8002ef8:	605a      	str	r2, [r3, #4]
    htim1.Init.Period = 49;    // 1MHz / (49+1) = 20kHz PWM
 8002efa:	4b14      	ldr	r3, [pc, #80]	@ (8002f4c <Motor_Init+0xe4>)
 8002efc:	2231      	movs	r2, #49	@ 0x31
 8002efe:	60da      	str	r2, [r3, #12]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f00:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <Motor_Init+0xe4>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f06:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <Motor_Init+0xe4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]

    TIM_PWM_Init(&htim1);
 8002f0c:	480f      	ldr	r0, [pc, #60]	@ (8002f4c <Motor_Init+0xe4>)
 8002f0e:	f7fe fe73 	bl	8001bf8 <TIM_PWM_Init>

    // 5. PWM channel config
    TIM_OC_InitTypeDef oc = {
 8002f12:	2306      	movs	r3, #6
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
        .OCMode = TIM_OCMODE_PWM1,
        .Pulse = 0,
        .OCPolarity = TIM_OCPOLARITY_HIGH,
        .OCFastMode = TIM_OCFAST_DISABLE};

    TIM_PWM_ConfigChannel(&htim1, &oc, TIM_CHANNEL_1);
 8002f22:	463b      	mov	r3, r7
 8002f24:	2200      	movs	r2, #0
 8002f26:	4619      	mov	r1, r3
 8002f28:	4808      	ldr	r0, [pc, #32]	@ (8002f4c <Motor_Init+0xe4>)
 8002f2a:	f7fe fe71 	bl	8001c10 <TIM_PWM_ConfigChannel>
    TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4806      	ldr	r0, [pc, #24]	@ (8002f4c <Motor_Init+0xe4>)
 8002f32:	f7fe ff63 	bl	8001dfc <TIM_PWM_Start>
}
 8002f36:	bf00      	nop
 8002f38:	3740      	adds	r7, #64	@ 0x40
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40010800 	.word	0x40010800
 8002f48:	40010c00 	.word	0x40010c00
 8002f4c:	20000434 	.word	0x20000434
 8002f50:	40012c00 	.word	0x40012c00

08002f54 <Motor_SetSpeed>:

void Motor_SetSpeed(int8_t speed_percent)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]

    if (speed_percent > 100)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	2b64      	cmp	r3, #100	@ 0x64
 8002f64:	dd01      	ble.n	8002f6a <Motor_SetSpeed+0x16>
        speed_percent = 100;
 8002f66:	2364      	movs	r3, #100	@ 0x64
 8002f68:	71fb      	strb	r3, [r7, #7]
    if (speed_percent < -100)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002f72:	da01      	bge.n	8002f78 <Motor_SetSpeed+0x24>
        speed_percent = -100;
 8002f74:	239c      	movs	r3, #156	@ 0x9c
 8002f76:	71fb      	strb	r3, [r7, #7]

    if (speed_percent >= 0){
 8002f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	db0c      	blt.n	8002f9a <Motor_SetSpeed+0x46>
        GPIO_WritePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, GPIO_PIN_SET);
 8002f80:	2201      	movs	r2, #1
 8002f82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f86:	4817      	ldr	r0, [pc, #92]	@ (8002fe4 <Motor_SetSpeed+0x90>)
 8002f88:	f7fe fde0 	bl	8001b4c <GPIO_WritePin>
        GPIO_WritePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, GPIO_PIN_RESET);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f92:	4814      	ldr	r0, [pc, #80]	@ (8002fe4 <Motor_SetSpeed+0x90>)
 8002f94:	f7fe fdda 	bl	8001b4c <GPIO_WritePin>
 8002f98:	e00f      	b.n	8002fba <Motor_SetSpeed+0x66>
    }
    else
    {
        GPIO_WritePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, GPIO_PIN_RESET);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fa0:	4810      	ldr	r0, [pc, #64]	@ (8002fe4 <Motor_SetSpeed+0x90>)
 8002fa2:	f7fe fdd3 	bl	8001b4c <GPIO_WritePin>
        GPIO_WritePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, GPIO_PIN_SET);
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002fac:	480d      	ldr	r0, [pc, #52]	@ (8002fe4 <Motor_SetSpeed+0x90>)
 8002fae:	f7fe fdcd 	bl	8001b4c <GPIO_WritePin>
        speed_percent = -speed_percent;
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	425b      	negs	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	71fb      	strb	r3, [r7, #7]
    }

    uint32_t compare = ((htim1.Init.Period + 1) * speed_percent) / 100;
 8002fba:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <Motor_SetSpeed+0x94>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002fc4:	fb02 f303 	mul.w	r3, r2, r3
 8002fc8:	4a08      	ldr	r2, [pc, #32]	@ (8002fec <Motor_SetSpeed+0x98>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	60fb      	str	r3, [r7, #12]

    TIM_SetCompare(&htim1, MOTOR_PWM_CHANNEL, compare);
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4804      	ldr	r0, [pc, #16]	@ (8002fe8 <Motor_SetSpeed+0x94>)
 8002fd8:	f7fe ff6a 	bl	8001eb0 <TIM_SetCompare>
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40010c00 	.word	0x40010c00
 8002fe8:	20000434 	.word	0x20000434
 8002fec:	51eb851f 	.word	0x51eb851f

08002ff0 <Motor_Stop>:

void Motor_Stop(void){
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
    TIM_SetCompare(&htim1, MOTOR_PWM_CHANNEL, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4802      	ldr	r0, [pc, #8]	@ (8003004 <Motor_Stop+0x14>)
 8002ffa:	f7fe ff59 	bl	8001eb0 <TIM_SetCompare>
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000434 	.word	0x20000434

08003008 <Mototr_SetLevel>:

void Mototr_SetLevel(uint8_t state)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	71fb      	strb	r3, [r7, #7]
    if (state == 0)
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10e      	bne.n	8003036 <Mototr_SetLevel+0x2e>
    {
        Motor_Stop();
 8003018:	f7ff ffea 	bl	8002ff0 <Motor_Stop>
        GPIO_WritePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, GPIO_PIN_RESET);
 800301c:	2200      	movs	r2, #0
 800301e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003022:	4811      	ldr	r0, [pc, #68]	@ (8003068 <Mototr_SetLevel+0x60>)
 8003024:	f7fe fd92 	bl	8001b4c <GPIO_WritePin>
        GPIO_WritePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, GPIO_PIN_RESET);
 8003028:	2200      	movs	r2, #0
 800302a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800302e:	480e      	ldr	r0, [pc, #56]	@ (8003068 <Mototr_SetLevel+0x60>)
 8003030:	f7fe fd8c 	bl	8001b4c <GPIO_WritePin>
    }
    else if (state == 3)
    {
        Motor_SetSpeed(100); // High speed
    }
}
 8003034:	e013      	b.n	800305e <Mototr_SetLevel+0x56>
    else if (state == 1)
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d103      	bne.n	8003044 <Mototr_SetLevel+0x3c>
        Motor_SetSpeed(25); // Low speed
 800303c:	2019      	movs	r0, #25
 800303e:	f7ff ff89 	bl	8002f54 <Motor_SetSpeed>
}
 8003042:	e00c      	b.n	800305e <Mototr_SetLevel+0x56>
    else if (state == 2)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d103      	bne.n	8003052 <Mototr_SetLevel+0x4a>
        Motor_SetSpeed(50); // Medium speed
 800304a:	2032      	movs	r0, #50	@ 0x32
 800304c:	f7ff ff82 	bl	8002f54 <Motor_SetSpeed>
}
 8003050:	e005      	b.n	800305e <Mototr_SetLevel+0x56>
    else if (state == 3)
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d102      	bne.n	800305e <Mototr_SetLevel+0x56>
        Motor_SetSpeed(100); // High speed
 8003058:	2064      	movs	r0, #100	@ 0x64
 800305a:	f7ff ff7b 	bl	8002f54 <Motor_SetSpeed>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40010c00 	.word	0x40010c00

0800306c <Siren_Init>:

#define SIREN_GPIO_PORT GPIOB
#define SIREN_GPIO_PIN (1U << 3) // PA3

void Siren_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio = {
 8003072:	463b      	mov	r3, r7
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	2308      	movs	r3, #8
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	2301      	movs	r3, #1
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	2302      	movs	r3, #2
 8003088:	60fb      	str	r3, [r7, #12]
        .Pin = SIREN_GPIO_PIN,
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Speed = GPIO_SPEED_HIGH};
    GPIO_Init(SIREN_GPIO_PORT, &gpio);
 800308a:	463b      	mov	r3, r7
 800308c:	4619      	mov	r1, r3
 800308e:	4806      	ldr	r0, [pc, #24]	@ (80030a8 <Siren_Init+0x3c>)
 8003090:	f7fe fc34 	bl	80018fc <GPIO_Init>
    GPIO_WritePin(SIREN_GPIO_PORT, SIREN_GPIO_PIN, GPIO_PIN_RESET); // Ban đầu tắt
 8003094:	2200      	movs	r2, #0
 8003096:	2108      	movs	r1, #8
 8003098:	4803      	ldr	r0, [pc, #12]	@ (80030a8 <Siren_Init+0x3c>)
 800309a:	f7fe fd57 	bl	8001b4c <GPIO_WritePin>
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40010c00 	.word	0x40010c00

080030ac <Siren_On>:

void Siren_On(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
    GPIO_WritePin(SIREN_GPIO_PORT, SIREN_GPIO_PIN, GPIO_PIN_SET);
 80030b0:	2201      	movs	r2, #1
 80030b2:	2108      	movs	r1, #8
 80030b4:	4802      	ldr	r0, [pc, #8]	@ (80030c0 <Siren_On+0x14>)
 80030b6:	f7fe fd49 	bl	8001b4c <GPIO_WritePin>
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40010c00 	.word	0x40010c00

080030c4 <Siren_Off>:

void Siren_Off(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
    GPIO_WritePin(SIREN_GPIO_PORT, SIREN_GPIO_PIN, GPIO_PIN_RESET);
 80030c8:	2200      	movs	r2, #0
 80030ca:	2108      	movs	r1, #8
 80030cc:	4802      	ldr	r0, [pc, #8]	@ (80030d8 <Siren_Off+0x14>)
 80030ce:	f7fe fd3d 	bl	8001b4c <GPIO_WritePin>
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40010c00 	.word	0x40010c00

080030dc <device_init>:
#include "led_rgb.h"
#include "motor.h"
#include "siren.h"

void device_init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
    DHT11_Init();
 80030e0:	f7ff fc68 	bl	80029b4 <DHT11_Init>
    CDS_Init();
 80030e4:	f7ff fba0 	bl	8002828 <CDS_Init>
    MQ2_Init(10.0f);
 80030e8:	4819      	ldr	r0, [pc, #100]	@ (8003150 <device_init+0x74>)
 80030ea:	f7ff fd37 	bl	8002b5c <MQ2_Init>
    LED_RGB_Init();
 80030ee:	f7ff fde3 	bl	8002cb8 <LED_RGB_Init>
    Motor_Init();
 80030f2:	f7ff feb9 	bl	8002e68 <Motor_Init>
    Siren_Init();
 80030f6:	f7ff ffb9 	bl	800306c <Siren_Init>

    sys.temperature = 25.0f;
 80030fa:	4b16      	ldr	r3, [pc, #88]	@ (8003154 <device_init+0x78>)
 80030fc:	4a16      	ldr	r2, [pc, #88]	@ (8003158 <device_init+0x7c>)
 80030fe:	601a      	str	r2, [r3, #0]
    sys.humidity = 50.0f;
 8003100:	4b14      	ldr	r3, [pc, #80]	@ (8003154 <device_init+0x78>)
 8003102:	4a16      	ldr	r2, [pc, #88]	@ (800315c <device_init+0x80>)
 8003104:	605a      	str	r2, [r3, #4]
    sys.gas_level = 200.0f;
 8003106:	4b13      	ldr	r3, [pc, #76]	@ (8003154 <device_init+0x78>)
 8003108:	4a15      	ldr	r2, [pc, #84]	@ (8003160 <device_init+0x84>)
 800310a:	609a      	str	r2, [r3, #8]
    sys.lux = 500.0f;
 800310c:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <device_init+0x78>)
 800310e:	4a15      	ldr	r2, [pc, #84]	@ (8003164 <device_init+0x88>)
 8003110:	60da      	str	r2, [r3, #12]
    sys.led_r = 255.0f;
 8003112:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <device_init+0x78>)
 8003114:	4a14      	ldr	r2, [pc, #80]	@ (8003168 <device_init+0x8c>)
 8003116:	611a      	str	r2, [r3, #16]
    sys.led_g = 255.0f;
 8003118:	4b0e      	ldr	r3, [pc, #56]	@ (8003154 <device_init+0x78>)
 800311a:	4a13      	ldr	r2, [pc, #76]	@ (8003168 <device_init+0x8c>)
 800311c:	615a      	str	r2, [r3, #20]
    sys.led_b = 255.0f;
 800311e:	4b0d      	ldr	r3, [pc, #52]	@ (8003154 <device_init+0x78>)
 8003120:	4a11      	ldr	r2, [pc, #68]	@ (8003168 <device_init+0x8c>)
 8003122:	619a      	str	r2, [r3, #24]
    sys.led_state = 0.0f;   // 0: off, 1: on, 2: blink
 8003124:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <device_init+0x78>)
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	61da      	str	r2, [r3, #28]
    sys.motor_level = 0.0f; // 0: off, 1: low, 2: medium, 3: high
 800312c:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <device_init+0x78>)
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	621a      	str	r2, [r3, #32]
    sys.motor_dir = 0.0f;   // 0: forward, 1: backward
 8003134:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <device_init+0x78>)
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	625a      	str	r2, [r3, #36]	@ 0x24
    sys.siren_on = 0.0f;    // 0: off, 1: on
 800313c:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <device_init+0x78>)
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	629a      	str	r2, [r3, #40]	@ 0x28
    sys.mode = 0.0f;        // 0: auto, 1: manual
 8003144:	4b03      	ldr	r3, [pc, #12]	@ (8003154 <device_init+0x78>)
 8003146:	2200      	movs	r2, #0
 8003148:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	41200000 	.word	0x41200000
 8003154:	200003ac 	.word	0x200003ac
 8003158:	41c80000 	.word	0x41c80000
 800315c:	42480000 	.word	0x42480000
 8003160:	43480000 	.word	0x43480000
 8003164:	43fa0000 	.word	0x43fa0000
 8003168:	437f0000 	.word	0x437f0000

0800316c <READ_Sensor>:

void READ_Sensor(void)
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
    // DHT11
    uint8_t h, h_d, t, t_d;
    if (DHT11_Read(&h, &h_d, &t, &t_d))
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	1d7a      	adds	r2, r7, #5
 8003176:	1db9      	adds	r1, r7, #6
 8003178:	1df8      	adds	r0, r7, #7
 800317a:	f7ff fc7e 	bl	8002a7a <DHT11_Read>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d02d      	beq.n	80031e0 <READ_Sensor+0x74>
    {
        sys.humidity = h + h_d / 10.0f;    // Độ ẩm (%)
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd fd48 	bl	8000c1c <__aeabi_i2f>
 800318c:	4604      	mov	r4, r0
 800318e:	79bb      	ldrb	r3, [r7, #6]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd fd43 	bl	8000c1c <__aeabi_i2f>
 8003196:	4603      	mov	r3, r0
 8003198:	4918      	ldr	r1, [pc, #96]	@ (80031fc <READ_Sensor+0x90>)
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd fe46 	bl	8000e2c <__aeabi_fdiv>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4619      	mov	r1, r3
 80031a4:	4620      	mov	r0, r4
 80031a6:	f7fd fc85 	bl	8000ab4 <__addsf3>
 80031aa:	4603      	mov	r3, r0
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <READ_Sensor+0x94>)
 80031b0:	605a      	str	r2, [r3, #4]
        sys.temperature = t + t_d / 10.0f; // Nhiệt độ (độ C)
 80031b2:	797b      	ldrb	r3, [r7, #5]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd fd31 	bl	8000c1c <__aeabi_i2f>
 80031ba:	4604      	mov	r4, r0
 80031bc:	793b      	ldrb	r3, [r7, #4]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fd2c 	bl	8000c1c <__aeabi_i2f>
 80031c4:	4603      	mov	r3, r0
 80031c6:	490d      	ldr	r1, [pc, #52]	@ (80031fc <READ_Sensor+0x90>)
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd fe2f 	bl	8000e2c <__aeabi_fdiv>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4619      	mov	r1, r3
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7fd fc6e 	bl	8000ab4 <__addsf3>
 80031d8:	4603      	mov	r3, r0
 80031da:	461a      	mov	r2, r3
 80031dc:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <READ_Sensor+0x94>)
 80031de:	601a      	str	r2, [r3, #0]
    }

    // CDS
    sys.lux = CDS_ReadLux(); // Độ sáng (lux)
 80031e0:	f7ff fb84 	bl	80028ec <CDS_ReadLux>
 80031e4:	4603      	mov	r3, r0
 80031e6:	4a06      	ldr	r2, [pc, #24]	@ (8003200 <READ_Sensor+0x94>)
 80031e8:	60d3      	str	r3, [r2, #12]

    // MQ2
    sys.gas_level = MQ2_ReadAirQuality(); // Nồng độ khí (ppm)
 80031ea:	f7ff fd43 	bl	8002c74 <MQ2_ReadAirQuality>
 80031ee:	4603      	mov	r3, r0
 80031f0:	4a03      	ldr	r2, [pc, #12]	@ (8003200 <READ_Sensor+0x94>)
 80031f2:	6093      	str	r3, [r2, #8]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd90      	pop	{r4, r7, pc}
 80031fc:	41200000 	.word	0x41200000
 8003200:	200003ac 	.word	0x200003ac

08003204 <Notify_SendMessage>:

void Notify_SendMessage(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
    uint8_t data[20];

    uint8_t length = Create_Message_Notify(DHT11_HUMI, sys.humidity, data);
 800320a:	4b36      	ldr	r3, [pc, #216]	@ (80032e4 <Notify_SendMessage+0xe0>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	463a      	mov	r2, r7
 8003210:	4619      	mov	r1, r3
 8003212:	2004      	movs	r0, #4
 8003214:	f000 f96d 	bl	80034f2 <Create_Message_Notify>
 8003218:	4603      	mov	r3, r0
 800321a:	75fb      	strb	r3, [r7, #23]
    USART1_Send_Data(data, length);
 800321c:	7dfa      	ldrb	r2, [r7, #23]
 800321e:	463b      	mov	r3, r7
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fa9e 	bl	8002764 <USART1_Send_Data>

    length = Create_Message_Notify(DHT11_TEMP, sys.temperature, data);
 8003228:	4b2e      	ldr	r3, [pc, #184]	@ (80032e4 <Notify_SendMessage+0xe0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	463a      	mov	r2, r7
 800322e:	4619      	mov	r1, r3
 8003230:	2005      	movs	r0, #5
 8003232:	f000 f95e 	bl	80034f2 <Create_Message_Notify>
 8003236:	4603      	mov	r3, r0
 8003238:	75fb      	strb	r3, [r7, #23]
    USART1_Send_Data(data, length);
 800323a:	7dfa      	ldrb	r2, [r7, #23]
 800323c:	463b      	mov	r3, r7
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fa8f 	bl	8002764 <USART1_Send_Data>

    length = Create_Message_Notify(CDS, sys.lux, data);
 8003246:	4b27      	ldr	r3, [pc, #156]	@ (80032e4 <Notify_SendMessage+0xe0>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	463a      	mov	r2, r7
 800324c:	4619      	mov	r1, r3
 800324e:	2001      	movs	r0, #1
 8003250:	f000 f94f 	bl	80034f2 <Create_Message_Notify>
 8003254:	4603      	mov	r3, r0
 8003256:	75fb      	strb	r3, [r7, #23]
    USART1_Send_Data(data, length);
 8003258:	7dfa      	ldrb	r2, [r7, #23]
 800325a:	463b      	mov	r3, r7
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fa80 	bl	8002764 <USART1_Send_Data>

    length = Create_Message_Notify(MQ2, sys.gas_level, data);
 8003264:	4b1f      	ldr	r3, [pc, #124]	@ (80032e4 <Notify_SendMessage+0xe0>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	463a      	mov	r2, r7
 800326a:	4619      	mov	r1, r3
 800326c:	2003      	movs	r0, #3
 800326e:	f000 f940 	bl	80034f2 <Create_Message_Notify>
 8003272:	4603      	mov	r3, r0
 8003274:	75fb      	strb	r3, [r7, #23]
    USART1_Send_Data(data, length);
 8003276:	7dfa      	ldrb	r2, [r7, #23]
 8003278:	463b      	mov	r3, r7
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fa71 	bl	8002764 <USART1_Send_Data>

    length = Create_Message_Notify(LED, sys.led_state, data);
 8003282:	4b18      	ldr	r3, [pc, #96]	@ (80032e4 <Notify_SendMessage+0xe0>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	463a      	mov	r2, r7
 8003288:	4619      	mov	r1, r3
 800328a:	2011      	movs	r0, #17
 800328c:	f000 f931 	bl	80034f2 <Create_Message_Notify>
 8003290:	4603      	mov	r3, r0
 8003292:	75fb      	strb	r3, [r7, #23]
    USART1_Send_Data(data, length);
 8003294:	7dfa      	ldrb	r2, [r7, #23]
 8003296:	463b      	mov	r3, r7
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fa62 	bl	8002764 <USART1_Send_Data>

    length = Create_Message_Notify(MOTOR, sys.motor_level, data);
 80032a0:	4b10      	ldr	r3, [pc, #64]	@ (80032e4 <Notify_SendMessage+0xe0>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	463a      	mov	r2, r7
 80032a6:	4619      	mov	r1, r3
 80032a8:	2012      	movs	r0, #18
 80032aa:	f000 f922 	bl	80034f2 <Create_Message_Notify>
 80032ae:	4603      	mov	r3, r0
 80032b0:	75fb      	strb	r3, [r7, #23]
    USART1_Send_Data(data, length);
 80032b2:	7dfa      	ldrb	r2, [r7, #23]
 80032b4:	463b      	mov	r3, r7
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fa53 	bl	8002764 <USART1_Send_Data>

    length = Create_Message_Notify(SIREN, sys.siren_on, data);
 80032be:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <Notify_SendMessage+0xe0>)
 80032c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c2:	463a      	mov	r2, r7
 80032c4:	4619      	mov	r1, r3
 80032c6:	2013      	movs	r0, #19
 80032c8:	f000 f913 	bl	80034f2 <Create_Message_Notify>
 80032cc:	4603      	mov	r3, r0
 80032ce:	75fb      	strb	r3, [r7, #23]
    USART1_Send_Data(data, length);
 80032d0:	7dfa      	ldrb	r2, [r7, #23]
 80032d2:	463b      	mov	r3, r7
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fa44 	bl	8002764 <USART1_Send_Data>

}
 80032dc:	bf00      	nop
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200003ac 	.word	0x200003ac

080032e8 <UART_RxCpltCallback>:
static message_t message;

uint8_t buffer[FRAME_SIZE];

void UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08e      	sub	sp, #56	@ 0x38
 80032ec:	af04      	add	r7, sp, #16
 80032ee:	6078      	str	r0, [r7, #4]
    if (full(&g_uartQueue))
 80032f0:	4830      	ldr	r0, [pc, #192]	@ (80033b4 <UART_RxCpltCallback+0xcc>)
 80032f2:	f000 fa9f 	bl	8003834 <full>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d157      	bne.n	80033ac <UART_RxCpltCallback+0xc4>
    {
        // TODO
        return;
    }

    if (huart->Instance == USART1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2d      	ldr	r2, [pc, #180]	@ (80033b8 <UART_RxCpltCallback+0xd0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d153      	bne.n	80033ae <UART_RxCpltCallback+0xc6>
    {
        uint8_t length = Fsm_Get_Message(uart_rx_buffer, buffer);
 8003306:	492d      	ldr	r1, [pc, #180]	@ (80033bc <UART_RxCpltCallback+0xd4>)
 8003308:	482d      	ldr	r0, [pc, #180]	@ (80033c0 <UART_RxCpltCallback+0xd8>)
 800330a:	f7ff f8b9 	bl	8002480 <Fsm_Get_Message>
 800330e:	4603      	mov	r3, r0
 8003310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        DUNGX_UART_Receive_IT(&huart1, uart_rx_buffer, length);
 8003314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003318:	461a      	mov	r2, r3
 800331a:	4929      	ldr	r1, [pc, #164]	@ (80033c0 <UART_RxCpltCallback+0xd8>)
 800331c:	4829      	ldr	r0, [pc, #164]	@ (80033c4 <UART_RxCpltCallback+0xdc>)
 800331e:	f7ff fa47 	bl	80027b0 <DUNGX_UART_Receive_IT>

        if (Check_Fsm_Flag_New_Message())
 8003322:	f7ff f9f1 	bl	8002708 <Check_Fsm_Flag_New_Message>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d03b      	beq.n	80033a4 <UART_RxCpltCallback+0xbc>
        {
            if (Message_Decode(buffer, &message))
 800332c:	4926      	ldr	r1, [pc, #152]	@ (80033c8 <UART_RxCpltCallback+0xe0>)
 800332e:	4823      	ldr	r0, [pc, #140]	@ (80033bc <UART_RxCpltCallback+0xd4>)
 8003330:	f000 f99c 	bl	800366c <Message_Decode>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d020      	beq.n	800337c <UART_RxCpltCallback+0x94>
            {
                push(&g_uartQueue, message, FRAME_SIZE);
 800333a:	4a23      	ldr	r2, [pc, #140]	@ (80033c8 <UART_RxCpltCallback+0xe0>)
 800333c:	230a      	movs	r3, #10
 800333e:	9302      	str	r3, [sp, #8]
 8003340:	466b      	mov	r3, sp
 8003342:	f102 010c 	add.w	r1, r2, #12
 8003346:	c903      	ldmia	r1, {r0, r1}
 8003348:	6018      	str	r0, [r3, #0]
 800334a:	3304      	adds	r3, #4
 800334c:	8019      	strh	r1, [r3, #0]
 800334e:	ca0e      	ldmia	r2, {r1, r2, r3}
 8003350:	4818      	ldr	r0, [pc, #96]	@ (80033b4 <UART_RxCpltCallback+0xcc>)
 8003352:	f000 fa81 	bl	8003858 <push>

                // ACK
                uint8_t data[FRAME_SIZE];
                uint8_t length = Create_Message_RESPONSE(UNKNOWN, RESPONSE_ACK, data);
 8003356:	f107 0318 	add.w	r3, r7, #24
 800335a:	461a      	mov	r2, r3
 800335c:	2101      	movs	r1, #1
 800335e:	20ff      	movs	r0, #255	@ 0xff
 8003360:	f000 f92d 	bl	80035be <Create_Message_RESPONSE>
 8003364:	4603      	mov	r3, r0
 8003366:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                USART1_Send_Data(data, length);
 800336a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800336e:	f107 0318 	add.w	r3, r7, #24
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff f9f5 	bl	8002764 <USART1_Send_Data>
 800337a:	e011      	b.n	80033a0 <UART_RxCpltCallback+0xb8>
            } else{
                // NACK
                uint8_t data[FRAME_SIZE];
                uint8_t length = Create_Message_RESPONSE(UNKNOWN, RESPONSE_NACK, data);
 800337c:	f107 030c 	add.w	r3, r7, #12
 8003380:	461a      	mov	r2, r3
 8003382:	2102      	movs	r1, #2
 8003384:	20ff      	movs	r0, #255	@ 0xff
 8003386:	f000 f91a 	bl	80035be <Create_Message_RESPONSE>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                USART1_Send_Data(data, length);
 8003390:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003394:	f107 030c 	add.w	r3, r7, #12
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff f9e2 	bl	8002764 <USART1_Send_Data>
            }
            Clear_All_State_Fsm();
 80033a0:	f7ff f854 	bl	800244c <Clear_All_State_Fsm>
        }
        if (full(&g_uartQueue))
 80033a4:	4803      	ldr	r0, [pc, #12]	@ (80033b4 <UART_RxCpltCallback+0xcc>)
 80033a6:	f000 fa45 	bl	8003834 <full>
 80033aa:	e000      	b.n	80033ae <UART_RxCpltCallback+0xc6>
        return;
 80033ac:	bf00      	nop
        {
            // TODO
        }
        // TODO: TIME OUT
    }
}
 80033ae:	3728      	adds	r7, #40	@ 0x28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	2000022c 	.word	0x2000022c
 80033b8:	40013800 	.word	0x40013800
 80033bc:	20000460 	.word	0x20000460
 80033c0:	200003a0 	.word	0x200003a0
 80033c4:	200001f0 	.word	0x200001f0
 80033c8:	2000044c 	.word	0x2000044c

080033cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033cc:	480d      	ldr	r0, [pc, #52]	@ (8003404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033d4:	480c      	ldr	r0, [pc, #48]	@ (8003408 <LoopForever+0x6>)
  ldr r1, =_edata
 80033d6:	490d      	ldr	r1, [pc, #52]	@ (800340c <LoopForever+0xa>)
  ldr r2, =_sidata
 80033d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003410 <LoopForever+0xe>)
  movs r3, #0
 80033da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033dc:	e002      	b.n	80033e4 <LoopCopyDataInit>

080033de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033e2:	3304      	adds	r3, #4

080033e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e8:	d3f9      	bcc.n	80033de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003418 <LoopForever+0x16>)
  movs r3, #0
 80033ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f0:	e001      	b.n	80033f6 <LoopFillZerobss>

080033f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f4:	3204      	adds	r2, #4

080033f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f8:	d3fb      	bcc.n	80033f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033fa:	f001 f94d 	bl	8004698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033fe:	f7fe f8af 	bl	8001560 <main>

08003402 <LoopForever>:

LoopForever:
  b LoopForever
 8003402:	e7fe      	b.n	8003402 <LoopForever>
  ldr   r0, =_estack
 8003404:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8003408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800340c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003410:	08007130 	.word	0x08007130
  ldr r2, =_sbss
 8003414:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003418:	200005d8 	.word	0x200005d8

0800341c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800341c:	e7fe      	b.n	800341c <ADC1_2_IRQHandler>
	...

08003420 <Convert_Float_To_Bytes>:
 * @brief: Chuyển đổi một biến float sang dạng mảng byte (4 byte).
 * @param data: Biến kiểu float cần chuyển đổi.
 * @return: Con trỏ trỏ đến mảng byte tương ứng.
 */
uint8_t *Convert_Float_To_Bytes(float data)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
    static data_convert_float_and_bytes input;
    input.data_float = data;
 8003428:	4a04      	ldr	r2, [pc, #16]	@ (800343c <Convert_Float_To_Bytes+0x1c>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6013      	str	r3, [r2, #0]
    return input.data_bytes;
 800342e:	4b03      	ldr	r3, [pc, #12]	@ (800343c <Convert_Float_To_Bytes+0x1c>)
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	2000046c 	.word	0x2000046c

08003440 <Convert_Bytes_To_Float>:
 * @param data3: Byte thứ ba.
 * @param data4: Byte thứ tư.
 * @return: Biến float sau khi ghép.
 */
float Convert_Bytes_To_Float(uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
 8003440:	b490      	push	{r4, r7}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	4604      	mov	r4, r0
 8003448:	4608      	mov	r0, r1
 800344a:	4611      	mov	r1, r2
 800344c:	461a      	mov	r2, r3
 800344e:	4623      	mov	r3, r4
 8003450:	71fb      	strb	r3, [r7, #7]
 8003452:	4603      	mov	r3, r0
 8003454:	71bb      	strb	r3, [r7, #6]
 8003456:	460b      	mov	r3, r1
 8003458:	717b      	strb	r3, [r7, #5]
 800345a:	4613      	mov	r3, r2
 800345c:	713b      	strb	r3, [r7, #4]
    data_convert_float_and_bytes input;
    input.data_bytes[0] = data1;
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	733b      	strb	r3, [r7, #12]
    input.data_bytes[1] = data2;
 8003462:	79bb      	ldrb	r3, [r7, #6]
 8003464:	737b      	strb	r3, [r7, #13]
    input.data_bytes[2] = data3;
 8003466:	797b      	ldrb	r3, [r7, #5]
 8003468:	73bb      	strb	r3, [r7, #14]
    input.data_bytes[3] = data4;
 800346a:	793b      	ldrb	r3, [r7, #4]
 800346c:	73fb      	strb	r3, [r7, #15]
    return input.data_float;
 800346e:	68fb      	ldr	r3, [r7, #12]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bc90      	pop	{r4, r7}
 8003478:	4770      	bx	lr

0800347a <Convert_Bytes_To_Int>:

int Convert_Bytes_To_Int(uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
 800347a:	b490      	push	{r4, r7}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	4604      	mov	r4, r0
 8003482:	4608      	mov	r0, r1
 8003484:	4611      	mov	r1, r2
 8003486:	461a      	mov	r2, r3
 8003488:	4623      	mov	r3, r4
 800348a:	71fb      	strb	r3, [r7, #7]
 800348c:	4603      	mov	r3, r0
 800348e:	71bb      	strb	r3, [r7, #6]
 8003490:	460b      	mov	r3, r1
 8003492:	717b      	strb	r3, [r7, #5]
 8003494:	4613      	mov	r3, r2
 8003496:	713b      	strb	r3, [r7, #4]
    data_convert_int_and_bytes input;
    input.data_bytes[0] = data1;
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	733b      	strb	r3, [r7, #12]
    input.data_bytes[1] = data2;
 800349c:	79bb      	ldrb	r3, [r7, #6]
 800349e:	737b      	strb	r3, [r7, #13]
    input.data_bytes[2] = data3;
 80034a0:	797b      	ldrb	r3, [r7, #5]
 80034a2:	73bb      	strb	r3, [r7, #14]
    input.data_bytes[3] = data4;
 80034a4:	793b      	ldrb	r3, [r7, #4]
 80034a6:	73fb      	strb	r3, [r7, #15]
    return input.data_int;
 80034a8:	68fb      	ldr	r3, [r7, #12]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc90      	pop	{r4, r7}
 80034b2:	4770      	bx	lr

080034b4 <Convert_Bytes_To_Uint16>:
 * @param data1: Byte thứ nhất.
 * @param data2: Byte thứ hai.
 * @return: Biến uint16_t sau khi ghép từ 2 byte.
 */
uint16_t Convert_Bytes_To_Uint16(uint8_t data1, uint8_t data2)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	460a      	mov	r2, r1
 80034be:	71fb      	strb	r3, [r7, #7]
 80034c0:	4613      	mov	r3, r2
 80034c2:	71bb      	strb	r3, [r7, #6]
    data_convert_uint16_and_bytes input;
    input.data_bytes[0] = data1;
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	733b      	strb	r3, [r7, #12]
    input.data_bytes[1] = data2;
 80034c8:	79bb      	ldrb	r3, [r7, #6]
 80034ca:	737b      	strb	r3, [r7, #13]
    return input.data_uint16;
 80034cc:	89bb      	ldrh	r3, [r7, #12]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <Message_Calculate_Checksum>:

/**
 * @brief Kiểm tra dữ liệu
 */
uint16_t Message_Calculate_Checksum(const uint8_t *buf, uint8_t len)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	70fb      	strb	r3, [r7, #3]
    return 0xFFFF; // Todo: Implement checksum calculation
 80034e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <Create_Message_Notify>:

/**
 * @brief Tạo frame bản tin NOTIFY (truyền dữ liệu float từ cảm biến)
 */
uint8_t Create_Message_Notify(ID_t id, float value, uint8_t *dataout)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b088      	sub	sp, #32
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	73fb      	strb	r3, [r7, #15]
    if (dataout == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <Create_Message_Notify+0x18>
        return 0;
 8003506:	2300      	movs	r3, #0
 8003508:	e055      	b.n	80035b6 <Create_Message_Notify+0xc4>

    uint8_t count = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	77fb      	strb	r3, [r7, #31]

    dataout[count++] = START_BYTE;
 800350e:	7ffb      	ldrb	r3, [r7, #31]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	77fa      	strb	r2, [r7, #31]
 8003514:	461a      	mov	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	22aa      	movs	r2, #170	@ 0xaa
 800351c:	701a      	strb	r2, [r3, #0]
    dataout[count++] = NOTIFY; // Group: NOTIFY
 800351e:	7ffb      	ldrb	r3, [r7, #31]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	77fa      	strb	r2, [r7, #31]
 8003524:	461a      	mov	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	2203      	movs	r2, #3
 800352c:	701a      	strb	r2, [r3, #0]
    dataout[count++] = id;     // ID thiết bị cảm biến (tùy chỉnh nếu cần)
 800352e:	7ffb      	ldrb	r3, [r7, #31]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	77fa      	strb	r2, [r7, #31]
 8003534:	461a      	mov	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	701a      	strb	r2, [r3, #0]
    dataout[count++] = 4;      // Payload: 4 byte float
 800353e:	7ffb      	ldrb	r3, [r7, #31]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	77fa      	strb	r2, [r7, #31]
 8003544:	461a      	mov	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	2204      	movs	r2, #4
 800354c:	701a      	strb	r2, [r3, #0]

    // Chuyển float thành 4 byte Big-Endian
    uint8_t *pval = Convert_Float_To_Bytes(value);
 800354e:	68b8      	ldr	r0, [r7, #8]
 8003550:	f7ff ff66 	bl	8003420 <Convert_Float_To_Bytes>
 8003554:	6178      	str	r0, [r7, #20]
    // Reverse byte order for Big-Endian
    for (int i = 0; i <= 3; i++)
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	e00d      	b.n	8003578 <Create_Message_Notify+0x86>
    {
        dataout[count++] = pval[i];
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	441a      	add	r2, r3
 8003562:	7ffb      	ldrb	r3, [r7, #31]
 8003564:	1c59      	adds	r1, r3, #1
 8003566:	77f9      	strb	r1, [r7, #31]
 8003568:	4619      	mov	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	440b      	add	r3, r1
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i <= 3; i++)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	3301      	adds	r3, #1
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b03      	cmp	r3, #3
 800357c:	ddee      	ble.n	800355c <Create_Message_Notify+0x6a>
    }

    // Calculate checksum
    uint16_t checksum = Message_Calculate_Checksum(dataout, count);
 800357e:	7ffb      	ldrb	r3, [r7, #31]
 8003580:	4619      	mov	r1, r3
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ffa8 	bl	80034d8 <Message_Calculate_Checksum>
 8003588:	4603      	mov	r3, r0
 800358a:	827b      	strh	r3, [r7, #18]

    // Write checksum in Big-Endian
    dataout[count++] = (checksum >> 8) & 0xFF; // High byte
 800358c:	8a7b      	ldrh	r3, [r7, #18]
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	b29a      	uxth	r2, r3
 8003592:	7ffb      	ldrb	r3, [r7, #31]
 8003594:	1c59      	adds	r1, r3, #1
 8003596:	77f9      	strb	r1, [r7, #31]
 8003598:	4619      	mov	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	440b      	add	r3, r1
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]
    dataout[count++] = checksum & 0xFF;        // Low byte
 80035a2:	7ffb      	ldrb	r3, [r7, #31]
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	77fa      	strb	r2, [r7, #31]
 80035a8:	461a      	mov	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	8a7a      	ldrh	r2, [r7, #18]
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]

    return count; // Trả về độ dài của Message
 80035b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <Create_Message_RESPONSE>:

/**
 * @brief Tạo bản tin phản hồi (RESPONSE)
 */
uint8_t Create_Message_RESPONSE(ID_t id, RESPONSE_t r, uint8_t *dataout)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	603a      	str	r2, [r7, #0]
 80035c8:	71fb      	strb	r3, [r7, #7]
 80035ca:	460b      	mov	r3, r1
 80035cc:	71bb      	strb	r3, [r7, #6]
    if (dataout == NULL)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <Create_Message_RESPONSE+0x1a>
        return 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e045      	b.n	8003664 <Create_Message_RESPONSE+0xa6>

    uint8_t count = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]
    dataout[count++] = START_BYTE;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	73fa      	strb	r2, [r7, #15]
 80035e2:	461a      	mov	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	22aa      	movs	r2, #170	@ 0xaa
 80035ea:	701a      	strb	r2, [r3, #0]
    dataout[count++] = RESPONSE;   // Group: RESPONSE
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	73fa      	strb	r2, [r7, #15]
 80035f2:	461a      	mov	r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	2202      	movs	r2, #2
 80035fa:	701a      	strb	r2, [r3, #0]
    dataout[count++] = id;         // ID thiết bị phản hồi (tùy chỉnh nếu cần)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	73fa      	strb	r2, [r7, #15]
 8003602:	461a      	mov	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	4413      	add	r3, r2
 8003608:	79fa      	ldrb	r2, [r7, #7]
 800360a:	701a      	strb	r2, [r3, #0]
    dataout[count++] = 1;          // Payload chỉ 1 byte phản hồi
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	73fa      	strb	r2, [r7, #15]
 8003612:	461a      	mov	r2, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4413      	add	r3, r2
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
    dataout[count++] = (uint8_t)r; // Phản hồi
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	73fa      	strb	r2, [r7, #15]
 8003622:	461a      	mov	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	4413      	add	r3, r2
 8003628:	79ba      	ldrb	r2, [r7, #6]
 800362a:	701a      	strb	r2, [r3, #0]
    // Calculate checksum
    uint16_t checksum = Message_Calculate_Checksum(dataout, count);
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	4619      	mov	r1, r3
 8003630:	6838      	ldr	r0, [r7, #0]
 8003632:	f7ff ff51 	bl	80034d8 <Message_Calculate_Checksum>
 8003636:	4603      	mov	r3, r0
 8003638:	81bb      	strh	r3, [r7, #12]
    // Write checksum in Big-Endian
    dataout[count++] = (checksum >> 8) & 0xFF; // High byte
 800363a:	89bb      	ldrh	r3, [r7, #12]
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	b29a      	uxth	r2, r3
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	1c59      	adds	r1, r3, #1
 8003644:	73f9      	strb	r1, [r7, #15]
 8003646:	4619      	mov	r1, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	440b      	add	r3, r1
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]
    dataout[count++] = checksum & 0xFF;        // Low byte
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	73fa      	strb	r2, [r7, #15]
 8003656:	461a      	mov	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4413      	add	r3, r2
 800365c:	89ba      	ldrh	r2, [r7, #12]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]
    return count;                              // Trả về độ dài của Message
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <Message_Decode>:

/**
 * @brief Giải mã frame nhận được
 */
bool Message_Decode(const uint8_t *buffer, message_t *frame_out)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
    if (buffer == NULL || frame_out == NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <Message_Decode+0x16>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <Message_Decode+0x1a>
        return false;
 8003682:	2300      	movs	r3, #0
 8003684:	e058      	b.n	8003738 <Message_Decode+0xcc>

    if (buffer[0] != START_BYTE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2baa      	cmp	r3, #170	@ 0xaa
 800368c:	d001      	beq.n	8003692 <Message_Decode+0x26>
        return false;
 800368e:	2300      	movs	r3, #0
 8003690:	e052      	b.n	8003738 <Message_Decode+0xcc>

    frame_out->start = buffer[0];
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	701a      	strb	r2, [r3, #0]
    memcpy(frame_out->header, &buffer[1], HEADER_SIZE);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	1c58      	adds	r0, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3301      	adds	r3, #1
 80036a2:	2203      	movs	r2, #3
 80036a4:	4619      	mov	r1, r3
 80036a6:	f001 f82c 	bl	8004702 <memcpy>
    uint8_t payload_len = frame_out->header[2];
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	78db      	ldrb	r3, [r3, #3]
 80036ae:	77fb      	strb	r3, [r7, #31]

    if (payload_len > PAYLOAD_SIZE)
 80036b0:	7ffb      	ldrb	r3, [r7, #31]
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d901      	bls.n	80036ba <Message_Decode+0x4e>
        return false;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e03e      	b.n	8003738 <Message_Decode+0xcc>

    memcpy(frame_out->payload, &buffer[1 + HEADER_SIZE], payload_len);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	1d18      	adds	r0, r3, #4
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	7ffa      	ldrb	r2, [r7, #31]
 80036c4:	4619      	mov	r1, r3
 80036c6:	f001 f81c 	bl	8004702 <memcpy>

    uint8_t temp[HEADER_SIZE + PAYLOAD_SIZE];
    memcpy(temp, frame_out->header, HEADER_SIZE);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	1c59      	adds	r1, r3, #1
 80036ce:	f107 0308 	add.w	r3, r7, #8
 80036d2:	2203      	movs	r2, #3
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 f814 	bl	8004702 <memcpy>
    memcpy(temp + HEADER_SIZE, frame_out->payload, payload_len);
 80036da:	f107 0308 	add.w	r3, r7, #8
 80036de:	3303      	adds	r3, #3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	1d11      	adds	r1, r2, #4
 80036e4:	7ffa      	ldrb	r2, [r7, #31]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 f80b 	bl	8004702 <memcpy>

    uint16_t received_checksum = buffer[1 + HEADER_SIZE + payload_len] |
 80036ec:	7ffb      	ldrb	r3, [r7, #31]
 80036ee:	3304      	adds	r3, #4
 80036f0:	461a      	mov	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	b21a      	sxth	r2, r3
                                 (buffer[1 + HEADER_SIZE + payload_len + 1] << 8);
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	3305      	adds	r3, #5
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	440b      	add	r3, r1
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	021b      	lsls	r3, r3, #8
    uint16_t received_checksum = buffer[1 + HEADER_SIZE + payload_len] |
 8003706:	b21b      	sxth	r3, r3
 8003708:	4313      	orrs	r3, r2
 800370a:	b21b      	sxth	r3, r3
 800370c:	83bb      	strh	r3, [r7, #28]
    uint16_t calc_checksum = Message_Calculate_Checksum(temp, HEADER_SIZE + payload_len);
 800370e:	7ffb      	ldrb	r3, [r7, #31]
 8003710:	3303      	adds	r3, #3
 8003712:	b2da      	uxtb	r2, r3
 8003714:	f107 0308 	add.w	r3, r7, #8
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fedc 	bl	80034d8 <Message_Calculate_Checksum>
 8003720:	4603      	mov	r3, r0
 8003722:	837b      	strh	r3, [r7, #26]

    if (received_checksum != calc_checksum)
 8003724:	8bba      	ldrh	r2, [r7, #28]
 8003726:	8b7b      	ldrh	r3, [r7, #26]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <Message_Decode+0xc4>
        return false;
 800372c:	2300      	movs	r3, #0
 800372e:	e003      	b.n	8003738 <Message_Decode+0xcc>

    frame_out->checksum = received_checksum;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	8bba      	ldrh	r2, [r7, #28]
 8003734:	821a      	strh	r2, [r3, #16]
    return true;
 8003736:	2301      	movs	r3, #1
}
 8003738:	4618      	mov	r0, r3
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <Check_Frame_Header>:

bool Check_Frame_Header(const uint8_t headerframe[])
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
   if (headerframe[0] != COMMAND && headerframe[0] == RESPONSE && headerframe[0] == NOTIFY)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d009      	beq.n	8003764 <Check_Frame_Header+0x24>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d105      	bne.n	8003764 <Check_Frame_Header+0x24>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d101      	bne.n	8003764 <Check_Frame_Header+0x24>
       return false;
 8003760:	2300      	movs	r3, #0
 8003762:	e03b      	b.n	80037dc <Check_Frame_Header+0x9c>
   if (headerframe[1] != CDS && headerframe[1] != IR && headerframe[1] != MQ2 && headerframe[1] != DHT11_HUMI && headerframe[1] != DHT11_TEMP &&
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3301      	adds	r3, #1
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d02e      	beq.n	80037cc <Check_Frame_Header+0x8c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3301      	adds	r3, #1
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d029      	beq.n	80037cc <Check_Frame_Header+0x8c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3301      	adds	r3, #1
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d024      	beq.n	80037cc <Check_Frame_Header+0x8c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3301      	adds	r3, #1
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d01f      	beq.n	80037cc <Check_Frame_Header+0x8c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3301      	adds	r3, #1
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b05      	cmp	r3, #5
 8003794:	d01a      	beq.n	80037cc <Check_Frame_Header+0x8c>
       headerframe[1] != LED && headerframe[1] != MOTOR && headerframe[1] != SIREN && headerframe[1] != AUTO && headerframe[1] != UNKNOWN)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3301      	adds	r3, #1
 800379a:	781b      	ldrb	r3, [r3, #0]
   if (headerframe[1] != CDS && headerframe[1] != IR && headerframe[1] != MQ2 && headerframe[1] != DHT11_HUMI && headerframe[1] != DHT11_TEMP &&
 800379c:	2b11      	cmp	r3, #17
 800379e:	d015      	beq.n	80037cc <Check_Frame_Header+0x8c>
       headerframe[1] != LED && headerframe[1] != MOTOR && headerframe[1] != SIREN && headerframe[1] != AUTO && headerframe[1] != UNKNOWN)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3301      	adds	r3, #1
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b12      	cmp	r3, #18
 80037a8:	d010      	beq.n	80037cc <Check_Frame_Header+0x8c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3301      	adds	r3, #1
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b13      	cmp	r3, #19
 80037b2:	d00b      	beq.n	80037cc <Check_Frame_Header+0x8c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3301      	adds	r3, #1
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d006      	beq.n	80037cc <Check_Frame_Header+0x8c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3301      	adds	r3, #1
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2bff      	cmp	r3, #255	@ 0xff
 80037c6:	d001      	beq.n	80037cc <Check_Frame_Header+0x8c>
       return false;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e007      	b.n	80037dc <Check_Frame_Header+0x9c>
   if (headerframe[2] > PAYLOAD_SIZE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3302      	adds	r3, #2
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d901      	bls.n	80037da <Check_Frame_Header+0x9a>
       return false; // Kiểm tra độ dài payload
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <Check_Frame_Header+0x9c>

   return true;
 80037da:	2301      	movs	r3, #1

	
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <Queue_init>:
#include "queue.h"
#include <string.h>

void Queue_init(FrameQueue *q) {
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
    q->front = 0;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    q->rear = -1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f04f 32ff 	mov.w	r2, #4294967295
 80037fc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    q->size = 0;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <empty>:

bool empty(const FrameQueue *q) {
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
    return q->size == 0;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
}
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <full>:

bool full(const FrameQueue *q) {
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    return q->size == FRAME_QUEUE_CAPACITY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003842:	2b14      	cmp	r3, #20
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
	...

08003858 <push>:

int size(const FrameQueue *q) {
    return q->size;
}

bool push(FrameQueue *q, const message_t f, uint8_t length) {
 8003858:	b084      	sub	sp, #16
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	f107 0014 	add.w	r0, r7, #20
 8003866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (full(q)) return false;
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ffe2 	bl	8003834 <full>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <push+0x22>
 8003876:	2300      	movs	r3, #0
 8003878:	e029      	b.n	80038ce <push+0x76>

    q->rear = (q->rear + 1) % FRAME_QUEUE_CAPACITY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8003880:	1c59      	adds	r1, r3, #1
 8003882:	4b16      	ldr	r3, [pc, #88]	@ (80038dc <push+0x84>)
 8003884:	fb83 2301 	smull	r2, r3, r3, r1
 8003888:	10da      	asrs	r2, r3, #3
 800388a:	17cb      	asrs	r3, r1, #31
 800388c:	1ad2      	subs	r2, r2, r3
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	1aca      	subs	r2, r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    memcpy(&q->buffer[q->rear], &f, length);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	4413      	add	r3, r2
 80038b0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80038b4:	f107 0114 	add.w	r1, r7, #20
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 ff22 	bl	8004702 <memcpy>
    q->size++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    return true;
 80038cc:	2301      	movs	r3, #1
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038d8:	b004      	add	sp, #16
 80038da:	4770      	bx	lr
 80038dc:	66666667 	.word	0x66666667

080038e0 <pop>:

bool pop(FrameQueue *q) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
    if (empty(q)) return false;
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff ff92 	bl	8003812 <empty>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <pop+0x18>
 80038f4:	2300      	movs	r3, #0
 80038f6:	e019      	b.n	800392c <pop+0x4c>

    q->front = (q->front + 1) % FRAME_QUEUE_CAPACITY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80038fe:	1c59      	adds	r1, r3, #1
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <pop+0x54>)
 8003902:	fb83 2301 	smull	r2, r3, r3, r1
 8003906:	10da      	asrs	r2, r3, #3
 8003908:	17cb      	asrs	r3, r1, #31
 800390a:	1ad2      	subs	r2, r2, r3
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	1aca      	subs	r2, r1, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    q->size--;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003922:	1e5a      	subs	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    return true;
 800392a:	2301      	movs	r3, #1
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	66666667 	.word	0x66666667

08003938 <front>:

message_t* front(const FrameQueue *q) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
    if (empty(q)) return NULL;
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ff66 	bl	8003812 <empty>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <front+0x18>
 800394c:	2300      	movs	r3, #0
 800394e:	e008      	b.n	8003962 <front+0x2a>
    return (message_t*)&q->buffer[q->front];
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4413      	add	r3, r2
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <__NVIC_EnableIRQ>:
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db0b      	blt.n	8003996 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4906      	ldr	r1, [pc, #24]	@ (80039a0 <__NVIC_EnableIRQ+0x34>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2001      	movs	r0, #1
 800398e:	fa00 f202 	lsl.w	r2, r0, r2
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	e000e100 	.word	0xe000e100

080039a4 <__NVIC_SetPriority>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	db0a      	blt.n	80039ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	490c      	ldr	r1, [pc, #48]	@ (80039f0 <__NVIC_SetPriority+0x4c>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	440b      	add	r3, r1
 80039c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80039cc:	e00a      	b.n	80039e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4908      	ldr	r1, [pc, #32]	@ (80039f4 <__NVIC_SetPriority+0x50>)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3b04      	subs	r3, #4
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	440b      	add	r3, r1
 80039e2:	761a      	strb	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000e100 	.word	0xe000e100
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <Timer_Init>:
static volatile uint32_t tick_ms = 0; // Bộ đếm ms

static TIM_HandleTypeDef htim2;

void Timer_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
	 RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80039fc:	4b19      	ldr	r3, [pc, #100]	@ (8003a64 <Timer_Init+0x6c>)
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	4a18      	ldr	r2, [pc, #96]	@ (8003a64 <Timer_Init+0x6c>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	61d3      	str	r3, [r2, #28]

    // Cấu hình TIM2 cho 1ms (SystemCoreClock = 72MHz)
    htim2.Instance = TIM2;
 8003a08:	4b17      	ldr	r3, [pc, #92]	@ (8003a68 <Timer_Init+0x70>)
 8003a0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a0e:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 72 - 1;     // 1 MHz (1 tick = 1us)
 8003a10:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <Timer_Init+0x70>)
 8003a12:	2247      	movs	r2, #71	@ 0x47
 8003a14:	605a      	str	r2, [r3, #4]
    htim2.Init.Period = 1000 - 1;      // 1000 ticks = 1ms
 8003a16:	4b14      	ldr	r3, [pc, #80]	@ (8003a68 <Timer_Init+0x70>)
 8003a18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a1c:	60da      	str	r2, [r3, #12]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1e:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <Timer_Init+0x70>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a24:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <Timer_Init+0x70>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	611a      	str	r2, [r3, #16]

    TIM_Base_Init(&htim2);
 8003a2a:	480f      	ldr	r0, [pc, #60]	@ (8003a68 <Timer_Init+0x70>)
 8003a2c:	f7fe f8a6 	bl	8001b7c <TIM_Base_Init>

    // Bật update interrupt
    htim2.Instance->DIER |= TIM_DIER_UIE;
 8003a30:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <Timer_Init+0x70>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	4b0c      	ldr	r3, [pc, #48]	@ (8003a68 <Timer_Init+0x70>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	60da      	str	r2, [r3, #12]

    // Bật timer
    TIM_ENABLE(&htim2);
 8003a40:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <Timer_Init+0x70>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <Timer_Init+0x70>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

    // Bật ngắt TIM2 trong NVIC
    NVIC_SetPriority(TIM2_IRQn, 1);
 8003a50:	2101      	movs	r1, #1
 8003a52:	201c      	movs	r0, #28
 8003a54:	f7ff ffa6 	bl	80039a4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8003a58:	201c      	movs	r0, #28
 8003a5a:	f7ff ff87 	bl	800396c <__NVIC_EnableIRQ>
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	20000474 	.word	0x20000474

08003a6c <IncTick>:

// Gọi trong TIM2_IRQHandler
void IncTick(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
    tick_ms++;
 8003a70:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <IncTick+0x18>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	4a03      	ldr	r2, [pc, #12]	@ (8003a84 <IncTick+0x18>)
 8003a78:	6013      	str	r3, [r2, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000470 	.word	0x20000470

08003a88 <GetTick>:

uint32_t GetTick(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
    return tick_ms;
 8003a8c:	4b02      	ldr	r3, [pc, #8]	@ (8003a98 <GetTick+0x10>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	20000470 	.word	0x20000470

08003a9c <Delay_ms>:

void Delay_ms(uint32_t ms)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
    uint32_t start = GetTick();
 8003aa4:	f7ff fff0 	bl	8003a88 <GetTick>
 8003aa8:	60f8      	str	r0, [r7, #12]
    while ((GetTick() - start) < ms);
 8003aaa:	bf00      	nop
 8003aac:	f7ff ffec 	bl	8003a88 <GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d8f7      	bhi.n	8003aac <Delay_ms+0x10>
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <Delay_us>:

void Delay_us(uint32_t us)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
    // Đếm bằng TIM2 trực tiếp, độ phân giải 1us
    htim2.Instance->CNT = 0;
 8003ad0:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <Delay_us+0x2c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	625a      	str	r2, [r3, #36]	@ 0x24
    while (htim2.Instance->CNT < us);
 8003ad8:	bf00      	nop
 8003ada:	4b06      	ldr	r3, [pc, #24]	@ (8003af4 <Delay_us+0x2c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d8f9      	bhi.n	8003ada <Delay_us+0x12>
}
 8003ae6:	bf00      	nop
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000474 	.word	0x20000474

08003af8 <TIM2_IRQHandler>:

// Handler gọi từ startup file
void TIM2_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 8003afc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <TIM2_IRQHandler+0x26>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 8003b0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	6113      	str	r3, [r2, #16]
        IncTick();
 8003b1a:	f7ff ffa7 	bl	8003a6c <IncTick>
    }
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <__cvt>:
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b28:	461d      	mov	r5, r3
 8003b2a:	bfbb      	ittet	lt
 8003b2c:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003b30:	461d      	movlt	r5, r3
 8003b32:	2300      	movge	r3, #0
 8003b34:	232d      	movlt	r3, #45	@ 0x2d
 8003b36:	b088      	sub	sp, #32
 8003b38:	4614      	mov	r4, r2
 8003b3a:	bfb8      	it	lt
 8003b3c:	4614      	movlt	r4, r2
 8003b3e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003b40:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003b42:	7013      	strb	r3, [r2, #0]
 8003b44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003b46:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003b4a:	f023 0820 	bic.w	r8, r3, #32
 8003b4e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b52:	d005      	beq.n	8003b60 <__cvt+0x3e>
 8003b54:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003b58:	d100      	bne.n	8003b5c <__cvt+0x3a>
 8003b5a:	3601      	adds	r6, #1
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e000      	b.n	8003b62 <__cvt+0x40>
 8003b60:	2303      	movs	r3, #3
 8003b62:	aa07      	add	r2, sp, #28
 8003b64:	9204      	str	r2, [sp, #16]
 8003b66:	aa06      	add	r2, sp, #24
 8003b68:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003b6c:	e9cd 3600 	strd	r3, r6, [sp]
 8003b70:	4622      	mov	r2, r4
 8003b72:	462b      	mov	r3, r5
 8003b74:	f000 fe5c 	bl	8004830 <_dtoa_r>
 8003b78:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003b7c:	4607      	mov	r7, r0
 8003b7e:	d119      	bne.n	8003bb4 <__cvt+0x92>
 8003b80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003b82:	07db      	lsls	r3, r3, #31
 8003b84:	d50e      	bpl.n	8003ba4 <__cvt+0x82>
 8003b86:	eb00 0906 	add.w	r9, r0, r6
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	4620      	mov	r0, r4
 8003b90:	4629      	mov	r1, r5
 8003b92:	f7fc ff19 	bl	80009c8 <__aeabi_dcmpeq>
 8003b96:	b108      	cbz	r0, 8003b9c <__cvt+0x7a>
 8003b98:	f8cd 901c 	str.w	r9, [sp, #28]
 8003b9c:	2230      	movs	r2, #48	@ 0x30
 8003b9e:	9b07      	ldr	r3, [sp, #28]
 8003ba0:	454b      	cmp	r3, r9
 8003ba2:	d31e      	bcc.n	8003be2 <__cvt+0xc0>
 8003ba4:	4638      	mov	r0, r7
 8003ba6:	9b07      	ldr	r3, [sp, #28]
 8003ba8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003baa:	1bdb      	subs	r3, r3, r7
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	b008      	add	sp, #32
 8003bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003bb8:	eb00 0906 	add.w	r9, r0, r6
 8003bbc:	d1e5      	bne.n	8003b8a <__cvt+0x68>
 8003bbe:	7803      	ldrb	r3, [r0, #0]
 8003bc0:	2b30      	cmp	r3, #48	@ 0x30
 8003bc2:	d10a      	bne.n	8003bda <__cvt+0xb8>
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	4620      	mov	r0, r4
 8003bca:	4629      	mov	r1, r5
 8003bcc:	f7fc fefc 	bl	80009c8 <__aeabi_dcmpeq>
 8003bd0:	b918      	cbnz	r0, 8003bda <__cvt+0xb8>
 8003bd2:	f1c6 0601 	rsb	r6, r6, #1
 8003bd6:	f8ca 6000 	str.w	r6, [sl]
 8003bda:	f8da 3000 	ldr.w	r3, [sl]
 8003bde:	4499      	add	r9, r3
 8003be0:	e7d3      	b.n	8003b8a <__cvt+0x68>
 8003be2:	1c59      	adds	r1, r3, #1
 8003be4:	9107      	str	r1, [sp, #28]
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	e7d9      	b.n	8003b9e <__cvt+0x7c>

08003bea <__exponent>:
 8003bea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bec:	2900      	cmp	r1, #0
 8003bee:	bfb6      	itet	lt
 8003bf0:	232d      	movlt	r3, #45	@ 0x2d
 8003bf2:	232b      	movge	r3, #43	@ 0x2b
 8003bf4:	4249      	neglt	r1, r1
 8003bf6:	2909      	cmp	r1, #9
 8003bf8:	7002      	strb	r2, [r0, #0]
 8003bfa:	7043      	strb	r3, [r0, #1]
 8003bfc:	dd29      	ble.n	8003c52 <__exponent+0x68>
 8003bfe:	f10d 0307 	add.w	r3, sp, #7
 8003c02:	461d      	mov	r5, r3
 8003c04:	270a      	movs	r7, #10
 8003c06:	fbb1 f6f7 	udiv	r6, r1, r7
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	fb07 1416 	mls	r4, r7, r6, r1
 8003c10:	3430      	adds	r4, #48	@ 0x30
 8003c12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003c16:	460c      	mov	r4, r1
 8003c18:	2c63      	cmp	r4, #99	@ 0x63
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c20:	dcf1      	bgt.n	8003c06 <__exponent+0x1c>
 8003c22:	3130      	adds	r1, #48	@ 0x30
 8003c24:	1e94      	subs	r4, r2, #2
 8003c26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c2a:	4623      	mov	r3, r4
 8003c2c:	1c41      	adds	r1, r0, #1
 8003c2e:	42ab      	cmp	r3, r5
 8003c30:	d30a      	bcc.n	8003c48 <__exponent+0x5e>
 8003c32:	f10d 0309 	add.w	r3, sp, #9
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	42ac      	cmp	r4, r5
 8003c3a:	bf88      	it	hi
 8003c3c:	2300      	movhi	r3, #0
 8003c3e:	3302      	adds	r3, #2
 8003c40:	4403      	add	r3, r0
 8003c42:	1a18      	subs	r0, r3, r0
 8003c44:	b003      	add	sp, #12
 8003c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003c4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003c50:	e7ed      	b.n	8003c2e <__exponent+0x44>
 8003c52:	2330      	movs	r3, #48	@ 0x30
 8003c54:	3130      	adds	r1, #48	@ 0x30
 8003c56:	7083      	strb	r3, [r0, #2]
 8003c58:	70c1      	strb	r1, [r0, #3]
 8003c5a:	1d03      	adds	r3, r0, #4
 8003c5c:	e7f1      	b.n	8003c42 <__exponent+0x58>
	...

08003c60 <_printf_float>:
 8003c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c64:	b091      	sub	sp, #68	@ 0x44
 8003c66:	460c      	mov	r4, r1
 8003c68:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003c6c:	4616      	mov	r6, r2
 8003c6e:	461f      	mov	r7, r3
 8003c70:	4605      	mov	r5, r0
 8003c72:	f000 fcc1 	bl	80045f8 <_localeconv_r>
 8003c76:	6803      	ldr	r3, [r0, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	9308      	str	r3, [sp, #32]
 8003c7c:	f7fc fa78 	bl	8000170 <strlen>
 8003c80:	2300      	movs	r3, #0
 8003c82:	930e      	str	r3, [sp, #56]	@ 0x38
 8003c84:	f8d8 3000 	ldr.w	r3, [r8]
 8003c88:	9009      	str	r0, [sp, #36]	@ 0x24
 8003c8a:	3307      	adds	r3, #7
 8003c8c:	f023 0307 	bic.w	r3, r3, #7
 8003c90:	f103 0208 	add.w	r2, r3, #8
 8003c94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003c98:	f8d4 b000 	ldr.w	fp, [r4]
 8003c9c:	f8c8 2000 	str.w	r2, [r8]
 8003ca0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ca4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003caa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003cae:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003cb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003cba:	4b9c      	ldr	r3, [pc, #624]	@ (8003f2c <_printf_float+0x2cc>)
 8003cbc:	f7fc feb6 	bl	8000a2c <__aeabi_dcmpun>
 8003cc0:	bb70      	cbnz	r0, 8003d20 <_printf_float+0xc0>
 8003cc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cca:	4b98      	ldr	r3, [pc, #608]	@ (8003f2c <_printf_float+0x2cc>)
 8003ccc:	f7fc fe90 	bl	80009f0 <__aeabi_dcmple>
 8003cd0:	bb30      	cbnz	r0, 8003d20 <_printf_float+0xc0>
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	4649      	mov	r1, r9
 8003cda:	f7fc fe7f 	bl	80009dc <__aeabi_dcmplt>
 8003cde:	b110      	cbz	r0, 8003ce6 <_printf_float+0x86>
 8003ce0:	232d      	movs	r3, #45	@ 0x2d
 8003ce2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ce6:	4a92      	ldr	r2, [pc, #584]	@ (8003f30 <_printf_float+0x2d0>)
 8003ce8:	4b92      	ldr	r3, [pc, #584]	@ (8003f34 <_printf_float+0x2d4>)
 8003cea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003cee:	bf94      	ite	ls
 8003cf0:	4690      	movls	r8, r2
 8003cf2:	4698      	movhi	r8, r3
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	f04f 0900 	mov.w	r9, #0
 8003cfa:	6123      	str	r3, [r4, #16]
 8003cfc:	f02b 0304 	bic.w	r3, fp, #4
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	4633      	mov	r3, r6
 8003d04:	4621      	mov	r1, r4
 8003d06:	4628      	mov	r0, r5
 8003d08:	9700      	str	r7, [sp, #0]
 8003d0a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003d0c:	f000 f9d4 	bl	80040b8 <_printf_common>
 8003d10:	3001      	adds	r0, #1
 8003d12:	f040 8090 	bne.w	8003e36 <_printf_float+0x1d6>
 8003d16:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1a:	b011      	add	sp, #68	@ 0x44
 8003d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	4640      	mov	r0, r8
 8003d26:	4649      	mov	r1, r9
 8003d28:	f7fc fe80 	bl	8000a2c <__aeabi_dcmpun>
 8003d2c:	b148      	cbz	r0, 8003d42 <_printf_float+0xe2>
 8003d2e:	464b      	mov	r3, r9
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bfb8      	it	lt
 8003d34:	232d      	movlt	r3, #45	@ 0x2d
 8003d36:	4a80      	ldr	r2, [pc, #512]	@ (8003f38 <_printf_float+0x2d8>)
 8003d38:	bfb8      	it	lt
 8003d3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f3c <_printf_float+0x2dc>)
 8003d40:	e7d3      	b.n	8003cea <_printf_float+0x8a>
 8003d42:	6863      	ldr	r3, [r4, #4]
 8003d44:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	d13f      	bne.n	8003dcc <_printf_float+0x16c>
 8003d4c:	2306      	movs	r3, #6
 8003d4e:	6063      	str	r3, [r4, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003d56:	6023      	str	r3, [r4, #0]
 8003d58:	9206      	str	r2, [sp, #24]
 8003d5a:	aa0e      	add	r2, sp, #56	@ 0x38
 8003d5c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003d60:	aa0d      	add	r2, sp, #52	@ 0x34
 8003d62:	9203      	str	r2, [sp, #12]
 8003d64:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003d68:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d6c:	6863      	ldr	r3, [r4, #4]
 8003d6e:	4642      	mov	r2, r8
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	4628      	mov	r0, r5
 8003d74:	464b      	mov	r3, r9
 8003d76:	910a      	str	r1, [sp, #40]	@ 0x28
 8003d78:	f7ff fed3 	bl	8003b22 <__cvt>
 8003d7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003d7e:	4680      	mov	r8, r0
 8003d80:	2947      	cmp	r1, #71	@ 0x47
 8003d82:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003d84:	d128      	bne.n	8003dd8 <_printf_float+0x178>
 8003d86:	1cc8      	adds	r0, r1, #3
 8003d88:	db02      	blt.n	8003d90 <_printf_float+0x130>
 8003d8a:	6863      	ldr	r3, [r4, #4]
 8003d8c:	4299      	cmp	r1, r3
 8003d8e:	dd40      	ble.n	8003e12 <_printf_float+0x1b2>
 8003d90:	f1aa 0a02 	sub.w	sl, sl, #2
 8003d94:	fa5f fa8a 	uxtb.w	sl, sl
 8003d98:	4652      	mov	r2, sl
 8003d9a:	3901      	subs	r1, #1
 8003d9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003da0:	910d      	str	r1, [sp, #52]	@ 0x34
 8003da2:	f7ff ff22 	bl	8003bea <__exponent>
 8003da6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003da8:	4681      	mov	r9, r0
 8003daa:	1813      	adds	r3, r2, r0
 8003dac:	2a01      	cmp	r2, #1
 8003dae:	6123      	str	r3, [r4, #16]
 8003db0:	dc02      	bgt.n	8003db8 <_printf_float+0x158>
 8003db2:	6822      	ldr	r2, [r4, #0]
 8003db4:	07d2      	lsls	r2, r2, #31
 8003db6:	d501      	bpl.n	8003dbc <_printf_float+0x15c>
 8003db8:	3301      	adds	r3, #1
 8003dba:	6123      	str	r3, [r4, #16]
 8003dbc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d09e      	beq.n	8003d02 <_printf_float+0xa2>
 8003dc4:	232d      	movs	r3, #45	@ 0x2d
 8003dc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dca:	e79a      	b.n	8003d02 <_printf_float+0xa2>
 8003dcc:	2947      	cmp	r1, #71	@ 0x47
 8003dce:	d1bf      	bne.n	8003d50 <_printf_float+0xf0>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1bd      	bne.n	8003d50 <_printf_float+0xf0>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e7ba      	b.n	8003d4e <_printf_float+0xee>
 8003dd8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ddc:	d9dc      	bls.n	8003d98 <_printf_float+0x138>
 8003dde:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003de2:	d118      	bne.n	8003e16 <_printf_float+0x1b6>
 8003de4:	2900      	cmp	r1, #0
 8003de6:	6863      	ldr	r3, [r4, #4]
 8003de8:	dd0b      	ble.n	8003e02 <_printf_float+0x1a2>
 8003dea:	6121      	str	r1, [r4, #16]
 8003dec:	b913      	cbnz	r3, 8003df4 <_printf_float+0x194>
 8003dee:	6822      	ldr	r2, [r4, #0]
 8003df0:	07d0      	lsls	r0, r2, #31
 8003df2:	d502      	bpl.n	8003dfa <_printf_float+0x19a>
 8003df4:	3301      	adds	r3, #1
 8003df6:	440b      	add	r3, r1
 8003df8:	6123      	str	r3, [r4, #16]
 8003dfa:	f04f 0900 	mov.w	r9, #0
 8003dfe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003e00:	e7dc      	b.n	8003dbc <_printf_float+0x15c>
 8003e02:	b913      	cbnz	r3, 8003e0a <_printf_float+0x1aa>
 8003e04:	6822      	ldr	r2, [r4, #0]
 8003e06:	07d2      	lsls	r2, r2, #31
 8003e08:	d501      	bpl.n	8003e0e <_printf_float+0x1ae>
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	e7f4      	b.n	8003df8 <_printf_float+0x198>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e7f2      	b.n	8003df8 <_printf_float+0x198>
 8003e12:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003e16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e18:	4299      	cmp	r1, r3
 8003e1a:	db05      	blt.n	8003e28 <_printf_float+0x1c8>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	6121      	str	r1, [r4, #16]
 8003e20:	07d8      	lsls	r0, r3, #31
 8003e22:	d5ea      	bpl.n	8003dfa <_printf_float+0x19a>
 8003e24:	1c4b      	adds	r3, r1, #1
 8003e26:	e7e7      	b.n	8003df8 <_printf_float+0x198>
 8003e28:	2900      	cmp	r1, #0
 8003e2a:	bfcc      	ite	gt
 8003e2c:	2201      	movgt	r2, #1
 8003e2e:	f1c1 0202 	rsble	r2, r1, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	e7e0      	b.n	8003df8 <_printf_float+0x198>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	055a      	lsls	r2, r3, #21
 8003e3a:	d407      	bmi.n	8003e4c <_printf_float+0x1ec>
 8003e3c:	6923      	ldr	r3, [r4, #16]
 8003e3e:	4642      	mov	r2, r8
 8003e40:	4631      	mov	r1, r6
 8003e42:	4628      	mov	r0, r5
 8003e44:	47b8      	blx	r7
 8003e46:	3001      	adds	r0, #1
 8003e48:	d12b      	bne.n	8003ea2 <_printf_float+0x242>
 8003e4a:	e764      	b.n	8003d16 <_printf_float+0xb6>
 8003e4c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e50:	f240 80dc 	bls.w	800400c <_printf_float+0x3ac>
 8003e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f7fc fdb4 	bl	80009c8 <__aeabi_dcmpeq>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d033      	beq.n	8003ecc <_printf_float+0x26c>
 8003e64:	2301      	movs	r3, #1
 8003e66:	4631      	mov	r1, r6
 8003e68:	4628      	mov	r0, r5
 8003e6a:	4a35      	ldr	r2, [pc, #212]	@ (8003f40 <_printf_float+0x2e0>)
 8003e6c:	47b8      	blx	r7
 8003e6e:	3001      	adds	r0, #1
 8003e70:	f43f af51 	beq.w	8003d16 <_printf_float+0xb6>
 8003e74:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003e78:	4543      	cmp	r3, r8
 8003e7a:	db02      	blt.n	8003e82 <_printf_float+0x222>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	07d8      	lsls	r0, r3, #31
 8003e80:	d50f      	bpl.n	8003ea2 <_printf_float+0x242>
 8003e82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e86:	4631      	mov	r1, r6
 8003e88:	4628      	mov	r0, r5
 8003e8a:	47b8      	blx	r7
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	f43f af42 	beq.w	8003d16 <_printf_float+0xb6>
 8003e92:	f04f 0900 	mov.w	r9, #0
 8003e96:	f108 38ff 	add.w	r8, r8, #4294967295
 8003e9a:	f104 0a1a 	add.w	sl, r4, #26
 8003e9e:	45c8      	cmp	r8, r9
 8003ea0:	dc09      	bgt.n	8003eb6 <_printf_float+0x256>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	079b      	lsls	r3, r3, #30
 8003ea6:	f100 8102 	bmi.w	80040ae <_printf_float+0x44e>
 8003eaa:	68e0      	ldr	r0, [r4, #12]
 8003eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003eae:	4298      	cmp	r0, r3
 8003eb0:	bfb8      	it	lt
 8003eb2:	4618      	movlt	r0, r3
 8003eb4:	e731      	b.n	8003d1a <_printf_float+0xba>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	4652      	mov	r2, sl
 8003eba:	4631      	mov	r1, r6
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	47b8      	blx	r7
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	f43f af28 	beq.w	8003d16 <_printf_float+0xb6>
 8003ec6:	f109 0901 	add.w	r9, r9, #1
 8003eca:	e7e8      	b.n	8003e9e <_printf_float+0x23e>
 8003ecc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	dc38      	bgt.n	8003f44 <_printf_float+0x2e4>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	4631      	mov	r1, r6
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	4a19      	ldr	r2, [pc, #100]	@ (8003f40 <_printf_float+0x2e0>)
 8003eda:	47b8      	blx	r7
 8003edc:	3001      	adds	r0, #1
 8003ede:	f43f af1a 	beq.w	8003d16 <_printf_float+0xb6>
 8003ee2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003ee6:	ea59 0303 	orrs.w	r3, r9, r3
 8003eea:	d102      	bne.n	8003ef2 <_printf_float+0x292>
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	07d9      	lsls	r1, r3, #31
 8003ef0:	d5d7      	bpl.n	8003ea2 <_printf_float+0x242>
 8003ef2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ef6:	4631      	mov	r1, r6
 8003ef8:	4628      	mov	r0, r5
 8003efa:	47b8      	blx	r7
 8003efc:	3001      	adds	r0, #1
 8003efe:	f43f af0a 	beq.w	8003d16 <_printf_float+0xb6>
 8003f02:	f04f 0a00 	mov.w	sl, #0
 8003f06:	f104 0b1a 	add.w	fp, r4, #26
 8003f0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f0c:	425b      	negs	r3, r3
 8003f0e:	4553      	cmp	r3, sl
 8003f10:	dc01      	bgt.n	8003f16 <_printf_float+0x2b6>
 8003f12:	464b      	mov	r3, r9
 8003f14:	e793      	b.n	8003e3e <_printf_float+0x1de>
 8003f16:	2301      	movs	r3, #1
 8003f18:	465a      	mov	r2, fp
 8003f1a:	4631      	mov	r1, r6
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	47b8      	blx	r7
 8003f20:	3001      	adds	r0, #1
 8003f22:	f43f aef8 	beq.w	8003d16 <_printf_float+0xb6>
 8003f26:	f10a 0a01 	add.w	sl, sl, #1
 8003f2a:	e7ee      	b.n	8003f0a <_printf_float+0x2aa>
 8003f2c:	7fefffff 	.word	0x7fefffff
 8003f30:	08006d96 	.word	0x08006d96
 8003f34:	08006d9a 	.word	0x08006d9a
 8003f38:	08006d9e 	.word	0x08006d9e
 8003f3c:	08006da2 	.word	0x08006da2
 8003f40:	08006da6 	.word	0x08006da6
 8003f44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f46:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f4a:	4553      	cmp	r3, sl
 8003f4c:	bfa8      	it	ge
 8003f4e:	4653      	movge	r3, sl
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	4699      	mov	r9, r3
 8003f54:	dc36      	bgt.n	8003fc4 <_printf_float+0x364>
 8003f56:	f04f 0b00 	mov.w	fp, #0
 8003f5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f5e:	f104 021a 	add.w	r2, r4, #26
 8003f62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f64:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f66:	eba3 0309 	sub.w	r3, r3, r9
 8003f6a:	455b      	cmp	r3, fp
 8003f6c:	dc31      	bgt.n	8003fd2 <_printf_float+0x372>
 8003f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f70:	459a      	cmp	sl, r3
 8003f72:	dc3a      	bgt.n	8003fea <_printf_float+0x38a>
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	07da      	lsls	r2, r3, #31
 8003f78:	d437      	bmi.n	8003fea <_printf_float+0x38a>
 8003f7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f7c:	ebaa 0903 	sub.w	r9, sl, r3
 8003f80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f82:	ebaa 0303 	sub.w	r3, sl, r3
 8003f86:	4599      	cmp	r9, r3
 8003f88:	bfa8      	it	ge
 8003f8a:	4699      	movge	r9, r3
 8003f8c:	f1b9 0f00 	cmp.w	r9, #0
 8003f90:	dc33      	bgt.n	8003ffa <_printf_float+0x39a>
 8003f92:	f04f 0800 	mov.w	r8, #0
 8003f96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f9a:	f104 0b1a 	add.w	fp, r4, #26
 8003f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fa0:	ebaa 0303 	sub.w	r3, sl, r3
 8003fa4:	eba3 0309 	sub.w	r3, r3, r9
 8003fa8:	4543      	cmp	r3, r8
 8003faa:	f77f af7a 	ble.w	8003ea2 <_printf_float+0x242>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	465a      	mov	r2, fp
 8003fb2:	4631      	mov	r1, r6
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	47b8      	blx	r7
 8003fb8:	3001      	adds	r0, #1
 8003fba:	f43f aeac 	beq.w	8003d16 <_printf_float+0xb6>
 8003fbe:	f108 0801 	add.w	r8, r8, #1
 8003fc2:	e7ec      	b.n	8003f9e <_printf_float+0x33e>
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	4628      	mov	r0, r5
 8003fca:	47b8      	blx	r7
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d1c2      	bne.n	8003f56 <_printf_float+0x2f6>
 8003fd0:	e6a1      	b.n	8003d16 <_printf_float+0xb6>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4631      	mov	r1, r6
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	920a      	str	r2, [sp, #40]	@ 0x28
 8003fda:	47b8      	blx	r7
 8003fdc:	3001      	adds	r0, #1
 8003fde:	f43f ae9a 	beq.w	8003d16 <_printf_float+0xb6>
 8003fe2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003fe4:	f10b 0b01 	add.w	fp, fp, #1
 8003fe8:	e7bb      	b.n	8003f62 <_printf_float+0x302>
 8003fea:	4631      	mov	r1, r6
 8003fec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	47b8      	blx	r7
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	d1c0      	bne.n	8003f7a <_printf_float+0x31a>
 8003ff8:	e68d      	b.n	8003d16 <_printf_float+0xb6>
 8003ffa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ffc:	464b      	mov	r3, r9
 8003ffe:	4631      	mov	r1, r6
 8004000:	4628      	mov	r0, r5
 8004002:	4442      	add	r2, r8
 8004004:	47b8      	blx	r7
 8004006:	3001      	adds	r0, #1
 8004008:	d1c3      	bne.n	8003f92 <_printf_float+0x332>
 800400a:	e684      	b.n	8003d16 <_printf_float+0xb6>
 800400c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004010:	f1ba 0f01 	cmp.w	sl, #1
 8004014:	dc01      	bgt.n	800401a <_printf_float+0x3ba>
 8004016:	07db      	lsls	r3, r3, #31
 8004018:	d536      	bpl.n	8004088 <_printf_float+0x428>
 800401a:	2301      	movs	r3, #1
 800401c:	4642      	mov	r2, r8
 800401e:	4631      	mov	r1, r6
 8004020:	4628      	mov	r0, r5
 8004022:	47b8      	blx	r7
 8004024:	3001      	adds	r0, #1
 8004026:	f43f ae76 	beq.w	8003d16 <_printf_float+0xb6>
 800402a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800402e:	4631      	mov	r1, r6
 8004030:	4628      	mov	r0, r5
 8004032:	47b8      	blx	r7
 8004034:	3001      	adds	r0, #1
 8004036:	f43f ae6e 	beq.w	8003d16 <_printf_float+0xb6>
 800403a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800403e:	2200      	movs	r2, #0
 8004040:	2300      	movs	r3, #0
 8004042:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004046:	f7fc fcbf 	bl	80009c8 <__aeabi_dcmpeq>
 800404a:	b9c0      	cbnz	r0, 800407e <_printf_float+0x41e>
 800404c:	4653      	mov	r3, sl
 800404e:	f108 0201 	add.w	r2, r8, #1
 8004052:	4631      	mov	r1, r6
 8004054:	4628      	mov	r0, r5
 8004056:	47b8      	blx	r7
 8004058:	3001      	adds	r0, #1
 800405a:	d10c      	bne.n	8004076 <_printf_float+0x416>
 800405c:	e65b      	b.n	8003d16 <_printf_float+0xb6>
 800405e:	2301      	movs	r3, #1
 8004060:	465a      	mov	r2, fp
 8004062:	4631      	mov	r1, r6
 8004064:	4628      	mov	r0, r5
 8004066:	47b8      	blx	r7
 8004068:	3001      	adds	r0, #1
 800406a:	f43f ae54 	beq.w	8003d16 <_printf_float+0xb6>
 800406e:	f108 0801 	add.w	r8, r8, #1
 8004072:	45d0      	cmp	r8, sl
 8004074:	dbf3      	blt.n	800405e <_printf_float+0x3fe>
 8004076:	464b      	mov	r3, r9
 8004078:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800407c:	e6e0      	b.n	8003e40 <_printf_float+0x1e0>
 800407e:	f04f 0800 	mov.w	r8, #0
 8004082:	f104 0b1a 	add.w	fp, r4, #26
 8004086:	e7f4      	b.n	8004072 <_printf_float+0x412>
 8004088:	2301      	movs	r3, #1
 800408a:	4642      	mov	r2, r8
 800408c:	e7e1      	b.n	8004052 <_printf_float+0x3f2>
 800408e:	2301      	movs	r3, #1
 8004090:	464a      	mov	r2, r9
 8004092:	4631      	mov	r1, r6
 8004094:	4628      	mov	r0, r5
 8004096:	47b8      	blx	r7
 8004098:	3001      	adds	r0, #1
 800409a:	f43f ae3c 	beq.w	8003d16 <_printf_float+0xb6>
 800409e:	f108 0801 	add.w	r8, r8, #1
 80040a2:	68e3      	ldr	r3, [r4, #12]
 80040a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80040a6:	1a5b      	subs	r3, r3, r1
 80040a8:	4543      	cmp	r3, r8
 80040aa:	dcf0      	bgt.n	800408e <_printf_float+0x42e>
 80040ac:	e6fd      	b.n	8003eaa <_printf_float+0x24a>
 80040ae:	f04f 0800 	mov.w	r8, #0
 80040b2:	f104 0919 	add.w	r9, r4, #25
 80040b6:	e7f4      	b.n	80040a2 <_printf_float+0x442>

080040b8 <_printf_common>:
 80040b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040bc:	4616      	mov	r6, r2
 80040be:	4698      	mov	r8, r3
 80040c0:	688a      	ldr	r2, [r1, #8]
 80040c2:	690b      	ldr	r3, [r1, #16]
 80040c4:	4607      	mov	r7, r0
 80040c6:	4293      	cmp	r3, r2
 80040c8:	bfb8      	it	lt
 80040ca:	4613      	movlt	r3, r2
 80040cc:	6033      	str	r3, [r6, #0]
 80040ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040d2:	460c      	mov	r4, r1
 80040d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040d8:	b10a      	cbz	r2, 80040de <_printf_common+0x26>
 80040da:	3301      	adds	r3, #1
 80040dc:	6033      	str	r3, [r6, #0]
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	0699      	lsls	r1, r3, #26
 80040e2:	bf42      	ittt	mi
 80040e4:	6833      	ldrmi	r3, [r6, #0]
 80040e6:	3302      	addmi	r3, #2
 80040e8:	6033      	strmi	r3, [r6, #0]
 80040ea:	6825      	ldr	r5, [r4, #0]
 80040ec:	f015 0506 	ands.w	r5, r5, #6
 80040f0:	d106      	bne.n	8004100 <_printf_common+0x48>
 80040f2:	f104 0a19 	add.w	sl, r4, #25
 80040f6:	68e3      	ldr	r3, [r4, #12]
 80040f8:	6832      	ldr	r2, [r6, #0]
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	42ab      	cmp	r3, r5
 80040fe:	dc2b      	bgt.n	8004158 <_printf_common+0xa0>
 8004100:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004104:	6822      	ldr	r2, [r4, #0]
 8004106:	3b00      	subs	r3, #0
 8004108:	bf18      	it	ne
 800410a:	2301      	movne	r3, #1
 800410c:	0692      	lsls	r2, r2, #26
 800410e:	d430      	bmi.n	8004172 <_printf_common+0xba>
 8004110:	4641      	mov	r1, r8
 8004112:	4638      	mov	r0, r7
 8004114:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004118:	47c8      	blx	r9
 800411a:	3001      	adds	r0, #1
 800411c:	d023      	beq.n	8004166 <_printf_common+0xae>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	6922      	ldr	r2, [r4, #16]
 8004122:	f003 0306 	and.w	r3, r3, #6
 8004126:	2b04      	cmp	r3, #4
 8004128:	bf14      	ite	ne
 800412a:	2500      	movne	r5, #0
 800412c:	6833      	ldreq	r3, [r6, #0]
 800412e:	f04f 0600 	mov.w	r6, #0
 8004132:	bf08      	it	eq
 8004134:	68e5      	ldreq	r5, [r4, #12]
 8004136:	f104 041a 	add.w	r4, r4, #26
 800413a:	bf08      	it	eq
 800413c:	1aed      	subeq	r5, r5, r3
 800413e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004142:	bf08      	it	eq
 8004144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004148:	4293      	cmp	r3, r2
 800414a:	bfc4      	itt	gt
 800414c:	1a9b      	subgt	r3, r3, r2
 800414e:	18ed      	addgt	r5, r5, r3
 8004150:	42b5      	cmp	r5, r6
 8004152:	d11a      	bne.n	800418a <_printf_common+0xd2>
 8004154:	2000      	movs	r0, #0
 8004156:	e008      	b.n	800416a <_printf_common+0xb2>
 8004158:	2301      	movs	r3, #1
 800415a:	4652      	mov	r2, sl
 800415c:	4641      	mov	r1, r8
 800415e:	4638      	mov	r0, r7
 8004160:	47c8      	blx	r9
 8004162:	3001      	adds	r0, #1
 8004164:	d103      	bne.n	800416e <_printf_common+0xb6>
 8004166:	f04f 30ff 	mov.w	r0, #4294967295
 800416a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800416e:	3501      	adds	r5, #1
 8004170:	e7c1      	b.n	80040f6 <_printf_common+0x3e>
 8004172:	2030      	movs	r0, #48	@ 0x30
 8004174:	18e1      	adds	r1, r4, r3
 8004176:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004180:	4422      	add	r2, r4
 8004182:	3302      	adds	r3, #2
 8004184:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004188:	e7c2      	b.n	8004110 <_printf_common+0x58>
 800418a:	2301      	movs	r3, #1
 800418c:	4622      	mov	r2, r4
 800418e:	4641      	mov	r1, r8
 8004190:	4638      	mov	r0, r7
 8004192:	47c8      	blx	r9
 8004194:	3001      	adds	r0, #1
 8004196:	d0e6      	beq.n	8004166 <_printf_common+0xae>
 8004198:	3601      	adds	r6, #1
 800419a:	e7d9      	b.n	8004150 <_printf_common+0x98>

0800419c <_printf_i>:
 800419c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041a0:	7e0f      	ldrb	r7, [r1, #24]
 80041a2:	4691      	mov	r9, r2
 80041a4:	2f78      	cmp	r7, #120	@ 0x78
 80041a6:	4680      	mov	r8, r0
 80041a8:	460c      	mov	r4, r1
 80041aa:	469a      	mov	sl, r3
 80041ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041b2:	d807      	bhi.n	80041c4 <_printf_i+0x28>
 80041b4:	2f62      	cmp	r7, #98	@ 0x62
 80041b6:	d80a      	bhi.n	80041ce <_printf_i+0x32>
 80041b8:	2f00      	cmp	r7, #0
 80041ba:	f000 80d3 	beq.w	8004364 <_printf_i+0x1c8>
 80041be:	2f58      	cmp	r7, #88	@ 0x58
 80041c0:	f000 80ba 	beq.w	8004338 <_printf_i+0x19c>
 80041c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041cc:	e03a      	b.n	8004244 <_printf_i+0xa8>
 80041ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041d2:	2b15      	cmp	r3, #21
 80041d4:	d8f6      	bhi.n	80041c4 <_printf_i+0x28>
 80041d6:	a101      	add	r1, pc, #4	@ (adr r1, 80041dc <_printf_i+0x40>)
 80041d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041dc:	08004235 	.word	0x08004235
 80041e0:	08004249 	.word	0x08004249
 80041e4:	080041c5 	.word	0x080041c5
 80041e8:	080041c5 	.word	0x080041c5
 80041ec:	080041c5 	.word	0x080041c5
 80041f0:	080041c5 	.word	0x080041c5
 80041f4:	08004249 	.word	0x08004249
 80041f8:	080041c5 	.word	0x080041c5
 80041fc:	080041c5 	.word	0x080041c5
 8004200:	080041c5 	.word	0x080041c5
 8004204:	080041c5 	.word	0x080041c5
 8004208:	0800434b 	.word	0x0800434b
 800420c:	08004273 	.word	0x08004273
 8004210:	08004305 	.word	0x08004305
 8004214:	080041c5 	.word	0x080041c5
 8004218:	080041c5 	.word	0x080041c5
 800421c:	0800436d 	.word	0x0800436d
 8004220:	080041c5 	.word	0x080041c5
 8004224:	08004273 	.word	0x08004273
 8004228:	080041c5 	.word	0x080041c5
 800422c:	080041c5 	.word	0x080041c5
 8004230:	0800430d 	.word	0x0800430d
 8004234:	6833      	ldr	r3, [r6, #0]
 8004236:	1d1a      	adds	r2, r3, #4
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6032      	str	r2, [r6, #0]
 800423c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004244:	2301      	movs	r3, #1
 8004246:	e09e      	b.n	8004386 <_printf_i+0x1ea>
 8004248:	6833      	ldr	r3, [r6, #0]
 800424a:	6820      	ldr	r0, [r4, #0]
 800424c:	1d19      	adds	r1, r3, #4
 800424e:	6031      	str	r1, [r6, #0]
 8004250:	0606      	lsls	r6, r0, #24
 8004252:	d501      	bpl.n	8004258 <_printf_i+0xbc>
 8004254:	681d      	ldr	r5, [r3, #0]
 8004256:	e003      	b.n	8004260 <_printf_i+0xc4>
 8004258:	0645      	lsls	r5, r0, #25
 800425a:	d5fb      	bpl.n	8004254 <_printf_i+0xb8>
 800425c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004260:	2d00      	cmp	r5, #0
 8004262:	da03      	bge.n	800426c <_printf_i+0xd0>
 8004264:	232d      	movs	r3, #45	@ 0x2d
 8004266:	426d      	negs	r5, r5
 8004268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800426c:	230a      	movs	r3, #10
 800426e:	4859      	ldr	r0, [pc, #356]	@ (80043d4 <_printf_i+0x238>)
 8004270:	e011      	b.n	8004296 <_printf_i+0xfa>
 8004272:	6821      	ldr	r1, [r4, #0]
 8004274:	6833      	ldr	r3, [r6, #0]
 8004276:	0608      	lsls	r0, r1, #24
 8004278:	f853 5b04 	ldr.w	r5, [r3], #4
 800427c:	d402      	bmi.n	8004284 <_printf_i+0xe8>
 800427e:	0649      	lsls	r1, r1, #25
 8004280:	bf48      	it	mi
 8004282:	b2ad      	uxthmi	r5, r5
 8004284:	2f6f      	cmp	r7, #111	@ 0x6f
 8004286:	6033      	str	r3, [r6, #0]
 8004288:	bf14      	ite	ne
 800428a:	230a      	movne	r3, #10
 800428c:	2308      	moveq	r3, #8
 800428e:	4851      	ldr	r0, [pc, #324]	@ (80043d4 <_printf_i+0x238>)
 8004290:	2100      	movs	r1, #0
 8004292:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004296:	6866      	ldr	r6, [r4, #4]
 8004298:	2e00      	cmp	r6, #0
 800429a:	bfa8      	it	ge
 800429c:	6821      	ldrge	r1, [r4, #0]
 800429e:	60a6      	str	r6, [r4, #8]
 80042a0:	bfa4      	itt	ge
 80042a2:	f021 0104 	bicge.w	r1, r1, #4
 80042a6:	6021      	strge	r1, [r4, #0]
 80042a8:	b90d      	cbnz	r5, 80042ae <_printf_i+0x112>
 80042aa:	2e00      	cmp	r6, #0
 80042ac:	d04b      	beq.n	8004346 <_printf_i+0x1aa>
 80042ae:	4616      	mov	r6, r2
 80042b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80042b4:	fb03 5711 	mls	r7, r3, r1, r5
 80042b8:	5dc7      	ldrb	r7, [r0, r7]
 80042ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042be:	462f      	mov	r7, r5
 80042c0:	42bb      	cmp	r3, r7
 80042c2:	460d      	mov	r5, r1
 80042c4:	d9f4      	bls.n	80042b0 <_printf_i+0x114>
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d10b      	bne.n	80042e2 <_printf_i+0x146>
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	07df      	lsls	r7, r3, #31
 80042ce:	d508      	bpl.n	80042e2 <_printf_i+0x146>
 80042d0:	6923      	ldr	r3, [r4, #16]
 80042d2:	6861      	ldr	r1, [r4, #4]
 80042d4:	4299      	cmp	r1, r3
 80042d6:	bfde      	ittt	le
 80042d8:	2330      	movle	r3, #48	@ 0x30
 80042da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042e2:	1b92      	subs	r2, r2, r6
 80042e4:	6122      	str	r2, [r4, #16]
 80042e6:	464b      	mov	r3, r9
 80042e8:	4621      	mov	r1, r4
 80042ea:	4640      	mov	r0, r8
 80042ec:	f8cd a000 	str.w	sl, [sp]
 80042f0:	aa03      	add	r2, sp, #12
 80042f2:	f7ff fee1 	bl	80040b8 <_printf_common>
 80042f6:	3001      	adds	r0, #1
 80042f8:	d14a      	bne.n	8004390 <_printf_i+0x1f4>
 80042fa:	f04f 30ff 	mov.w	r0, #4294967295
 80042fe:	b004      	add	sp, #16
 8004300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	f043 0320 	orr.w	r3, r3, #32
 800430a:	6023      	str	r3, [r4, #0]
 800430c:	2778      	movs	r7, #120	@ 0x78
 800430e:	4832      	ldr	r0, [pc, #200]	@ (80043d8 <_printf_i+0x23c>)
 8004310:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	6831      	ldr	r1, [r6, #0]
 8004318:	061f      	lsls	r7, r3, #24
 800431a:	f851 5b04 	ldr.w	r5, [r1], #4
 800431e:	d402      	bmi.n	8004326 <_printf_i+0x18a>
 8004320:	065f      	lsls	r7, r3, #25
 8004322:	bf48      	it	mi
 8004324:	b2ad      	uxthmi	r5, r5
 8004326:	6031      	str	r1, [r6, #0]
 8004328:	07d9      	lsls	r1, r3, #31
 800432a:	bf44      	itt	mi
 800432c:	f043 0320 	orrmi.w	r3, r3, #32
 8004330:	6023      	strmi	r3, [r4, #0]
 8004332:	b11d      	cbz	r5, 800433c <_printf_i+0x1a0>
 8004334:	2310      	movs	r3, #16
 8004336:	e7ab      	b.n	8004290 <_printf_i+0xf4>
 8004338:	4826      	ldr	r0, [pc, #152]	@ (80043d4 <_printf_i+0x238>)
 800433a:	e7e9      	b.n	8004310 <_printf_i+0x174>
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	f023 0320 	bic.w	r3, r3, #32
 8004342:	6023      	str	r3, [r4, #0]
 8004344:	e7f6      	b.n	8004334 <_printf_i+0x198>
 8004346:	4616      	mov	r6, r2
 8004348:	e7bd      	b.n	80042c6 <_printf_i+0x12a>
 800434a:	6833      	ldr	r3, [r6, #0]
 800434c:	6825      	ldr	r5, [r4, #0]
 800434e:	1d18      	adds	r0, r3, #4
 8004350:	6961      	ldr	r1, [r4, #20]
 8004352:	6030      	str	r0, [r6, #0]
 8004354:	062e      	lsls	r6, r5, #24
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	d501      	bpl.n	800435e <_printf_i+0x1c2>
 800435a:	6019      	str	r1, [r3, #0]
 800435c:	e002      	b.n	8004364 <_printf_i+0x1c8>
 800435e:	0668      	lsls	r0, r5, #25
 8004360:	d5fb      	bpl.n	800435a <_printf_i+0x1be>
 8004362:	8019      	strh	r1, [r3, #0]
 8004364:	2300      	movs	r3, #0
 8004366:	4616      	mov	r6, r2
 8004368:	6123      	str	r3, [r4, #16]
 800436a:	e7bc      	b.n	80042e6 <_printf_i+0x14a>
 800436c:	6833      	ldr	r3, [r6, #0]
 800436e:	2100      	movs	r1, #0
 8004370:	1d1a      	adds	r2, r3, #4
 8004372:	6032      	str	r2, [r6, #0]
 8004374:	681e      	ldr	r6, [r3, #0]
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	4630      	mov	r0, r6
 800437a:	f000 f9b4 	bl	80046e6 <memchr>
 800437e:	b108      	cbz	r0, 8004384 <_printf_i+0x1e8>
 8004380:	1b80      	subs	r0, r0, r6
 8004382:	6060      	str	r0, [r4, #4]
 8004384:	6863      	ldr	r3, [r4, #4]
 8004386:	6123      	str	r3, [r4, #16]
 8004388:	2300      	movs	r3, #0
 800438a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800438e:	e7aa      	b.n	80042e6 <_printf_i+0x14a>
 8004390:	4632      	mov	r2, r6
 8004392:	4649      	mov	r1, r9
 8004394:	4640      	mov	r0, r8
 8004396:	6923      	ldr	r3, [r4, #16]
 8004398:	47d0      	blx	sl
 800439a:	3001      	adds	r0, #1
 800439c:	d0ad      	beq.n	80042fa <_printf_i+0x15e>
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	079b      	lsls	r3, r3, #30
 80043a2:	d413      	bmi.n	80043cc <_printf_i+0x230>
 80043a4:	68e0      	ldr	r0, [r4, #12]
 80043a6:	9b03      	ldr	r3, [sp, #12]
 80043a8:	4298      	cmp	r0, r3
 80043aa:	bfb8      	it	lt
 80043ac:	4618      	movlt	r0, r3
 80043ae:	e7a6      	b.n	80042fe <_printf_i+0x162>
 80043b0:	2301      	movs	r3, #1
 80043b2:	4632      	mov	r2, r6
 80043b4:	4649      	mov	r1, r9
 80043b6:	4640      	mov	r0, r8
 80043b8:	47d0      	blx	sl
 80043ba:	3001      	adds	r0, #1
 80043bc:	d09d      	beq.n	80042fa <_printf_i+0x15e>
 80043be:	3501      	adds	r5, #1
 80043c0:	68e3      	ldr	r3, [r4, #12]
 80043c2:	9903      	ldr	r1, [sp, #12]
 80043c4:	1a5b      	subs	r3, r3, r1
 80043c6:	42ab      	cmp	r3, r5
 80043c8:	dcf2      	bgt.n	80043b0 <_printf_i+0x214>
 80043ca:	e7eb      	b.n	80043a4 <_printf_i+0x208>
 80043cc:	2500      	movs	r5, #0
 80043ce:	f104 0619 	add.w	r6, r4, #25
 80043d2:	e7f5      	b.n	80043c0 <_printf_i+0x224>
 80043d4:	08006da8 	.word	0x08006da8
 80043d8:	08006db9 	.word	0x08006db9

080043dc <std>:
 80043dc:	2300      	movs	r3, #0
 80043de:	b510      	push	{r4, lr}
 80043e0:	4604      	mov	r4, r0
 80043e2:	e9c0 3300 	strd	r3, r3, [r0]
 80043e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043ea:	6083      	str	r3, [r0, #8]
 80043ec:	8181      	strh	r1, [r0, #12]
 80043ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80043f0:	81c2      	strh	r2, [r0, #14]
 80043f2:	6183      	str	r3, [r0, #24]
 80043f4:	4619      	mov	r1, r3
 80043f6:	2208      	movs	r2, #8
 80043f8:	305c      	adds	r0, #92	@ 0x5c
 80043fa:	f000 f8f4 	bl	80045e6 <memset>
 80043fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <std+0x58>)
 8004400:	6224      	str	r4, [r4, #32]
 8004402:	6263      	str	r3, [r4, #36]	@ 0x24
 8004404:	4b0c      	ldr	r3, [pc, #48]	@ (8004438 <std+0x5c>)
 8004406:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004408:	4b0c      	ldr	r3, [pc, #48]	@ (800443c <std+0x60>)
 800440a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800440c:	4b0c      	ldr	r3, [pc, #48]	@ (8004440 <std+0x64>)
 800440e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004410:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <std+0x68>)
 8004412:	429c      	cmp	r4, r3
 8004414:	d006      	beq.n	8004424 <std+0x48>
 8004416:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800441a:	4294      	cmp	r4, r2
 800441c:	d002      	beq.n	8004424 <std+0x48>
 800441e:	33d0      	adds	r3, #208	@ 0xd0
 8004420:	429c      	cmp	r4, r3
 8004422:	d105      	bne.n	8004430 <std+0x54>
 8004424:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800442c:	f000 b958 	b.w	80046e0 <__retarget_lock_init_recursive>
 8004430:	bd10      	pop	{r4, pc}
 8004432:	bf00      	nop
 8004434:	08004561 	.word	0x08004561
 8004438:	08004583 	.word	0x08004583
 800443c:	080045bb 	.word	0x080045bb
 8004440:	080045df 	.word	0x080045df
 8004444:	2000048c 	.word	0x2000048c

08004448 <stdio_exit_handler>:
 8004448:	4a02      	ldr	r2, [pc, #8]	@ (8004454 <stdio_exit_handler+0xc>)
 800444a:	4903      	ldr	r1, [pc, #12]	@ (8004458 <stdio_exit_handler+0x10>)
 800444c:	4803      	ldr	r0, [pc, #12]	@ (800445c <stdio_exit_handler+0x14>)
 800444e:	f000 b869 	b.w	8004524 <_fwalk_sglue>
 8004452:	bf00      	nop
 8004454:	20000004 	.word	0x20000004
 8004458:	08005dbd 	.word	0x08005dbd
 800445c:	20000014 	.word	0x20000014

08004460 <cleanup_stdio>:
 8004460:	6841      	ldr	r1, [r0, #4]
 8004462:	4b0c      	ldr	r3, [pc, #48]	@ (8004494 <cleanup_stdio+0x34>)
 8004464:	b510      	push	{r4, lr}
 8004466:	4299      	cmp	r1, r3
 8004468:	4604      	mov	r4, r0
 800446a:	d001      	beq.n	8004470 <cleanup_stdio+0x10>
 800446c:	f001 fca6 	bl	8005dbc <_fflush_r>
 8004470:	68a1      	ldr	r1, [r4, #8]
 8004472:	4b09      	ldr	r3, [pc, #36]	@ (8004498 <cleanup_stdio+0x38>)
 8004474:	4299      	cmp	r1, r3
 8004476:	d002      	beq.n	800447e <cleanup_stdio+0x1e>
 8004478:	4620      	mov	r0, r4
 800447a:	f001 fc9f 	bl	8005dbc <_fflush_r>
 800447e:	68e1      	ldr	r1, [r4, #12]
 8004480:	4b06      	ldr	r3, [pc, #24]	@ (800449c <cleanup_stdio+0x3c>)
 8004482:	4299      	cmp	r1, r3
 8004484:	d004      	beq.n	8004490 <cleanup_stdio+0x30>
 8004486:	4620      	mov	r0, r4
 8004488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800448c:	f001 bc96 	b.w	8005dbc <_fflush_r>
 8004490:	bd10      	pop	{r4, pc}
 8004492:	bf00      	nop
 8004494:	2000048c 	.word	0x2000048c
 8004498:	200004f4 	.word	0x200004f4
 800449c:	2000055c 	.word	0x2000055c

080044a0 <global_stdio_init.part.0>:
 80044a0:	b510      	push	{r4, lr}
 80044a2:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <global_stdio_init.part.0+0x30>)
 80044a4:	4c0b      	ldr	r4, [pc, #44]	@ (80044d4 <global_stdio_init.part.0+0x34>)
 80044a6:	4a0c      	ldr	r2, [pc, #48]	@ (80044d8 <global_stdio_init.part.0+0x38>)
 80044a8:	4620      	mov	r0, r4
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	2104      	movs	r1, #4
 80044ae:	2200      	movs	r2, #0
 80044b0:	f7ff ff94 	bl	80043dc <std>
 80044b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044b8:	2201      	movs	r2, #1
 80044ba:	2109      	movs	r1, #9
 80044bc:	f7ff ff8e 	bl	80043dc <std>
 80044c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044c4:	2202      	movs	r2, #2
 80044c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ca:	2112      	movs	r1, #18
 80044cc:	f7ff bf86 	b.w	80043dc <std>
 80044d0:	200005c4 	.word	0x200005c4
 80044d4:	2000048c 	.word	0x2000048c
 80044d8:	08004449 	.word	0x08004449

080044dc <__sfp_lock_acquire>:
 80044dc:	4801      	ldr	r0, [pc, #4]	@ (80044e4 <__sfp_lock_acquire+0x8>)
 80044de:	f000 b900 	b.w	80046e2 <__retarget_lock_acquire_recursive>
 80044e2:	bf00      	nop
 80044e4:	200005cd 	.word	0x200005cd

080044e8 <__sfp_lock_release>:
 80044e8:	4801      	ldr	r0, [pc, #4]	@ (80044f0 <__sfp_lock_release+0x8>)
 80044ea:	f000 b8fb 	b.w	80046e4 <__retarget_lock_release_recursive>
 80044ee:	bf00      	nop
 80044f0:	200005cd 	.word	0x200005cd

080044f4 <__sinit>:
 80044f4:	b510      	push	{r4, lr}
 80044f6:	4604      	mov	r4, r0
 80044f8:	f7ff fff0 	bl	80044dc <__sfp_lock_acquire>
 80044fc:	6a23      	ldr	r3, [r4, #32]
 80044fe:	b11b      	cbz	r3, 8004508 <__sinit+0x14>
 8004500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004504:	f7ff bff0 	b.w	80044e8 <__sfp_lock_release>
 8004508:	4b04      	ldr	r3, [pc, #16]	@ (800451c <__sinit+0x28>)
 800450a:	6223      	str	r3, [r4, #32]
 800450c:	4b04      	ldr	r3, [pc, #16]	@ (8004520 <__sinit+0x2c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f5      	bne.n	8004500 <__sinit+0xc>
 8004514:	f7ff ffc4 	bl	80044a0 <global_stdio_init.part.0>
 8004518:	e7f2      	b.n	8004500 <__sinit+0xc>
 800451a:	bf00      	nop
 800451c:	08004461 	.word	0x08004461
 8004520:	200005c4 	.word	0x200005c4

08004524 <_fwalk_sglue>:
 8004524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004528:	4607      	mov	r7, r0
 800452a:	4688      	mov	r8, r1
 800452c:	4614      	mov	r4, r2
 800452e:	2600      	movs	r6, #0
 8004530:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004534:	f1b9 0901 	subs.w	r9, r9, #1
 8004538:	d505      	bpl.n	8004546 <_fwalk_sglue+0x22>
 800453a:	6824      	ldr	r4, [r4, #0]
 800453c:	2c00      	cmp	r4, #0
 800453e:	d1f7      	bne.n	8004530 <_fwalk_sglue+0xc>
 8004540:	4630      	mov	r0, r6
 8004542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004546:	89ab      	ldrh	r3, [r5, #12]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d907      	bls.n	800455c <_fwalk_sglue+0x38>
 800454c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004550:	3301      	adds	r3, #1
 8004552:	d003      	beq.n	800455c <_fwalk_sglue+0x38>
 8004554:	4629      	mov	r1, r5
 8004556:	4638      	mov	r0, r7
 8004558:	47c0      	blx	r8
 800455a:	4306      	orrs	r6, r0
 800455c:	3568      	adds	r5, #104	@ 0x68
 800455e:	e7e9      	b.n	8004534 <_fwalk_sglue+0x10>

08004560 <__sread>:
 8004560:	b510      	push	{r4, lr}
 8004562:	460c      	mov	r4, r1
 8004564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004568:	f000 f86c 	bl	8004644 <_read_r>
 800456c:	2800      	cmp	r0, #0
 800456e:	bfab      	itete	ge
 8004570:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004572:	89a3      	ldrhlt	r3, [r4, #12]
 8004574:	181b      	addge	r3, r3, r0
 8004576:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800457a:	bfac      	ite	ge
 800457c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800457e:	81a3      	strhlt	r3, [r4, #12]
 8004580:	bd10      	pop	{r4, pc}

08004582 <__swrite>:
 8004582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004586:	461f      	mov	r7, r3
 8004588:	898b      	ldrh	r3, [r1, #12]
 800458a:	4605      	mov	r5, r0
 800458c:	05db      	lsls	r3, r3, #23
 800458e:	460c      	mov	r4, r1
 8004590:	4616      	mov	r6, r2
 8004592:	d505      	bpl.n	80045a0 <__swrite+0x1e>
 8004594:	2302      	movs	r3, #2
 8004596:	2200      	movs	r2, #0
 8004598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459c:	f000 f840 	bl	8004620 <_lseek_r>
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	4632      	mov	r2, r6
 80045a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045a8:	81a3      	strh	r3, [r4, #12]
 80045aa:	4628      	mov	r0, r5
 80045ac:	463b      	mov	r3, r7
 80045ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b6:	f000 b857 	b.w	8004668 <_write_r>

080045ba <__sseek>:
 80045ba:	b510      	push	{r4, lr}
 80045bc:	460c      	mov	r4, r1
 80045be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c2:	f000 f82d 	bl	8004620 <_lseek_r>
 80045c6:	1c43      	adds	r3, r0, #1
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	bf15      	itete	ne
 80045cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045d6:	81a3      	strheq	r3, [r4, #12]
 80045d8:	bf18      	it	ne
 80045da:	81a3      	strhne	r3, [r4, #12]
 80045dc:	bd10      	pop	{r4, pc}

080045de <__sclose>:
 80045de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e2:	f000 b80d 	b.w	8004600 <_close_r>

080045e6 <memset>:
 80045e6:	4603      	mov	r3, r0
 80045e8:	4402      	add	r2, r0
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d100      	bne.n	80045f0 <memset+0xa>
 80045ee:	4770      	bx	lr
 80045f0:	f803 1b01 	strb.w	r1, [r3], #1
 80045f4:	e7f9      	b.n	80045ea <memset+0x4>
	...

080045f8 <_localeconv_r>:
 80045f8:	4800      	ldr	r0, [pc, #0]	@ (80045fc <_localeconv_r+0x4>)
 80045fa:	4770      	bx	lr
 80045fc:	20000150 	.word	0x20000150

08004600 <_close_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	2300      	movs	r3, #0
 8004604:	4d05      	ldr	r5, [pc, #20]	@ (800461c <_close_r+0x1c>)
 8004606:	4604      	mov	r4, r0
 8004608:	4608      	mov	r0, r1
 800460a:	602b      	str	r3, [r5, #0]
 800460c:	f7fd f80a 	bl	8001624 <_close>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d102      	bne.n	800461a <_close_r+0x1a>
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	b103      	cbz	r3, 800461a <_close_r+0x1a>
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	bd38      	pop	{r3, r4, r5, pc}
 800461c:	200005c8 	.word	0x200005c8

08004620 <_lseek_r>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	4604      	mov	r4, r0
 8004624:	4608      	mov	r0, r1
 8004626:	4611      	mov	r1, r2
 8004628:	2200      	movs	r2, #0
 800462a:	4d05      	ldr	r5, [pc, #20]	@ (8004640 <_lseek_r+0x20>)
 800462c:	602a      	str	r2, [r5, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	f7fd f81c 	bl	800166c <_lseek>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d102      	bne.n	800463e <_lseek_r+0x1e>
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	b103      	cbz	r3, 800463e <_lseek_r+0x1e>
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	bd38      	pop	{r3, r4, r5, pc}
 8004640:	200005c8 	.word	0x200005c8

08004644 <_read_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4604      	mov	r4, r0
 8004648:	4608      	mov	r0, r1
 800464a:	4611      	mov	r1, r2
 800464c:	2200      	movs	r2, #0
 800464e:	4d05      	ldr	r5, [pc, #20]	@ (8004664 <_read_r+0x20>)
 8004650:	602a      	str	r2, [r5, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	f7fc ffad 	bl	80015b2 <_read>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d102      	bne.n	8004662 <_read_r+0x1e>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	b103      	cbz	r3, 8004662 <_read_r+0x1e>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	200005c8 	.word	0x200005c8

08004668 <_write_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4604      	mov	r4, r0
 800466c:	4608      	mov	r0, r1
 800466e:	4611      	mov	r1, r2
 8004670:	2200      	movs	r2, #0
 8004672:	4d05      	ldr	r5, [pc, #20]	@ (8004688 <_write_r+0x20>)
 8004674:	602a      	str	r2, [r5, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	f7fc ffb8 	bl	80015ec <_write>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_write_r+0x1e>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	b103      	cbz	r3, 8004686 <_write_r+0x1e>
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	200005c8 	.word	0x200005c8

0800468c <__errno>:
 800468c:	4b01      	ldr	r3, [pc, #4]	@ (8004694 <__errno+0x8>)
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000010 	.word	0x20000010

08004698 <__libc_init_array>:
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	2600      	movs	r6, #0
 800469c:	4d0c      	ldr	r5, [pc, #48]	@ (80046d0 <__libc_init_array+0x38>)
 800469e:	4c0d      	ldr	r4, [pc, #52]	@ (80046d4 <__libc_init_array+0x3c>)
 80046a0:	1b64      	subs	r4, r4, r5
 80046a2:	10a4      	asrs	r4, r4, #2
 80046a4:	42a6      	cmp	r6, r4
 80046a6:	d109      	bne.n	80046bc <__libc_init_array+0x24>
 80046a8:	f002 fb58 	bl	8006d5c <_init>
 80046ac:	2600      	movs	r6, #0
 80046ae:	4d0a      	ldr	r5, [pc, #40]	@ (80046d8 <__libc_init_array+0x40>)
 80046b0:	4c0a      	ldr	r4, [pc, #40]	@ (80046dc <__libc_init_array+0x44>)
 80046b2:	1b64      	subs	r4, r4, r5
 80046b4:	10a4      	asrs	r4, r4, #2
 80046b6:	42a6      	cmp	r6, r4
 80046b8:	d105      	bne.n	80046c6 <__libc_init_array+0x2e>
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
 80046bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c0:	4798      	blx	r3
 80046c2:	3601      	adds	r6, #1
 80046c4:	e7ee      	b.n	80046a4 <__libc_init_array+0xc>
 80046c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ca:	4798      	blx	r3
 80046cc:	3601      	adds	r6, #1
 80046ce:	e7f2      	b.n	80046b6 <__libc_init_array+0x1e>
 80046d0:	08007128 	.word	0x08007128
 80046d4:	08007128 	.word	0x08007128
 80046d8:	08007128 	.word	0x08007128
 80046dc:	0800712c 	.word	0x0800712c

080046e0 <__retarget_lock_init_recursive>:
 80046e0:	4770      	bx	lr

080046e2 <__retarget_lock_acquire_recursive>:
 80046e2:	4770      	bx	lr

080046e4 <__retarget_lock_release_recursive>:
 80046e4:	4770      	bx	lr

080046e6 <memchr>:
 80046e6:	4603      	mov	r3, r0
 80046e8:	b510      	push	{r4, lr}
 80046ea:	b2c9      	uxtb	r1, r1
 80046ec:	4402      	add	r2, r0
 80046ee:	4293      	cmp	r3, r2
 80046f0:	4618      	mov	r0, r3
 80046f2:	d101      	bne.n	80046f8 <memchr+0x12>
 80046f4:	2000      	movs	r0, #0
 80046f6:	e003      	b.n	8004700 <memchr+0x1a>
 80046f8:	7804      	ldrb	r4, [r0, #0]
 80046fa:	3301      	adds	r3, #1
 80046fc:	428c      	cmp	r4, r1
 80046fe:	d1f6      	bne.n	80046ee <memchr+0x8>
 8004700:	bd10      	pop	{r4, pc}

08004702 <memcpy>:
 8004702:	440a      	add	r2, r1
 8004704:	4291      	cmp	r1, r2
 8004706:	f100 33ff 	add.w	r3, r0, #4294967295
 800470a:	d100      	bne.n	800470e <memcpy+0xc>
 800470c:	4770      	bx	lr
 800470e:	b510      	push	{r4, lr}
 8004710:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004714:	4291      	cmp	r1, r2
 8004716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800471a:	d1f9      	bne.n	8004710 <memcpy+0xe>
 800471c:	bd10      	pop	{r4, pc}

0800471e <quorem>:
 800471e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004722:	6903      	ldr	r3, [r0, #16]
 8004724:	690c      	ldr	r4, [r1, #16]
 8004726:	4607      	mov	r7, r0
 8004728:	42a3      	cmp	r3, r4
 800472a:	db7e      	blt.n	800482a <quorem+0x10c>
 800472c:	3c01      	subs	r4, #1
 800472e:	00a3      	lsls	r3, r4, #2
 8004730:	f100 0514 	add.w	r5, r0, #20
 8004734:	f101 0814 	add.w	r8, r1, #20
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004744:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004748:	3301      	adds	r3, #1
 800474a:	429a      	cmp	r2, r3
 800474c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004750:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004754:	d32e      	bcc.n	80047b4 <quorem+0x96>
 8004756:	f04f 0a00 	mov.w	sl, #0
 800475a:	46c4      	mov	ip, r8
 800475c:	46ae      	mov	lr, r5
 800475e:	46d3      	mov	fp, sl
 8004760:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004764:	b298      	uxth	r0, r3
 8004766:	fb06 a000 	mla	r0, r6, r0, sl
 800476a:	0c1b      	lsrs	r3, r3, #16
 800476c:	0c02      	lsrs	r2, r0, #16
 800476e:	fb06 2303 	mla	r3, r6, r3, r2
 8004772:	f8de 2000 	ldr.w	r2, [lr]
 8004776:	b280      	uxth	r0, r0
 8004778:	b292      	uxth	r2, r2
 800477a:	1a12      	subs	r2, r2, r0
 800477c:	445a      	add	r2, fp
 800477e:	f8de 0000 	ldr.w	r0, [lr]
 8004782:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004786:	b29b      	uxth	r3, r3
 8004788:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800478c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004790:	b292      	uxth	r2, r2
 8004792:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004796:	45e1      	cmp	r9, ip
 8004798:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800479c:	f84e 2b04 	str.w	r2, [lr], #4
 80047a0:	d2de      	bcs.n	8004760 <quorem+0x42>
 80047a2:	9b00      	ldr	r3, [sp, #0]
 80047a4:	58eb      	ldr	r3, [r5, r3]
 80047a6:	b92b      	cbnz	r3, 80047b4 <quorem+0x96>
 80047a8:	9b01      	ldr	r3, [sp, #4]
 80047aa:	3b04      	subs	r3, #4
 80047ac:	429d      	cmp	r5, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	d32f      	bcc.n	8004812 <quorem+0xf4>
 80047b2:	613c      	str	r4, [r7, #16]
 80047b4:	4638      	mov	r0, r7
 80047b6:	f001 f979 	bl	8005aac <__mcmp>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	db25      	blt.n	800480a <quorem+0xec>
 80047be:	4629      	mov	r1, r5
 80047c0:	2000      	movs	r0, #0
 80047c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80047c6:	f8d1 c000 	ldr.w	ip, [r1]
 80047ca:	fa1f fe82 	uxth.w	lr, r2
 80047ce:	fa1f f38c 	uxth.w	r3, ip
 80047d2:	eba3 030e 	sub.w	r3, r3, lr
 80047d6:	4403      	add	r3, r0
 80047d8:	0c12      	lsrs	r2, r2, #16
 80047da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80047de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047e8:	45c1      	cmp	r9, r8
 80047ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80047ee:	f841 3b04 	str.w	r3, [r1], #4
 80047f2:	d2e6      	bcs.n	80047c2 <quorem+0xa4>
 80047f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047fc:	b922      	cbnz	r2, 8004808 <quorem+0xea>
 80047fe:	3b04      	subs	r3, #4
 8004800:	429d      	cmp	r5, r3
 8004802:	461a      	mov	r2, r3
 8004804:	d30b      	bcc.n	800481e <quorem+0x100>
 8004806:	613c      	str	r4, [r7, #16]
 8004808:	3601      	adds	r6, #1
 800480a:	4630      	mov	r0, r6
 800480c:	b003      	add	sp, #12
 800480e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	3b04      	subs	r3, #4
 8004816:	2a00      	cmp	r2, #0
 8004818:	d1cb      	bne.n	80047b2 <quorem+0x94>
 800481a:	3c01      	subs	r4, #1
 800481c:	e7c6      	b.n	80047ac <quorem+0x8e>
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	3b04      	subs	r3, #4
 8004822:	2a00      	cmp	r2, #0
 8004824:	d1ef      	bne.n	8004806 <quorem+0xe8>
 8004826:	3c01      	subs	r4, #1
 8004828:	e7ea      	b.n	8004800 <quorem+0xe2>
 800482a:	2000      	movs	r0, #0
 800482c:	e7ee      	b.n	800480c <quorem+0xee>
	...

08004830 <_dtoa_r>:
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	4614      	mov	r4, r2
 8004836:	461d      	mov	r5, r3
 8004838:	69c7      	ldr	r7, [r0, #28]
 800483a:	b097      	sub	sp, #92	@ 0x5c
 800483c:	4683      	mov	fp, r0
 800483e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004842:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004844:	b97f      	cbnz	r7, 8004866 <_dtoa_r+0x36>
 8004846:	2010      	movs	r0, #16
 8004848:	f000 fe02 	bl	8005450 <malloc>
 800484c:	4602      	mov	r2, r0
 800484e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004852:	b920      	cbnz	r0, 800485e <_dtoa_r+0x2e>
 8004854:	21ef      	movs	r1, #239	@ 0xef
 8004856:	4ba8      	ldr	r3, [pc, #672]	@ (8004af8 <_dtoa_r+0x2c8>)
 8004858:	48a8      	ldr	r0, [pc, #672]	@ (8004afc <_dtoa_r+0x2cc>)
 800485a:	f001 fae7 	bl	8005e2c <__assert_func>
 800485e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004862:	6007      	str	r7, [r0, #0]
 8004864:	60c7      	str	r7, [r0, #12]
 8004866:	f8db 301c 	ldr.w	r3, [fp, #28]
 800486a:	6819      	ldr	r1, [r3, #0]
 800486c:	b159      	cbz	r1, 8004886 <_dtoa_r+0x56>
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	2301      	movs	r3, #1
 8004872:	4093      	lsls	r3, r2
 8004874:	604a      	str	r2, [r1, #4]
 8004876:	608b      	str	r3, [r1, #8]
 8004878:	4658      	mov	r0, fp
 800487a:	f000 fedf 	bl	800563c <_Bfree>
 800487e:	2200      	movs	r2, #0
 8004880:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	1e2b      	subs	r3, r5, #0
 8004888:	bfaf      	iteee	ge
 800488a:	2300      	movge	r3, #0
 800488c:	2201      	movlt	r2, #1
 800488e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004892:	9303      	strlt	r3, [sp, #12]
 8004894:	bfa8      	it	ge
 8004896:	6033      	strge	r3, [r6, #0]
 8004898:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800489c:	4b98      	ldr	r3, [pc, #608]	@ (8004b00 <_dtoa_r+0x2d0>)
 800489e:	bfb8      	it	lt
 80048a0:	6032      	strlt	r2, [r6, #0]
 80048a2:	ea33 0308 	bics.w	r3, r3, r8
 80048a6:	d112      	bne.n	80048ce <_dtoa_r+0x9e>
 80048a8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80048ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80048b4:	4323      	orrs	r3, r4
 80048b6:	f000 8550 	beq.w	800535a <_dtoa_r+0xb2a>
 80048ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80048bc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004b04 <_dtoa_r+0x2d4>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8552 	beq.w	800536a <_dtoa_r+0xb3a>
 80048c6:	f10a 0303 	add.w	r3, sl, #3
 80048ca:	f000 bd4c 	b.w	8005366 <_dtoa_r+0xb36>
 80048ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80048d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048da:	2200      	movs	r2, #0
 80048dc:	2300      	movs	r3, #0
 80048de:	f7fc f873 	bl	80009c8 <__aeabi_dcmpeq>
 80048e2:	4607      	mov	r7, r0
 80048e4:	b158      	cbz	r0, 80048fe <_dtoa_r+0xce>
 80048e6:	2301      	movs	r3, #1
 80048e8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80048ee:	b113      	cbz	r3, 80048f6 <_dtoa_r+0xc6>
 80048f0:	4b85      	ldr	r3, [pc, #532]	@ (8004b08 <_dtoa_r+0x2d8>)
 80048f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004b0c <_dtoa_r+0x2dc>
 80048fa:	f000 bd36 	b.w	800536a <_dtoa_r+0xb3a>
 80048fe:	ab14      	add	r3, sp, #80	@ 0x50
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	ab15      	add	r3, sp, #84	@ 0x54
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	4658      	mov	r0, fp
 8004908:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800490c:	f001 f97e 	bl	8005c0c <__d2b>
 8004910:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004914:	4681      	mov	r9, r0
 8004916:	2e00      	cmp	r6, #0
 8004918:	d077      	beq.n	8004a0a <_dtoa_r+0x1da>
 800491a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800491e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004920:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004928:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800492c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004930:	9712      	str	r7, [sp, #72]	@ 0x48
 8004932:	4619      	mov	r1, r3
 8004934:	2200      	movs	r2, #0
 8004936:	4b76      	ldr	r3, [pc, #472]	@ (8004b10 <_dtoa_r+0x2e0>)
 8004938:	f7fb fc26 	bl	8000188 <__aeabi_dsub>
 800493c:	a368      	add	r3, pc, #416	@ (adr r3, 8004ae0 <_dtoa_r+0x2b0>)
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	f7fb fdd9 	bl	80004f8 <__aeabi_dmul>
 8004946:	a368      	add	r3, pc, #416	@ (adr r3, 8004ae8 <_dtoa_r+0x2b8>)
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	f7fb fc1e 	bl	800018c <__adddf3>
 8004950:	4604      	mov	r4, r0
 8004952:	4630      	mov	r0, r6
 8004954:	460d      	mov	r5, r1
 8004956:	f7fb fd65 	bl	8000424 <__aeabi_i2d>
 800495a:	a365      	add	r3, pc, #404	@ (adr r3, 8004af0 <_dtoa_r+0x2c0>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f7fb fdca 	bl	80004f8 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4620      	mov	r0, r4
 800496a:	4629      	mov	r1, r5
 800496c:	f7fb fc0e 	bl	800018c <__adddf3>
 8004970:	4604      	mov	r4, r0
 8004972:	460d      	mov	r5, r1
 8004974:	f7fc f870 	bl	8000a58 <__aeabi_d2iz>
 8004978:	2200      	movs	r2, #0
 800497a:	4607      	mov	r7, r0
 800497c:	2300      	movs	r3, #0
 800497e:	4620      	mov	r0, r4
 8004980:	4629      	mov	r1, r5
 8004982:	f7fc f82b 	bl	80009dc <__aeabi_dcmplt>
 8004986:	b140      	cbz	r0, 800499a <_dtoa_r+0x16a>
 8004988:	4638      	mov	r0, r7
 800498a:	f7fb fd4b 	bl	8000424 <__aeabi_i2d>
 800498e:	4622      	mov	r2, r4
 8004990:	462b      	mov	r3, r5
 8004992:	f7fc f819 	bl	80009c8 <__aeabi_dcmpeq>
 8004996:	b900      	cbnz	r0, 800499a <_dtoa_r+0x16a>
 8004998:	3f01      	subs	r7, #1
 800499a:	2f16      	cmp	r7, #22
 800499c:	d853      	bhi.n	8004a46 <_dtoa_r+0x216>
 800499e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b14 <_dtoa_r+0x2e4>)
 80049a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	f7fc f816 	bl	80009dc <__aeabi_dcmplt>
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d04a      	beq.n	8004a4a <_dtoa_r+0x21a>
 80049b4:	2300      	movs	r3, #0
 80049b6:	3f01      	subs	r7, #1
 80049b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80049ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80049bc:	1b9b      	subs	r3, r3, r6
 80049be:	1e5a      	subs	r2, r3, #1
 80049c0:	bf46      	itte	mi
 80049c2:	f1c3 0801 	rsbmi	r8, r3, #1
 80049c6:	2300      	movmi	r3, #0
 80049c8:	f04f 0800 	movpl.w	r8, #0
 80049cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80049ce:	bf48      	it	mi
 80049d0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80049d2:	2f00      	cmp	r7, #0
 80049d4:	db3b      	blt.n	8004a4e <_dtoa_r+0x21e>
 80049d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049d8:	970e      	str	r7, [sp, #56]	@ 0x38
 80049da:	443b      	add	r3, r7
 80049dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80049de:	2300      	movs	r3, #0
 80049e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80049e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049e4:	2b09      	cmp	r3, #9
 80049e6:	d866      	bhi.n	8004ab6 <_dtoa_r+0x286>
 80049e8:	2b05      	cmp	r3, #5
 80049ea:	bfc4      	itt	gt
 80049ec:	3b04      	subgt	r3, #4
 80049ee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80049f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049f2:	bfc8      	it	gt
 80049f4:	2400      	movgt	r4, #0
 80049f6:	f1a3 0302 	sub.w	r3, r3, #2
 80049fa:	bfd8      	it	le
 80049fc:	2401      	movle	r4, #1
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d864      	bhi.n	8004acc <_dtoa_r+0x29c>
 8004a02:	e8df f003 	tbb	[pc, r3]
 8004a06:	382b      	.short	0x382b
 8004a08:	5636      	.short	0x5636
 8004a0a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004a0e:	441e      	add	r6, r3
 8004a10:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	bfc1      	itttt	gt
 8004a18:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004a1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004a20:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004a24:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004a28:	bfd6      	itet	le
 8004a2a:	f1c3 0320 	rsble	r3, r3, #32
 8004a2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004a32:	fa04 f003 	lslle.w	r0, r4, r3
 8004a36:	f7fb fce5 	bl	8000404 <__aeabi_ui2d>
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004a40:	3e01      	subs	r6, #1
 8004a42:	9212      	str	r2, [sp, #72]	@ 0x48
 8004a44:	e775      	b.n	8004932 <_dtoa_r+0x102>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e7b6      	b.n	80049b8 <_dtoa_r+0x188>
 8004a4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004a4c:	e7b5      	b.n	80049ba <_dtoa_r+0x18a>
 8004a4e:	427b      	negs	r3, r7
 8004a50:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a52:	2300      	movs	r3, #0
 8004a54:	eba8 0807 	sub.w	r8, r8, r7
 8004a58:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a5a:	e7c2      	b.n	80049e2 <_dtoa_r+0x1b2>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	dc35      	bgt.n	8004ad2 <_dtoa_r+0x2a2>
 8004a66:	2301      	movs	r3, #1
 8004a68:	461a      	mov	r2, r3
 8004a6a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a6e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004a70:	e00b      	b.n	8004a8a <_dtoa_r+0x25a>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e7f3      	b.n	8004a5e <_dtoa_r+0x22e>
 8004a76:	2300      	movs	r3, #0
 8004a78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a7c:	18fb      	adds	r3, r7, r3
 8004a7e:	9308      	str	r3, [sp, #32]
 8004a80:	3301      	adds	r3, #1
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	9307      	str	r3, [sp, #28]
 8004a86:	bfb8      	it	lt
 8004a88:	2301      	movlt	r3, #1
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004a92:	f102 0514 	add.w	r5, r2, #20
 8004a96:	429d      	cmp	r5, r3
 8004a98:	d91f      	bls.n	8004ada <_dtoa_r+0x2aa>
 8004a9a:	6041      	str	r1, [r0, #4]
 8004a9c:	4658      	mov	r0, fp
 8004a9e:	f000 fd8d 	bl	80055bc <_Balloc>
 8004aa2:	4682      	mov	sl, r0
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d139      	bne.n	8004b1c <_dtoa_r+0x2ec>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	f240 11af 	movw	r1, #431	@ 0x1af
 8004aae:	4b1a      	ldr	r3, [pc, #104]	@ (8004b18 <_dtoa_r+0x2e8>)
 8004ab0:	e6d2      	b.n	8004858 <_dtoa_r+0x28>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e7e0      	b.n	8004a78 <_dtoa_r+0x248>
 8004ab6:	2401      	movs	r4, #1
 8004ab8:	2300      	movs	r3, #0
 8004aba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004abc:	9320      	str	r3, [sp, #128]	@ 0x80
 8004abe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ac8:	2312      	movs	r3, #18
 8004aca:	e7d0      	b.n	8004a6e <_dtoa_r+0x23e>
 8004acc:	2301      	movs	r3, #1
 8004ace:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ad0:	e7f5      	b.n	8004abe <_dtoa_r+0x28e>
 8004ad2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ad4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ad8:	e7d7      	b.n	8004a8a <_dtoa_r+0x25a>
 8004ada:	3101      	adds	r1, #1
 8004adc:	0052      	lsls	r2, r2, #1
 8004ade:	e7d8      	b.n	8004a92 <_dtoa_r+0x262>
 8004ae0:	636f4361 	.word	0x636f4361
 8004ae4:	3fd287a7 	.word	0x3fd287a7
 8004ae8:	8b60c8b3 	.word	0x8b60c8b3
 8004aec:	3fc68a28 	.word	0x3fc68a28
 8004af0:	509f79fb 	.word	0x509f79fb
 8004af4:	3fd34413 	.word	0x3fd34413
 8004af8:	08006dd7 	.word	0x08006dd7
 8004afc:	08006dee 	.word	0x08006dee
 8004b00:	7ff00000 	.word	0x7ff00000
 8004b04:	08006dd3 	.word	0x08006dd3
 8004b08:	08006da7 	.word	0x08006da7
 8004b0c:	08006da6 	.word	0x08006da6
 8004b10:	3ff80000 	.word	0x3ff80000
 8004b14:	08006ee8 	.word	0x08006ee8
 8004b18:	08006e46 	.word	0x08006e46
 8004b1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b20:	6018      	str	r0, [r3, #0]
 8004b22:	9b07      	ldr	r3, [sp, #28]
 8004b24:	2b0e      	cmp	r3, #14
 8004b26:	f200 80a4 	bhi.w	8004c72 <_dtoa_r+0x442>
 8004b2a:	2c00      	cmp	r4, #0
 8004b2c:	f000 80a1 	beq.w	8004c72 <_dtoa_r+0x442>
 8004b30:	2f00      	cmp	r7, #0
 8004b32:	dd33      	ble.n	8004b9c <_dtoa_r+0x36c>
 8004b34:	4b86      	ldr	r3, [pc, #536]	@ (8004d50 <_dtoa_r+0x520>)
 8004b36:	f007 020f 	and.w	r2, r7, #15
 8004b3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b3e:	05f8      	lsls	r0, r7, #23
 8004b40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004b4c:	d516      	bpl.n	8004b7c <_dtoa_r+0x34c>
 8004b4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b52:	4b80      	ldr	r3, [pc, #512]	@ (8004d54 <_dtoa_r+0x524>)
 8004b54:	2603      	movs	r6, #3
 8004b56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b5a:	f7fb fdf7 	bl	800074c <__aeabi_ddiv>
 8004b5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b62:	f004 040f 	and.w	r4, r4, #15
 8004b66:	4d7b      	ldr	r5, [pc, #492]	@ (8004d54 <_dtoa_r+0x524>)
 8004b68:	b954      	cbnz	r4, 8004b80 <_dtoa_r+0x350>
 8004b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b72:	f7fb fdeb 	bl	800074c <__aeabi_ddiv>
 8004b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b7a:	e028      	b.n	8004bce <_dtoa_r+0x39e>
 8004b7c:	2602      	movs	r6, #2
 8004b7e:	e7f2      	b.n	8004b66 <_dtoa_r+0x336>
 8004b80:	07e1      	lsls	r1, r4, #31
 8004b82:	d508      	bpl.n	8004b96 <_dtoa_r+0x366>
 8004b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b8c:	f7fb fcb4 	bl	80004f8 <__aeabi_dmul>
 8004b90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b94:	3601      	adds	r6, #1
 8004b96:	1064      	asrs	r4, r4, #1
 8004b98:	3508      	adds	r5, #8
 8004b9a:	e7e5      	b.n	8004b68 <_dtoa_r+0x338>
 8004b9c:	f000 80d2 	beq.w	8004d44 <_dtoa_r+0x514>
 8004ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ba4:	427c      	negs	r4, r7
 8004ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d50 <_dtoa_r+0x520>)
 8004ba8:	f004 020f 	and.w	r2, r4, #15
 8004bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	f7fb fca0 	bl	80004f8 <__aeabi_dmul>
 8004bb8:	2602      	movs	r6, #2
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bc0:	4d64      	ldr	r5, [pc, #400]	@ (8004d54 <_dtoa_r+0x524>)
 8004bc2:	1124      	asrs	r4, r4, #4
 8004bc4:	2c00      	cmp	r4, #0
 8004bc6:	f040 80b2 	bne.w	8004d2e <_dtoa_r+0x4fe>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1d3      	bne.n	8004b76 <_dtoa_r+0x346>
 8004bce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004bd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80b7 	beq.w	8004d48 <_dtoa_r+0x518>
 8004bda:	2200      	movs	r2, #0
 8004bdc:	4620      	mov	r0, r4
 8004bde:	4629      	mov	r1, r5
 8004be0:	4b5d      	ldr	r3, [pc, #372]	@ (8004d58 <_dtoa_r+0x528>)
 8004be2:	f7fb fefb 	bl	80009dc <__aeabi_dcmplt>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	f000 80ae 	beq.w	8004d48 <_dtoa_r+0x518>
 8004bec:	9b07      	ldr	r3, [sp, #28]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80aa 	beq.w	8004d48 <_dtoa_r+0x518>
 8004bf4:	9b08      	ldr	r3, [sp, #32]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	dd37      	ble.n	8004c6a <_dtoa_r+0x43a>
 8004bfa:	1e7b      	subs	r3, r7, #1
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	2200      	movs	r2, #0
 8004c02:	4629      	mov	r1, r5
 8004c04:	4b55      	ldr	r3, [pc, #340]	@ (8004d5c <_dtoa_r+0x52c>)
 8004c06:	f7fb fc77 	bl	80004f8 <__aeabi_dmul>
 8004c0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c0e:	9c08      	ldr	r4, [sp, #32]
 8004c10:	3601      	adds	r6, #1
 8004c12:	4630      	mov	r0, r6
 8004c14:	f7fb fc06 	bl	8000424 <__aeabi_i2d>
 8004c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c1c:	f7fb fc6c 	bl	80004f8 <__aeabi_dmul>
 8004c20:	2200      	movs	r2, #0
 8004c22:	4b4f      	ldr	r3, [pc, #316]	@ (8004d60 <_dtoa_r+0x530>)
 8004c24:	f7fb fab2 	bl	800018c <__adddf3>
 8004c28:	4605      	mov	r5, r0
 8004c2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004c2e:	2c00      	cmp	r4, #0
 8004c30:	f040 809a 	bne.w	8004d68 <_dtoa_r+0x538>
 8004c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d64 <_dtoa_r+0x534>)
 8004c3c:	f7fb faa4 	bl	8000188 <__aeabi_dsub>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c48:	462a      	mov	r2, r5
 8004c4a:	4633      	mov	r3, r6
 8004c4c:	f7fb fee4 	bl	8000a18 <__aeabi_dcmpgt>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	f040 828e 	bne.w	8005172 <_dtoa_r+0x942>
 8004c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c5a:	462a      	mov	r2, r5
 8004c5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004c60:	f7fb febc 	bl	80009dc <__aeabi_dcmplt>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	f040 8127 	bne.w	8004eb8 <_dtoa_r+0x688>
 8004c6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004c6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004c72:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f2c0 8163 	blt.w	8004f40 <_dtoa_r+0x710>
 8004c7a:	2f0e      	cmp	r7, #14
 8004c7c:	f300 8160 	bgt.w	8004f40 <_dtoa_r+0x710>
 8004c80:	4b33      	ldr	r3, [pc, #204]	@ (8004d50 <_dtoa_r+0x520>)
 8004c82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	da03      	bge.n	8004c9c <_dtoa_r+0x46c>
 8004c94:	9b07      	ldr	r3, [sp, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f340 8100 	ble.w	8004e9c <_dtoa_r+0x66c>
 8004c9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004ca0:	4656      	mov	r6, sl
 8004ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	4629      	mov	r1, r5
 8004caa:	f7fb fd4f 	bl	800074c <__aeabi_ddiv>
 8004cae:	f7fb fed3 	bl	8000a58 <__aeabi_d2iz>
 8004cb2:	4680      	mov	r8, r0
 8004cb4:	f7fb fbb6 	bl	8000424 <__aeabi_i2d>
 8004cb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cbc:	f7fb fc1c 	bl	80004f8 <__aeabi_dmul>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	f7fb fa5e 	bl	8000188 <__aeabi_dsub>
 8004ccc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004cd0:	9d07      	ldr	r5, [sp, #28]
 8004cd2:	f806 4b01 	strb.w	r4, [r6], #1
 8004cd6:	eba6 040a 	sub.w	r4, r6, sl
 8004cda:	42a5      	cmp	r5, r4
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	f040 8116 	bne.w	8004f10 <_dtoa_r+0x6e0>
 8004ce4:	f7fb fa52 	bl	800018c <__adddf3>
 8004ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cec:	4604      	mov	r4, r0
 8004cee:	460d      	mov	r5, r1
 8004cf0:	f7fb fe92 	bl	8000a18 <__aeabi_dcmpgt>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	f040 80f8 	bne.w	8004eea <_dtoa_r+0x6ba>
 8004cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cfe:	4620      	mov	r0, r4
 8004d00:	4629      	mov	r1, r5
 8004d02:	f7fb fe61 	bl	80009c8 <__aeabi_dcmpeq>
 8004d06:	b118      	cbz	r0, 8004d10 <_dtoa_r+0x4e0>
 8004d08:	f018 0f01 	tst.w	r8, #1
 8004d0c:	f040 80ed 	bne.w	8004eea <_dtoa_r+0x6ba>
 8004d10:	4649      	mov	r1, r9
 8004d12:	4658      	mov	r0, fp
 8004d14:	f000 fc92 	bl	800563c <_Bfree>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	7033      	strb	r3, [r6, #0]
 8004d1c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004d1e:	3701      	adds	r7, #1
 8004d20:	601f      	str	r7, [r3, #0]
 8004d22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8320 	beq.w	800536a <_dtoa_r+0xb3a>
 8004d2a:	601e      	str	r6, [r3, #0]
 8004d2c:	e31d      	b.n	800536a <_dtoa_r+0xb3a>
 8004d2e:	07e2      	lsls	r2, r4, #31
 8004d30:	d505      	bpl.n	8004d3e <_dtoa_r+0x50e>
 8004d32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d36:	f7fb fbdf 	bl	80004f8 <__aeabi_dmul>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	3601      	adds	r6, #1
 8004d3e:	1064      	asrs	r4, r4, #1
 8004d40:	3508      	adds	r5, #8
 8004d42:	e73f      	b.n	8004bc4 <_dtoa_r+0x394>
 8004d44:	2602      	movs	r6, #2
 8004d46:	e742      	b.n	8004bce <_dtoa_r+0x39e>
 8004d48:	9c07      	ldr	r4, [sp, #28]
 8004d4a:	9704      	str	r7, [sp, #16]
 8004d4c:	e761      	b.n	8004c12 <_dtoa_r+0x3e2>
 8004d4e:	bf00      	nop
 8004d50:	08006ee8 	.word	0x08006ee8
 8004d54:	08006ec0 	.word	0x08006ec0
 8004d58:	3ff00000 	.word	0x3ff00000
 8004d5c:	40240000 	.word	0x40240000
 8004d60:	401c0000 	.word	0x401c0000
 8004d64:	40140000 	.word	0x40140000
 8004d68:	4b70      	ldr	r3, [pc, #448]	@ (8004f2c <_dtoa_r+0x6fc>)
 8004d6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d74:	4454      	add	r4, sl
 8004d76:	2900      	cmp	r1, #0
 8004d78:	d045      	beq.n	8004e06 <_dtoa_r+0x5d6>
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	496c      	ldr	r1, [pc, #432]	@ (8004f30 <_dtoa_r+0x700>)
 8004d7e:	f7fb fce5 	bl	800074c <__aeabi_ddiv>
 8004d82:	4633      	mov	r3, r6
 8004d84:	462a      	mov	r2, r5
 8004d86:	f7fb f9ff 	bl	8000188 <__aeabi_dsub>
 8004d8a:	4656      	mov	r6, sl
 8004d8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d94:	f7fb fe60 	bl	8000a58 <__aeabi_d2iz>
 8004d98:	4605      	mov	r5, r0
 8004d9a:	f7fb fb43 	bl	8000424 <__aeabi_i2d>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004da6:	f7fb f9ef 	bl	8000188 <__aeabi_dsub>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	3530      	adds	r5, #48	@ 0x30
 8004db0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004db4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004db8:	f806 5b01 	strb.w	r5, [r6], #1
 8004dbc:	f7fb fe0e 	bl	80009dc <__aeabi_dcmplt>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	d163      	bne.n	8004e8c <_dtoa_r+0x65c>
 8004dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dc8:	2000      	movs	r0, #0
 8004dca:	495a      	ldr	r1, [pc, #360]	@ (8004f34 <_dtoa_r+0x704>)
 8004dcc:	f7fb f9dc 	bl	8000188 <__aeabi_dsub>
 8004dd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004dd4:	f7fb fe02 	bl	80009dc <__aeabi_dcmplt>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	f040 8087 	bne.w	8004eec <_dtoa_r+0x6bc>
 8004dde:	42a6      	cmp	r6, r4
 8004de0:	f43f af43 	beq.w	8004c6a <_dtoa_r+0x43a>
 8004de4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004de8:	2200      	movs	r2, #0
 8004dea:	4b53      	ldr	r3, [pc, #332]	@ (8004f38 <_dtoa_r+0x708>)
 8004dec:	f7fb fb84 	bl	80004f8 <__aeabi_dmul>
 8004df0:	2200      	movs	r2, #0
 8004df2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004f38 <_dtoa_r+0x708>)
 8004dfc:	f7fb fb7c 	bl	80004f8 <__aeabi_dmul>
 8004e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e04:	e7c4      	b.n	8004d90 <_dtoa_r+0x560>
 8004e06:	4631      	mov	r1, r6
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f7fb fb75 	bl	80004f8 <__aeabi_dmul>
 8004e0e:	4656      	mov	r6, sl
 8004e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e14:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e1a:	f7fb fe1d 	bl	8000a58 <__aeabi_d2iz>
 8004e1e:	4605      	mov	r5, r0
 8004e20:	f7fb fb00 	bl	8000424 <__aeabi_i2d>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e2c:	f7fb f9ac 	bl	8000188 <__aeabi_dsub>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	3530      	adds	r5, #48	@ 0x30
 8004e36:	f806 5b01 	strb.w	r5, [r6], #1
 8004e3a:	42a6      	cmp	r6, r4
 8004e3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	d124      	bne.n	8004e90 <_dtoa_r+0x660>
 8004e46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e4a:	4b39      	ldr	r3, [pc, #228]	@ (8004f30 <_dtoa_r+0x700>)
 8004e4c:	f7fb f99e 	bl	800018c <__adddf3>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e58:	f7fb fdde 	bl	8000a18 <__aeabi_dcmpgt>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d145      	bne.n	8004eec <_dtoa_r+0x6bc>
 8004e60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e64:	2000      	movs	r0, #0
 8004e66:	4932      	ldr	r1, [pc, #200]	@ (8004f30 <_dtoa_r+0x700>)
 8004e68:	f7fb f98e 	bl	8000188 <__aeabi_dsub>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e74:	f7fb fdb2 	bl	80009dc <__aeabi_dcmplt>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	f43f aef6 	beq.w	8004c6a <_dtoa_r+0x43a>
 8004e7e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004e80:	1e73      	subs	r3, r6, #1
 8004e82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004e84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004e88:	2b30      	cmp	r3, #48	@ 0x30
 8004e8a:	d0f8      	beq.n	8004e7e <_dtoa_r+0x64e>
 8004e8c:	9f04      	ldr	r7, [sp, #16]
 8004e8e:	e73f      	b.n	8004d10 <_dtoa_r+0x4e0>
 8004e90:	4b29      	ldr	r3, [pc, #164]	@ (8004f38 <_dtoa_r+0x708>)
 8004e92:	f7fb fb31 	bl	80004f8 <__aeabi_dmul>
 8004e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e9a:	e7bc      	b.n	8004e16 <_dtoa_r+0x5e6>
 8004e9c:	d10c      	bne.n	8004eb8 <_dtoa_r+0x688>
 8004e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4b25      	ldr	r3, [pc, #148]	@ (8004f3c <_dtoa_r+0x70c>)
 8004ea6:	f7fb fb27 	bl	80004f8 <__aeabi_dmul>
 8004eaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004eae:	f7fb fda9 	bl	8000a04 <__aeabi_dcmpge>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	f000 815b 	beq.w	800516e <_dtoa_r+0x93e>
 8004eb8:	2400      	movs	r4, #0
 8004eba:	4625      	mov	r5, r4
 8004ebc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ebe:	4656      	mov	r6, sl
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	9304      	str	r3, [sp, #16]
 8004ec4:	2700      	movs	r7, #0
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	4658      	mov	r0, fp
 8004eca:	f000 fbb7 	bl	800563c <_Bfree>
 8004ece:	2d00      	cmp	r5, #0
 8004ed0:	d0dc      	beq.n	8004e8c <_dtoa_r+0x65c>
 8004ed2:	b12f      	cbz	r7, 8004ee0 <_dtoa_r+0x6b0>
 8004ed4:	42af      	cmp	r7, r5
 8004ed6:	d003      	beq.n	8004ee0 <_dtoa_r+0x6b0>
 8004ed8:	4639      	mov	r1, r7
 8004eda:	4658      	mov	r0, fp
 8004edc:	f000 fbae 	bl	800563c <_Bfree>
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	4658      	mov	r0, fp
 8004ee4:	f000 fbaa 	bl	800563c <_Bfree>
 8004ee8:	e7d0      	b.n	8004e8c <_dtoa_r+0x65c>
 8004eea:	9704      	str	r7, [sp, #16]
 8004eec:	4633      	mov	r3, r6
 8004eee:	461e      	mov	r6, r3
 8004ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ef4:	2a39      	cmp	r2, #57	@ 0x39
 8004ef6:	d107      	bne.n	8004f08 <_dtoa_r+0x6d8>
 8004ef8:	459a      	cmp	sl, r3
 8004efa:	d1f8      	bne.n	8004eee <_dtoa_r+0x6be>
 8004efc:	9a04      	ldr	r2, [sp, #16]
 8004efe:	3201      	adds	r2, #1
 8004f00:	9204      	str	r2, [sp, #16]
 8004f02:	2230      	movs	r2, #48	@ 0x30
 8004f04:	f88a 2000 	strb.w	r2, [sl]
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	3201      	adds	r2, #1
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e7bd      	b.n	8004e8c <_dtoa_r+0x65c>
 8004f10:	2200      	movs	r2, #0
 8004f12:	4b09      	ldr	r3, [pc, #36]	@ (8004f38 <_dtoa_r+0x708>)
 8004f14:	f7fb faf0 	bl	80004f8 <__aeabi_dmul>
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	460d      	mov	r5, r1
 8004f20:	f7fb fd52 	bl	80009c8 <__aeabi_dcmpeq>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	f43f aebc 	beq.w	8004ca2 <_dtoa_r+0x472>
 8004f2a:	e6f1      	b.n	8004d10 <_dtoa_r+0x4e0>
 8004f2c:	08006ee8 	.word	0x08006ee8
 8004f30:	3fe00000 	.word	0x3fe00000
 8004f34:	3ff00000 	.word	0x3ff00000
 8004f38:	40240000 	.word	0x40240000
 8004f3c:	40140000 	.word	0x40140000
 8004f40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004f42:	2a00      	cmp	r2, #0
 8004f44:	f000 80db 	beq.w	80050fe <_dtoa_r+0x8ce>
 8004f48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004f4a:	2a01      	cmp	r2, #1
 8004f4c:	f300 80bf 	bgt.w	80050ce <_dtoa_r+0x89e>
 8004f50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004f52:	2a00      	cmp	r2, #0
 8004f54:	f000 80b7 	beq.w	80050c6 <_dtoa_r+0x896>
 8004f58:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004f5c:	4646      	mov	r6, r8
 8004f5e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f62:	2101      	movs	r1, #1
 8004f64:	441a      	add	r2, r3
 8004f66:	4658      	mov	r0, fp
 8004f68:	4498      	add	r8, r3
 8004f6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f6c:	f000 fc1a 	bl	80057a4 <__i2b>
 8004f70:	4605      	mov	r5, r0
 8004f72:	b15e      	cbz	r6, 8004f8c <_dtoa_r+0x75c>
 8004f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	dd08      	ble.n	8004f8c <_dtoa_r+0x75c>
 8004f7a:	42b3      	cmp	r3, r6
 8004f7c:	bfa8      	it	ge
 8004f7e:	4633      	movge	r3, r6
 8004f80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f82:	eba8 0803 	sub.w	r8, r8, r3
 8004f86:	1af6      	subs	r6, r6, r3
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f8e:	b1f3      	cbz	r3, 8004fce <_dtoa_r+0x79e>
 8004f90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 80b7 	beq.w	8005106 <_dtoa_r+0x8d6>
 8004f98:	b18c      	cbz	r4, 8004fbe <_dtoa_r+0x78e>
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	4658      	mov	r0, fp
 8004fa0:	f000 fcbe 	bl	8005920 <__pow5mult>
 8004fa4:	464a      	mov	r2, r9
 8004fa6:	4601      	mov	r1, r0
 8004fa8:	4605      	mov	r5, r0
 8004faa:	4658      	mov	r0, fp
 8004fac:	f000 fc10 	bl	80057d0 <__multiply>
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	9004      	str	r0, [sp, #16]
 8004fb4:	4658      	mov	r0, fp
 8004fb6:	f000 fb41 	bl	800563c <_Bfree>
 8004fba:	9b04      	ldr	r3, [sp, #16]
 8004fbc:	4699      	mov	r9, r3
 8004fbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fc0:	1b1a      	subs	r2, r3, r4
 8004fc2:	d004      	beq.n	8004fce <_dtoa_r+0x79e>
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	4658      	mov	r0, fp
 8004fc8:	f000 fcaa 	bl	8005920 <__pow5mult>
 8004fcc:	4681      	mov	r9, r0
 8004fce:	2101      	movs	r1, #1
 8004fd0:	4658      	mov	r0, fp
 8004fd2:	f000 fbe7 	bl	80057a4 <__i2b>
 8004fd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fd8:	4604      	mov	r4, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 81c9 	beq.w	8005372 <_dtoa_r+0xb42>
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4601      	mov	r1, r0
 8004fe4:	4658      	mov	r0, fp
 8004fe6:	f000 fc9b 	bl	8005920 <__pow5mult>
 8004fea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004fec:	4604      	mov	r4, r0
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	f300 808f 	bgt.w	8005112 <_dtoa_r+0x8e2>
 8004ff4:	9b02      	ldr	r3, [sp, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f040 8087 	bne.w	800510a <_dtoa_r+0x8da>
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 8083 	bne.w	800510e <_dtoa_r+0x8de>
 8005008:	9b03      	ldr	r3, [sp, #12]
 800500a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800500e:	0d1b      	lsrs	r3, r3, #20
 8005010:	051b      	lsls	r3, r3, #20
 8005012:	b12b      	cbz	r3, 8005020 <_dtoa_r+0x7f0>
 8005014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005016:	f108 0801 	add.w	r8, r8, #1
 800501a:	3301      	adds	r3, #1
 800501c:	9309      	str	r3, [sp, #36]	@ 0x24
 800501e:	2301      	movs	r3, #1
 8005020:	930a      	str	r3, [sp, #40]	@ 0x28
 8005022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 81aa 	beq.w	800537e <_dtoa_r+0xb4e>
 800502a:	6923      	ldr	r3, [r4, #16]
 800502c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005030:	6918      	ldr	r0, [r3, #16]
 8005032:	f000 fb6b 	bl	800570c <__hi0bits>
 8005036:	f1c0 0020 	rsb	r0, r0, #32
 800503a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800503c:	4418      	add	r0, r3
 800503e:	f010 001f 	ands.w	r0, r0, #31
 8005042:	d071      	beq.n	8005128 <_dtoa_r+0x8f8>
 8005044:	f1c0 0320 	rsb	r3, r0, #32
 8005048:	2b04      	cmp	r3, #4
 800504a:	dd65      	ble.n	8005118 <_dtoa_r+0x8e8>
 800504c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800504e:	f1c0 001c 	rsb	r0, r0, #28
 8005052:	4403      	add	r3, r0
 8005054:	4480      	add	r8, r0
 8005056:	4406      	add	r6, r0
 8005058:	9309      	str	r3, [sp, #36]	@ 0x24
 800505a:	f1b8 0f00 	cmp.w	r8, #0
 800505e:	dd05      	ble.n	800506c <_dtoa_r+0x83c>
 8005060:	4649      	mov	r1, r9
 8005062:	4642      	mov	r2, r8
 8005064:	4658      	mov	r0, fp
 8005066:	f000 fcb5 	bl	80059d4 <__lshift>
 800506a:	4681      	mov	r9, r0
 800506c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800506e:	2b00      	cmp	r3, #0
 8005070:	dd05      	ble.n	800507e <_dtoa_r+0x84e>
 8005072:	4621      	mov	r1, r4
 8005074:	461a      	mov	r2, r3
 8005076:	4658      	mov	r0, fp
 8005078:	f000 fcac 	bl	80059d4 <__lshift>
 800507c:	4604      	mov	r4, r0
 800507e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d053      	beq.n	800512c <_dtoa_r+0x8fc>
 8005084:	4621      	mov	r1, r4
 8005086:	4648      	mov	r0, r9
 8005088:	f000 fd10 	bl	8005aac <__mcmp>
 800508c:	2800      	cmp	r0, #0
 800508e:	da4d      	bge.n	800512c <_dtoa_r+0x8fc>
 8005090:	1e7b      	subs	r3, r7, #1
 8005092:	4649      	mov	r1, r9
 8005094:	9304      	str	r3, [sp, #16]
 8005096:	220a      	movs	r2, #10
 8005098:	2300      	movs	r3, #0
 800509a:	4658      	mov	r0, fp
 800509c:	f000 faf0 	bl	8005680 <__multadd>
 80050a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050a2:	4681      	mov	r9, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 816c 	beq.w	8005382 <_dtoa_r+0xb52>
 80050aa:	2300      	movs	r3, #0
 80050ac:	4629      	mov	r1, r5
 80050ae:	220a      	movs	r2, #10
 80050b0:	4658      	mov	r0, fp
 80050b2:	f000 fae5 	bl	8005680 <__multadd>
 80050b6:	9b08      	ldr	r3, [sp, #32]
 80050b8:	4605      	mov	r5, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	dc61      	bgt.n	8005182 <_dtoa_r+0x952>
 80050be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	dc3b      	bgt.n	800513c <_dtoa_r+0x90c>
 80050c4:	e05d      	b.n	8005182 <_dtoa_r+0x952>
 80050c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80050c8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80050cc:	e746      	b.n	8004f5c <_dtoa_r+0x72c>
 80050ce:	9b07      	ldr	r3, [sp, #28]
 80050d0:	1e5c      	subs	r4, r3, #1
 80050d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050d4:	42a3      	cmp	r3, r4
 80050d6:	bfbf      	itttt	lt
 80050d8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80050da:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80050dc:	1ae3      	sublt	r3, r4, r3
 80050de:	18d2      	addlt	r2, r2, r3
 80050e0:	bfa8      	it	ge
 80050e2:	1b1c      	subge	r4, r3, r4
 80050e4:	9b07      	ldr	r3, [sp, #28]
 80050e6:	bfbe      	ittt	lt
 80050e8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80050ea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80050ec:	2400      	movlt	r4, #0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bfb5      	itete	lt
 80050f2:	eba8 0603 	sublt.w	r6, r8, r3
 80050f6:	4646      	movge	r6, r8
 80050f8:	2300      	movlt	r3, #0
 80050fa:	9b07      	ldrge	r3, [sp, #28]
 80050fc:	e730      	b.n	8004f60 <_dtoa_r+0x730>
 80050fe:	4646      	mov	r6, r8
 8005100:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005102:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005104:	e735      	b.n	8004f72 <_dtoa_r+0x742>
 8005106:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005108:	e75c      	b.n	8004fc4 <_dtoa_r+0x794>
 800510a:	2300      	movs	r3, #0
 800510c:	e788      	b.n	8005020 <_dtoa_r+0x7f0>
 800510e:	9b02      	ldr	r3, [sp, #8]
 8005110:	e786      	b.n	8005020 <_dtoa_r+0x7f0>
 8005112:	2300      	movs	r3, #0
 8005114:	930a      	str	r3, [sp, #40]	@ 0x28
 8005116:	e788      	b.n	800502a <_dtoa_r+0x7fa>
 8005118:	d09f      	beq.n	800505a <_dtoa_r+0x82a>
 800511a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800511c:	331c      	adds	r3, #28
 800511e:	441a      	add	r2, r3
 8005120:	4498      	add	r8, r3
 8005122:	441e      	add	r6, r3
 8005124:	9209      	str	r2, [sp, #36]	@ 0x24
 8005126:	e798      	b.n	800505a <_dtoa_r+0x82a>
 8005128:	4603      	mov	r3, r0
 800512a:	e7f6      	b.n	800511a <_dtoa_r+0x8ea>
 800512c:	9b07      	ldr	r3, [sp, #28]
 800512e:	9704      	str	r7, [sp, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	dc20      	bgt.n	8005176 <_dtoa_r+0x946>
 8005134:	9308      	str	r3, [sp, #32]
 8005136:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005138:	2b02      	cmp	r3, #2
 800513a:	dd1e      	ble.n	800517a <_dtoa_r+0x94a>
 800513c:	9b08      	ldr	r3, [sp, #32]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f47f aebc 	bne.w	8004ebc <_dtoa_r+0x68c>
 8005144:	4621      	mov	r1, r4
 8005146:	2205      	movs	r2, #5
 8005148:	4658      	mov	r0, fp
 800514a:	f000 fa99 	bl	8005680 <__multadd>
 800514e:	4601      	mov	r1, r0
 8005150:	4604      	mov	r4, r0
 8005152:	4648      	mov	r0, r9
 8005154:	f000 fcaa 	bl	8005aac <__mcmp>
 8005158:	2800      	cmp	r0, #0
 800515a:	f77f aeaf 	ble.w	8004ebc <_dtoa_r+0x68c>
 800515e:	2331      	movs	r3, #49	@ 0x31
 8005160:	4656      	mov	r6, sl
 8005162:	f806 3b01 	strb.w	r3, [r6], #1
 8005166:	9b04      	ldr	r3, [sp, #16]
 8005168:	3301      	adds	r3, #1
 800516a:	9304      	str	r3, [sp, #16]
 800516c:	e6aa      	b.n	8004ec4 <_dtoa_r+0x694>
 800516e:	9c07      	ldr	r4, [sp, #28]
 8005170:	9704      	str	r7, [sp, #16]
 8005172:	4625      	mov	r5, r4
 8005174:	e7f3      	b.n	800515e <_dtoa_r+0x92e>
 8005176:	9b07      	ldr	r3, [sp, #28]
 8005178:	9308      	str	r3, [sp, #32]
 800517a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8104 	beq.w	800538a <_dtoa_r+0xb5a>
 8005182:	2e00      	cmp	r6, #0
 8005184:	dd05      	ble.n	8005192 <_dtoa_r+0x962>
 8005186:	4629      	mov	r1, r5
 8005188:	4632      	mov	r2, r6
 800518a:	4658      	mov	r0, fp
 800518c:	f000 fc22 	bl	80059d4 <__lshift>
 8005190:	4605      	mov	r5, r0
 8005192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005194:	2b00      	cmp	r3, #0
 8005196:	d05a      	beq.n	800524e <_dtoa_r+0xa1e>
 8005198:	4658      	mov	r0, fp
 800519a:	6869      	ldr	r1, [r5, #4]
 800519c:	f000 fa0e 	bl	80055bc <_Balloc>
 80051a0:	4606      	mov	r6, r0
 80051a2:	b928      	cbnz	r0, 80051b0 <_dtoa_r+0x980>
 80051a4:	4602      	mov	r2, r0
 80051a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80051aa:	4b83      	ldr	r3, [pc, #524]	@ (80053b8 <_dtoa_r+0xb88>)
 80051ac:	f7ff bb54 	b.w	8004858 <_dtoa_r+0x28>
 80051b0:	692a      	ldr	r2, [r5, #16]
 80051b2:	f105 010c 	add.w	r1, r5, #12
 80051b6:	3202      	adds	r2, #2
 80051b8:	0092      	lsls	r2, r2, #2
 80051ba:	300c      	adds	r0, #12
 80051bc:	f7ff faa1 	bl	8004702 <memcpy>
 80051c0:	2201      	movs	r2, #1
 80051c2:	4631      	mov	r1, r6
 80051c4:	4658      	mov	r0, fp
 80051c6:	f000 fc05 	bl	80059d4 <__lshift>
 80051ca:	462f      	mov	r7, r5
 80051cc:	4605      	mov	r5, r0
 80051ce:	f10a 0301 	add.w	r3, sl, #1
 80051d2:	9307      	str	r3, [sp, #28]
 80051d4:	9b08      	ldr	r3, [sp, #32]
 80051d6:	4453      	add	r3, sl
 80051d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051da:	9b02      	ldr	r3, [sp, #8]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80051e2:	9b07      	ldr	r3, [sp, #28]
 80051e4:	4621      	mov	r1, r4
 80051e6:	3b01      	subs	r3, #1
 80051e8:	4648      	mov	r0, r9
 80051ea:	9302      	str	r3, [sp, #8]
 80051ec:	f7ff fa97 	bl	800471e <quorem>
 80051f0:	4639      	mov	r1, r7
 80051f2:	9008      	str	r0, [sp, #32]
 80051f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80051f8:	4648      	mov	r0, r9
 80051fa:	f000 fc57 	bl	8005aac <__mcmp>
 80051fe:	462a      	mov	r2, r5
 8005200:	9009      	str	r0, [sp, #36]	@ 0x24
 8005202:	4621      	mov	r1, r4
 8005204:	4658      	mov	r0, fp
 8005206:	f000 fc6d 	bl	8005ae4 <__mdiff>
 800520a:	68c2      	ldr	r2, [r0, #12]
 800520c:	4606      	mov	r6, r0
 800520e:	bb02      	cbnz	r2, 8005252 <_dtoa_r+0xa22>
 8005210:	4601      	mov	r1, r0
 8005212:	4648      	mov	r0, r9
 8005214:	f000 fc4a 	bl	8005aac <__mcmp>
 8005218:	4602      	mov	r2, r0
 800521a:	4631      	mov	r1, r6
 800521c:	4658      	mov	r0, fp
 800521e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005220:	f000 fa0c 	bl	800563c <_Bfree>
 8005224:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005226:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005228:	9e07      	ldr	r6, [sp, #28]
 800522a:	ea43 0102 	orr.w	r1, r3, r2
 800522e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005230:	4319      	orrs	r1, r3
 8005232:	d110      	bne.n	8005256 <_dtoa_r+0xa26>
 8005234:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005238:	d029      	beq.n	800528e <_dtoa_r+0xa5e>
 800523a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800523c:	2b00      	cmp	r3, #0
 800523e:	dd02      	ble.n	8005246 <_dtoa_r+0xa16>
 8005240:	9b08      	ldr	r3, [sp, #32]
 8005242:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005246:	9b02      	ldr	r3, [sp, #8]
 8005248:	f883 8000 	strb.w	r8, [r3]
 800524c:	e63b      	b.n	8004ec6 <_dtoa_r+0x696>
 800524e:	4628      	mov	r0, r5
 8005250:	e7bb      	b.n	80051ca <_dtoa_r+0x99a>
 8005252:	2201      	movs	r2, #1
 8005254:	e7e1      	b.n	800521a <_dtoa_r+0x9ea>
 8005256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	db04      	blt.n	8005266 <_dtoa_r+0xa36>
 800525c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800525e:	430b      	orrs	r3, r1
 8005260:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005262:	430b      	orrs	r3, r1
 8005264:	d120      	bne.n	80052a8 <_dtoa_r+0xa78>
 8005266:	2a00      	cmp	r2, #0
 8005268:	dded      	ble.n	8005246 <_dtoa_r+0xa16>
 800526a:	4649      	mov	r1, r9
 800526c:	2201      	movs	r2, #1
 800526e:	4658      	mov	r0, fp
 8005270:	f000 fbb0 	bl	80059d4 <__lshift>
 8005274:	4621      	mov	r1, r4
 8005276:	4681      	mov	r9, r0
 8005278:	f000 fc18 	bl	8005aac <__mcmp>
 800527c:	2800      	cmp	r0, #0
 800527e:	dc03      	bgt.n	8005288 <_dtoa_r+0xa58>
 8005280:	d1e1      	bne.n	8005246 <_dtoa_r+0xa16>
 8005282:	f018 0f01 	tst.w	r8, #1
 8005286:	d0de      	beq.n	8005246 <_dtoa_r+0xa16>
 8005288:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800528c:	d1d8      	bne.n	8005240 <_dtoa_r+0xa10>
 800528e:	2339      	movs	r3, #57	@ 0x39
 8005290:	9a02      	ldr	r2, [sp, #8]
 8005292:	7013      	strb	r3, [r2, #0]
 8005294:	4633      	mov	r3, r6
 8005296:	461e      	mov	r6, r3
 8005298:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800529c:	3b01      	subs	r3, #1
 800529e:	2a39      	cmp	r2, #57	@ 0x39
 80052a0:	d052      	beq.n	8005348 <_dtoa_r+0xb18>
 80052a2:	3201      	adds	r2, #1
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	e60e      	b.n	8004ec6 <_dtoa_r+0x696>
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	dd07      	ble.n	80052bc <_dtoa_r+0xa8c>
 80052ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052b0:	d0ed      	beq.n	800528e <_dtoa_r+0xa5e>
 80052b2:	9a02      	ldr	r2, [sp, #8]
 80052b4:	f108 0301 	add.w	r3, r8, #1
 80052b8:	7013      	strb	r3, [r2, #0]
 80052ba:	e604      	b.n	8004ec6 <_dtoa_r+0x696>
 80052bc:	9b07      	ldr	r3, [sp, #28]
 80052be:	9a07      	ldr	r2, [sp, #28]
 80052c0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80052c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d028      	beq.n	800531c <_dtoa_r+0xaec>
 80052ca:	4649      	mov	r1, r9
 80052cc:	2300      	movs	r3, #0
 80052ce:	220a      	movs	r2, #10
 80052d0:	4658      	mov	r0, fp
 80052d2:	f000 f9d5 	bl	8005680 <__multadd>
 80052d6:	42af      	cmp	r7, r5
 80052d8:	4681      	mov	r9, r0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	f04f 020a 	mov.w	r2, #10
 80052e2:	4639      	mov	r1, r7
 80052e4:	4658      	mov	r0, fp
 80052e6:	d107      	bne.n	80052f8 <_dtoa_r+0xac8>
 80052e8:	f000 f9ca 	bl	8005680 <__multadd>
 80052ec:	4607      	mov	r7, r0
 80052ee:	4605      	mov	r5, r0
 80052f0:	9b07      	ldr	r3, [sp, #28]
 80052f2:	3301      	adds	r3, #1
 80052f4:	9307      	str	r3, [sp, #28]
 80052f6:	e774      	b.n	80051e2 <_dtoa_r+0x9b2>
 80052f8:	f000 f9c2 	bl	8005680 <__multadd>
 80052fc:	4629      	mov	r1, r5
 80052fe:	4607      	mov	r7, r0
 8005300:	2300      	movs	r3, #0
 8005302:	220a      	movs	r2, #10
 8005304:	4658      	mov	r0, fp
 8005306:	f000 f9bb 	bl	8005680 <__multadd>
 800530a:	4605      	mov	r5, r0
 800530c:	e7f0      	b.n	80052f0 <_dtoa_r+0xac0>
 800530e:	9b08      	ldr	r3, [sp, #32]
 8005310:	2700      	movs	r7, #0
 8005312:	2b00      	cmp	r3, #0
 8005314:	bfcc      	ite	gt
 8005316:	461e      	movgt	r6, r3
 8005318:	2601      	movle	r6, #1
 800531a:	4456      	add	r6, sl
 800531c:	4649      	mov	r1, r9
 800531e:	2201      	movs	r2, #1
 8005320:	4658      	mov	r0, fp
 8005322:	f000 fb57 	bl	80059d4 <__lshift>
 8005326:	4621      	mov	r1, r4
 8005328:	4681      	mov	r9, r0
 800532a:	f000 fbbf 	bl	8005aac <__mcmp>
 800532e:	2800      	cmp	r0, #0
 8005330:	dcb0      	bgt.n	8005294 <_dtoa_r+0xa64>
 8005332:	d102      	bne.n	800533a <_dtoa_r+0xb0a>
 8005334:	f018 0f01 	tst.w	r8, #1
 8005338:	d1ac      	bne.n	8005294 <_dtoa_r+0xa64>
 800533a:	4633      	mov	r3, r6
 800533c:	461e      	mov	r6, r3
 800533e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005342:	2a30      	cmp	r2, #48	@ 0x30
 8005344:	d0fa      	beq.n	800533c <_dtoa_r+0xb0c>
 8005346:	e5be      	b.n	8004ec6 <_dtoa_r+0x696>
 8005348:	459a      	cmp	sl, r3
 800534a:	d1a4      	bne.n	8005296 <_dtoa_r+0xa66>
 800534c:	9b04      	ldr	r3, [sp, #16]
 800534e:	3301      	adds	r3, #1
 8005350:	9304      	str	r3, [sp, #16]
 8005352:	2331      	movs	r3, #49	@ 0x31
 8005354:	f88a 3000 	strb.w	r3, [sl]
 8005358:	e5b5      	b.n	8004ec6 <_dtoa_r+0x696>
 800535a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800535c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80053bc <_dtoa_r+0xb8c>
 8005360:	b11b      	cbz	r3, 800536a <_dtoa_r+0xb3a>
 8005362:	f10a 0308 	add.w	r3, sl, #8
 8005366:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4650      	mov	r0, sl
 800536c:	b017      	add	sp, #92	@ 0x5c
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005372:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005374:	2b01      	cmp	r3, #1
 8005376:	f77f ae3d 	ble.w	8004ff4 <_dtoa_r+0x7c4>
 800537a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800537c:	930a      	str	r3, [sp, #40]	@ 0x28
 800537e:	2001      	movs	r0, #1
 8005380:	e65b      	b.n	800503a <_dtoa_r+0x80a>
 8005382:	9b08      	ldr	r3, [sp, #32]
 8005384:	2b00      	cmp	r3, #0
 8005386:	f77f aed6 	ble.w	8005136 <_dtoa_r+0x906>
 800538a:	4656      	mov	r6, sl
 800538c:	4621      	mov	r1, r4
 800538e:	4648      	mov	r0, r9
 8005390:	f7ff f9c5 	bl	800471e <quorem>
 8005394:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005398:	9b08      	ldr	r3, [sp, #32]
 800539a:	f806 8b01 	strb.w	r8, [r6], #1
 800539e:	eba6 020a 	sub.w	r2, r6, sl
 80053a2:	4293      	cmp	r3, r2
 80053a4:	ddb3      	ble.n	800530e <_dtoa_r+0xade>
 80053a6:	4649      	mov	r1, r9
 80053a8:	2300      	movs	r3, #0
 80053aa:	220a      	movs	r2, #10
 80053ac:	4658      	mov	r0, fp
 80053ae:	f000 f967 	bl	8005680 <__multadd>
 80053b2:	4681      	mov	r9, r0
 80053b4:	e7ea      	b.n	800538c <_dtoa_r+0xb5c>
 80053b6:	bf00      	nop
 80053b8:	08006e46 	.word	0x08006e46
 80053bc:	08006dca 	.word	0x08006dca

080053c0 <_free_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4605      	mov	r5, r0
 80053c4:	2900      	cmp	r1, #0
 80053c6:	d040      	beq.n	800544a <_free_r+0x8a>
 80053c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053cc:	1f0c      	subs	r4, r1, #4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bfb8      	it	lt
 80053d2:	18e4      	addlt	r4, r4, r3
 80053d4:	f000 f8e6 	bl	80055a4 <__malloc_lock>
 80053d8:	4a1c      	ldr	r2, [pc, #112]	@ (800544c <_free_r+0x8c>)
 80053da:	6813      	ldr	r3, [r2, #0]
 80053dc:	b933      	cbnz	r3, 80053ec <_free_r+0x2c>
 80053de:	6063      	str	r3, [r4, #4]
 80053e0:	6014      	str	r4, [r2, #0]
 80053e2:	4628      	mov	r0, r5
 80053e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053e8:	f000 b8e2 	b.w	80055b0 <__malloc_unlock>
 80053ec:	42a3      	cmp	r3, r4
 80053ee:	d908      	bls.n	8005402 <_free_r+0x42>
 80053f0:	6820      	ldr	r0, [r4, #0]
 80053f2:	1821      	adds	r1, r4, r0
 80053f4:	428b      	cmp	r3, r1
 80053f6:	bf01      	itttt	eq
 80053f8:	6819      	ldreq	r1, [r3, #0]
 80053fa:	685b      	ldreq	r3, [r3, #4]
 80053fc:	1809      	addeq	r1, r1, r0
 80053fe:	6021      	streq	r1, [r4, #0]
 8005400:	e7ed      	b.n	80053de <_free_r+0x1e>
 8005402:	461a      	mov	r2, r3
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	b10b      	cbz	r3, 800540c <_free_r+0x4c>
 8005408:	42a3      	cmp	r3, r4
 800540a:	d9fa      	bls.n	8005402 <_free_r+0x42>
 800540c:	6811      	ldr	r1, [r2, #0]
 800540e:	1850      	adds	r0, r2, r1
 8005410:	42a0      	cmp	r0, r4
 8005412:	d10b      	bne.n	800542c <_free_r+0x6c>
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	4401      	add	r1, r0
 8005418:	1850      	adds	r0, r2, r1
 800541a:	4283      	cmp	r3, r0
 800541c:	6011      	str	r1, [r2, #0]
 800541e:	d1e0      	bne.n	80053e2 <_free_r+0x22>
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	4408      	add	r0, r1
 8005426:	6010      	str	r0, [r2, #0]
 8005428:	6053      	str	r3, [r2, #4]
 800542a:	e7da      	b.n	80053e2 <_free_r+0x22>
 800542c:	d902      	bls.n	8005434 <_free_r+0x74>
 800542e:	230c      	movs	r3, #12
 8005430:	602b      	str	r3, [r5, #0]
 8005432:	e7d6      	b.n	80053e2 <_free_r+0x22>
 8005434:	6820      	ldr	r0, [r4, #0]
 8005436:	1821      	adds	r1, r4, r0
 8005438:	428b      	cmp	r3, r1
 800543a:	bf01      	itttt	eq
 800543c:	6819      	ldreq	r1, [r3, #0]
 800543e:	685b      	ldreq	r3, [r3, #4]
 8005440:	1809      	addeq	r1, r1, r0
 8005442:	6021      	streq	r1, [r4, #0]
 8005444:	6063      	str	r3, [r4, #4]
 8005446:	6054      	str	r4, [r2, #4]
 8005448:	e7cb      	b.n	80053e2 <_free_r+0x22>
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	200005d4 	.word	0x200005d4

08005450 <malloc>:
 8005450:	4b02      	ldr	r3, [pc, #8]	@ (800545c <malloc+0xc>)
 8005452:	4601      	mov	r1, r0
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	f000 b825 	b.w	80054a4 <_malloc_r>
 800545a:	bf00      	nop
 800545c:	20000010 	.word	0x20000010

08005460 <sbrk_aligned>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	4e0f      	ldr	r6, [pc, #60]	@ (80054a0 <sbrk_aligned+0x40>)
 8005464:	460c      	mov	r4, r1
 8005466:	6831      	ldr	r1, [r6, #0]
 8005468:	4605      	mov	r5, r0
 800546a:	b911      	cbnz	r1, 8005472 <sbrk_aligned+0x12>
 800546c:	f000 fcce 	bl	8005e0c <_sbrk_r>
 8005470:	6030      	str	r0, [r6, #0]
 8005472:	4621      	mov	r1, r4
 8005474:	4628      	mov	r0, r5
 8005476:	f000 fcc9 	bl	8005e0c <_sbrk_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	d103      	bne.n	8005486 <sbrk_aligned+0x26>
 800547e:	f04f 34ff 	mov.w	r4, #4294967295
 8005482:	4620      	mov	r0, r4
 8005484:	bd70      	pop	{r4, r5, r6, pc}
 8005486:	1cc4      	adds	r4, r0, #3
 8005488:	f024 0403 	bic.w	r4, r4, #3
 800548c:	42a0      	cmp	r0, r4
 800548e:	d0f8      	beq.n	8005482 <sbrk_aligned+0x22>
 8005490:	1a21      	subs	r1, r4, r0
 8005492:	4628      	mov	r0, r5
 8005494:	f000 fcba 	bl	8005e0c <_sbrk_r>
 8005498:	3001      	adds	r0, #1
 800549a:	d1f2      	bne.n	8005482 <sbrk_aligned+0x22>
 800549c:	e7ef      	b.n	800547e <sbrk_aligned+0x1e>
 800549e:	bf00      	nop
 80054a0:	200005d0 	.word	0x200005d0

080054a4 <_malloc_r>:
 80054a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a8:	1ccd      	adds	r5, r1, #3
 80054aa:	f025 0503 	bic.w	r5, r5, #3
 80054ae:	3508      	adds	r5, #8
 80054b0:	2d0c      	cmp	r5, #12
 80054b2:	bf38      	it	cc
 80054b4:	250c      	movcc	r5, #12
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	4606      	mov	r6, r0
 80054ba:	db01      	blt.n	80054c0 <_malloc_r+0x1c>
 80054bc:	42a9      	cmp	r1, r5
 80054be:	d904      	bls.n	80054ca <_malloc_r+0x26>
 80054c0:	230c      	movs	r3, #12
 80054c2:	6033      	str	r3, [r6, #0]
 80054c4:	2000      	movs	r0, #0
 80054c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055a0 <_malloc_r+0xfc>
 80054ce:	f000 f869 	bl	80055a4 <__malloc_lock>
 80054d2:	f8d8 3000 	ldr.w	r3, [r8]
 80054d6:	461c      	mov	r4, r3
 80054d8:	bb44      	cbnz	r4, 800552c <_malloc_r+0x88>
 80054da:	4629      	mov	r1, r5
 80054dc:	4630      	mov	r0, r6
 80054de:	f7ff ffbf 	bl	8005460 <sbrk_aligned>
 80054e2:	1c43      	adds	r3, r0, #1
 80054e4:	4604      	mov	r4, r0
 80054e6:	d158      	bne.n	800559a <_malloc_r+0xf6>
 80054e8:	f8d8 4000 	ldr.w	r4, [r8]
 80054ec:	4627      	mov	r7, r4
 80054ee:	2f00      	cmp	r7, #0
 80054f0:	d143      	bne.n	800557a <_malloc_r+0xd6>
 80054f2:	2c00      	cmp	r4, #0
 80054f4:	d04b      	beq.n	800558e <_malloc_r+0xea>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	4639      	mov	r1, r7
 80054fa:	4630      	mov	r0, r6
 80054fc:	eb04 0903 	add.w	r9, r4, r3
 8005500:	f000 fc84 	bl	8005e0c <_sbrk_r>
 8005504:	4581      	cmp	r9, r0
 8005506:	d142      	bne.n	800558e <_malloc_r+0xea>
 8005508:	6821      	ldr	r1, [r4, #0]
 800550a:	4630      	mov	r0, r6
 800550c:	1a6d      	subs	r5, r5, r1
 800550e:	4629      	mov	r1, r5
 8005510:	f7ff ffa6 	bl	8005460 <sbrk_aligned>
 8005514:	3001      	adds	r0, #1
 8005516:	d03a      	beq.n	800558e <_malloc_r+0xea>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	442b      	add	r3, r5
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	f8d8 3000 	ldr.w	r3, [r8]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	bb62      	cbnz	r2, 8005580 <_malloc_r+0xdc>
 8005526:	f8c8 7000 	str.w	r7, [r8]
 800552a:	e00f      	b.n	800554c <_malloc_r+0xa8>
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	1b52      	subs	r2, r2, r5
 8005530:	d420      	bmi.n	8005574 <_malloc_r+0xd0>
 8005532:	2a0b      	cmp	r2, #11
 8005534:	d917      	bls.n	8005566 <_malloc_r+0xc2>
 8005536:	1961      	adds	r1, r4, r5
 8005538:	42a3      	cmp	r3, r4
 800553a:	6025      	str	r5, [r4, #0]
 800553c:	bf18      	it	ne
 800553e:	6059      	strne	r1, [r3, #4]
 8005540:	6863      	ldr	r3, [r4, #4]
 8005542:	bf08      	it	eq
 8005544:	f8c8 1000 	streq.w	r1, [r8]
 8005548:	5162      	str	r2, [r4, r5]
 800554a:	604b      	str	r3, [r1, #4]
 800554c:	4630      	mov	r0, r6
 800554e:	f000 f82f 	bl	80055b0 <__malloc_unlock>
 8005552:	f104 000b 	add.w	r0, r4, #11
 8005556:	1d23      	adds	r3, r4, #4
 8005558:	f020 0007 	bic.w	r0, r0, #7
 800555c:	1ac2      	subs	r2, r0, r3
 800555e:	bf1c      	itt	ne
 8005560:	1a1b      	subne	r3, r3, r0
 8005562:	50a3      	strne	r3, [r4, r2]
 8005564:	e7af      	b.n	80054c6 <_malloc_r+0x22>
 8005566:	6862      	ldr	r2, [r4, #4]
 8005568:	42a3      	cmp	r3, r4
 800556a:	bf0c      	ite	eq
 800556c:	f8c8 2000 	streq.w	r2, [r8]
 8005570:	605a      	strne	r2, [r3, #4]
 8005572:	e7eb      	b.n	800554c <_malloc_r+0xa8>
 8005574:	4623      	mov	r3, r4
 8005576:	6864      	ldr	r4, [r4, #4]
 8005578:	e7ae      	b.n	80054d8 <_malloc_r+0x34>
 800557a:	463c      	mov	r4, r7
 800557c:	687f      	ldr	r7, [r7, #4]
 800557e:	e7b6      	b.n	80054ee <_malloc_r+0x4a>
 8005580:	461a      	mov	r2, r3
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	42a3      	cmp	r3, r4
 8005586:	d1fb      	bne.n	8005580 <_malloc_r+0xdc>
 8005588:	2300      	movs	r3, #0
 800558a:	6053      	str	r3, [r2, #4]
 800558c:	e7de      	b.n	800554c <_malloc_r+0xa8>
 800558e:	230c      	movs	r3, #12
 8005590:	4630      	mov	r0, r6
 8005592:	6033      	str	r3, [r6, #0]
 8005594:	f000 f80c 	bl	80055b0 <__malloc_unlock>
 8005598:	e794      	b.n	80054c4 <_malloc_r+0x20>
 800559a:	6005      	str	r5, [r0, #0]
 800559c:	e7d6      	b.n	800554c <_malloc_r+0xa8>
 800559e:	bf00      	nop
 80055a0:	200005d4 	.word	0x200005d4

080055a4 <__malloc_lock>:
 80055a4:	4801      	ldr	r0, [pc, #4]	@ (80055ac <__malloc_lock+0x8>)
 80055a6:	f7ff b89c 	b.w	80046e2 <__retarget_lock_acquire_recursive>
 80055aa:	bf00      	nop
 80055ac:	200005cc 	.word	0x200005cc

080055b0 <__malloc_unlock>:
 80055b0:	4801      	ldr	r0, [pc, #4]	@ (80055b8 <__malloc_unlock+0x8>)
 80055b2:	f7ff b897 	b.w	80046e4 <__retarget_lock_release_recursive>
 80055b6:	bf00      	nop
 80055b8:	200005cc 	.word	0x200005cc

080055bc <_Balloc>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	69c6      	ldr	r6, [r0, #28]
 80055c0:	4604      	mov	r4, r0
 80055c2:	460d      	mov	r5, r1
 80055c4:	b976      	cbnz	r6, 80055e4 <_Balloc+0x28>
 80055c6:	2010      	movs	r0, #16
 80055c8:	f7ff ff42 	bl	8005450 <malloc>
 80055cc:	4602      	mov	r2, r0
 80055ce:	61e0      	str	r0, [r4, #28]
 80055d0:	b920      	cbnz	r0, 80055dc <_Balloc+0x20>
 80055d2:	216b      	movs	r1, #107	@ 0x6b
 80055d4:	4b17      	ldr	r3, [pc, #92]	@ (8005634 <_Balloc+0x78>)
 80055d6:	4818      	ldr	r0, [pc, #96]	@ (8005638 <_Balloc+0x7c>)
 80055d8:	f000 fc28 	bl	8005e2c <__assert_func>
 80055dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055e0:	6006      	str	r6, [r0, #0]
 80055e2:	60c6      	str	r6, [r0, #12]
 80055e4:	69e6      	ldr	r6, [r4, #28]
 80055e6:	68f3      	ldr	r3, [r6, #12]
 80055e8:	b183      	cbz	r3, 800560c <_Balloc+0x50>
 80055ea:	69e3      	ldr	r3, [r4, #28]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055f2:	b9b8      	cbnz	r0, 8005624 <_Balloc+0x68>
 80055f4:	2101      	movs	r1, #1
 80055f6:	fa01 f605 	lsl.w	r6, r1, r5
 80055fa:	1d72      	adds	r2, r6, #5
 80055fc:	4620      	mov	r0, r4
 80055fe:	0092      	lsls	r2, r2, #2
 8005600:	f000 fc32 	bl	8005e68 <_calloc_r>
 8005604:	b160      	cbz	r0, 8005620 <_Balloc+0x64>
 8005606:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800560a:	e00e      	b.n	800562a <_Balloc+0x6e>
 800560c:	2221      	movs	r2, #33	@ 0x21
 800560e:	2104      	movs	r1, #4
 8005610:	4620      	mov	r0, r4
 8005612:	f000 fc29 	bl	8005e68 <_calloc_r>
 8005616:	69e3      	ldr	r3, [r4, #28]
 8005618:	60f0      	str	r0, [r6, #12]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e4      	bne.n	80055ea <_Balloc+0x2e>
 8005620:	2000      	movs	r0, #0
 8005622:	bd70      	pop	{r4, r5, r6, pc}
 8005624:	6802      	ldr	r2, [r0, #0]
 8005626:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800562a:	2300      	movs	r3, #0
 800562c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005630:	e7f7      	b.n	8005622 <_Balloc+0x66>
 8005632:	bf00      	nop
 8005634:	08006dd7 	.word	0x08006dd7
 8005638:	08006e57 	.word	0x08006e57

0800563c <_Bfree>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	69c6      	ldr	r6, [r0, #28]
 8005640:	4605      	mov	r5, r0
 8005642:	460c      	mov	r4, r1
 8005644:	b976      	cbnz	r6, 8005664 <_Bfree+0x28>
 8005646:	2010      	movs	r0, #16
 8005648:	f7ff ff02 	bl	8005450 <malloc>
 800564c:	4602      	mov	r2, r0
 800564e:	61e8      	str	r0, [r5, #28]
 8005650:	b920      	cbnz	r0, 800565c <_Bfree+0x20>
 8005652:	218f      	movs	r1, #143	@ 0x8f
 8005654:	4b08      	ldr	r3, [pc, #32]	@ (8005678 <_Bfree+0x3c>)
 8005656:	4809      	ldr	r0, [pc, #36]	@ (800567c <_Bfree+0x40>)
 8005658:	f000 fbe8 	bl	8005e2c <__assert_func>
 800565c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005660:	6006      	str	r6, [r0, #0]
 8005662:	60c6      	str	r6, [r0, #12]
 8005664:	b13c      	cbz	r4, 8005676 <_Bfree+0x3a>
 8005666:	69eb      	ldr	r3, [r5, #28]
 8005668:	6862      	ldr	r2, [r4, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005670:	6021      	str	r1, [r4, #0]
 8005672:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	08006dd7 	.word	0x08006dd7
 800567c:	08006e57 	.word	0x08006e57

08005680 <__multadd>:
 8005680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005684:	4607      	mov	r7, r0
 8005686:	460c      	mov	r4, r1
 8005688:	461e      	mov	r6, r3
 800568a:	2000      	movs	r0, #0
 800568c:	690d      	ldr	r5, [r1, #16]
 800568e:	f101 0c14 	add.w	ip, r1, #20
 8005692:	f8dc 3000 	ldr.w	r3, [ip]
 8005696:	3001      	adds	r0, #1
 8005698:	b299      	uxth	r1, r3
 800569a:	fb02 6101 	mla	r1, r2, r1, r6
 800569e:	0c1e      	lsrs	r6, r3, #16
 80056a0:	0c0b      	lsrs	r3, r1, #16
 80056a2:	fb02 3306 	mla	r3, r2, r6, r3
 80056a6:	b289      	uxth	r1, r1
 80056a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056ac:	4285      	cmp	r5, r0
 80056ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056b2:	f84c 1b04 	str.w	r1, [ip], #4
 80056b6:	dcec      	bgt.n	8005692 <__multadd+0x12>
 80056b8:	b30e      	cbz	r6, 80056fe <__multadd+0x7e>
 80056ba:	68a3      	ldr	r3, [r4, #8]
 80056bc:	42ab      	cmp	r3, r5
 80056be:	dc19      	bgt.n	80056f4 <__multadd+0x74>
 80056c0:	6861      	ldr	r1, [r4, #4]
 80056c2:	4638      	mov	r0, r7
 80056c4:	3101      	adds	r1, #1
 80056c6:	f7ff ff79 	bl	80055bc <_Balloc>
 80056ca:	4680      	mov	r8, r0
 80056cc:	b928      	cbnz	r0, 80056da <__multadd+0x5a>
 80056ce:	4602      	mov	r2, r0
 80056d0:	21ba      	movs	r1, #186	@ 0xba
 80056d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005704 <__multadd+0x84>)
 80056d4:	480c      	ldr	r0, [pc, #48]	@ (8005708 <__multadd+0x88>)
 80056d6:	f000 fba9 	bl	8005e2c <__assert_func>
 80056da:	6922      	ldr	r2, [r4, #16]
 80056dc:	f104 010c 	add.w	r1, r4, #12
 80056e0:	3202      	adds	r2, #2
 80056e2:	0092      	lsls	r2, r2, #2
 80056e4:	300c      	adds	r0, #12
 80056e6:	f7ff f80c 	bl	8004702 <memcpy>
 80056ea:	4621      	mov	r1, r4
 80056ec:	4638      	mov	r0, r7
 80056ee:	f7ff ffa5 	bl	800563c <_Bfree>
 80056f2:	4644      	mov	r4, r8
 80056f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80056f8:	3501      	adds	r5, #1
 80056fa:	615e      	str	r6, [r3, #20]
 80056fc:	6125      	str	r5, [r4, #16]
 80056fe:	4620      	mov	r0, r4
 8005700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005704:	08006e46 	.word	0x08006e46
 8005708:	08006e57 	.word	0x08006e57

0800570c <__hi0bits>:
 800570c:	4603      	mov	r3, r0
 800570e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005712:	bf3a      	itte	cc
 8005714:	0403      	lslcc	r3, r0, #16
 8005716:	2010      	movcc	r0, #16
 8005718:	2000      	movcs	r0, #0
 800571a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800571e:	bf3c      	itt	cc
 8005720:	021b      	lslcc	r3, r3, #8
 8005722:	3008      	addcc	r0, #8
 8005724:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005728:	bf3c      	itt	cc
 800572a:	011b      	lslcc	r3, r3, #4
 800572c:	3004      	addcc	r0, #4
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005732:	bf3c      	itt	cc
 8005734:	009b      	lslcc	r3, r3, #2
 8005736:	3002      	addcc	r0, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	db05      	blt.n	8005748 <__hi0bits+0x3c>
 800573c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005740:	f100 0001 	add.w	r0, r0, #1
 8005744:	bf08      	it	eq
 8005746:	2020      	moveq	r0, #32
 8005748:	4770      	bx	lr

0800574a <__lo0bits>:
 800574a:	6803      	ldr	r3, [r0, #0]
 800574c:	4602      	mov	r2, r0
 800574e:	f013 0007 	ands.w	r0, r3, #7
 8005752:	d00b      	beq.n	800576c <__lo0bits+0x22>
 8005754:	07d9      	lsls	r1, r3, #31
 8005756:	d421      	bmi.n	800579c <__lo0bits+0x52>
 8005758:	0798      	lsls	r0, r3, #30
 800575a:	bf49      	itett	mi
 800575c:	085b      	lsrmi	r3, r3, #1
 800575e:	089b      	lsrpl	r3, r3, #2
 8005760:	2001      	movmi	r0, #1
 8005762:	6013      	strmi	r3, [r2, #0]
 8005764:	bf5c      	itt	pl
 8005766:	2002      	movpl	r0, #2
 8005768:	6013      	strpl	r3, [r2, #0]
 800576a:	4770      	bx	lr
 800576c:	b299      	uxth	r1, r3
 800576e:	b909      	cbnz	r1, 8005774 <__lo0bits+0x2a>
 8005770:	2010      	movs	r0, #16
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	b2d9      	uxtb	r1, r3
 8005776:	b909      	cbnz	r1, 800577c <__lo0bits+0x32>
 8005778:	3008      	adds	r0, #8
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	0719      	lsls	r1, r3, #28
 800577e:	bf04      	itt	eq
 8005780:	091b      	lsreq	r3, r3, #4
 8005782:	3004      	addeq	r0, #4
 8005784:	0799      	lsls	r1, r3, #30
 8005786:	bf04      	itt	eq
 8005788:	089b      	lsreq	r3, r3, #2
 800578a:	3002      	addeq	r0, #2
 800578c:	07d9      	lsls	r1, r3, #31
 800578e:	d403      	bmi.n	8005798 <__lo0bits+0x4e>
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	f100 0001 	add.w	r0, r0, #1
 8005796:	d003      	beq.n	80057a0 <__lo0bits+0x56>
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	4770      	bx	lr
 800579c:	2000      	movs	r0, #0
 800579e:	4770      	bx	lr
 80057a0:	2020      	movs	r0, #32
 80057a2:	4770      	bx	lr

080057a4 <__i2b>:
 80057a4:	b510      	push	{r4, lr}
 80057a6:	460c      	mov	r4, r1
 80057a8:	2101      	movs	r1, #1
 80057aa:	f7ff ff07 	bl	80055bc <_Balloc>
 80057ae:	4602      	mov	r2, r0
 80057b0:	b928      	cbnz	r0, 80057be <__i2b+0x1a>
 80057b2:	f240 1145 	movw	r1, #325	@ 0x145
 80057b6:	4b04      	ldr	r3, [pc, #16]	@ (80057c8 <__i2b+0x24>)
 80057b8:	4804      	ldr	r0, [pc, #16]	@ (80057cc <__i2b+0x28>)
 80057ba:	f000 fb37 	bl	8005e2c <__assert_func>
 80057be:	2301      	movs	r3, #1
 80057c0:	6144      	str	r4, [r0, #20]
 80057c2:	6103      	str	r3, [r0, #16]
 80057c4:	bd10      	pop	{r4, pc}
 80057c6:	bf00      	nop
 80057c8:	08006e46 	.word	0x08006e46
 80057cc:	08006e57 	.word	0x08006e57

080057d0 <__multiply>:
 80057d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	4614      	mov	r4, r2
 80057d6:	690a      	ldr	r2, [r1, #16]
 80057d8:	6923      	ldr	r3, [r4, #16]
 80057da:	460f      	mov	r7, r1
 80057dc:	429a      	cmp	r2, r3
 80057de:	bfa2      	ittt	ge
 80057e0:	4623      	movge	r3, r4
 80057e2:	460c      	movge	r4, r1
 80057e4:	461f      	movge	r7, r3
 80057e6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80057ea:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80057ee:	68a3      	ldr	r3, [r4, #8]
 80057f0:	6861      	ldr	r1, [r4, #4]
 80057f2:	eb0a 0609 	add.w	r6, sl, r9
 80057f6:	42b3      	cmp	r3, r6
 80057f8:	b085      	sub	sp, #20
 80057fa:	bfb8      	it	lt
 80057fc:	3101      	addlt	r1, #1
 80057fe:	f7ff fedd 	bl	80055bc <_Balloc>
 8005802:	b930      	cbnz	r0, 8005812 <__multiply+0x42>
 8005804:	4602      	mov	r2, r0
 8005806:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800580a:	4b43      	ldr	r3, [pc, #268]	@ (8005918 <__multiply+0x148>)
 800580c:	4843      	ldr	r0, [pc, #268]	@ (800591c <__multiply+0x14c>)
 800580e:	f000 fb0d 	bl	8005e2c <__assert_func>
 8005812:	f100 0514 	add.w	r5, r0, #20
 8005816:	462b      	mov	r3, r5
 8005818:	2200      	movs	r2, #0
 800581a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800581e:	4543      	cmp	r3, r8
 8005820:	d321      	bcc.n	8005866 <__multiply+0x96>
 8005822:	f107 0114 	add.w	r1, r7, #20
 8005826:	f104 0214 	add.w	r2, r4, #20
 800582a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800582e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005832:	9302      	str	r3, [sp, #8]
 8005834:	1b13      	subs	r3, r2, r4
 8005836:	3b15      	subs	r3, #21
 8005838:	f023 0303 	bic.w	r3, r3, #3
 800583c:	3304      	adds	r3, #4
 800583e:	f104 0715 	add.w	r7, r4, #21
 8005842:	42ba      	cmp	r2, r7
 8005844:	bf38      	it	cc
 8005846:	2304      	movcc	r3, #4
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	9b02      	ldr	r3, [sp, #8]
 800584c:	9103      	str	r1, [sp, #12]
 800584e:	428b      	cmp	r3, r1
 8005850:	d80c      	bhi.n	800586c <__multiply+0x9c>
 8005852:	2e00      	cmp	r6, #0
 8005854:	dd03      	ble.n	800585e <__multiply+0x8e>
 8005856:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800585a:	2b00      	cmp	r3, #0
 800585c:	d05a      	beq.n	8005914 <__multiply+0x144>
 800585e:	6106      	str	r6, [r0, #16]
 8005860:	b005      	add	sp, #20
 8005862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005866:	f843 2b04 	str.w	r2, [r3], #4
 800586a:	e7d8      	b.n	800581e <__multiply+0x4e>
 800586c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005870:	f1ba 0f00 	cmp.w	sl, #0
 8005874:	d023      	beq.n	80058be <__multiply+0xee>
 8005876:	46a9      	mov	r9, r5
 8005878:	f04f 0c00 	mov.w	ip, #0
 800587c:	f104 0e14 	add.w	lr, r4, #20
 8005880:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005884:	f8d9 3000 	ldr.w	r3, [r9]
 8005888:	fa1f fb87 	uxth.w	fp, r7
 800588c:	b29b      	uxth	r3, r3
 800588e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005892:	4463      	add	r3, ip
 8005894:	f8d9 c000 	ldr.w	ip, [r9]
 8005898:	0c3f      	lsrs	r7, r7, #16
 800589a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800589e:	fb0a c707 	mla	r7, sl, r7, ip
 80058a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80058ac:	4572      	cmp	r2, lr
 80058ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80058b2:	f849 3b04 	str.w	r3, [r9], #4
 80058b6:	d8e3      	bhi.n	8005880 <__multiply+0xb0>
 80058b8:	9b01      	ldr	r3, [sp, #4]
 80058ba:	f845 c003 	str.w	ip, [r5, r3]
 80058be:	9b03      	ldr	r3, [sp, #12]
 80058c0:	3104      	adds	r1, #4
 80058c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80058c6:	f1b9 0f00 	cmp.w	r9, #0
 80058ca:	d021      	beq.n	8005910 <__multiply+0x140>
 80058cc:	46ae      	mov	lr, r5
 80058ce:	f04f 0a00 	mov.w	sl, #0
 80058d2:	682b      	ldr	r3, [r5, #0]
 80058d4:	f104 0c14 	add.w	ip, r4, #20
 80058d8:	f8bc b000 	ldrh.w	fp, [ip]
 80058dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	fb09 770b 	mla	r7, r9, fp, r7
 80058e6:	4457      	add	r7, sl
 80058e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80058ec:	f84e 3b04 	str.w	r3, [lr], #4
 80058f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80058f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058f8:	f8be 3000 	ldrh.w	r3, [lr]
 80058fc:	4562      	cmp	r2, ip
 80058fe:	fb09 330a 	mla	r3, r9, sl, r3
 8005902:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005906:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800590a:	d8e5      	bhi.n	80058d8 <__multiply+0x108>
 800590c:	9f01      	ldr	r7, [sp, #4]
 800590e:	51eb      	str	r3, [r5, r7]
 8005910:	3504      	adds	r5, #4
 8005912:	e79a      	b.n	800584a <__multiply+0x7a>
 8005914:	3e01      	subs	r6, #1
 8005916:	e79c      	b.n	8005852 <__multiply+0x82>
 8005918:	08006e46 	.word	0x08006e46
 800591c:	08006e57 	.word	0x08006e57

08005920 <__pow5mult>:
 8005920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005924:	4615      	mov	r5, r2
 8005926:	f012 0203 	ands.w	r2, r2, #3
 800592a:	4607      	mov	r7, r0
 800592c:	460e      	mov	r6, r1
 800592e:	d007      	beq.n	8005940 <__pow5mult+0x20>
 8005930:	4c25      	ldr	r4, [pc, #148]	@ (80059c8 <__pow5mult+0xa8>)
 8005932:	3a01      	subs	r2, #1
 8005934:	2300      	movs	r3, #0
 8005936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800593a:	f7ff fea1 	bl	8005680 <__multadd>
 800593e:	4606      	mov	r6, r0
 8005940:	10ad      	asrs	r5, r5, #2
 8005942:	d03d      	beq.n	80059c0 <__pow5mult+0xa0>
 8005944:	69fc      	ldr	r4, [r7, #28]
 8005946:	b97c      	cbnz	r4, 8005968 <__pow5mult+0x48>
 8005948:	2010      	movs	r0, #16
 800594a:	f7ff fd81 	bl	8005450 <malloc>
 800594e:	4602      	mov	r2, r0
 8005950:	61f8      	str	r0, [r7, #28]
 8005952:	b928      	cbnz	r0, 8005960 <__pow5mult+0x40>
 8005954:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005958:	4b1c      	ldr	r3, [pc, #112]	@ (80059cc <__pow5mult+0xac>)
 800595a:	481d      	ldr	r0, [pc, #116]	@ (80059d0 <__pow5mult+0xb0>)
 800595c:	f000 fa66 	bl	8005e2c <__assert_func>
 8005960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005964:	6004      	str	r4, [r0, #0]
 8005966:	60c4      	str	r4, [r0, #12]
 8005968:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800596c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005970:	b94c      	cbnz	r4, 8005986 <__pow5mult+0x66>
 8005972:	f240 2171 	movw	r1, #625	@ 0x271
 8005976:	4638      	mov	r0, r7
 8005978:	f7ff ff14 	bl	80057a4 <__i2b>
 800597c:	2300      	movs	r3, #0
 800597e:	4604      	mov	r4, r0
 8005980:	f8c8 0008 	str.w	r0, [r8, #8]
 8005984:	6003      	str	r3, [r0, #0]
 8005986:	f04f 0900 	mov.w	r9, #0
 800598a:	07eb      	lsls	r3, r5, #31
 800598c:	d50a      	bpl.n	80059a4 <__pow5mult+0x84>
 800598e:	4631      	mov	r1, r6
 8005990:	4622      	mov	r2, r4
 8005992:	4638      	mov	r0, r7
 8005994:	f7ff ff1c 	bl	80057d0 <__multiply>
 8005998:	4680      	mov	r8, r0
 800599a:	4631      	mov	r1, r6
 800599c:	4638      	mov	r0, r7
 800599e:	f7ff fe4d 	bl	800563c <_Bfree>
 80059a2:	4646      	mov	r6, r8
 80059a4:	106d      	asrs	r5, r5, #1
 80059a6:	d00b      	beq.n	80059c0 <__pow5mult+0xa0>
 80059a8:	6820      	ldr	r0, [r4, #0]
 80059aa:	b938      	cbnz	r0, 80059bc <__pow5mult+0x9c>
 80059ac:	4622      	mov	r2, r4
 80059ae:	4621      	mov	r1, r4
 80059b0:	4638      	mov	r0, r7
 80059b2:	f7ff ff0d 	bl	80057d0 <__multiply>
 80059b6:	6020      	str	r0, [r4, #0]
 80059b8:	f8c0 9000 	str.w	r9, [r0]
 80059bc:	4604      	mov	r4, r0
 80059be:	e7e4      	b.n	800598a <__pow5mult+0x6a>
 80059c0:	4630      	mov	r0, r6
 80059c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059c6:	bf00      	nop
 80059c8:	08006eb0 	.word	0x08006eb0
 80059cc:	08006dd7 	.word	0x08006dd7
 80059d0:	08006e57 	.word	0x08006e57

080059d4 <__lshift>:
 80059d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	460c      	mov	r4, r1
 80059da:	4607      	mov	r7, r0
 80059dc:	4691      	mov	r9, r2
 80059de:	6923      	ldr	r3, [r4, #16]
 80059e0:	6849      	ldr	r1, [r1, #4]
 80059e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059e6:	68a3      	ldr	r3, [r4, #8]
 80059e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059ec:	f108 0601 	add.w	r6, r8, #1
 80059f0:	42b3      	cmp	r3, r6
 80059f2:	db0b      	blt.n	8005a0c <__lshift+0x38>
 80059f4:	4638      	mov	r0, r7
 80059f6:	f7ff fde1 	bl	80055bc <_Balloc>
 80059fa:	4605      	mov	r5, r0
 80059fc:	b948      	cbnz	r0, 8005a12 <__lshift+0x3e>
 80059fe:	4602      	mov	r2, r0
 8005a00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005a04:	4b27      	ldr	r3, [pc, #156]	@ (8005aa4 <__lshift+0xd0>)
 8005a06:	4828      	ldr	r0, [pc, #160]	@ (8005aa8 <__lshift+0xd4>)
 8005a08:	f000 fa10 	bl	8005e2c <__assert_func>
 8005a0c:	3101      	adds	r1, #1
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	e7ee      	b.n	80059f0 <__lshift+0x1c>
 8005a12:	2300      	movs	r3, #0
 8005a14:	f100 0114 	add.w	r1, r0, #20
 8005a18:	f100 0210 	add.w	r2, r0, #16
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	4553      	cmp	r3, sl
 8005a20:	db33      	blt.n	8005a8a <__lshift+0xb6>
 8005a22:	6920      	ldr	r0, [r4, #16]
 8005a24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a28:	f104 0314 	add.w	r3, r4, #20
 8005a2c:	f019 091f 	ands.w	r9, r9, #31
 8005a30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a38:	d02b      	beq.n	8005a92 <__lshift+0xbe>
 8005a3a:	468a      	mov	sl, r1
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f1c9 0e20 	rsb	lr, r9, #32
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	fa00 f009 	lsl.w	r0, r0, r9
 8005a48:	4310      	orrs	r0, r2
 8005a4a:	f84a 0b04 	str.w	r0, [sl], #4
 8005a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a52:	459c      	cmp	ip, r3
 8005a54:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a58:	d8f3      	bhi.n	8005a42 <__lshift+0x6e>
 8005a5a:	ebac 0304 	sub.w	r3, ip, r4
 8005a5e:	3b15      	subs	r3, #21
 8005a60:	f023 0303 	bic.w	r3, r3, #3
 8005a64:	3304      	adds	r3, #4
 8005a66:	f104 0015 	add.w	r0, r4, #21
 8005a6a:	4584      	cmp	ip, r0
 8005a6c:	bf38      	it	cc
 8005a6e:	2304      	movcc	r3, #4
 8005a70:	50ca      	str	r2, [r1, r3]
 8005a72:	b10a      	cbz	r2, 8005a78 <__lshift+0xa4>
 8005a74:	f108 0602 	add.w	r6, r8, #2
 8005a78:	3e01      	subs	r6, #1
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	612e      	str	r6, [r5, #16]
 8005a80:	f7ff fddc 	bl	800563c <_Bfree>
 8005a84:	4628      	mov	r0, r5
 8005a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a8e:	3301      	adds	r3, #1
 8005a90:	e7c5      	b.n	8005a1e <__lshift+0x4a>
 8005a92:	3904      	subs	r1, #4
 8005a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a98:	459c      	cmp	ip, r3
 8005a9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a9e:	d8f9      	bhi.n	8005a94 <__lshift+0xc0>
 8005aa0:	e7ea      	b.n	8005a78 <__lshift+0xa4>
 8005aa2:	bf00      	nop
 8005aa4:	08006e46 	.word	0x08006e46
 8005aa8:	08006e57 	.word	0x08006e57

08005aac <__mcmp>:
 8005aac:	4603      	mov	r3, r0
 8005aae:	690a      	ldr	r2, [r1, #16]
 8005ab0:	6900      	ldr	r0, [r0, #16]
 8005ab2:	b530      	push	{r4, r5, lr}
 8005ab4:	1a80      	subs	r0, r0, r2
 8005ab6:	d10e      	bne.n	8005ad6 <__mcmp+0x2a>
 8005ab8:	3314      	adds	r3, #20
 8005aba:	3114      	adds	r1, #20
 8005abc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ac0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ac4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ac8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005acc:	4295      	cmp	r5, r2
 8005ace:	d003      	beq.n	8005ad8 <__mcmp+0x2c>
 8005ad0:	d205      	bcs.n	8005ade <__mcmp+0x32>
 8005ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad6:	bd30      	pop	{r4, r5, pc}
 8005ad8:	42a3      	cmp	r3, r4
 8005ada:	d3f3      	bcc.n	8005ac4 <__mcmp+0x18>
 8005adc:	e7fb      	b.n	8005ad6 <__mcmp+0x2a>
 8005ade:	2001      	movs	r0, #1
 8005ae0:	e7f9      	b.n	8005ad6 <__mcmp+0x2a>
	...

08005ae4 <__mdiff>:
 8005ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae8:	4689      	mov	r9, r1
 8005aea:	4606      	mov	r6, r0
 8005aec:	4611      	mov	r1, r2
 8005aee:	4648      	mov	r0, r9
 8005af0:	4614      	mov	r4, r2
 8005af2:	f7ff ffdb 	bl	8005aac <__mcmp>
 8005af6:	1e05      	subs	r5, r0, #0
 8005af8:	d112      	bne.n	8005b20 <__mdiff+0x3c>
 8005afa:	4629      	mov	r1, r5
 8005afc:	4630      	mov	r0, r6
 8005afe:	f7ff fd5d 	bl	80055bc <_Balloc>
 8005b02:	4602      	mov	r2, r0
 8005b04:	b928      	cbnz	r0, 8005b12 <__mdiff+0x2e>
 8005b06:	f240 2137 	movw	r1, #567	@ 0x237
 8005b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c04 <__mdiff+0x120>)
 8005b0c:	483e      	ldr	r0, [pc, #248]	@ (8005c08 <__mdiff+0x124>)
 8005b0e:	f000 f98d 	bl	8005e2c <__assert_func>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b18:	4610      	mov	r0, r2
 8005b1a:	b003      	add	sp, #12
 8005b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b20:	bfbc      	itt	lt
 8005b22:	464b      	movlt	r3, r9
 8005b24:	46a1      	movlt	r9, r4
 8005b26:	4630      	mov	r0, r6
 8005b28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b2c:	bfba      	itte	lt
 8005b2e:	461c      	movlt	r4, r3
 8005b30:	2501      	movlt	r5, #1
 8005b32:	2500      	movge	r5, #0
 8005b34:	f7ff fd42 	bl	80055bc <_Balloc>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	b918      	cbnz	r0, 8005b44 <__mdiff+0x60>
 8005b3c:	f240 2145 	movw	r1, #581	@ 0x245
 8005b40:	4b30      	ldr	r3, [pc, #192]	@ (8005c04 <__mdiff+0x120>)
 8005b42:	e7e3      	b.n	8005b0c <__mdiff+0x28>
 8005b44:	f100 0b14 	add.w	fp, r0, #20
 8005b48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005b4c:	f109 0310 	add.w	r3, r9, #16
 8005b50:	60c5      	str	r5, [r0, #12]
 8005b52:	f04f 0c00 	mov.w	ip, #0
 8005b56:	f109 0514 	add.w	r5, r9, #20
 8005b5a:	46d9      	mov	r9, fp
 8005b5c:	6926      	ldr	r6, [r4, #16]
 8005b5e:	f104 0e14 	add.w	lr, r4, #20
 8005b62:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005b66:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005b6a:	9301      	str	r3, [sp, #4]
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005b72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005b76:	b281      	uxth	r1, r0
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	fa1f f38a 	uxth.w	r3, sl
 8005b7e:	1a5b      	subs	r3, r3, r1
 8005b80:	0c00      	lsrs	r0, r0, #16
 8005b82:	4463      	add	r3, ip
 8005b84:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005b88:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005b92:	4576      	cmp	r6, lr
 8005b94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b98:	f849 3b04 	str.w	r3, [r9], #4
 8005b9c:	d8e6      	bhi.n	8005b6c <__mdiff+0x88>
 8005b9e:	1b33      	subs	r3, r6, r4
 8005ba0:	3b15      	subs	r3, #21
 8005ba2:	f023 0303 	bic.w	r3, r3, #3
 8005ba6:	3415      	adds	r4, #21
 8005ba8:	3304      	adds	r3, #4
 8005baa:	42a6      	cmp	r6, r4
 8005bac:	bf38      	it	cc
 8005bae:	2304      	movcc	r3, #4
 8005bb0:	441d      	add	r5, r3
 8005bb2:	445b      	add	r3, fp
 8005bb4:	461e      	mov	r6, r3
 8005bb6:	462c      	mov	r4, r5
 8005bb8:	4544      	cmp	r4, r8
 8005bba:	d30e      	bcc.n	8005bda <__mdiff+0xf6>
 8005bbc:	f108 0103 	add.w	r1, r8, #3
 8005bc0:	1b49      	subs	r1, r1, r5
 8005bc2:	f021 0103 	bic.w	r1, r1, #3
 8005bc6:	3d03      	subs	r5, #3
 8005bc8:	45a8      	cmp	r8, r5
 8005bca:	bf38      	it	cc
 8005bcc:	2100      	movcc	r1, #0
 8005bce:	440b      	add	r3, r1
 8005bd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005bd4:	b199      	cbz	r1, 8005bfe <__mdiff+0x11a>
 8005bd6:	6117      	str	r7, [r2, #16]
 8005bd8:	e79e      	b.n	8005b18 <__mdiff+0x34>
 8005bda:	46e6      	mov	lr, ip
 8005bdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8005be0:	fa1f fc81 	uxth.w	ip, r1
 8005be4:	44f4      	add	ip, lr
 8005be6:	0c08      	lsrs	r0, r1, #16
 8005be8:	4471      	add	r1, lr
 8005bea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005bee:	b289      	uxth	r1, r1
 8005bf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005bf4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005bf8:	f846 1b04 	str.w	r1, [r6], #4
 8005bfc:	e7dc      	b.n	8005bb8 <__mdiff+0xd4>
 8005bfe:	3f01      	subs	r7, #1
 8005c00:	e7e6      	b.n	8005bd0 <__mdiff+0xec>
 8005c02:	bf00      	nop
 8005c04:	08006e46 	.word	0x08006e46
 8005c08:	08006e57 	.word	0x08006e57

08005c0c <__d2b>:
 8005c0c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005c10:	2101      	movs	r1, #1
 8005c12:	4690      	mov	r8, r2
 8005c14:	4699      	mov	r9, r3
 8005c16:	9e08      	ldr	r6, [sp, #32]
 8005c18:	f7ff fcd0 	bl	80055bc <_Balloc>
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	b930      	cbnz	r0, 8005c2e <__d2b+0x22>
 8005c20:	4602      	mov	r2, r0
 8005c22:	f240 310f 	movw	r1, #783	@ 0x30f
 8005c26:	4b23      	ldr	r3, [pc, #140]	@ (8005cb4 <__d2b+0xa8>)
 8005c28:	4823      	ldr	r0, [pc, #140]	@ (8005cb8 <__d2b+0xac>)
 8005c2a:	f000 f8ff 	bl	8005e2c <__assert_func>
 8005c2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005c32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c36:	b10d      	cbz	r5, 8005c3c <__d2b+0x30>
 8005c38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	f1b8 0300 	subs.w	r3, r8, #0
 8005c42:	d024      	beq.n	8005c8e <__d2b+0x82>
 8005c44:	4668      	mov	r0, sp
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	f7ff fd7f 	bl	800574a <__lo0bits>
 8005c4c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c50:	b1d8      	cbz	r0, 8005c8a <__d2b+0x7e>
 8005c52:	f1c0 0320 	rsb	r3, r0, #32
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	40c2      	lsrs	r2, r0
 8005c5e:	6163      	str	r3, [r4, #20]
 8005c60:	9201      	str	r2, [sp, #4]
 8005c62:	9b01      	ldr	r3, [sp, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bf0c      	ite	eq
 8005c68:	2201      	moveq	r2, #1
 8005c6a:	2202      	movne	r2, #2
 8005c6c:	61a3      	str	r3, [r4, #24]
 8005c6e:	6122      	str	r2, [r4, #16]
 8005c70:	b1ad      	cbz	r5, 8005c9e <__d2b+0x92>
 8005c72:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005c76:	4405      	add	r5, r0
 8005c78:	6035      	str	r5, [r6, #0]
 8005c7a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c80:	6018      	str	r0, [r3, #0]
 8005c82:	4620      	mov	r0, r4
 8005c84:	b002      	add	sp, #8
 8005c86:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005c8a:	6161      	str	r1, [r4, #20]
 8005c8c:	e7e9      	b.n	8005c62 <__d2b+0x56>
 8005c8e:	a801      	add	r0, sp, #4
 8005c90:	f7ff fd5b 	bl	800574a <__lo0bits>
 8005c94:	9b01      	ldr	r3, [sp, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	6163      	str	r3, [r4, #20]
 8005c9a:	3020      	adds	r0, #32
 8005c9c:	e7e7      	b.n	8005c6e <__d2b+0x62>
 8005c9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005ca2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ca6:	6030      	str	r0, [r6, #0]
 8005ca8:	6918      	ldr	r0, [r3, #16]
 8005caa:	f7ff fd2f 	bl	800570c <__hi0bits>
 8005cae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005cb2:	e7e4      	b.n	8005c7e <__d2b+0x72>
 8005cb4:	08006e46 	.word	0x08006e46
 8005cb8:	08006e57 	.word	0x08006e57

08005cbc <__sflush_r>:
 8005cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	0716      	lsls	r6, r2, #28
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	d454      	bmi.n	8005d74 <__sflush_r+0xb8>
 8005cca:	684b      	ldr	r3, [r1, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	dc02      	bgt.n	8005cd6 <__sflush_r+0x1a>
 8005cd0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dd48      	ble.n	8005d68 <__sflush_r+0xac>
 8005cd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cd8:	2e00      	cmp	r6, #0
 8005cda:	d045      	beq.n	8005d68 <__sflush_r+0xac>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ce2:	682f      	ldr	r7, [r5, #0]
 8005ce4:	6a21      	ldr	r1, [r4, #32]
 8005ce6:	602b      	str	r3, [r5, #0]
 8005ce8:	d030      	beq.n	8005d4c <__sflush_r+0x90>
 8005cea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	0759      	lsls	r1, r3, #29
 8005cf0:	d505      	bpl.n	8005cfe <__sflush_r+0x42>
 8005cf2:	6863      	ldr	r3, [r4, #4]
 8005cf4:	1ad2      	subs	r2, r2, r3
 8005cf6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cf8:	b10b      	cbz	r3, 8005cfe <__sflush_r+0x42>
 8005cfa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cfc:	1ad2      	subs	r2, r2, r3
 8005cfe:	2300      	movs	r3, #0
 8005d00:	4628      	mov	r0, r5
 8005d02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d04:	6a21      	ldr	r1, [r4, #32]
 8005d06:	47b0      	blx	r6
 8005d08:	1c43      	adds	r3, r0, #1
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	d106      	bne.n	8005d1c <__sflush_r+0x60>
 8005d0e:	6829      	ldr	r1, [r5, #0]
 8005d10:	291d      	cmp	r1, #29
 8005d12:	d82b      	bhi.n	8005d6c <__sflush_r+0xb0>
 8005d14:	4a28      	ldr	r2, [pc, #160]	@ (8005db8 <__sflush_r+0xfc>)
 8005d16:	410a      	asrs	r2, r1
 8005d18:	07d6      	lsls	r6, r2, #31
 8005d1a:	d427      	bmi.n	8005d6c <__sflush_r+0xb0>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	6062      	str	r2, [r4, #4]
 8005d20:	6922      	ldr	r2, [r4, #16]
 8005d22:	04d9      	lsls	r1, r3, #19
 8005d24:	6022      	str	r2, [r4, #0]
 8005d26:	d504      	bpl.n	8005d32 <__sflush_r+0x76>
 8005d28:	1c42      	adds	r2, r0, #1
 8005d2a:	d101      	bne.n	8005d30 <__sflush_r+0x74>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	b903      	cbnz	r3, 8005d32 <__sflush_r+0x76>
 8005d30:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d34:	602f      	str	r7, [r5, #0]
 8005d36:	b1b9      	cbz	r1, 8005d68 <__sflush_r+0xac>
 8005d38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d3c:	4299      	cmp	r1, r3
 8005d3e:	d002      	beq.n	8005d46 <__sflush_r+0x8a>
 8005d40:	4628      	mov	r0, r5
 8005d42:	f7ff fb3d 	bl	80053c0 <_free_r>
 8005d46:	2300      	movs	r3, #0
 8005d48:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d4a:	e00d      	b.n	8005d68 <__sflush_r+0xac>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	4628      	mov	r0, r5
 8005d50:	47b0      	blx	r6
 8005d52:	4602      	mov	r2, r0
 8005d54:	1c50      	adds	r0, r2, #1
 8005d56:	d1c9      	bne.n	8005cec <__sflush_r+0x30>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0c6      	beq.n	8005cec <__sflush_r+0x30>
 8005d5e:	2b1d      	cmp	r3, #29
 8005d60:	d001      	beq.n	8005d66 <__sflush_r+0xaa>
 8005d62:	2b16      	cmp	r3, #22
 8005d64:	d11d      	bne.n	8005da2 <__sflush_r+0xe6>
 8005d66:	602f      	str	r7, [r5, #0]
 8005d68:	2000      	movs	r0, #0
 8005d6a:	e021      	b.n	8005db0 <__sflush_r+0xf4>
 8005d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d70:	b21b      	sxth	r3, r3
 8005d72:	e01a      	b.n	8005daa <__sflush_r+0xee>
 8005d74:	690f      	ldr	r7, [r1, #16]
 8005d76:	2f00      	cmp	r7, #0
 8005d78:	d0f6      	beq.n	8005d68 <__sflush_r+0xac>
 8005d7a:	0793      	lsls	r3, r2, #30
 8005d7c:	bf18      	it	ne
 8005d7e:	2300      	movne	r3, #0
 8005d80:	680e      	ldr	r6, [r1, #0]
 8005d82:	bf08      	it	eq
 8005d84:	694b      	ldreq	r3, [r1, #20]
 8005d86:	1bf6      	subs	r6, r6, r7
 8005d88:	600f      	str	r7, [r1, #0]
 8005d8a:	608b      	str	r3, [r1, #8]
 8005d8c:	2e00      	cmp	r6, #0
 8005d8e:	ddeb      	ble.n	8005d68 <__sflush_r+0xac>
 8005d90:	4633      	mov	r3, r6
 8005d92:	463a      	mov	r2, r7
 8005d94:	4628      	mov	r0, r5
 8005d96:	6a21      	ldr	r1, [r4, #32]
 8005d98:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005d9c:	47e0      	blx	ip
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	dc07      	bgt.n	8005db2 <__sflush_r+0xf6>
 8005da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005daa:	f04f 30ff 	mov.w	r0, #4294967295
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005db2:	4407      	add	r7, r0
 8005db4:	1a36      	subs	r6, r6, r0
 8005db6:	e7e9      	b.n	8005d8c <__sflush_r+0xd0>
 8005db8:	dfbffffe 	.word	0xdfbffffe

08005dbc <_fflush_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	690b      	ldr	r3, [r1, #16]
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	b913      	cbnz	r3, 8005dcc <_fflush_r+0x10>
 8005dc6:	2500      	movs	r5, #0
 8005dc8:	4628      	mov	r0, r5
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	b118      	cbz	r0, 8005dd6 <_fflush_r+0x1a>
 8005dce:	6a03      	ldr	r3, [r0, #32]
 8005dd0:	b90b      	cbnz	r3, 8005dd6 <_fflush_r+0x1a>
 8005dd2:	f7fe fb8f 	bl	80044f4 <__sinit>
 8005dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0f3      	beq.n	8005dc6 <_fflush_r+0xa>
 8005dde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005de0:	07d0      	lsls	r0, r2, #31
 8005de2:	d404      	bmi.n	8005dee <_fflush_r+0x32>
 8005de4:	0599      	lsls	r1, r3, #22
 8005de6:	d402      	bmi.n	8005dee <_fflush_r+0x32>
 8005de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dea:	f7fe fc7a 	bl	80046e2 <__retarget_lock_acquire_recursive>
 8005dee:	4628      	mov	r0, r5
 8005df0:	4621      	mov	r1, r4
 8005df2:	f7ff ff63 	bl	8005cbc <__sflush_r>
 8005df6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005df8:	4605      	mov	r5, r0
 8005dfa:	07da      	lsls	r2, r3, #31
 8005dfc:	d4e4      	bmi.n	8005dc8 <_fflush_r+0xc>
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	059b      	lsls	r3, r3, #22
 8005e02:	d4e1      	bmi.n	8005dc8 <_fflush_r+0xc>
 8005e04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e06:	f7fe fc6d 	bl	80046e4 <__retarget_lock_release_recursive>
 8005e0a:	e7dd      	b.n	8005dc8 <_fflush_r+0xc>

08005e0c <_sbrk_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	2300      	movs	r3, #0
 8005e10:	4d05      	ldr	r5, [pc, #20]	@ (8005e28 <_sbrk_r+0x1c>)
 8005e12:	4604      	mov	r4, r0
 8005e14:	4608      	mov	r0, r1
 8005e16:	602b      	str	r3, [r5, #0]
 8005e18:	f7fb fc34 	bl	8001684 <_sbrk>
 8005e1c:	1c43      	adds	r3, r0, #1
 8005e1e:	d102      	bne.n	8005e26 <_sbrk_r+0x1a>
 8005e20:	682b      	ldr	r3, [r5, #0]
 8005e22:	b103      	cbz	r3, 8005e26 <_sbrk_r+0x1a>
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	bd38      	pop	{r3, r4, r5, pc}
 8005e28:	200005c8 	.word	0x200005c8

08005e2c <__assert_func>:
 8005e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e2e:	4614      	mov	r4, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	4b09      	ldr	r3, [pc, #36]	@ (8005e58 <__assert_func+0x2c>)
 8005e34:	4605      	mov	r5, r0
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68d8      	ldr	r0, [r3, #12]
 8005e3a:	b954      	cbnz	r4, 8005e52 <__assert_func+0x26>
 8005e3c:	4b07      	ldr	r3, [pc, #28]	@ (8005e5c <__assert_func+0x30>)
 8005e3e:	461c      	mov	r4, r3
 8005e40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e44:	9100      	str	r1, [sp, #0]
 8005e46:	462b      	mov	r3, r5
 8005e48:	4905      	ldr	r1, [pc, #20]	@ (8005e60 <__assert_func+0x34>)
 8005e4a:	f000 f841 	bl	8005ed0 <fiprintf>
 8005e4e:	f000 f851 	bl	8005ef4 <abort>
 8005e52:	4b04      	ldr	r3, [pc, #16]	@ (8005e64 <__assert_func+0x38>)
 8005e54:	e7f4      	b.n	8005e40 <__assert_func+0x14>
 8005e56:	bf00      	nop
 8005e58:	20000010 	.word	0x20000010
 8005e5c:	08006ff5 	.word	0x08006ff5
 8005e60:	08006fc7 	.word	0x08006fc7
 8005e64:	08006fba 	.word	0x08006fba

08005e68 <_calloc_r>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	fba1 5402 	umull	r5, r4, r1, r2
 8005e6e:	b93c      	cbnz	r4, 8005e80 <_calloc_r+0x18>
 8005e70:	4629      	mov	r1, r5
 8005e72:	f7ff fb17 	bl	80054a4 <_malloc_r>
 8005e76:	4606      	mov	r6, r0
 8005e78:	b928      	cbnz	r0, 8005e86 <_calloc_r+0x1e>
 8005e7a:	2600      	movs	r6, #0
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	220c      	movs	r2, #12
 8005e82:	6002      	str	r2, [r0, #0]
 8005e84:	e7f9      	b.n	8005e7a <_calloc_r+0x12>
 8005e86:	462a      	mov	r2, r5
 8005e88:	4621      	mov	r1, r4
 8005e8a:	f7fe fbac 	bl	80045e6 <memset>
 8005e8e:	e7f5      	b.n	8005e7c <_calloc_r+0x14>

08005e90 <__ascii_mbtowc>:
 8005e90:	b082      	sub	sp, #8
 8005e92:	b901      	cbnz	r1, 8005e96 <__ascii_mbtowc+0x6>
 8005e94:	a901      	add	r1, sp, #4
 8005e96:	b142      	cbz	r2, 8005eaa <__ascii_mbtowc+0x1a>
 8005e98:	b14b      	cbz	r3, 8005eae <__ascii_mbtowc+0x1e>
 8005e9a:	7813      	ldrb	r3, [r2, #0]
 8005e9c:	600b      	str	r3, [r1, #0]
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	1e10      	subs	r0, r2, #0
 8005ea2:	bf18      	it	ne
 8005ea4:	2001      	movne	r0, #1
 8005ea6:	b002      	add	sp, #8
 8005ea8:	4770      	bx	lr
 8005eaa:	4610      	mov	r0, r2
 8005eac:	e7fb      	b.n	8005ea6 <__ascii_mbtowc+0x16>
 8005eae:	f06f 0001 	mvn.w	r0, #1
 8005eb2:	e7f8      	b.n	8005ea6 <__ascii_mbtowc+0x16>

08005eb4 <__ascii_wctomb>:
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	4608      	mov	r0, r1
 8005eb8:	b141      	cbz	r1, 8005ecc <__ascii_wctomb+0x18>
 8005eba:	2aff      	cmp	r2, #255	@ 0xff
 8005ebc:	d904      	bls.n	8005ec8 <__ascii_wctomb+0x14>
 8005ebe:	228a      	movs	r2, #138	@ 0x8a
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	4770      	bx	lr
 8005ec8:	2001      	movs	r0, #1
 8005eca:	700a      	strb	r2, [r1, #0]
 8005ecc:	4770      	bx	lr
	...

08005ed0 <fiprintf>:
 8005ed0:	b40e      	push	{r1, r2, r3}
 8005ed2:	b503      	push	{r0, r1, lr}
 8005ed4:	4601      	mov	r1, r0
 8005ed6:	ab03      	add	r3, sp, #12
 8005ed8:	4805      	ldr	r0, [pc, #20]	@ (8005ef0 <fiprintf+0x20>)
 8005eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ede:	6800      	ldr	r0, [r0, #0]
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	f000 f835 	bl	8005f50 <_vfiprintf_r>
 8005ee6:	b002      	add	sp, #8
 8005ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eec:	b003      	add	sp, #12
 8005eee:	4770      	bx	lr
 8005ef0:	20000010 	.word	0x20000010

08005ef4 <abort>:
 8005ef4:	2006      	movs	r0, #6
 8005ef6:	b508      	push	{r3, lr}
 8005ef8:	f000 f9fe 	bl	80062f8 <raise>
 8005efc:	2001      	movs	r0, #1
 8005efe:	f7fb fb4d 	bl	800159c <_exit>

08005f02 <__sfputc_r>:
 8005f02:	6893      	ldr	r3, [r2, #8]
 8005f04:	b410      	push	{r4}
 8005f06:	3b01      	subs	r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	6093      	str	r3, [r2, #8]
 8005f0c:	da07      	bge.n	8005f1e <__sfputc_r+0x1c>
 8005f0e:	6994      	ldr	r4, [r2, #24]
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	db01      	blt.n	8005f18 <__sfputc_r+0x16>
 8005f14:	290a      	cmp	r1, #10
 8005f16:	d102      	bne.n	8005f1e <__sfputc_r+0x1c>
 8005f18:	bc10      	pop	{r4}
 8005f1a:	f000 b931 	b.w	8006180 <__swbuf_r>
 8005f1e:	6813      	ldr	r3, [r2, #0]
 8005f20:	1c58      	adds	r0, r3, #1
 8005f22:	6010      	str	r0, [r2, #0]
 8005f24:	7019      	strb	r1, [r3, #0]
 8005f26:	4608      	mov	r0, r1
 8005f28:	bc10      	pop	{r4}
 8005f2a:	4770      	bx	lr

08005f2c <__sfputs_r>:
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460f      	mov	r7, r1
 8005f32:	4614      	mov	r4, r2
 8005f34:	18d5      	adds	r5, r2, r3
 8005f36:	42ac      	cmp	r4, r5
 8005f38:	d101      	bne.n	8005f3e <__sfputs_r+0x12>
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	e007      	b.n	8005f4e <__sfputs_r+0x22>
 8005f3e:	463a      	mov	r2, r7
 8005f40:	4630      	mov	r0, r6
 8005f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f46:	f7ff ffdc 	bl	8005f02 <__sfputc_r>
 8005f4a:	1c43      	adds	r3, r0, #1
 8005f4c:	d1f3      	bne.n	8005f36 <__sfputs_r+0xa>
 8005f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f50 <_vfiprintf_r>:
 8005f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	460d      	mov	r5, r1
 8005f56:	4614      	mov	r4, r2
 8005f58:	4698      	mov	r8, r3
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	b09d      	sub	sp, #116	@ 0x74
 8005f5e:	b118      	cbz	r0, 8005f68 <_vfiprintf_r+0x18>
 8005f60:	6a03      	ldr	r3, [r0, #32]
 8005f62:	b90b      	cbnz	r3, 8005f68 <_vfiprintf_r+0x18>
 8005f64:	f7fe fac6 	bl	80044f4 <__sinit>
 8005f68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f6a:	07d9      	lsls	r1, r3, #31
 8005f6c:	d405      	bmi.n	8005f7a <_vfiprintf_r+0x2a>
 8005f6e:	89ab      	ldrh	r3, [r5, #12]
 8005f70:	059a      	lsls	r2, r3, #22
 8005f72:	d402      	bmi.n	8005f7a <_vfiprintf_r+0x2a>
 8005f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f76:	f7fe fbb4 	bl	80046e2 <__retarget_lock_acquire_recursive>
 8005f7a:	89ab      	ldrh	r3, [r5, #12]
 8005f7c:	071b      	lsls	r3, r3, #28
 8005f7e:	d501      	bpl.n	8005f84 <_vfiprintf_r+0x34>
 8005f80:	692b      	ldr	r3, [r5, #16]
 8005f82:	b99b      	cbnz	r3, 8005fac <_vfiprintf_r+0x5c>
 8005f84:	4629      	mov	r1, r5
 8005f86:	4630      	mov	r0, r6
 8005f88:	f000 f938 	bl	80061fc <__swsetup_r>
 8005f8c:	b170      	cbz	r0, 8005fac <_vfiprintf_r+0x5c>
 8005f8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f90:	07dc      	lsls	r4, r3, #31
 8005f92:	d504      	bpl.n	8005f9e <_vfiprintf_r+0x4e>
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	b01d      	add	sp, #116	@ 0x74
 8005f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9e:	89ab      	ldrh	r3, [r5, #12]
 8005fa0:	0598      	lsls	r0, r3, #22
 8005fa2:	d4f7      	bmi.n	8005f94 <_vfiprintf_r+0x44>
 8005fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fa6:	f7fe fb9d 	bl	80046e4 <__retarget_lock_release_recursive>
 8005faa:	e7f3      	b.n	8005f94 <_vfiprintf_r+0x44>
 8005fac:	2300      	movs	r3, #0
 8005fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fb6:	2330      	movs	r3, #48	@ 0x30
 8005fb8:	f04f 0901 	mov.w	r9, #1
 8005fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fc0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800616c <_vfiprintf_r+0x21c>
 8005fc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fc8:	4623      	mov	r3, r4
 8005fca:	469a      	mov	sl, r3
 8005fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fd0:	b10a      	cbz	r2, 8005fd6 <_vfiprintf_r+0x86>
 8005fd2:	2a25      	cmp	r2, #37	@ 0x25
 8005fd4:	d1f9      	bne.n	8005fca <_vfiprintf_r+0x7a>
 8005fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8005fda:	d00b      	beq.n	8005ff4 <_vfiprintf_r+0xa4>
 8005fdc:	465b      	mov	r3, fp
 8005fde:	4622      	mov	r2, r4
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f7ff ffa2 	bl	8005f2c <__sfputs_r>
 8005fe8:	3001      	adds	r0, #1
 8005fea:	f000 80a7 	beq.w	800613c <_vfiprintf_r+0x1ec>
 8005fee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ff0:	445a      	add	r2, fp
 8005ff2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 809f 	beq.w	800613c <_vfiprintf_r+0x1ec>
 8005ffe:	2300      	movs	r3, #0
 8006000:	f04f 32ff 	mov.w	r2, #4294967295
 8006004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006008:	f10a 0a01 	add.w	sl, sl, #1
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	9307      	str	r3, [sp, #28]
 8006010:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006014:	931a      	str	r3, [sp, #104]	@ 0x68
 8006016:	4654      	mov	r4, sl
 8006018:	2205      	movs	r2, #5
 800601a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800601e:	4853      	ldr	r0, [pc, #332]	@ (800616c <_vfiprintf_r+0x21c>)
 8006020:	f7fe fb61 	bl	80046e6 <memchr>
 8006024:	9a04      	ldr	r2, [sp, #16]
 8006026:	b9d8      	cbnz	r0, 8006060 <_vfiprintf_r+0x110>
 8006028:	06d1      	lsls	r1, r2, #27
 800602a:	bf44      	itt	mi
 800602c:	2320      	movmi	r3, #32
 800602e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006032:	0713      	lsls	r3, r2, #28
 8006034:	bf44      	itt	mi
 8006036:	232b      	movmi	r3, #43	@ 0x2b
 8006038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800603c:	f89a 3000 	ldrb.w	r3, [sl]
 8006040:	2b2a      	cmp	r3, #42	@ 0x2a
 8006042:	d015      	beq.n	8006070 <_vfiprintf_r+0x120>
 8006044:	4654      	mov	r4, sl
 8006046:	2000      	movs	r0, #0
 8006048:	f04f 0c0a 	mov.w	ip, #10
 800604c:	9a07      	ldr	r2, [sp, #28]
 800604e:	4621      	mov	r1, r4
 8006050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006054:	3b30      	subs	r3, #48	@ 0x30
 8006056:	2b09      	cmp	r3, #9
 8006058:	d94b      	bls.n	80060f2 <_vfiprintf_r+0x1a2>
 800605a:	b1b0      	cbz	r0, 800608a <_vfiprintf_r+0x13a>
 800605c:	9207      	str	r2, [sp, #28]
 800605e:	e014      	b.n	800608a <_vfiprintf_r+0x13a>
 8006060:	eba0 0308 	sub.w	r3, r0, r8
 8006064:	fa09 f303 	lsl.w	r3, r9, r3
 8006068:	4313      	orrs	r3, r2
 800606a:	46a2      	mov	sl, r4
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	e7d2      	b.n	8006016 <_vfiprintf_r+0xc6>
 8006070:	9b03      	ldr	r3, [sp, #12]
 8006072:	1d19      	adds	r1, r3, #4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	9103      	str	r1, [sp, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	bfbb      	ittet	lt
 800607c:	425b      	neglt	r3, r3
 800607e:	f042 0202 	orrlt.w	r2, r2, #2
 8006082:	9307      	strge	r3, [sp, #28]
 8006084:	9307      	strlt	r3, [sp, #28]
 8006086:	bfb8      	it	lt
 8006088:	9204      	strlt	r2, [sp, #16]
 800608a:	7823      	ldrb	r3, [r4, #0]
 800608c:	2b2e      	cmp	r3, #46	@ 0x2e
 800608e:	d10a      	bne.n	80060a6 <_vfiprintf_r+0x156>
 8006090:	7863      	ldrb	r3, [r4, #1]
 8006092:	2b2a      	cmp	r3, #42	@ 0x2a
 8006094:	d132      	bne.n	80060fc <_vfiprintf_r+0x1ac>
 8006096:	9b03      	ldr	r3, [sp, #12]
 8006098:	3402      	adds	r4, #2
 800609a:	1d1a      	adds	r2, r3, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	9203      	str	r2, [sp, #12]
 80060a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060a4:	9305      	str	r3, [sp, #20]
 80060a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006170 <_vfiprintf_r+0x220>
 80060aa:	2203      	movs	r2, #3
 80060ac:	4650      	mov	r0, sl
 80060ae:	7821      	ldrb	r1, [r4, #0]
 80060b0:	f7fe fb19 	bl	80046e6 <memchr>
 80060b4:	b138      	cbz	r0, 80060c6 <_vfiprintf_r+0x176>
 80060b6:	2240      	movs	r2, #64	@ 0x40
 80060b8:	9b04      	ldr	r3, [sp, #16]
 80060ba:	eba0 000a 	sub.w	r0, r0, sl
 80060be:	4082      	lsls	r2, r0
 80060c0:	4313      	orrs	r3, r2
 80060c2:	3401      	adds	r4, #1
 80060c4:	9304      	str	r3, [sp, #16]
 80060c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ca:	2206      	movs	r2, #6
 80060cc:	4829      	ldr	r0, [pc, #164]	@ (8006174 <_vfiprintf_r+0x224>)
 80060ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060d2:	f7fe fb08 	bl	80046e6 <memchr>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d03f      	beq.n	800615a <_vfiprintf_r+0x20a>
 80060da:	4b27      	ldr	r3, [pc, #156]	@ (8006178 <_vfiprintf_r+0x228>)
 80060dc:	bb1b      	cbnz	r3, 8006126 <_vfiprintf_r+0x1d6>
 80060de:	9b03      	ldr	r3, [sp, #12]
 80060e0:	3307      	adds	r3, #7
 80060e2:	f023 0307 	bic.w	r3, r3, #7
 80060e6:	3308      	adds	r3, #8
 80060e8:	9303      	str	r3, [sp, #12]
 80060ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ec:	443b      	add	r3, r7
 80060ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80060f0:	e76a      	b.n	8005fc8 <_vfiprintf_r+0x78>
 80060f2:	460c      	mov	r4, r1
 80060f4:	2001      	movs	r0, #1
 80060f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80060fa:	e7a8      	b.n	800604e <_vfiprintf_r+0xfe>
 80060fc:	2300      	movs	r3, #0
 80060fe:	f04f 0c0a 	mov.w	ip, #10
 8006102:	4619      	mov	r1, r3
 8006104:	3401      	adds	r4, #1
 8006106:	9305      	str	r3, [sp, #20]
 8006108:	4620      	mov	r0, r4
 800610a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800610e:	3a30      	subs	r2, #48	@ 0x30
 8006110:	2a09      	cmp	r2, #9
 8006112:	d903      	bls.n	800611c <_vfiprintf_r+0x1cc>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0c6      	beq.n	80060a6 <_vfiprintf_r+0x156>
 8006118:	9105      	str	r1, [sp, #20]
 800611a:	e7c4      	b.n	80060a6 <_vfiprintf_r+0x156>
 800611c:	4604      	mov	r4, r0
 800611e:	2301      	movs	r3, #1
 8006120:	fb0c 2101 	mla	r1, ip, r1, r2
 8006124:	e7f0      	b.n	8006108 <_vfiprintf_r+0x1b8>
 8006126:	ab03      	add	r3, sp, #12
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	462a      	mov	r2, r5
 800612c:	4630      	mov	r0, r6
 800612e:	4b13      	ldr	r3, [pc, #76]	@ (800617c <_vfiprintf_r+0x22c>)
 8006130:	a904      	add	r1, sp, #16
 8006132:	f7fd fd95 	bl	8003c60 <_printf_float>
 8006136:	4607      	mov	r7, r0
 8006138:	1c78      	adds	r0, r7, #1
 800613a:	d1d6      	bne.n	80060ea <_vfiprintf_r+0x19a>
 800613c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800613e:	07d9      	lsls	r1, r3, #31
 8006140:	d405      	bmi.n	800614e <_vfiprintf_r+0x1fe>
 8006142:	89ab      	ldrh	r3, [r5, #12]
 8006144:	059a      	lsls	r2, r3, #22
 8006146:	d402      	bmi.n	800614e <_vfiprintf_r+0x1fe>
 8006148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800614a:	f7fe facb 	bl	80046e4 <__retarget_lock_release_recursive>
 800614e:	89ab      	ldrh	r3, [r5, #12]
 8006150:	065b      	lsls	r3, r3, #25
 8006152:	f53f af1f 	bmi.w	8005f94 <_vfiprintf_r+0x44>
 8006156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006158:	e71e      	b.n	8005f98 <_vfiprintf_r+0x48>
 800615a:	ab03      	add	r3, sp, #12
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	462a      	mov	r2, r5
 8006160:	4630      	mov	r0, r6
 8006162:	4b06      	ldr	r3, [pc, #24]	@ (800617c <_vfiprintf_r+0x22c>)
 8006164:	a904      	add	r1, sp, #16
 8006166:	f7fe f819 	bl	800419c <_printf_i>
 800616a:	e7e4      	b.n	8006136 <_vfiprintf_r+0x1e6>
 800616c:	080070f7 	.word	0x080070f7
 8006170:	080070fd 	.word	0x080070fd
 8006174:	08007101 	.word	0x08007101
 8006178:	08003c61 	.word	0x08003c61
 800617c:	08005f2d 	.word	0x08005f2d

08006180 <__swbuf_r>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	460e      	mov	r6, r1
 8006184:	4614      	mov	r4, r2
 8006186:	4605      	mov	r5, r0
 8006188:	b118      	cbz	r0, 8006192 <__swbuf_r+0x12>
 800618a:	6a03      	ldr	r3, [r0, #32]
 800618c:	b90b      	cbnz	r3, 8006192 <__swbuf_r+0x12>
 800618e:	f7fe f9b1 	bl	80044f4 <__sinit>
 8006192:	69a3      	ldr	r3, [r4, #24]
 8006194:	60a3      	str	r3, [r4, #8]
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	071a      	lsls	r2, r3, #28
 800619a:	d501      	bpl.n	80061a0 <__swbuf_r+0x20>
 800619c:	6923      	ldr	r3, [r4, #16]
 800619e:	b943      	cbnz	r3, 80061b2 <__swbuf_r+0x32>
 80061a0:	4621      	mov	r1, r4
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 f82a 	bl	80061fc <__swsetup_r>
 80061a8:	b118      	cbz	r0, 80061b2 <__swbuf_r+0x32>
 80061aa:	f04f 37ff 	mov.w	r7, #4294967295
 80061ae:	4638      	mov	r0, r7
 80061b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	6922      	ldr	r2, [r4, #16]
 80061b6:	b2f6      	uxtb	r6, r6
 80061b8:	1a98      	subs	r0, r3, r2
 80061ba:	6963      	ldr	r3, [r4, #20]
 80061bc:	4637      	mov	r7, r6
 80061be:	4283      	cmp	r3, r0
 80061c0:	dc05      	bgt.n	80061ce <__swbuf_r+0x4e>
 80061c2:	4621      	mov	r1, r4
 80061c4:	4628      	mov	r0, r5
 80061c6:	f7ff fdf9 	bl	8005dbc <_fflush_r>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d1ed      	bne.n	80061aa <__swbuf_r+0x2a>
 80061ce:	68a3      	ldr	r3, [r4, #8]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	60a3      	str	r3, [r4, #8]
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	6022      	str	r2, [r4, #0]
 80061da:	701e      	strb	r6, [r3, #0]
 80061dc:	6962      	ldr	r2, [r4, #20]
 80061de:	1c43      	adds	r3, r0, #1
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d004      	beq.n	80061ee <__swbuf_r+0x6e>
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	07db      	lsls	r3, r3, #31
 80061e8:	d5e1      	bpl.n	80061ae <__swbuf_r+0x2e>
 80061ea:	2e0a      	cmp	r6, #10
 80061ec:	d1df      	bne.n	80061ae <__swbuf_r+0x2e>
 80061ee:	4621      	mov	r1, r4
 80061f0:	4628      	mov	r0, r5
 80061f2:	f7ff fde3 	bl	8005dbc <_fflush_r>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d0d9      	beq.n	80061ae <__swbuf_r+0x2e>
 80061fa:	e7d6      	b.n	80061aa <__swbuf_r+0x2a>

080061fc <__swsetup_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4b29      	ldr	r3, [pc, #164]	@ (80062a4 <__swsetup_r+0xa8>)
 8006200:	4605      	mov	r5, r0
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	460c      	mov	r4, r1
 8006206:	b118      	cbz	r0, 8006210 <__swsetup_r+0x14>
 8006208:	6a03      	ldr	r3, [r0, #32]
 800620a:	b90b      	cbnz	r3, 8006210 <__swsetup_r+0x14>
 800620c:	f7fe f972 	bl	80044f4 <__sinit>
 8006210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006214:	0719      	lsls	r1, r3, #28
 8006216:	d422      	bmi.n	800625e <__swsetup_r+0x62>
 8006218:	06da      	lsls	r2, r3, #27
 800621a:	d407      	bmi.n	800622c <__swsetup_r+0x30>
 800621c:	2209      	movs	r2, #9
 800621e:	602a      	str	r2, [r5, #0]
 8006220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	81a3      	strh	r3, [r4, #12]
 800622a:	e033      	b.n	8006294 <__swsetup_r+0x98>
 800622c:	0758      	lsls	r0, r3, #29
 800622e:	d512      	bpl.n	8006256 <__swsetup_r+0x5a>
 8006230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006232:	b141      	cbz	r1, 8006246 <__swsetup_r+0x4a>
 8006234:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006238:	4299      	cmp	r1, r3
 800623a:	d002      	beq.n	8006242 <__swsetup_r+0x46>
 800623c:	4628      	mov	r0, r5
 800623e:	f7ff f8bf 	bl	80053c0 <_free_r>
 8006242:	2300      	movs	r3, #0
 8006244:	6363      	str	r3, [r4, #52]	@ 0x34
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800624c:	81a3      	strh	r3, [r4, #12]
 800624e:	2300      	movs	r3, #0
 8006250:	6063      	str	r3, [r4, #4]
 8006252:	6923      	ldr	r3, [r4, #16]
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	f043 0308 	orr.w	r3, r3, #8
 800625c:	81a3      	strh	r3, [r4, #12]
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	b94b      	cbnz	r3, 8006276 <__swsetup_r+0x7a>
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800626c:	d003      	beq.n	8006276 <__swsetup_r+0x7a>
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f000 f882 	bl	800637a <__smakebuf_r>
 8006276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627a:	f013 0201 	ands.w	r2, r3, #1
 800627e:	d00a      	beq.n	8006296 <__swsetup_r+0x9a>
 8006280:	2200      	movs	r2, #0
 8006282:	60a2      	str	r2, [r4, #8]
 8006284:	6962      	ldr	r2, [r4, #20]
 8006286:	4252      	negs	r2, r2
 8006288:	61a2      	str	r2, [r4, #24]
 800628a:	6922      	ldr	r2, [r4, #16]
 800628c:	b942      	cbnz	r2, 80062a0 <__swsetup_r+0xa4>
 800628e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006292:	d1c5      	bne.n	8006220 <__swsetup_r+0x24>
 8006294:	bd38      	pop	{r3, r4, r5, pc}
 8006296:	0799      	lsls	r1, r3, #30
 8006298:	bf58      	it	pl
 800629a:	6962      	ldrpl	r2, [r4, #20]
 800629c:	60a2      	str	r2, [r4, #8]
 800629e:	e7f4      	b.n	800628a <__swsetup_r+0x8e>
 80062a0:	2000      	movs	r0, #0
 80062a2:	e7f7      	b.n	8006294 <__swsetup_r+0x98>
 80062a4:	20000010 	.word	0x20000010

080062a8 <_raise_r>:
 80062a8:	291f      	cmp	r1, #31
 80062aa:	b538      	push	{r3, r4, r5, lr}
 80062ac:	4605      	mov	r5, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	d904      	bls.n	80062bc <_raise_r+0x14>
 80062b2:	2316      	movs	r3, #22
 80062b4:	6003      	str	r3, [r0, #0]
 80062b6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80062be:	b112      	cbz	r2, 80062c6 <_raise_r+0x1e>
 80062c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062c4:	b94b      	cbnz	r3, 80062da <_raise_r+0x32>
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 f830 	bl	800632c <_getpid_r>
 80062cc:	4622      	mov	r2, r4
 80062ce:	4601      	mov	r1, r0
 80062d0:	4628      	mov	r0, r5
 80062d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062d6:	f000 b817 	b.w	8006308 <_kill_r>
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d00a      	beq.n	80062f4 <_raise_r+0x4c>
 80062de:	1c59      	adds	r1, r3, #1
 80062e0:	d103      	bne.n	80062ea <_raise_r+0x42>
 80062e2:	2316      	movs	r3, #22
 80062e4:	6003      	str	r3, [r0, #0]
 80062e6:	2001      	movs	r0, #1
 80062e8:	e7e7      	b.n	80062ba <_raise_r+0x12>
 80062ea:	2100      	movs	r1, #0
 80062ec:	4620      	mov	r0, r4
 80062ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80062f2:	4798      	blx	r3
 80062f4:	2000      	movs	r0, #0
 80062f6:	e7e0      	b.n	80062ba <_raise_r+0x12>

080062f8 <raise>:
 80062f8:	4b02      	ldr	r3, [pc, #8]	@ (8006304 <raise+0xc>)
 80062fa:	4601      	mov	r1, r0
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	f7ff bfd3 	b.w	80062a8 <_raise_r>
 8006302:	bf00      	nop
 8006304:	20000010 	.word	0x20000010

08006308 <_kill_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	2300      	movs	r3, #0
 800630c:	4d06      	ldr	r5, [pc, #24]	@ (8006328 <_kill_r+0x20>)
 800630e:	4604      	mov	r4, r0
 8006310:	4608      	mov	r0, r1
 8006312:	4611      	mov	r1, r2
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	f7fb f931 	bl	800157c <_kill>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d102      	bne.n	8006324 <_kill_r+0x1c>
 800631e:	682b      	ldr	r3, [r5, #0]
 8006320:	b103      	cbz	r3, 8006324 <_kill_r+0x1c>
 8006322:	6023      	str	r3, [r4, #0]
 8006324:	bd38      	pop	{r3, r4, r5, pc}
 8006326:	bf00      	nop
 8006328:	200005c8 	.word	0x200005c8

0800632c <_getpid_r>:
 800632c:	f7fb b91f 	b.w	800156e <_getpid>

08006330 <__swhatbuf_r>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	460c      	mov	r4, r1
 8006334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006338:	4615      	mov	r5, r2
 800633a:	2900      	cmp	r1, #0
 800633c:	461e      	mov	r6, r3
 800633e:	b096      	sub	sp, #88	@ 0x58
 8006340:	da0c      	bge.n	800635c <__swhatbuf_r+0x2c>
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	2100      	movs	r1, #0
 8006346:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800634a:	bf14      	ite	ne
 800634c:	2340      	movne	r3, #64	@ 0x40
 800634e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006352:	2000      	movs	r0, #0
 8006354:	6031      	str	r1, [r6, #0]
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	b016      	add	sp, #88	@ 0x58
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	466a      	mov	r2, sp
 800635e:	f000 f849 	bl	80063f4 <_fstat_r>
 8006362:	2800      	cmp	r0, #0
 8006364:	dbed      	blt.n	8006342 <__swhatbuf_r+0x12>
 8006366:	9901      	ldr	r1, [sp, #4]
 8006368:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800636c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006370:	4259      	negs	r1, r3
 8006372:	4159      	adcs	r1, r3
 8006374:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006378:	e7eb      	b.n	8006352 <__swhatbuf_r+0x22>

0800637a <__smakebuf_r>:
 800637a:	898b      	ldrh	r3, [r1, #12]
 800637c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800637e:	079d      	lsls	r5, r3, #30
 8006380:	4606      	mov	r6, r0
 8006382:	460c      	mov	r4, r1
 8006384:	d507      	bpl.n	8006396 <__smakebuf_r+0x1c>
 8006386:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	6123      	str	r3, [r4, #16]
 800638e:	2301      	movs	r3, #1
 8006390:	6163      	str	r3, [r4, #20]
 8006392:	b003      	add	sp, #12
 8006394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006396:	466a      	mov	r2, sp
 8006398:	ab01      	add	r3, sp, #4
 800639a:	f7ff ffc9 	bl	8006330 <__swhatbuf_r>
 800639e:	9f00      	ldr	r7, [sp, #0]
 80063a0:	4605      	mov	r5, r0
 80063a2:	4639      	mov	r1, r7
 80063a4:	4630      	mov	r0, r6
 80063a6:	f7ff f87d 	bl	80054a4 <_malloc_r>
 80063aa:	b948      	cbnz	r0, 80063c0 <__smakebuf_r+0x46>
 80063ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b0:	059a      	lsls	r2, r3, #22
 80063b2:	d4ee      	bmi.n	8006392 <__smakebuf_r+0x18>
 80063b4:	f023 0303 	bic.w	r3, r3, #3
 80063b8:	f043 0302 	orr.w	r3, r3, #2
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	e7e2      	b.n	8006386 <__smakebuf_r+0xc>
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	9b01      	ldr	r3, [sp, #4]
 80063ce:	6020      	str	r0, [r4, #0]
 80063d0:	b15b      	cbz	r3, 80063ea <__smakebuf_r+0x70>
 80063d2:	4630      	mov	r0, r6
 80063d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063d8:	f000 f81e 	bl	8006418 <_isatty_r>
 80063dc:	b128      	cbz	r0, 80063ea <__smakebuf_r+0x70>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f023 0303 	bic.w	r3, r3, #3
 80063e4:	f043 0301 	orr.w	r3, r3, #1
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	431d      	orrs	r5, r3
 80063ee:	81a5      	strh	r5, [r4, #12]
 80063f0:	e7cf      	b.n	8006392 <__smakebuf_r+0x18>
	...

080063f4 <_fstat_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	2300      	movs	r3, #0
 80063f8:	4d06      	ldr	r5, [pc, #24]	@ (8006414 <_fstat_r+0x20>)
 80063fa:	4604      	mov	r4, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	602b      	str	r3, [r5, #0]
 8006402:	f7fb f91a 	bl	800163a <_fstat>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d102      	bne.n	8006410 <_fstat_r+0x1c>
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	b103      	cbz	r3, 8006410 <_fstat_r+0x1c>
 800640e:	6023      	str	r3, [r4, #0]
 8006410:	bd38      	pop	{r3, r4, r5, pc}
 8006412:	bf00      	nop
 8006414:	200005c8 	.word	0x200005c8

08006418 <_isatty_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	2300      	movs	r3, #0
 800641c:	4d05      	ldr	r5, [pc, #20]	@ (8006434 <_isatty_r+0x1c>)
 800641e:	4604      	mov	r4, r0
 8006420:	4608      	mov	r0, r1
 8006422:	602b      	str	r3, [r5, #0]
 8006424:	f7fb f918 	bl	8001658 <_isatty>
 8006428:	1c43      	adds	r3, r0, #1
 800642a:	d102      	bne.n	8006432 <_isatty_r+0x1a>
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	b103      	cbz	r3, 8006432 <_isatty_r+0x1a>
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	bd38      	pop	{r3, r4, r5, pc}
 8006434:	200005c8 	.word	0x200005c8

08006438 <powf>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	460c      	mov	r4, r1
 800643c:	4606      	mov	r6, r0
 800643e:	f000 f851 	bl	80064e4 <__ieee754_powf>
 8006442:	4621      	mov	r1, r4
 8006444:	4605      	mov	r5, r0
 8006446:	4620      	mov	r0, r4
 8006448:	f7fa fe02 	bl	8001050 <__aeabi_fcmpun>
 800644c:	bb68      	cbnz	r0, 80064aa <powf+0x72>
 800644e:	2100      	movs	r1, #0
 8006450:	4630      	mov	r0, r6
 8006452:	f7fa fdcb 	bl	8000fec <__aeabi_fcmpeq>
 8006456:	b190      	cbz	r0, 800647e <powf+0x46>
 8006458:	2100      	movs	r1, #0
 800645a:	4620      	mov	r0, r4
 800645c:	f7fa fdc6 	bl	8000fec <__aeabi_fcmpeq>
 8006460:	2800      	cmp	r0, #0
 8006462:	d133      	bne.n	80064cc <powf+0x94>
 8006464:	4620      	mov	r0, r4
 8006466:	f000 f834 	bl	80064d2 <finitef>
 800646a:	b1f0      	cbz	r0, 80064aa <powf+0x72>
 800646c:	2100      	movs	r1, #0
 800646e:	4620      	mov	r0, r4
 8006470:	f7fa fdc6 	bl	8001000 <__aeabi_fcmplt>
 8006474:	b1c8      	cbz	r0, 80064aa <powf+0x72>
 8006476:	f7fe f909 	bl	800468c <__errno>
 800647a:	2322      	movs	r3, #34	@ 0x22
 800647c:	e014      	b.n	80064a8 <powf+0x70>
 800647e:	4628      	mov	r0, r5
 8006480:	f000 f827 	bl	80064d2 <finitef>
 8006484:	b998      	cbnz	r0, 80064ae <powf+0x76>
 8006486:	4630      	mov	r0, r6
 8006488:	f000 f823 	bl	80064d2 <finitef>
 800648c:	b178      	cbz	r0, 80064ae <powf+0x76>
 800648e:	4620      	mov	r0, r4
 8006490:	f000 f81f 	bl	80064d2 <finitef>
 8006494:	b158      	cbz	r0, 80064ae <powf+0x76>
 8006496:	4629      	mov	r1, r5
 8006498:	4628      	mov	r0, r5
 800649a:	f7fa fdd9 	bl	8001050 <__aeabi_fcmpun>
 800649e:	2800      	cmp	r0, #0
 80064a0:	d0e9      	beq.n	8006476 <powf+0x3e>
 80064a2:	f7fe f8f3 	bl	800468c <__errno>
 80064a6:	2321      	movs	r3, #33	@ 0x21
 80064a8:	6003      	str	r3, [r0, #0]
 80064aa:	4628      	mov	r0, r5
 80064ac:	bd70      	pop	{r4, r5, r6, pc}
 80064ae:	2100      	movs	r1, #0
 80064b0:	4628      	mov	r0, r5
 80064b2:	f7fa fd9b 	bl	8000fec <__aeabi_fcmpeq>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d0f7      	beq.n	80064aa <powf+0x72>
 80064ba:	4630      	mov	r0, r6
 80064bc:	f000 f809 	bl	80064d2 <finitef>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d0f2      	beq.n	80064aa <powf+0x72>
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 f804 	bl	80064d2 <finitef>
 80064ca:	e7d3      	b.n	8006474 <powf+0x3c>
 80064cc:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 80064d0:	e7eb      	b.n	80064aa <powf+0x72>

080064d2 <finitef>:
 80064d2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80064d6:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80064da:	bfac      	ite	ge
 80064dc:	2000      	movge	r0, #0
 80064de:	2001      	movlt	r0, #1
 80064e0:	4770      	bx	lr
	...

080064e4 <__ieee754_powf>:
 80064e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e8:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 80064ec:	4680      	mov	r8, r0
 80064ee:	460f      	mov	r7, r1
 80064f0:	4606      	mov	r6, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	b087      	sub	sp, #28
 80064f6:	d10c      	bne.n	8006512 <__ieee754_powf+0x2e>
 80064f8:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 80064fc:	0076      	lsls	r6, r6, #1
 80064fe:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8006502:	f240 8336 	bls.w	8006b72 <__ieee754_powf+0x68e>
 8006506:	4639      	mov	r1, r7
 8006508:	4640      	mov	r0, r8
 800650a:	f7fa fad3 	bl	8000ab4 <__addsf3>
 800650e:	4601      	mov	r1, r0
 8006510:	e03e      	b.n	8006590 <__ieee754_powf+0xac>
 8006512:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 8006516:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800651a:	d802      	bhi.n	8006522 <__ieee754_powf+0x3e>
 800651c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8006520:	d908      	bls.n	8006534 <__ieee754_powf+0x50>
 8006522:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8006526:	d1ee      	bne.n	8006506 <__ieee754_powf+0x22>
 8006528:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800652c:	0064      	lsls	r4, r4, #1
 800652e:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8006532:	e7e6      	b.n	8006502 <__ieee754_powf+0x1e>
 8006534:	2800      	cmp	r0, #0
 8006536:	da1e      	bge.n	8006576 <__ieee754_powf+0x92>
 8006538:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 800653c:	d22c      	bcs.n	8006598 <__ieee754_powf+0xb4>
 800653e:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8006542:	d333      	bcc.n	80065ac <__ieee754_powf+0xc8>
 8006544:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8006548:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800654c:	fa4b f503 	asr.w	r5, fp, r3
 8006550:	fa05 f303 	lsl.w	r3, r5, r3
 8006554:	455b      	cmp	r3, fp
 8006556:	d127      	bne.n	80065a8 <__ieee754_powf+0xc4>
 8006558:	f005 0501 	and.w	r5, r5, #1
 800655c:	f1c5 0502 	rsb	r5, r5, #2
 8006560:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8006564:	d123      	bne.n	80065ae <__ieee754_powf+0xca>
 8006566:	2c00      	cmp	r4, #0
 8006568:	4641      	mov	r1, r8
 800656a:	da11      	bge.n	8006590 <__ieee754_powf+0xac>
 800656c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006570:	f7fa fc5c 	bl	8000e2c <__aeabi_fdiv>
 8006574:	e7cb      	b.n	800650e <__ieee754_powf+0x2a>
 8006576:	2500      	movs	r5, #0
 8006578:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800657c:	d1f0      	bne.n	8006560 <__ieee754_powf+0x7c>
 800657e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8006582:	f000 82f6 	beq.w	8006b72 <__ieee754_powf+0x68e>
 8006586:	d909      	bls.n	800659c <__ieee754_powf+0xb8>
 8006588:	2c00      	cmp	r4, #0
 800658a:	f2c0 82f5 	blt.w	8006b78 <__ieee754_powf+0x694>
 800658e:	4639      	mov	r1, r7
 8006590:	4608      	mov	r0, r1
 8006592:	b007      	add	sp, #28
 8006594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006598:	2502      	movs	r5, #2
 800659a:	e7ed      	b.n	8006578 <__ieee754_powf+0x94>
 800659c:	2c00      	cmp	r4, #0
 800659e:	f280 82eb 	bge.w	8006b78 <__ieee754_powf+0x694>
 80065a2:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 80065a6:	e7f3      	b.n	8006590 <__ieee754_powf+0xac>
 80065a8:	2500      	movs	r5, #0
 80065aa:	e7d9      	b.n	8006560 <__ieee754_powf+0x7c>
 80065ac:	2500      	movs	r5, #0
 80065ae:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80065b2:	d104      	bne.n	80065be <__ieee754_powf+0xda>
 80065b4:	4641      	mov	r1, r8
 80065b6:	4640      	mov	r0, r8
 80065b8:	f7fa fb84 	bl	8000cc4 <__aeabi_fmul>
 80065bc:	e7a7      	b.n	800650e <__ieee754_powf+0x2a>
 80065be:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80065c2:	d107      	bne.n	80065d4 <__ieee754_powf+0xf0>
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	db05      	blt.n	80065d4 <__ieee754_powf+0xf0>
 80065c8:	4640      	mov	r0, r8
 80065ca:	b007      	add	sp, #28
 80065cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d0:	f000 bb54 	b.w	8006c7c <__ieee754_sqrtf>
 80065d4:	4640      	mov	r0, r8
 80065d6:	f000 fae3 	bl	8006ba0 <fabsf>
 80065da:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80065de:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80065e2:	46ca      	mov	sl, r9
 80065e4:	4601      	mov	r1, r0
 80065e6:	d002      	beq.n	80065ee <__ieee754_powf+0x10a>
 80065e8:	f1b9 0f00 	cmp.w	r9, #0
 80065ec:	d117      	bne.n	800661e <__ieee754_powf+0x13a>
 80065ee:	2c00      	cmp	r4, #0
 80065f0:	da04      	bge.n	80065fc <__ieee754_powf+0x118>
 80065f2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80065f6:	f7fa fc19 	bl	8000e2c <__aeabi_fdiv>
 80065fa:	4601      	mov	r1, r0
 80065fc:	2e00      	cmp	r6, #0
 80065fe:	dac7      	bge.n	8006590 <__ieee754_powf+0xac>
 8006600:	f1a9 597e 	sub.w	r9, r9, #1065353216	@ 0x3f800000
 8006604:	ea59 0905 	orrs.w	r9, r9, r5
 8006608:	d104      	bne.n	8006614 <__ieee754_powf+0x130>
 800660a:	4608      	mov	r0, r1
 800660c:	f7fa fa50 	bl	8000ab0 <__aeabi_fsub>
 8006610:	4601      	mov	r1, r0
 8006612:	e7ad      	b.n	8006570 <__ieee754_powf+0x8c>
 8006614:	2d01      	cmp	r5, #1
 8006616:	d1bb      	bne.n	8006590 <__ieee754_powf+0xac>
 8006618:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800661c:	e777      	b.n	800650e <__ieee754_powf+0x2a>
 800661e:	0ff3      	lsrs	r3, r6, #31
 8006620:	3b01      	subs	r3, #1
 8006622:	9303      	str	r3, [sp, #12]
 8006624:	432b      	orrs	r3, r5
 8006626:	d101      	bne.n	800662c <__ieee754_powf+0x148>
 8006628:	4641      	mov	r1, r8
 800662a:	e7ee      	b.n	800660a <__ieee754_powf+0x126>
 800662c:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8006630:	f240 809e 	bls.w	8006770 <__ieee754_powf+0x28c>
 8006634:	4b47      	ldr	r3, [pc, #284]	@ (8006754 <__ieee754_powf+0x270>)
 8006636:	4599      	cmp	r9, r3
 8006638:	d807      	bhi.n	800664a <__ieee754_powf+0x166>
 800663a:	2c00      	cmp	r4, #0
 800663c:	da0a      	bge.n	8006654 <__ieee754_powf+0x170>
 800663e:	2000      	movs	r0, #0
 8006640:	b007      	add	sp, #28
 8006642:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006646:	f000 bb14 	b.w	8006c72 <__math_oflowf>
 800664a:	4b43      	ldr	r3, [pc, #268]	@ (8006758 <__ieee754_powf+0x274>)
 800664c:	4599      	cmp	r9, r3
 800664e:	d907      	bls.n	8006660 <__ieee754_powf+0x17c>
 8006650:	2c00      	cmp	r4, #0
 8006652:	dcf4      	bgt.n	800663e <__ieee754_powf+0x15a>
 8006654:	2000      	movs	r0, #0
 8006656:	b007      	add	sp, #28
 8006658:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	f000 bb05 	b.w	8006c6a <__math_uflowf>
 8006660:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006664:	f7fa fa24 	bl	8000ab0 <__aeabi_fsub>
 8006668:	493c      	ldr	r1, [pc, #240]	@ (800675c <__ieee754_powf+0x278>)
 800666a:	4606      	mov	r6, r0
 800666c:	f7fa fb2a 	bl	8000cc4 <__aeabi_fmul>
 8006670:	493b      	ldr	r1, [pc, #236]	@ (8006760 <__ieee754_powf+0x27c>)
 8006672:	4680      	mov	r8, r0
 8006674:	4630      	mov	r0, r6
 8006676:	f7fa fb25 	bl	8000cc4 <__aeabi_fmul>
 800667a:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800667e:	4681      	mov	r9, r0
 8006680:	4630      	mov	r0, r6
 8006682:	f7fa fb1f 	bl	8000cc4 <__aeabi_fmul>
 8006686:	4601      	mov	r1, r0
 8006688:	4836      	ldr	r0, [pc, #216]	@ (8006764 <__ieee754_powf+0x280>)
 800668a:	f7fa fa11 	bl	8000ab0 <__aeabi_fsub>
 800668e:	4631      	mov	r1, r6
 8006690:	f7fa fb18 	bl	8000cc4 <__aeabi_fmul>
 8006694:	4601      	mov	r1, r0
 8006696:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800669a:	f7fa fa09 	bl	8000ab0 <__aeabi_fsub>
 800669e:	4631      	mov	r1, r6
 80066a0:	4682      	mov	sl, r0
 80066a2:	4630      	mov	r0, r6
 80066a4:	f7fa fb0e 	bl	8000cc4 <__aeabi_fmul>
 80066a8:	4601      	mov	r1, r0
 80066aa:	4650      	mov	r0, sl
 80066ac:	f7fa fb0a 	bl	8000cc4 <__aeabi_fmul>
 80066b0:	492d      	ldr	r1, [pc, #180]	@ (8006768 <__ieee754_powf+0x284>)
 80066b2:	f7fa fb07 	bl	8000cc4 <__aeabi_fmul>
 80066b6:	4601      	mov	r1, r0
 80066b8:	4648      	mov	r0, r9
 80066ba:	f7fa f9f9 	bl	8000ab0 <__aeabi_fsub>
 80066be:	4601      	mov	r1, r0
 80066c0:	4606      	mov	r6, r0
 80066c2:	4640      	mov	r0, r8
 80066c4:	f7fa f9f6 	bl	8000ab4 <__addsf3>
 80066c8:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80066cc:	f02b 0b0f 	bic.w	fp, fp, #15
 80066d0:	4641      	mov	r1, r8
 80066d2:	4658      	mov	r0, fp
 80066d4:	f7fa f9ec 	bl	8000ab0 <__aeabi_fsub>
 80066d8:	4601      	mov	r1, r0
 80066da:	4630      	mov	r0, r6
 80066dc:	f7fa f9e8 	bl	8000ab0 <__aeabi_fsub>
 80066e0:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80066e4:	9b03      	ldr	r3, [sp, #12]
 80066e6:	3d01      	subs	r5, #1
 80066e8:	f024 040f 	bic.w	r4, r4, #15
 80066ec:	431d      	orrs	r5, r3
 80066ee:	4606      	mov	r6, r0
 80066f0:	4621      	mov	r1, r4
 80066f2:	4638      	mov	r0, r7
 80066f4:	bf14      	ite	ne
 80066f6:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 80066fa:	4d1c      	ldreq	r5, [pc, #112]	@ (800676c <__ieee754_powf+0x288>)
 80066fc:	f7fa f9d8 	bl	8000ab0 <__aeabi_fsub>
 8006700:	4659      	mov	r1, fp
 8006702:	f7fa fadf 	bl	8000cc4 <__aeabi_fmul>
 8006706:	4639      	mov	r1, r7
 8006708:	4680      	mov	r8, r0
 800670a:	4630      	mov	r0, r6
 800670c:	f7fa fada 	bl	8000cc4 <__aeabi_fmul>
 8006710:	4601      	mov	r1, r0
 8006712:	4640      	mov	r0, r8
 8006714:	f7fa f9ce 	bl	8000ab4 <__addsf3>
 8006718:	4621      	mov	r1, r4
 800671a:	4606      	mov	r6, r0
 800671c:	4658      	mov	r0, fp
 800671e:	f7fa fad1 	bl	8000cc4 <__aeabi_fmul>
 8006722:	4601      	mov	r1, r0
 8006724:	4607      	mov	r7, r0
 8006726:	4630      	mov	r0, r6
 8006728:	f7fa f9c4 	bl	8000ab4 <__addsf3>
 800672c:	2800      	cmp	r0, #0
 800672e:	4604      	mov	r4, r0
 8006730:	4680      	mov	r8, r0
 8006732:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8006736:	f340 8141 	ble.w	80069bc <__ieee754_powf+0x4d8>
 800673a:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800673e:	f240 812a 	bls.w	8006996 <__ieee754_powf+0x4b2>
 8006742:	2100      	movs	r1, #0
 8006744:	4628      	mov	r0, r5
 8006746:	f7fa fc5b 	bl	8001000 <__aeabi_fcmplt>
 800674a:	3800      	subs	r0, #0
 800674c:	bf18      	it	ne
 800674e:	2001      	movne	r0, #1
 8006750:	e776      	b.n	8006640 <__ieee754_powf+0x15c>
 8006752:	bf00      	nop
 8006754:	3f7ffff3 	.word	0x3f7ffff3
 8006758:	3f800007 	.word	0x3f800007
 800675c:	3fb8aa00 	.word	0x3fb8aa00
 8006760:	36eca570 	.word	0x36eca570
 8006764:	3eaaaaab 	.word	0x3eaaaaab
 8006768:	3fb8aa3b 	.word	0x3fb8aa3b
 800676c:	bf800000 	.word	0xbf800000
 8006770:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8006774:	f040 810b 	bne.w	800698e <__ieee754_powf+0x4aa>
 8006778:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800677c:	f7fa faa2 	bl	8000cc4 <__aeabi_fmul>
 8006780:	f06f 0217 	mvn.w	r2, #23
 8006784:	4682      	mov	sl, r0
 8006786:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800678a:	3b7f      	subs	r3, #127	@ 0x7f
 800678c:	441a      	add	r2, r3
 800678e:	4b96      	ldr	r3, [pc, #600]	@ (80069e8 <__ieee754_powf+0x504>)
 8006790:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8006794:	459a      	cmp	sl, r3
 8006796:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800679a:	dd06      	ble.n	80067aa <__ieee754_powf+0x2c6>
 800679c:	4b93      	ldr	r3, [pc, #588]	@ (80069ec <__ieee754_powf+0x508>)
 800679e:	459a      	cmp	sl, r3
 80067a0:	f340 80f7 	ble.w	8006992 <__ieee754_powf+0x4ae>
 80067a4:	3201      	adds	r2, #1
 80067a6:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 80067aa:	2300      	movs	r3, #0
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	9205      	str	r2, [sp, #20]
 80067b0:	4b8f      	ldr	r3, [pc, #572]	@ (80069f0 <__ieee754_powf+0x50c>)
 80067b2:	9a01      	ldr	r2, [sp, #4]
 80067b4:	4630      	mov	r0, r6
 80067b6:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80067ba:	46b2      	mov	sl, r6
 80067bc:	4659      	mov	r1, fp
 80067be:	f7fa f977 	bl	8000ab0 <__aeabi_fsub>
 80067c2:	4631      	mov	r1, r6
 80067c4:	4681      	mov	r9, r0
 80067c6:	4658      	mov	r0, fp
 80067c8:	f7fa f974 	bl	8000ab4 <__addsf3>
 80067cc:	4601      	mov	r1, r0
 80067ce:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80067d2:	f7fa fb2b 	bl	8000e2c <__aeabi_fdiv>
 80067d6:	4601      	mov	r1, r0
 80067d8:	9004      	str	r0, [sp, #16]
 80067da:	4648      	mov	r0, r9
 80067dc:	f7fa fa72 	bl	8000cc4 <__aeabi_fmul>
 80067e0:	9002      	str	r0, [sp, #8]
 80067e2:	9b02      	ldr	r3, [sp, #8]
 80067e4:	1076      	asrs	r6, r6, #1
 80067e6:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 80067ea:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 80067f4:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80067f8:	f028 080f 	bic.w	r8, r8, #15
 80067fc:	4631      	mov	r1, r6
 80067fe:	4640      	mov	r0, r8
 8006800:	f7fa fa60 	bl	8000cc4 <__aeabi_fmul>
 8006804:	4601      	mov	r1, r0
 8006806:	4648      	mov	r0, r9
 8006808:	f7fa f952 	bl	8000ab0 <__aeabi_fsub>
 800680c:	4659      	mov	r1, fp
 800680e:	4681      	mov	r9, r0
 8006810:	4630      	mov	r0, r6
 8006812:	f7fa f94d 	bl	8000ab0 <__aeabi_fsub>
 8006816:	4601      	mov	r1, r0
 8006818:	4650      	mov	r0, sl
 800681a:	f7fa f949 	bl	8000ab0 <__aeabi_fsub>
 800681e:	4641      	mov	r1, r8
 8006820:	f7fa fa50 	bl	8000cc4 <__aeabi_fmul>
 8006824:	4601      	mov	r1, r0
 8006826:	4648      	mov	r0, r9
 8006828:	f7fa f942 	bl	8000ab0 <__aeabi_fsub>
 800682c:	9b04      	ldr	r3, [sp, #16]
 800682e:	4619      	mov	r1, r3
 8006830:	f7fa fa48 	bl	8000cc4 <__aeabi_fmul>
 8006834:	9902      	ldr	r1, [sp, #8]
 8006836:	4683      	mov	fp, r0
 8006838:	4608      	mov	r0, r1
 800683a:	f7fa fa43 	bl	8000cc4 <__aeabi_fmul>
 800683e:	4606      	mov	r6, r0
 8006840:	496c      	ldr	r1, [pc, #432]	@ (80069f4 <__ieee754_powf+0x510>)
 8006842:	f7fa fa3f 	bl	8000cc4 <__aeabi_fmul>
 8006846:	496c      	ldr	r1, [pc, #432]	@ (80069f8 <__ieee754_powf+0x514>)
 8006848:	f7fa f934 	bl	8000ab4 <__addsf3>
 800684c:	4631      	mov	r1, r6
 800684e:	f7fa fa39 	bl	8000cc4 <__aeabi_fmul>
 8006852:	496a      	ldr	r1, [pc, #424]	@ (80069fc <__ieee754_powf+0x518>)
 8006854:	f7fa f92e 	bl	8000ab4 <__addsf3>
 8006858:	4631      	mov	r1, r6
 800685a:	f7fa fa33 	bl	8000cc4 <__aeabi_fmul>
 800685e:	4968      	ldr	r1, [pc, #416]	@ (8006a00 <__ieee754_powf+0x51c>)
 8006860:	f7fa f928 	bl	8000ab4 <__addsf3>
 8006864:	4631      	mov	r1, r6
 8006866:	f7fa fa2d 	bl	8000cc4 <__aeabi_fmul>
 800686a:	4966      	ldr	r1, [pc, #408]	@ (8006a04 <__ieee754_powf+0x520>)
 800686c:	f7fa f922 	bl	8000ab4 <__addsf3>
 8006870:	4631      	mov	r1, r6
 8006872:	f7fa fa27 	bl	8000cc4 <__aeabi_fmul>
 8006876:	4964      	ldr	r1, [pc, #400]	@ (8006a08 <__ieee754_powf+0x524>)
 8006878:	f7fa f91c 	bl	8000ab4 <__addsf3>
 800687c:	4631      	mov	r1, r6
 800687e:	4681      	mov	r9, r0
 8006880:	4630      	mov	r0, r6
 8006882:	f7fa fa1f 	bl	8000cc4 <__aeabi_fmul>
 8006886:	4601      	mov	r1, r0
 8006888:	4648      	mov	r0, r9
 800688a:	f7fa fa1b 	bl	8000cc4 <__aeabi_fmul>
 800688e:	4606      	mov	r6, r0
 8006890:	4641      	mov	r1, r8
 8006892:	9802      	ldr	r0, [sp, #8]
 8006894:	f7fa f90e 	bl	8000ab4 <__addsf3>
 8006898:	4659      	mov	r1, fp
 800689a:	f7fa fa13 	bl	8000cc4 <__aeabi_fmul>
 800689e:	4631      	mov	r1, r6
 80068a0:	f7fa f908 	bl	8000ab4 <__addsf3>
 80068a4:	4641      	mov	r1, r8
 80068a6:	4681      	mov	r9, r0
 80068a8:	4640      	mov	r0, r8
 80068aa:	f7fa fa0b 	bl	8000cc4 <__aeabi_fmul>
 80068ae:	4957      	ldr	r1, [pc, #348]	@ (8006a0c <__ieee754_powf+0x528>)
 80068b0:	4682      	mov	sl, r0
 80068b2:	f7fa f8ff 	bl	8000ab4 <__addsf3>
 80068b6:	4649      	mov	r1, r9
 80068b8:	f7fa f8fc 	bl	8000ab4 <__addsf3>
 80068bc:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80068c0:	f026 060f 	bic.w	r6, r6, #15
 80068c4:	4631      	mov	r1, r6
 80068c6:	4640      	mov	r0, r8
 80068c8:	f7fa f9fc 	bl	8000cc4 <__aeabi_fmul>
 80068cc:	494f      	ldr	r1, [pc, #316]	@ (8006a0c <__ieee754_powf+0x528>)
 80068ce:	4680      	mov	r8, r0
 80068d0:	4630      	mov	r0, r6
 80068d2:	f7fa f8ed 	bl	8000ab0 <__aeabi_fsub>
 80068d6:	4651      	mov	r1, sl
 80068d8:	f7fa f8ea 	bl	8000ab0 <__aeabi_fsub>
 80068dc:	4601      	mov	r1, r0
 80068de:	4648      	mov	r0, r9
 80068e0:	f7fa f8e6 	bl	8000ab0 <__aeabi_fsub>
 80068e4:	9902      	ldr	r1, [sp, #8]
 80068e6:	f7fa f9ed 	bl	8000cc4 <__aeabi_fmul>
 80068ea:	4631      	mov	r1, r6
 80068ec:	4681      	mov	r9, r0
 80068ee:	4658      	mov	r0, fp
 80068f0:	f7fa f9e8 	bl	8000cc4 <__aeabi_fmul>
 80068f4:	4601      	mov	r1, r0
 80068f6:	4648      	mov	r0, r9
 80068f8:	f7fa f8dc 	bl	8000ab4 <__addsf3>
 80068fc:	4682      	mov	sl, r0
 80068fe:	4601      	mov	r1, r0
 8006900:	4640      	mov	r0, r8
 8006902:	f7fa f8d7 	bl	8000ab4 <__addsf3>
 8006906:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800690a:	f026 060f 	bic.w	r6, r6, #15
 800690e:	4630      	mov	r0, r6
 8006910:	493f      	ldr	r1, [pc, #252]	@ (8006a10 <__ieee754_powf+0x52c>)
 8006912:	f7fa f9d7 	bl	8000cc4 <__aeabi_fmul>
 8006916:	4641      	mov	r1, r8
 8006918:	4681      	mov	r9, r0
 800691a:	4630      	mov	r0, r6
 800691c:	f7fa f8c8 	bl	8000ab0 <__aeabi_fsub>
 8006920:	4601      	mov	r1, r0
 8006922:	4650      	mov	r0, sl
 8006924:	f7fa f8c4 	bl	8000ab0 <__aeabi_fsub>
 8006928:	493a      	ldr	r1, [pc, #232]	@ (8006a14 <__ieee754_powf+0x530>)
 800692a:	f7fa f9cb 	bl	8000cc4 <__aeabi_fmul>
 800692e:	493a      	ldr	r1, [pc, #232]	@ (8006a18 <__ieee754_powf+0x534>)
 8006930:	4680      	mov	r8, r0
 8006932:	4630      	mov	r0, r6
 8006934:	f7fa f9c6 	bl	8000cc4 <__aeabi_fmul>
 8006938:	4601      	mov	r1, r0
 800693a:	4640      	mov	r0, r8
 800693c:	f7fa f8ba 	bl	8000ab4 <__addsf3>
 8006940:	4b36      	ldr	r3, [pc, #216]	@ (8006a1c <__ieee754_powf+0x538>)
 8006942:	9a01      	ldr	r2, [sp, #4]
 8006944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006948:	f7fa f8b4 	bl	8000ab4 <__addsf3>
 800694c:	9a05      	ldr	r2, [sp, #20]
 800694e:	4606      	mov	r6, r0
 8006950:	4610      	mov	r0, r2
 8006952:	f7fa f963 	bl	8000c1c <__aeabi_i2f>
 8006956:	4680      	mov	r8, r0
 8006958:	4b31      	ldr	r3, [pc, #196]	@ (8006a20 <__ieee754_powf+0x53c>)
 800695a:	9a01      	ldr	r2, [sp, #4]
 800695c:	4631      	mov	r1, r6
 800695e:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8006962:	4648      	mov	r0, r9
 8006964:	f7fa f8a6 	bl	8000ab4 <__addsf3>
 8006968:	4651      	mov	r1, sl
 800696a:	f7fa f8a3 	bl	8000ab4 <__addsf3>
 800696e:	4641      	mov	r1, r8
 8006970:	f7fa f8a0 	bl	8000ab4 <__addsf3>
 8006974:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8006978:	f02b 0b0f 	bic.w	fp, fp, #15
 800697c:	4641      	mov	r1, r8
 800697e:	4658      	mov	r0, fp
 8006980:	f7fa f896 	bl	8000ab0 <__aeabi_fsub>
 8006984:	4651      	mov	r1, sl
 8006986:	f7fa f893 	bl	8000ab0 <__aeabi_fsub>
 800698a:	4649      	mov	r1, r9
 800698c:	e6a2      	b.n	80066d4 <__ieee754_powf+0x1f0>
 800698e:	2200      	movs	r2, #0
 8006990:	e6f9      	b.n	8006786 <__ieee754_powf+0x2a2>
 8006992:	2301      	movs	r3, #1
 8006994:	e70a      	b.n	80067ac <__ieee754_powf+0x2c8>
 8006996:	d149      	bne.n	8006a2c <__ieee754_powf+0x548>
 8006998:	4922      	ldr	r1, [pc, #136]	@ (8006a24 <__ieee754_powf+0x540>)
 800699a:	4630      	mov	r0, r6
 800699c:	f7fa f88a 	bl	8000ab4 <__addsf3>
 80069a0:	4639      	mov	r1, r7
 80069a2:	4681      	mov	r9, r0
 80069a4:	4620      	mov	r0, r4
 80069a6:	f7fa f883 	bl	8000ab0 <__aeabi_fsub>
 80069aa:	4601      	mov	r1, r0
 80069ac:	4648      	mov	r0, r9
 80069ae:	f7fa fb45 	bl	800103c <__aeabi_fcmpgt>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	f47f aec5 	bne.w	8006742 <__ieee754_powf+0x25e>
 80069b8:	2386      	movs	r3, #134	@ 0x86
 80069ba:	e03c      	b.n	8006a36 <__ieee754_powf+0x552>
 80069bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a28 <__ieee754_powf+0x544>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d907      	bls.n	80069d2 <__ieee754_powf+0x4ee>
 80069c2:	2100      	movs	r1, #0
 80069c4:	4628      	mov	r0, r5
 80069c6:	f7fa fb1b 	bl	8001000 <__aeabi_fcmplt>
 80069ca:	3800      	subs	r0, #0
 80069cc:	bf18      	it	ne
 80069ce:	2001      	movne	r0, #1
 80069d0:	e641      	b.n	8006656 <__ieee754_powf+0x172>
 80069d2:	d12b      	bne.n	8006a2c <__ieee754_powf+0x548>
 80069d4:	4639      	mov	r1, r7
 80069d6:	f7fa f86b 	bl	8000ab0 <__aeabi_fsub>
 80069da:	4631      	mov	r1, r6
 80069dc:	f7fa fb24 	bl	8001028 <__aeabi_fcmpge>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d0e9      	beq.n	80069b8 <__ieee754_powf+0x4d4>
 80069e4:	e7ed      	b.n	80069c2 <__ieee754_powf+0x4de>
 80069e6:	bf00      	nop
 80069e8:	001cc471 	.word	0x001cc471
 80069ec:	005db3d6 	.word	0x005db3d6
 80069f0:	08007118 	.word	0x08007118
 80069f4:	3e53f142 	.word	0x3e53f142
 80069f8:	3e6c3255 	.word	0x3e6c3255
 80069fc:	3e8ba305 	.word	0x3e8ba305
 8006a00:	3eaaaaab 	.word	0x3eaaaaab
 8006a04:	3edb6db7 	.word	0x3edb6db7
 8006a08:	3f19999a 	.word	0x3f19999a
 8006a0c:	40400000 	.word	0x40400000
 8006a10:	3f763800 	.word	0x3f763800
 8006a14:	3f76384f 	.word	0x3f76384f
 8006a18:	369dc3a0 	.word	0x369dc3a0
 8006a1c:	08007108 	.word	0x08007108
 8006a20:	08007110 	.word	0x08007110
 8006a24:	3338aa3c 	.word	0x3338aa3c
 8006a28:	43160000 	.word	0x43160000
 8006a2c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8006a30:	f240 809b 	bls.w	8006b6a <__ieee754_powf+0x686>
 8006a34:	15db      	asrs	r3, r3, #23
 8006a36:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8006a3a:	3b7e      	subs	r3, #126	@ 0x7e
 8006a3c:	411c      	asrs	r4, r3
 8006a3e:	4444      	add	r4, r8
 8006a40:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8006a44:	494d      	ldr	r1, [pc, #308]	@ (8006b7c <__ieee754_powf+0x698>)
 8006a46:	3b7f      	subs	r3, #127	@ 0x7f
 8006a48:	4119      	asrs	r1, r3
 8006a4a:	4021      	ands	r1, r4
 8006a4c:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006a50:	f1c3 0317 	rsb	r3, r3, #23
 8006a54:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8006a58:	4638      	mov	r0, r7
 8006a5a:	411c      	asrs	r4, r3
 8006a5c:	f1b8 0f00 	cmp.w	r8, #0
 8006a60:	bfb8      	it	lt
 8006a62:	4264      	neglt	r4, r4
 8006a64:	f7fa f824 	bl	8000ab0 <__aeabi_fsub>
 8006a68:	4607      	mov	r7, r0
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	f7fa f821 	bl	8000ab4 <__addsf3>
 8006a72:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8006a76:	f028 080f 	bic.w	r8, r8, #15
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	4940      	ldr	r1, [pc, #256]	@ (8006b80 <__ieee754_powf+0x69c>)
 8006a7e:	f7fa f921 	bl	8000cc4 <__aeabi_fmul>
 8006a82:	4639      	mov	r1, r7
 8006a84:	4681      	mov	r9, r0
 8006a86:	4640      	mov	r0, r8
 8006a88:	f7fa f812 	bl	8000ab0 <__aeabi_fsub>
 8006a8c:	4601      	mov	r1, r0
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7fa f80e 	bl	8000ab0 <__aeabi_fsub>
 8006a94:	493b      	ldr	r1, [pc, #236]	@ (8006b84 <__ieee754_powf+0x6a0>)
 8006a96:	f7fa f915 	bl	8000cc4 <__aeabi_fmul>
 8006a9a:	493b      	ldr	r1, [pc, #236]	@ (8006b88 <__ieee754_powf+0x6a4>)
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	f7fa f910 	bl	8000cc4 <__aeabi_fmul>
 8006aa4:	4601      	mov	r1, r0
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f7fa f804 	bl	8000ab4 <__addsf3>
 8006aac:	4607      	mov	r7, r0
 8006aae:	4601      	mov	r1, r0
 8006ab0:	4648      	mov	r0, r9
 8006ab2:	f7f9 ffff 	bl	8000ab4 <__addsf3>
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	4606      	mov	r6, r0
 8006aba:	f7f9 fff9 	bl	8000ab0 <__aeabi_fsub>
 8006abe:	4601      	mov	r1, r0
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	f7f9 fff5 	bl	8000ab0 <__aeabi_fsub>
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4680      	mov	r8, r0
 8006aca:	4630      	mov	r0, r6
 8006acc:	f7fa f8fa 	bl	8000cc4 <__aeabi_fmul>
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	492e      	ldr	r1, [pc, #184]	@ (8006b8c <__ieee754_powf+0x6a8>)
 8006ad4:	f7fa f8f6 	bl	8000cc4 <__aeabi_fmul>
 8006ad8:	492d      	ldr	r1, [pc, #180]	@ (8006b90 <__ieee754_powf+0x6ac>)
 8006ada:	f7f9 ffe9 	bl	8000ab0 <__aeabi_fsub>
 8006ade:	4639      	mov	r1, r7
 8006ae0:	f7fa f8f0 	bl	8000cc4 <__aeabi_fmul>
 8006ae4:	492b      	ldr	r1, [pc, #172]	@ (8006b94 <__ieee754_powf+0x6b0>)
 8006ae6:	f7f9 ffe5 	bl	8000ab4 <__addsf3>
 8006aea:	4639      	mov	r1, r7
 8006aec:	f7fa f8ea 	bl	8000cc4 <__aeabi_fmul>
 8006af0:	4929      	ldr	r1, [pc, #164]	@ (8006b98 <__ieee754_powf+0x6b4>)
 8006af2:	f7f9 ffdd 	bl	8000ab0 <__aeabi_fsub>
 8006af6:	4639      	mov	r1, r7
 8006af8:	f7fa f8e4 	bl	8000cc4 <__aeabi_fmul>
 8006afc:	4927      	ldr	r1, [pc, #156]	@ (8006b9c <__ieee754_powf+0x6b8>)
 8006afe:	f7f9 ffd9 	bl	8000ab4 <__addsf3>
 8006b02:	4639      	mov	r1, r7
 8006b04:	f7fa f8de 	bl	8000cc4 <__aeabi_fmul>
 8006b08:	4601      	mov	r1, r0
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f7f9 ffd0 	bl	8000ab0 <__aeabi_fsub>
 8006b10:	4607      	mov	r7, r0
 8006b12:	4601      	mov	r1, r0
 8006b14:	4630      	mov	r0, r6
 8006b16:	f7fa f8d5 	bl	8000cc4 <__aeabi_fmul>
 8006b1a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006b1e:	4681      	mov	r9, r0
 8006b20:	4638      	mov	r0, r7
 8006b22:	f7f9 ffc5 	bl	8000ab0 <__aeabi_fsub>
 8006b26:	4601      	mov	r1, r0
 8006b28:	4648      	mov	r0, r9
 8006b2a:	f7fa f97f 	bl	8000e2c <__aeabi_fdiv>
 8006b2e:	4641      	mov	r1, r8
 8006b30:	4607      	mov	r7, r0
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7fa f8c6 	bl	8000cc4 <__aeabi_fmul>
 8006b38:	4641      	mov	r1, r8
 8006b3a:	f7f9 ffbb 	bl	8000ab4 <__addsf3>
 8006b3e:	4601      	mov	r1, r0
 8006b40:	4638      	mov	r0, r7
 8006b42:	f7f9 ffb5 	bl	8000ab0 <__aeabi_fsub>
 8006b46:	4631      	mov	r1, r6
 8006b48:	f7f9 ffb2 	bl	8000ab0 <__aeabi_fsub>
 8006b4c:	4601      	mov	r1, r0
 8006b4e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006b52:	f7f9 ffad 	bl	8000ab0 <__aeabi_fsub>
 8006b56:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8006b5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b5e:	da06      	bge.n	8006b6e <__ieee754_powf+0x68a>
 8006b60:	4621      	mov	r1, r4
 8006b62:	f000 f821 	bl	8006ba8 <scalbnf>
 8006b66:	4629      	mov	r1, r5
 8006b68:	e526      	b.n	80065b8 <__ieee754_powf+0xd4>
 8006b6a:	2400      	movs	r4, #0
 8006b6c:	e77d      	b.n	8006a6a <__ieee754_powf+0x586>
 8006b6e:	4618      	mov	r0, r3
 8006b70:	e7f9      	b.n	8006b66 <__ieee754_powf+0x682>
 8006b72:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006b76:	e50b      	b.n	8006590 <__ieee754_powf+0xac>
 8006b78:	2100      	movs	r1, #0
 8006b7a:	e509      	b.n	8006590 <__ieee754_powf+0xac>
 8006b7c:	ff800000 	.word	0xff800000
 8006b80:	3f317200 	.word	0x3f317200
 8006b84:	3f317218 	.word	0x3f317218
 8006b88:	35bfbe8c 	.word	0x35bfbe8c
 8006b8c:	3331bb4c 	.word	0x3331bb4c
 8006b90:	35ddea0e 	.word	0x35ddea0e
 8006b94:	388ab355 	.word	0x388ab355
 8006b98:	3b360b61 	.word	0x3b360b61
 8006b9c:	3e2aaaab 	.word	0x3e2aaaab

08006ba0 <fabsf>:
 8006ba0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006ba4:	4770      	bx	lr
	...

08006ba8 <scalbnf>:
 8006ba8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4603      	mov	r3, r0
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	d02e      	beq.n	8006c14 <scalbnf+0x6c>
 8006bb6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006bba:	d304      	bcc.n	8006bc6 <scalbnf+0x1e>
 8006bbc:	4601      	mov	r1, r0
 8006bbe:	f7f9 ff79 	bl	8000ab4 <__addsf3>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	e026      	b.n	8006c14 <scalbnf+0x6c>
 8006bc6:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8006bca:	d118      	bne.n	8006bfe <scalbnf+0x56>
 8006bcc:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8006bd0:	f7fa f878 	bl	8000cc4 <__aeabi_fmul>
 8006bd4:	4a17      	ldr	r2, [pc, #92]	@ (8006c34 <scalbnf+0x8c>)
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4295      	cmp	r5, r2
 8006bda:	db0c      	blt.n	8006bf6 <scalbnf+0x4e>
 8006bdc:	4604      	mov	r4, r0
 8006bde:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006be2:	3a19      	subs	r2, #25
 8006be4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006be8:	428d      	cmp	r5, r1
 8006bea:	dd0a      	ble.n	8006c02 <scalbnf+0x5a>
 8006bec:	4912      	ldr	r1, [pc, #72]	@ (8006c38 <scalbnf+0x90>)
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f361 001e 	bfi	r0, r1, #0, #31
 8006bf4:	e000      	b.n	8006bf8 <scalbnf+0x50>
 8006bf6:	4911      	ldr	r1, [pc, #68]	@ (8006c3c <scalbnf+0x94>)
 8006bf8:	f7fa f864 	bl	8000cc4 <__aeabi_fmul>
 8006bfc:	e7e1      	b.n	8006bc2 <scalbnf+0x1a>
 8006bfe:	0dd2      	lsrs	r2, r2, #23
 8006c00:	e7f0      	b.n	8006be4 <scalbnf+0x3c>
 8006c02:	1951      	adds	r1, r2, r5
 8006c04:	29fe      	cmp	r1, #254	@ 0xfe
 8006c06:	dcf1      	bgt.n	8006bec <scalbnf+0x44>
 8006c08:	2900      	cmp	r1, #0
 8006c0a:	dd05      	ble.n	8006c18 <scalbnf+0x70>
 8006c0c:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006c10:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8006c14:	4618      	mov	r0, r3
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	f111 0f16 	cmn.w	r1, #22
 8006c1c:	da01      	bge.n	8006c22 <scalbnf+0x7a>
 8006c1e:	4907      	ldr	r1, [pc, #28]	@ (8006c3c <scalbnf+0x94>)
 8006c20:	e7e5      	b.n	8006bee <scalbnf+0x46>
 8006c22:	f101 0019 	add.w	r0, r1, #25
 8006c26:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8006c2a:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8006c2e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8006c32:	e7e1      	b.n	8006bf8 <scalbnf+0x50>
 8006c34:	ffff3cb0 	.word	0xffff3cb0
 8006c38:	7149f2ca 	.word	0x7149f2ca
 8006c3c:	0da24260 	.word	0x0da24260

08006c40 <with_errnof>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4604      	mov	r4, r0
 8006c44:	460d      	mov	r5, r1
 8006c46:	f7fd fd21 	bl	800468c <__errno>
 8006c4a:	6005      	str	r5, [r0, #0]
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}

08006c50 <xflowf>:
 8006c50:	b508      	push	{r3, lr}
 8006c52:	b140      	cbz	r0, 8006c66 <xflowf+0x16>
 8006c54:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8006c58:	f7fa f834 	bl	8000cc4 <__aeabi_fmul>
 8006c5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c60:	2122      	movs	r1, #34	@ 0x22
 8006c62:	f7ff bfed 	b.w	8006c40 <with_errnof>
 8006c66:	4608      	mov	r0, r1
 8006c68:	e7f6      	b.n	8006c58 <xflowf+0x8>

08006c6a <__math_uflowf>:
 8006c6a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8006c6e:	f7ff bfef 	b.w	8006c50 <xflowf>

08006c72 <__math_oflowf>:
 8006c72:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8006c76:	f7ff bfeb 	b.w	8006c50 <xflowf>
	...

08006c7c <__ieee754_sqrtf>:
 8006c7c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8006c80:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c88:	4603      	mov	r3, r0
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	d30a      	bcc.n	8006ca4 <__ieee754_sqrtf+0x28>
 8006c8e:	4601      	mov	r1, r0
 8006c90:	f7fa f818 	bl	8000cc4 <__aeabi_fmul>
 8006c94:	4601      	mov	r1, r0
 8006c96:	4620      	mov	r0, r4
 8006c98:	f7f9 ff0c 	bl	8000ab4 <__addsf3>
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca4:	2a00      	cmp	r2, #0
 8006ca6:	d0fa      	beq.n	8006c9e <__ieee754_sqrtf+0x22>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	da06      	bge.n	8006cba <__ieee754_sqrtf+0x3e>
 8006cac:	4601      	mov	r1, r0
 8006cae:	f7f9 feff 	bl	8000ab0 <__aeabi_fsub>
 8006cb2:	4601      	mov	r1, r0
 8006cb4:	f7fa f8ba 	bl	8000e2c <__aeabi_fdiv>
 8006cb8:	e7f0      	b.n	8006c9c <__ieee754_sqrtf+0x20>
 8006cba:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 8006cbe:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8006cc2:	d03e      	beq.n	8006d42 <__ieee754_sqrtf+0xc6>
 8006cc4:	2400      	movs	r4, #0
 8006cc6:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 8006cca:	07ca      	lsls	r2, r1, #31
 8006ccc:	f04f 0019 	mov.w	r0, #25
 8006cd0:	4626      	mov	r6, r4
 8006cd2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8006cd6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006cda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006cde:	bf58      	it	pl
 8006ce0:	005b      	lslpl	r3, r3, #1
 8006ce2:	106d      	asrs	r5, r5, #1
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	1872      	adds	r2, r6, r1
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	bfcf      	iteee	gt
 8006cec:	461a      	movgt	r2, r3
 8006cee:	1856      	addle	r6, r2, r1
 8006cf0:	1864      	addle	r4, r4, r1
 8006cf2:	1a9a      	suble	r2, r3, r2
 8006cf4:	3801      	subs	r0, #1
 8006cf6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8006cfa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006cfe:	d1f2      	bne.n	8006ce6 <__ieee754_sqrtf+0x6a>
 8006d00:	b1ba      	cbz	r2, 8006d32 <__ieee754_sqrtf+0xb6>
 8006d02:	4e14      	ldr	r6, [pc, #80]	@ (8006d54 <__ieee754_sqrtf+0xd8>)
 8006d04:	4f14      	ldr	r7, [pc, #80]	@ (8006d58 <__ieee754_sqrtf+0xdc>)
 8006d06:	6830      	ldr	r0, [r6, #0]
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	f7f9 fed1 	bl	8000ab0 <__aeabi_fsub>
 8006d0e:	f8d6 8000 	ldr.w	r8, [r6]
 8006d12:	4601      	mov	r1, r0
 8006d14:	4640      	mov	r0, r8
 8006d16:	f7fa f97d 	bl	8001014 <__aeabi_fcmple>
 8006d1a:	b150      	cbz	r0, 8006d32 <__ieee754_sqrtf+0xb6>
 8006d1c:	6830      	ldr	r0, [r6, #0]
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	f7f9 fec8 	bl	8000ab4 <__addsf3>
 8006d24:	6836      	ldr	r6, [r6, #0]
 8006d26:	4601      	mov	r1, r0
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f7fa f969 	bl	8001000 <__aeabi_fcmplt>
 8006d2e:	b168      	cbz	r0, 8006d4c <__ieee754_sqrtf+0xd0>
 8006d30:	3402      	adds	r4, #2
 8006d32:	1064      	asrs	r4, r4, #1
 8006d34:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8006d38:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8006d3c:	e7af      	b.n	8006c9e <__ieee754_sqrtf+0x22>
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	3201      	adds	r2, #1
 8006d42:	0218      	lsls	r0, r3, #8
 8006d44:	d5fb      	bpl.n	8006d3e <__ieee754_sqrtf+0xc2>
 8006d46:	3a01      	subs	r2, #1
 8006d48:	1a89      	subs	r1, r1, r2
 8006d4a:	e7bb      	b.n	8006cc4 <__ieee754_sqrtf+0x48>
 8006d4c:	3401      	adds	r4, #1
 8006d4e:	f024 0401 	bic.w	r4, r4, #1
 8006d52:	e7ee      	b.n	8006d32 <__ieee754_sqrtf+0xb6>
 8006d54:	200001d0 	.word	0x200001d0
 8006d58:	200001cc 	.word	0x200001cc

08006d5c <_init>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	bf00      	nop
 8006d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d62:	bc08      	pop	{r3}
 8006d64:	469e      	mov	lr, r3
 8006d66:	4770      	bx	lr

08006d68 <_fini>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	bf00      	nop
 8006d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6e:	bc08      	pop	{r3}
 8006d70:	469e      	mov	lr, r3
 8006d72:	4770      	bx	lr
